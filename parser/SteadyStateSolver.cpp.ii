# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 391 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 1
# 56 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
#pragma GCC diagnostic push


#pragma GCC diagnostic ignored "-Wunused-function"
# 78 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_config.h" 1
# 50 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_config.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/host_config.h" 1
# 179 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/host_config.h"
# 1 "/usr/include/features.h" 1 3 4
# 345 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 346 "/usr/include/features.h" 2 3 4
# 375 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 392 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 393 "/usr/include/sys/cdefs.h" 2 3 4
# 376 "/usr/include/features.h" 2 3 4
# 399 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4




# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 6 "/usr/include/gnu/stubs.h" 2 3 4








# 1 "/usr/include/gnu/stubs-64-v2.h" 1 3 4
# 15 "/usr/include/gnu/stubs.h" 2 3 4
# 400 "/usr/include/features.h" 2 3 4
# 180 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/host_config.h" 2
# 51 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_config.h" 2
# 79 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 2







# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 56 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_types.h" 1
# 53 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_types.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 50 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/host_defines.h" 1
# 51 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 2
# 54 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_types.h" 2







enum __attribute__((device_builtin)) cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};
# 57 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 2


# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h" 1
# 53 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 54 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_types.h" 1
# 59 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_types.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 60 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_types.h" 2
# 93 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_types.h"
struct __attribute__((device_builtin)) char1
{
    signed char x;
};

struct __attribute__((device_builtin)) uchar1
{
    unsigned char x;
};


struct __attribute__((device_builtin)) __attribute__((aligned(2))) char2
{
    signed char x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(2))) uchar2
{
    unsigned char x, y;
};

struct __attribute__((device_builtin)) char3
{
    signed char x, y, z;
};

struct __attribute__((device_builtin)) uchar3
{
    unsigned char x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) char4
{
    signed char x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) uchar4
{
    unsigned char x, y, z, w;
};

struct __attribute__((device_builtin)) short1
{
    short x;
};

struct __attribute__((device_builtin)) ushort1
{
    unsigned short x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) short2
{
    short x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) ushort2
{
    unsigned short x, y;
};

struct __attribute__((device_builtin)) short3
{
    short x, y, z;
};

struct __attribute__((device_builtin)) ushort3
{
    unsigned short x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(8))) short4 { short x; short y; short z; short w; };
struct __attribute__((device_builtin)) __attribute__((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct __attribute__((device_builtin)) int1
{
    int x;
};

struct __attribute__((device_builtin)) uint1
{
    unsigned int x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(8))) int2 { int x; int y; };
struct __attribute__((device_builtin)) __attribute__((aligned(8))) uint2 { unsigned int x; unsigned int y; };

struct __attribute__((device_builtin)) int3
{
    int x, y, z;
};

struct __attribute__((device_builtin)) uint3
{
    unsigned int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) int4
{
    int x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) uint4
{
    unsigned int x, y, z, w;
};

struct __attribute__((device_builtin)) long1
{
    long int x;
};

struct __attribute__((device_builtin)) ulong1
{
    unsigned long x;
};






struct __attribute__((device_builtin)) __attribute__((aligned(2*sizeof(long int)))) long2
{
    long int x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(2*sizeof(unsigned long int)))) ulong2
{
    unsigned long int x, y;
};



struct __attribute__((device_builtin)) long3
{
    long int x, y, z;
};

struct __attribute__((device_builtin)) ulong3
{
    unsigned long int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) long4
{
    long int x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulong4
{
    unsigned long int x, y, z, w;
};

struct __attribute__((device_builtin)) float1
{
    float x;
};
# 269 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_types.h"
struct __attribute__((device_builtin)) __attribute__((aligned(8))) float2 { float x; float y; };




struct __attribute__((device_builtin)) float3
{
    float x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) float4
{
    float x, y, z, w;
};

struct __attribute__((device_builtin)) longlong1
{
    long long int x;
};

struct __attribute__((device_builtin)) ulonglong1
{
    unsigned long long int x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) longlong2
{
    long long int x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulonglong2
{
    unsigned long long int x, y;
};

struct __attribute__((device_builtin)) longlong3
{
    long long int x, y, z;
};

struct __attribute__((device_builtin)) ulonglong3
{
    unsigned long long int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) longlong4
{
    long long int x, y, z ,w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct __attribute__((device_builtin)) double1
{
    double x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) double2
{
    double x, y;
};

struct __attribute__((device_builtin)) double3
{
    double x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) double4
{
    double x, y, z, w;
};
# 356 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_types.h"
typedef __attribute__((device_builtin)) struct char1 char1;
typedef __attribute__((device_builtin)) struct uchar1 uchar1;
typedef __attribute__((device_builtin)) struct char2 char2;
typedef __attribute__((device_builtin)) struct uchar2 uchar2;
typedef __attribute__((device_builtin)) struct char3 char3;
typedef __attribute__((device_builtin)) struct uchar3 uchar3;
typedef __attribute__((device_builtin)) struct char4 char4;
typedef __attribute__((device_builtin)) struct uchar4 uchar4;
typedef __attribute__((device_builtin)) struct short1 short1;
typedef __attribute__((device_builtin)) struct ushort1 ushort1;
typedef __attribute__((device_builtin)) struct short2 short2;
typedef __attribute__((device_builtin)) struct ushort2 ushort2;
typedef __attribute__((device_builtin)) struct short3 short3;
typedef __attribute__((device_builtin)) struct ushort3 ushort3;
typedef __attribute__((device_builtin)) struct short4 short4;
typedef __attribute__((device_builtin)) struct ushort4 ushort4;
typedef __attribute__((device_builtin)) struct int1 int1;
typedef __attribute__((device_builtin)) struct uint1 uint1;
typedef __attribute__((device_builtin)) struct int2 int2;
typedef __attribute__((device_builtin)) struct uint2 uint2;
typedef __attribute__((device_builtin)) struct int3 int3;
typedef __attribute__((device_builtin)) struct uint3 uint3;
typedef __attribute__((device_builtin)) struct int4 int4;
typedef __attribute__((device_builtin)) struct uint4 uint4;
typedef __attribute__((device_builtin)) struct long1 long1;
typedef __attribute__((device_builtin)) struct ulong1 ulong1;
typedef __attribute__((device_builtin)) struct long2 long2;
typedef __attribute__((device_builtin)) struct ulong2 ulong2;
typedef __attribute__((device_builtin)) struct long3 long3;
typedef __attribute__((device_builtin)) struct ulong3 ulong3;
typedef __attribute__((device_builtin)) struct long4 long4;
typedef __attribute__((device_builtin)) struct ulong4 ulong4;
typedef __attribute__((device_builtin)) struct float1 float1;
typedef __attribute__((device_builtin)) struct float2 float2;
typedef __attribute__((device_builtin)) struct float3 float3;
typedef __attribute__((device_builtin)) struct float4 float4;
typedef __attribute__((device_builtin)) struct longlong1 longlong1;
typedef __attribute__((device_builtin)) struct ulonglong1 ulonglong1;
typedef __attribute__((device_builtin)) struct longlong2 longlong2;
typedef __attribute__((device_builtin)) struct ulonglong2 ulonglong2;
typedef __attribute__((device_builtin)) struct longlong3 longlong3;
typedef __attribute__((device_builtin)) struct ulonglong3 ulonglong3;
typedef __attribute__((device_builtin)) struct longlong4 longlong4;
typedef __attribute__((device_builtin)) struct ulonglong4 ulonglong4;
typedef __attribute__((device_builtin)) struct double1 double1;
typedef __attribute__((device_builtin)) struct double2 double2;
typedef __attribute__((device_builtin)) struct double3 double3;
typedef __attribute__((device_builtin)) struct double4 double4;







struct __attribute__((device_builtin)) dim3
{
    unsigned int x, y, z;

    __attribute__((host)) __attribute__((device)) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    __attribute__((host)) __attribute__((device)) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __attribute__((host)) __attribute__((device)) operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }

};

typedef __attribute__((device_builtin)) struct dim3 dim3;
# 55 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h" 2
# 72 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/limits.h" 1 3
# 21 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/limits.h" 3
# 1 "/usr/include/limits.h" 1 3 4
# 144 "/usr/include/limits.h" 3 4
# 1 "/usr/include/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/bits/posix1_lim.h" 3 4
# 1 "/usr/include/bits/local_lim.h" 1 3 4
# 39 "/usr/include/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 40 "/usr/include/bits/local_lim.h" 2 3 4
# 161 "/usr/include/bits/posix1_lim.h" 2 3 4
# 145 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/posix2_lim.h" 1 3 4
# 149 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/bits/xopen_lim.h" 1 3 4
# 33 "/usr/include/bits/xopen_lim.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 34 "/usr/include/bits/xopen_lim.h" 2 3 4
# 153 "/usr/include/limits.h" 2 3 4
# 22 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/limits.h" 2 3
# 73 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h" 2
# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 1 3
# 35 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 3
typedef long int ptrdiff_t;
# 46 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 3
typedef long unsigned int size_t;
# 102 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 3
# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/__stddef_max_align_t.h" 1 3
# 19 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/__stddef_max_align_t.h" 3
typedef struct {
  long long __clang_max_align_nonce1
      __attribute__((__aligned__(__alignof__(long long))));
  long double __clang_max_align_nonce2
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
# 103 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 2 3
# 74 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h" 2
# 171 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
enum __attribute__((device_builtin)) cudaError
{





    cudaSuccess = 0,





    cudaErrorMissingConfiguration = 1,





    cudaErrorMemoryAllocation = 2,





    cudaErrorInitializationError = 3,
# 206 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorLaunchFailure = 4,
# 215 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorPriorLaunchFailure = 5,
# 226 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorLaunchTimeout = 6,
# 235 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorLaunchOutOfResources = 7,





    cudaErrorInvalidDeviceFunction = 8,
# 250 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorInvalidConfiguration = 9,





    cudaErrorInvalidDevice = 10,





    cudaErrorInvalidValue = 11,





    cudaErrorInvalidPitchValue = 12,





    cudaErrorInvalidSymbol = 13,




    cudaErrorMapBufferObjectFailed = 14,




    cudaErrorUnmapBufferObjectFailed = 15,





    cudaErrorInvalidHostPointer = 16,





    cudaErrorInvalidDevicePointer = 17,





    cudaErrorInvalidTexture = 18,





    cudaErrorInvalidTextureBinding = 19,






    cudaErrorInvalidChannelDescriptor = 20,





    cudaErrorInvalidMemcpyDirection = 21,
# 331 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorAddressOfConstant = 22,
# 340 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorTextureFetchFailed = 23,
# 349 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorTextureNotBound = 24,
# 358 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorSynchronizationError = 25,





    cudaErrorInvalidFilterSetting = 26,





    cudaErrorInvalidNormSetting = 27,







    cudaErrorMixedDeviceExecution = 28,






    cudaErrorCudartUnloading = 29,




    cudaErrorUnknown = 30,







    cudaErrorNotYetImplemented = 31,
# 407 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorMemoryValueTooLarge = 32,






    cudaErrorInvalidResourceHandle = 33,







    cudaErrorNotReady = 34,






    cudaErrorInsufficientDriver = 35,
# 442 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorSetOnActiveProcess = 36,





    cudaErrorInvalidSurface = 37,





    cudaErrorNoDevice = 38,





    cudaErrorECCUncorrectable = 39,




    cudaErrorSharedObjectSymbolNotFound = 40,




    cudaErrorSharedObjectInitFailed = 41,





    cudaErrorUnsupportedLimit = 42,





    cudaErrorDuplicateVariableName = 43,





    cudaErrorDuplicateTextureName = 44,





    cudaErrorDuplicateSurfaceName = 45,
# 504 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorDevicesUnavailable = 46,




    cudaErrorInvalidKernelImage = 47,







    cudaErrorNoKernelImageForDevice = 48,
# 530 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorIncompatibleDriverContext = 49,






    cudaErrorPeerAccessAlreadyEnabled = 50,






    cudaErrorPeerAccessNotEnabled = 51,





    cudaErrorDeviceAlreadyInUse = 54,






    cudaErrorProfilerDisabled = 55,







    cudaErrorProfilerNotInitialized = 56,






    cudaErrorProfilerAlreadyStarted = 57,






     cudaErrorProfilerAlreadyStopped = 58,







    cudaErrorAssert = 59,






    cudaErrorTooManyPeers = 60,





    cudaErrorHostMemoryAlreadyRegistered = 61,





    cudaErrorHostMemoryNotRegistered = 62,




    cudaErrorOperatingSystem = 63,





    cudaErrorPeerAccessUnsupported = 64,






    cudaErrorLaunchMaxDepthExceeded = 65,







    cudaErrorLaunchFileScopedTex = 66,







    cudaErrorLaunchFileScopedSurf = 67,
# 655 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorSyncDepthExceeded = 68,
# 667 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorLaunchPendingCountExceeded = 69,




    cudaErrorNotPermitted = 70,





    cudaErrorNotSupported = 71,
# 687 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorHardwareStackError = 72,







    cudaErrorIllegalInstruction = 73,
# 704 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorMisalignedAddress = 74,
# 715 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorInvalidAddressSpace = 75,







    cudaErrorInvalidPc = 76,







    cudaErrorIllegalAddress = 77,





    cudaErrorInvalidPtx = 78,




    cudaErrorInvalidGraphicsContext = 79,





    cudaErrorNvlinkUncorrectable = 80,






    cudaErrorJitCompilerNotFound = 81,
# 764 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    cudaErrorCooperativeLaunchTooLarge = 82,




    cudaErrorStartupFailure = 0x7f,







    cudaErrorApiFailureBase = 10000
};




enum __attribute__((device_builtin)) cudaChannelFormatKind
{
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3
};




struct __attribute__((device_builtin)) cudaChannelFormatDesc
{
    int x;
    int y;
    int z;
    int w;
    enum cudaChannelFormatKind f;
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum __attribute__((device_builtin)) cudaMemoryType
{
    cudaMemoryTypeHost = 1,
    cudaMemoryTypeDevice = 2
};




enum __attribute__((device_builtin)) cudaMemcpyKind
{
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4
};






struct __attribute__((device_builtin)) cudaPitchedPtr
{
    void *ptr;
    size_t pitch;
    size_t xsize;
    size_t ysize;
};






struct __attribute__((device_builtin)) cudaExtent
{
    size_t width;
    size_t height;
    size_t depth;
};






struct __attribute__((device_builtin)) cudaPos
{
    size_t x;
    size_t y;
    size_t z;
};




struct __attribute__((device_builtin)) cudaMemcpy3DParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;

    struct cudaExtent extent;
    enum cudaMemcpyKind kind;
};




struct __attribute__((device_builtin)) cudaMemcpy3DPeerParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;
    int srcDevice;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;
    int dstDevice;

    struct cudaExtent extent;
};




struct cudaGraphicsResource;




enum __attribute__((device_builtin)) cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone = 0,
    cudaGraphicsRegisterFlagsReadOnly = 1,
    cudaGraphicsRegisterFlagsWriteDiscard = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather = 8
};




enum __attribute__((device_builtin)) cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone = 0,
    cudaGraphicsMapFlagsReadOnly = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2
};




enum __attribute__((device_builtin)) cudaGraphicsCubeFace
{
    cudaGraphicsCubeFacePositiveX = 0x00,
    cudaGraphicsCubeFaceNegativeX = 0x01,
    cudaGraphicsCubeFacePositiveY = 0x02,
    cudaGraphicsCubeFaceNegativeY = 0x03,
    cudaGraphicsCubeFacePositiveZ = 0x04,
    cudaGraphicsCubeFaceNegativeZ = 0x05
};




enum __attribute__((device_builtin)) cudaResourceType
{
    cudaResourceTypeArray = 0x00,
    cudaResourceTypeMipmappedArray = 0x01,
    cudaResourceTypeLinear = 0x02,
    cudaResourceTypePitch2D = 0x03
};




enum __attribute__((device_builtin)) cudaResourceViewFormat
{
    cudaResViewFormatNone = 0x00,
    cudaResViewFormatUnsignedChar1 = 0x01,
    cudaResViewFormatUnsignedChar2 = 0x02,
    cudaResViewFormatUnsignedChar4 = 0x03,
    cudaResViewFormatSignedChar1 = 0x04,
    cudaResViewFormatSignedChar2 = 0x05,
    cudaResViewFormatSignedChar4 = 0x06,
    cudaResViewFormatUnsignedShort1 = 0x07,
    cudaResViewFormatUnsignedShort2 = 0x08,
    cudaResViewFormatUnsignedShort4 = 0x09,
    cudaResViewFormatSignedShort1 = 0x0a,
    cudaResViewFormatSignedShort2 = 0x0b,
    cudaResViewFormatSignedShort4 = 0x0c,
    cudaResViewFormatUnsignedInt1 = 0x0d,
    cudaResViewFormatUnsignedInt2 = 0x0e,
    cudaResViewFormatUnsignedInt4 = 0x0f,
    cudaResViewFormatSignedInt1 = 0x10,
    cudaResViewFormatSignedInt2 = 0x11,
    cudaResViewFormatSignedInt4 = 0x12,
    cudaResViewFormatHalf1 = 0x13,
    cudaResViewFormatHalf2 = 0x14,
    cudaResViewFormatHalf4 = 0x15,
    cudaResViewFormatFloat1 = 0x16,
    cudaResViewFormatFloat2 = 0x17,
    cudaResViewFormatFloat4 = 0x18,
    cudaResViewFormatUnsignedBlockCompressed1 = 0x19,
    cudaResViewFormatUnsignedBlockCompressed2 = 0x1a,
    cudaResViewFormatUnsignedBlockCompressed3 = 0x1b,
    cudaResViewFormatUnsignedBlockCompressed4 = 0x1c,
    cudaResViewFormatSignedBlockCompressed4 = 0x1d,
    cudaResViewFormatUnsignedBlockCompressed5 = 0x1e,
    cudaResViewFormatSignedBlockCompressed5 = 0x1f,
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20,
    cudaResViewFormatSignedBlockCompressed6H = 0x21,
    cudaResViewFormatUnsignedBlockCompressed7 = 0x22
};




struct __attribute__((device_builtin)) cudaResourceDesc {
 enum cudaResourceType resType;

 union {
  struct {
   cudaArray_t array;
  } array;
        struct {
            cudaMipmappedArray_t mipmap;
        } mipmap;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t sizeInBytes;
  } linear;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t width;
   size_t height;
   size_t pitchInBytes;
  } pitch2D;
 } res;
};




struct __attribute__((device_builtin)) cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;
    size_t width;
    size_t height;
    size_t depth;
    unsigned int firstMipmapLevel;
    unsigned int lastMipmapLevel;
    unsigned int firstLayer;
    unsigned int lastLayer;
};




struct __attribute__((device_builtin)) cudaPointerAttributes
{




    enum cudaMemoryType memoryType;
# 1076 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
    int device;





    void *devicePointer;





    void *hostPointer;




    int isManaged;
};




struct __attribute__((device_builtin)) cudaFuncAttributes
{





   size_t sharedSizeBytes;





   size_t constSizeBytes;




   size_t localSizeBytes;






   int maxThreadsPerBlock;




   int numRegs;






   int ptxVersion;






   int binaryVersion;





   int cacheModeCA;






   int maxDynamicSharedSizeBytes;
# 1165 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
   int preferredShmemCarveout;
};




enum __attribute__((device_builtin)) cudaFuncAttribute
{
    cudaFuncAttributeMaxDynamicSharedMemorySize = 8,
    cudaFuncAttributePreferredSharedMemoryCarveout = 9,
    cudaFuncAttributeMax
};




enum __attribute__((device_builtin)) cudaFuncCache
{
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3
};





enum __attribute__((device_builtin)) cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault = 0,
    cudaSharedMemBankSizeFourByte = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum __attribute__((device_builtin)) cudaSharedCarveout {
    cudaSharedmemCarveoutDefault = -1,
    cudaSharedmemCarveoutMaxShared = 100,
    cudaSharedmemCarveoutMaxL1 = 0
};




enum __attribute__((device_builtin)) cudaComputeMode
{
    cudaComputeModeDefault = 0,
    cudaComputeModeExclusive = 1,
    cudaComputeModeProhibited = 2,
    cudaComputeModeExclusiveProcess = 3
};




enum __attribute__((device_builtin)) cudaLimit
{
    cudaLimitStackSize = 0x00,
    cudaLimitPrintfFifoSize = 0x01,
    cudaLimitMallocHeapSize = 0x02,
    cudaLimitDevRuntimeSyncDepth = 0x03,
    cudaLimitDevRuntimePendingLaunchCount = 0x04
};




enum __attribute__((device_builtin)) cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly = 1,
    cudaMemAdviseUnsetReadMostly = 2,
    cudaMemAdviseSetPreferredLocation = 3,
    cudaMemAdviseUnsetPreferredLocation = 4,
    cudaMemAdviseSetAccessedBy = 5,
    cudaMemAdviseUnsetAccessedBy = 6
};




enum __attribute__((device_builtin)) cudaMemRangeAttribute
{
    cudaMemRangeAttributeReadMostly = 1,
    cudaMemRangeAttributePreferredLocation = 2,
    cudaMemRangeAttributeAccessedBy = 3,
    cudaMemRangeAttributeLastPrefetchLocation = 4
};




enum __attribute__((device_builtin)) cudaOutputMode
{
    cudaKeyValuePair = 0x00,
    cudaCSV = 0x01
};




enum __attribute__((device_builtin)) cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock = 1,
    cudaDevAttrMaxBlockDimX = 2,
    cudaDevAttrMaxBlockDimY = 3,
    cudaDevAttrMaxBlockDimZ = 4,
    cudaDevAttrMaxGridDimX = 5,
    cudaDevAttrMaxGridDimY = 6,
    cudaDevAttrMaxGridDimZ = 7,
    cudaDevAttrMaxSharedMemoryPerBlock = 8,
    cudaDevAttrTotalConstantMemory = 9,
    cudaDevAttrWarpSize = 10,
    cudaDevAttrMaxPitch = 11,
    cudaDevAttrMaxRegistersPerBlock = 12,
    cudaDevAttrClockRate = 13,
    cudaDevAttrTextureAlignment = 14,
    cudaDevAttrGpuOverlap = 15,
    cudaDevAttrMultiProcessorCount = 16,
    cudaDevAttrKernelExecTimeout = 17,
    cudaDevAttrIntegrated = 18,
    cudaDevAttrCanMapHostMemory = 19,
    cudaDevAttrComputeMode = 20,
    cudaDevAttrMaxTexture1DWidth = 21,
    cudaDevAttrMaxTexture2DWidth = 22,
    cudaDevAttrMaxTexture2DHeight = 23,
    cudaDevAttrMaxTexture3DWidth = 24,
    cudaDevAttrMaxTexture3DHeight = 25,
    cudaDevAttrMaxTexture3DDepth = 26,
    cudaDevAttrMaxTexture2DLayeredWidth = 27,
    cudaDevAttrMaxTexture2DLayeredHeight = 28,
    cudaDevAttrMaxTexture2DLayeredLayers = 29,
    cudaDevAttrSurfaceAlignment = 30,
    cudaDevAttrConcurrentKernels = 31,
    cudaDevAttrEccEnabled = 32,
    cudaDevAttrPciBusId = 33,
    cudaDevAttrPciDeviceId = 34,
    cudaDevAttrTccDriver = 35,
    cudaDevAttrMemoryClockRate = 36,
    cudaDevAttrGlobalMemoryBusWidth = 37,
    cudaDevAttrL2CacheSize = 38,
    cudaDevAttrMaxThreadsPerMultiProcessor = 39,
    cudaDevAttrAsyncEngineCount = 40,
    cudaDevAttrUnifiedAddressing = 41,
    cudaDevAttrMaxTexture1DLayeredWidth = 42,
    cudaDevAttrMaxTexture1DLayeredLayers = 43,
    cudaDevAttrMaxTexture2DGatherWidth = 45,
    cudaDevAttrMaxTexture2DGatherHeight = 46,
    cudaDevAttrMaxTexture3DWidthAlt = 47,
    cudaDevAttrMaxTexture3DHeightAlt = 48,
    cudaDevAttrMaxTexture3DDepthAlt = 49,
    cudaDevAttrPciDomainId = 50,
    cudaDevAttrTexturePitchAlignment = 51,
    cudaDevAttrMaxTextureCubemapWidth = 52,
    cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
    cudaDevAttrMaxSurface1DWidth = 55,
    cudaDevAttrMaxSurface2DWidth = 56,
    cudaDevAttrMaxSurface2DHeight = 57,
    cudaDevAttrMaxSurface3DWidth = 58,
    cudaDevAttrMaxSurface3DHeight = 59,
    cudaDevAttrMaxSurface3DDepth = 60,
    cudaDevAttrMaxSurface1DLayeredWidth = 61,
    cudaDevAttrMaxSurface1DLayeredLayers = 62,
    cudaDevAttrMaxSurface2DLayeredWidth = 63,
    cudaDevAttrMaxSurface2DLayeredHeight = 64,
    cudaDevAttrMaxSurface2DLayeredLayers = 65,
    cudaDevAttrMaxSurfaceCubemapWidth = 66,
    cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
    cudaDevAttrMaxTexture1DLinearWidth = 69,
    cudaDevAttrMaxTexture2DLinearWidth = 70,
    cudaDevAttrMaxTexture2DLinearHeight = 71,
    cudaDevAttrMaxTexture2DLinearPitch = 72,
    cudaDevAttrMaxTexture2DMipmappedWidth = 73,
    cudaDevAttrMaxTexture2DMipmappedHeight = 74,
    cudaDevAttrComputeCapabilityMajor = 75,
    cudaDevAttrComputeCapabilityMinor = 76,
    cudaDevAttrMaxTexture1DMipmappedWidth = 77,
    cudaDevAttrStreamPrioritiesSupported = 78,
    cudaDevAttrGlobalL1CacheSupported = 79,
    cudaDevAttrLocalL1CacheSupported = 80,
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor = 82,
    cudaDevAttrManagedMemory = 83,
    cudaDevAttrIsMultiGpuBoard = 84,
    cudaDevAttrMultiGpuBoardGroupID = 85,
    cudaDevAttrHostNativeAtomicSupported = 86,
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87,
    cudaDevAttrPageableMemoryAccess = 88,
    cudaDevAttrConcurrentManagedAccess = 89,
    cudaDevAttrComputePreemptionSupported = 90,
    cudaDevAttrCanUseHostPointerForRegisteredMem = 91,
    cudaDevAttrReserved92 = 92,
    cudaDevAttrReserved93 = 93,
    cudaDevAttrReserved94 = 94,
    cudaDevAttrCooperativeLaunch = 95,
    cudaDevAttrCooperativeMultiDeviceLaunch = 96,
    cudaDevAttrMaxSharedMemoryPerBlockOptin = 97,
    cudaDevAttrCanFlushRemoteWrites = 98,
    cudaDevAttrHostRegisterSupported = 99,
    cudaDevAttrPageableMemoryAccessUsesHostPageTables = 100,
    cudaDevAttrDirectManagedMemAccessFromHost = 101
};





enum __attribute__((device_builtin)) cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank = 1,
    cudaDevP2PAttrAccessSupported = 2,
    cudaDevP2PAttrNativeAtomicSupported = 3,
    cudaDevP2PAttrCudaArrayAccessSupported = 4
};



struct __attribute__((device_builtin)) cudaDeviceProp
{
    char name[256];
    size_t totalGlobalMem;
    size_t sharedMemPerBlock;
    int regsPerBlock;
    int warpSize;
    size_t memPitch;
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int clockRate;
    size_t totalConstMem;
    int major;
    int minor;
    size_t textureAlignment;
    size_t texturePitchAlignment;
    int deviceOverlap;
    int multiProcessorCount;
    int kernelExecTimeoutEnabled;
    int integrated;
    int canMapHostMemory;
    int computeMode;
    int maxTexture1D;
    int maxTexture1DMipmap;
    int maxTexture1DLinear;
    int maxTexture2D[2];
    int maxTexture2DMipmap[2];
    int maxTexture2DLinear[3];
    int maxTexture2DGather[2];
    int maxTexture3D[3];
    int maxTexture3DAlt[3];
    int maxTextureCubemap;
    int maxTexture1DLayered[2];
    int maxTexture2DLayered[3];
    int maxTextureCubemapLayered[2];
    int maxSurface1D;
    int maxSurface2D[2];
    int maxSurface3D[3];
    int maxSurface1DLayered[2];
    int maxSurface2DLayered[3];
    int maxSurfaceCubemap;
    int maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;
    int concurrentKernels;
    int ECCEnabled;
    int pciBusID;
    int pciDeviceID;
    int pciDomainID;
    int tccDriver;
    int asyncEngineCount;
    int unifiedAddressing;
    int memoryClockRate;
    int memoryBusWidth;
    int l2CacheSize;
    int maxThreadsPerMultiProcessor;
    int streamPrioritiesSupported;
    int globalL1CacheSupported;
    int localL1CacheSupported;
    size_t sharedMemPerMultiprocessor;
    int regsPerMultiprocessor;
    int managedMemory;
    int isMultiGpuBoard;
    int multiGpuBoardGroupID;
    int hostNativeAtomicSupported;
    int singleToDoublePrecisionPerfRatio;
    int pageableMemoryAccess;
    int concurrentManagedAccess;
    int computePreemptionSupported;
    int canUseHostPointerForRegisteredMem;
    int cooperativeLaunch;
    int cooperativeMultiDeviceLaunch;
    size_t sharedMemPerBlockOptin;
    int pageableMemoryAccessUsesHostPageTables;
    int directManagedMemAccessFromHost;
};
# 1547 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
typedef __attribute__((device_builtin)) struct __attribute__((device_builtin)) cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef __attribute__((device_builtin)) struct __attribute__((device_builtin)) cudaIpcMemHandle_st
{
    char reserved[64];
}cudaIpcMemHandle_t;
# 1569 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_types.h"
typedef __attribute__((device_builtin)) enum cudaError cudaError_t;




typedef __attribute__((device_builtin)) struct CUstream_st *cudaStream_t;




typedef __attribute__((device_builtin)) struct CUevent_st *cudaEvent_t;




typedef __attribute__((device_builtin)) struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef __attribute__((device_builtin)) struct CUuuid_st cudaUUID_t;




typedef __attribute__((device_builtin)) enum cudaOutputMode cudaOutputMode_t;




enum __attribute__((device_builtin)) cudaCGScope {
    cudaCGScopeInvalid = 0,
    cudaCGScopeGrid = 1,
    cudaCGScopeMultiGrid = 2
};




struct __attribute__((device_builtin)) cudaLaunchParams
{
    void *func;
    dim3 gridDim;
    dim3 blockDim;
    void **args;
    size_t sharedMem;
    cudaStream_t stream;
};
# 60 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 2


# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/surface_types.h" 1
# 84 "/usr/tce/packages/cuda/cuda-9.2.148/include/surface_types.h"
enum __attribute__((device_builtin)) cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap = 2
};




enum __attribute__((device_builtin)) cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1
};




struct __attribute__((device_builtin)) surfaceReference
{



    struct cudaChannelFormatDesc channelDesc;
};




typedef __attribute__((device_builtin)) unsigned long long cudaSurfaceObject_t;
# 63 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/texture_types.h" 1
# 84 "/usr/tce/packages/cuda/cuda-9.2.148/include/texture_types.h"
enum __attribute__((device_builtin)) cudaTextureAddressMode
{
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3
};




enum __attribute__((device_builtin)) cudaTextureFilterMode
{
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1
};




enum __attribute__((device_builtin)) cudaTextureReadMode
{
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1
};




struct __attribute__((device_builtin)) textureReference
{



    int normalized;



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureAddressMode addressMode[3];



    struct cudaChannelFormatDesc channelDesc;



    int sRGB;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
    int __cudaReserved[15];
};




struct __attribute__((device_builtin)) cudaTextureDesc
{



    enum cudaTextureAddressMode addressMode[3];



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureReadMode readMode;



    int sRGB;



    float borderColor[4];



    int normalizedCoords;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
};




typedef __attribute__((device_builtin)) unsigned long long cudaTextureObject_t;
# 64 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 2
# 87 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/library_types.h" 1
# 54 "/usr/tce/packages/cuda/cuda-9.2.148/include/library_types.h"
typedef enum cudaDataType_t
{
 CUDA_R_16F= 2,
 CUDA_C_16F= 6,
 CUDA_R_32F= 0,
 CUDA_C_32F= 4,
 CUDA_R_64F= 1,
 CUDA_C_64F= 5,
 CUDA_R_8I = 3,
 CUDA_C_8I = 7,
 CUDA_R_8U = 8,
 CUDA_C_8U = 9,
 CUDA_R_32I= 10,
 CUDA_C_32I= 11,
 CUDA_R_32U= 12,
 CUDA_C_32U= 13
} cudaDataType;


typedef enum libraryPropertyType_t
{
 MAJOR_VERSION,
 MINOR_VERSION,
 PATCH_LEVEL
} libraryPropertyType;
# 88 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 2


# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/channel_descriptor.h" 1
# 62 "/usr/tce/packages/cuda/cuda-9.2.148/include/channel_descriptor.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h" 1
# 133 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 134 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 135 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h" 2

# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_device_runtime_api.h" 1
# 64 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_device_runtime_api.h"
extern "C" {


struct cudaFuncAttributes;







__attribute__((device)) __attribute__((nv_weak)) cudaError_t cudaMalloc(void **p, size_t s)
{
  return cudaErrorUnknown;
}

__attribute__((device)) __attribute__((nv_weak)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *p, const void *c)
{
  return cudaErrorUnknown;
}

__attribute__((device)) __attribute__((nv_weak)) cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device)
{
  return cudaErrorUnknown;
}

__attribute__((device)) __attribute__((nv_weak)) cudaError_t cudaGetDevice(int *device)
{
  return cudaErrorUnknown;
}

__attribute__((device)) __attribute__((nv_weak)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize)
{
  return cudaErrorUnknown;
}

__attribute__((device)) __attribute__((nv_weak)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize, unsigned int flags)
{
  return cudaErrorUnknown;
}




}
# 119 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_device_runtime_api.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 120 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_device_runtime_api.h" 2

extern "C"
{
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceSynchronize(void);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaGetLastError(void);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaPeekAtLastError(void);
extern __attribute__((device)) __attribute__((cudart_builtin)) const char* cudaGetErrorString(cudaError_t error);
extern __attribute__((device)) __attribute__((cudart_builtin)) const char* cudaGetErrorName(cudaError_t error);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaGetDeviceCount(int *count);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaGetDevice(int *device);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaStreamDestroy(cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaEventDestroy(cudaEvent_t event);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaFree(void *devPtr);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMalloc(void **devPtr, size_t size);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpyAsync_ptsz(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy2DAsync_ptsz(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy3DAsync_ptsz(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemsetAsync_ptsz(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemset2DAsync_ptsz(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemset3DAsync_ptsz(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaRuntimeGetVersion(int *runtimeVersion);
# 178 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_device_runtime_api.h"
extern __attribute__((device)) __attribute__((cudart_builtin)) void * cudaGetParameterBuffer(size_t alignment, size_t size);
# 206 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_device_runtime_api.h"
extern __attribute__((device)) __attribute__((cudart_builtin)) void * cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream);
# 226 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_device_runtime_api.h"
    extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
    extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream);


extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize, unsigned int flags);

extern __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long cudaCGGetIntrinsicHandle(enum cudaCGScope scope);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaCGSynchronize(unsigned long long handle, unsigned int flags);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaCGGetSize(unsigned int *numThreads, unsigned int *numGrids, unsigned long long handle);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaCGGetRank(unsigned int *threadRank, unsigned int *gridRank, unsigned long long handle);
}

template <typename T> static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMalloc(T **devPtr, size_t size);
template <typename T> static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, T *entry);
template <typename T> static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize);
template <typename T> static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned int flags);
# 137 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h" 2
# 218 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern "C" {
# 251 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceReset(void);
# 270 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceSynchronize(void);
# 347 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetLimit(enum cudaLimit limit, size_t value);
# 378 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
# 410 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 446 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);
# 489 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);
# 519 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
# 562 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);
# 587 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);
# 615 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);
# 660 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);
# 698 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);
# 739 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);
# 792 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);
# 825 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcCloseMemHandle(void *devPtr);
# 865 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadExit(void);
# 889 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSynchronize(void);
# 936 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSetLimit(enum cudaLimit limit, size_t value);
# 967 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);
# 1002 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 1048 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);
# 1104 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetLastError(void);
# 1147 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaPeekAtLastError(void);
# 1163 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) const char* cudaGetErrorName(cudaError_t error);
# 1179 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) const char* cudaGetErrorString(cudaError_t error);
# 1210 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDeviceCount(int *count);
# 1476 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);
# 1663 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
# 1701 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice);
# 1720 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);
# 1755 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDevice(int device);
# 1774 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDevice(int *device);
# 1803 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetValidDevices(int *device_arr, int len);
# 1866 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDeviceFlags( unsigned int flags );
# 1909 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetDeviceFlags( unsigned int *flags );
# 1947 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamCreate(cudaStream_t *pStream);
# 1977 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
# 2021 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);
# 2046 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int *priority);
# 2069 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);
# 2098 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamDestroy(cudaStream_t stream);
# 2122 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
# 2136 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
typedef void ( *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);
# 2195 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);
# 2217 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamSynchronize(cudaStream_t stream);
# 2240 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamQuery(cudaStream_t stream);
# 2321 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length = 0, unsigned int flags = 0x04);
# 2358 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventCreate(cudaEvent_t *event);
# 2394 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
# 2432 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);
# 2462 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventQuery(cudaEvent_t event);
# 2491 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventSynchronize(cudaEvent_t event);
# 2517 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventDestroy(cudaEvent_t event);
# 2559 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);
# 2622 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);
# 2677 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaLaunchCooperativeKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);
# 2774 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaLaunchCooperativeKernelMultiDevice(struct cudaLaunchParams *launchParamsList, unsigned int numDevices, unsigned int flags = 0);
# 2823 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);
# 2878 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);
# 2913 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
# 2952 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaFuncSetAttribute(const void *func, enum cudaFuncAttribute attr, int value);
# 2976 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDoubleForDevice(double *d);
# 3000 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDoubleForHost(double *d);
# 3055 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize);
# 3099 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags);
# 3149 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0);
# 3178 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetupArgument(const void *arg, size_t size, size_t offset);
# 3219 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaLaunch(const void *func);
# 3338 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMallocManaged(void **devPtr, size_t size, unsigned int flags = 0x01);
# 3366 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMalloc(void **devPtr, size_t size);
# 3397 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocHost(void **ptr, size_t size);
# 3438 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);
# 3482 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);
# 3510 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaFree(void *devPtr);
# 3532 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeHost(void *ptr);
# 3554 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeArray(cudaArray_t array);
# 3576 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);
# 3640 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostAlloc(void **pHost, size_t size, unsigned int flags);
# 3722 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostRegister(void *ptr, size_t size, unsigned int flags);
# 3743 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostUnregister(void *ptr);
# 3786 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);
# 3806 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostGetFlags(unsigned int *pFlags, void *pHost);
# 3843 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);
# 3980 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);
# 4117 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);
# 4144 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);
# 4247 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p);
# 4276 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);
# 4392 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);
# 4416 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);
# 4437 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemGetInfo(size_t *free, size_t *total);
# 4461 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);
# 4502 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);
# 4535 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);
# 4574 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);
# 4612 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);
# 4651 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 4697 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4744 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4791 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4836 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 4877 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);
# 4918 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);
# 4972 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 5005 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);
# 5052 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 5098 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 5158 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 5213 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 5267 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 5316 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 5365 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 5392 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset(void *devPtr, int value, size_t count);
# 5424 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);
# 5466 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);
# 5500 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);
# 5539 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);
# 5588 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);
# 5614 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSymbolAddress(void **devPtr, const void *symbol);
# 5639 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSymbolSize(size_t *size, const void *symbol);
# 5707 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream = 0);
# 5821 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device);
# 5878 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemRangeGetAttribute(void *data, size_t dataSize, enum cudaMemRangeAttribute attribute, const void *devPtr, size_t count);
# 5915 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemRangeGetAttributes(void **data, size_t *dataSizes, enum cudaMemRangeAttribute *attributes, size_t numAttributes, const void *devPtr, size_t count);
# 6069 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);
# 6108 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);
# 6148 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);
# 6168 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceDisablePeerAccess(int peerDevice);
# 6229 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);
# 6262 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);
# 6299 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 6332 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 6362 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);
# 6398 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);
# 6425 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);
# 6465 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);
# 6501 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);
# 6552 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = (2147483647 *2U +1U));
# 6607 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);
# 6641 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTextureToArray(const struct textureReference *texref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
# 6677 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(const struct textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const struct cudaChannelFormatDesc *desc);
# 6699 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaUnbindTexture(const struct textureReference *texref);
# 6724 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
# 6750 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureReference(const struct textureReference **texref, const void *symbol);
# 6791 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindSurfaceToArray(const struct surfaceReference *surfref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
# 6812 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSurfaceReference(const struct surfaceReference **surfref, const void *symbol);
# 7040 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);
# 7057 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject);
# 7075 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);
# 7093 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);
# 7112 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);
# 7153 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);
# 7170 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);
# 7187 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);
# 7216 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDriverGetVersion(int *driverVersion);
# 7235 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaRuntimeGetVersion(int *runtimeVersion);




extern __attribute__((host)) cudaError_t cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);
# 7477 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime_api.h"
}
# 63 "/usr/tce/packages/cuda/cuda-9.2.148/include/channel_descriptor.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 64 "/usr/tce/packages/cuda/cuda-9.2.148/include/channel_descriptor.h" 2
# 107 "/usr/tce/packages/cuda/cuda-9.2.148/include/channel_descriptor.h"
template<class T> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;


  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);



}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}
# 379 "/usr/tce/packages/cuda/cuda-9.2.148/include/channel_descriptor.h"
template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}
# 91 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 2

# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_functions.h" 1
# 53 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 54 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 55 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_functions.h" 2
# 79 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz)
{
  struct cudaPitchedPtr s;

  s.ptr = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
# 106 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z)
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
# 132 "/usr/tce/packages/cuda/cuda-9.2.148/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d)
{
  struct cudaExtent e;

  e.width = w;
  e.height = h;
  e.depth = d;

  return e;
}
# 93 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 2


# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 96 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_functions.h" 1
# 59 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 60 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 61 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_functions.h" 2
# 75 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_functions.h"
static __inline__ __attribute__((host)) __attribute__((device)) char1 make_char1(signed char x);

static __inline__ __attribute__((host)) __attribute__((device)) uchar1 make_uchar1(unsigned char x);

static __inline__ __attribute__((host)) __attribute__((device)) char2 make_char2(signed char x, signed char y);

static __inline__ __attribute__((host)) __attribute__((device)) uchar2 make_uchar2(unsigned char x, unsigned char y);

static __inline__ __attribute__((host)) __attribute__((device)) char3 make_char3(signed char x, signed char y, signed char z);

static __inline__ __attribute__((host)) __attribute__((device)) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z);

static __inline__ __attribute__((host)) __attribute__((device)) char4 make_char4(signed char x, signed char y, signed char z, signed char w);

static __inline__ __attribute__((host)) __attribute__((device)) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w);

static __inline__ __attribute__((host)) __attribute__((device)) short1 make_short1(short x);

static __inline__ __attribute__((host)) __attribute__((device)) ushort1 make_ushort1(unsigned short x);

static __inline__ __attribute__((host)) __attribute__((device)) short2 make_short2(short x, short y);

static __inline__ __attribute__((host)) __attribute__((device)) ushort2 make_ushort2(unsigned short x, unsigned short y);

static __inline__ __attribute__((host)) __attribute__((device)) short3 make_short3(short x,short y, short z);

static __inline__ __attribute__((host)) __attribute__((device)) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z);

static __inline__ __attribute__((host)) __attribute__((device)) short4 make_short4(short x, short y, short z, short w);

static __inline__ __attribute__((host)) __attribute__((device)) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w);

static __inline__ __attribute__((host)) __attribute__((device)) int1 make_int1(int x);

static __inline__ __attribute__((host)) __attribute__((device)) uint1 make_uint1(unsigned int x);

static __inline__ __attribute__((host)) __attribute__((device)) int2 make_int2(int x, int y);

static __inline__ __attribute__((host)) __attribute__((device)) uint2 make_uint2(unsigned int x, unsigned int y);

static __inline__ __attribute__((host)) __attribute__((device)) int3 make_int3(int x, int y, int z);

static __inline__ __attribute__((host)) __attribute__((device)) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z);

static __inline__ __attribute__((host)) __attribute__((device)) int4 make_int4(int x, int y, int z, int w);

static __inline__ __attribute__((host)) __attribute__((device)) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w);

static __inline__ __attribute__((host)) __attribute__((device)) long1 make_long1(long int x);

static __inline__ __attribute__((host)) __attribute__((device)) ulong1 make_ulong1(unsigned long int x);

static __inline__ __attribute__((host)) __attribute__((device)) long2 make_long2(long int x, long int y);

static __inline__ __attribute__((host)) __attribute__((device)) ulong2 make_ulong2(unsigned long int x, unsigned long int y);

static __inline__ __attribute__((host)) __attribute__((device)) long3 make_long3(long int x, long int y, long int z);

static __inline__ __attribute__((host)) __attribute__((device)) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z);

static __inline__ __attribute__((host)) __attribute__((device)) long4 make_long4(long int x, long int y, long int z, long int w);

static __inline__ __attribute__((host)) __attribute__((device)) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w);

static __inline__ __attribute__((host)) __attribute__((device)) float1 make_float1(float x);

static __inline__ __attribute__((host)) __attribute__((device)) float2 make_float2(float x, float y);

static __inline__ __attribute__((host)) __attribute__((device)) float3 make_float3(float x, float y, float z);

static __inline__ __attribute__((host)) __attribute__((device)) float4 make_float4(float x, float y, float z, float w);

static __inline__ __attribute__((host)) __attribute__((device)) longlong1 make_longlong1(long long int x);

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong1 make_ulonglong1(unsigned long long int x);

static __inline__ __attribute__((host)) __attribute__((device)) longlong2 make_longlong2(long long int x, long long int y);

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y);

static __inline__ __attribute__((host)) __attribute__((device)) longlong3 make_longlong3(long long int x, long long int y, long long int z);

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z);

static __inline__ __attribute__((host)) __attribute__((device)) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w);

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w);

static __inline__ __attribute__((host)) __attribute__((device)) double1 make_double1(double x);

static __inline__ __attribute__((host)) __attribute__((device)) double2 make_double2(double x, double y);

static __inline__ __attribute__((host)) __attribute__((device)) double3 make_double3(double x, double y, double z);

static __inline__ __attribute__((host)) __attribute__((device)) double4 make_double4(double x, double y, double z, double w);





# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_functions.hpp" 1
# 59 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_functions.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 60 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_functions.hpp" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 61 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_functions.hpp" 2
# 75 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_functions.hpp"
static __inline__ __attribute__((host)) __attribute__((device)) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short3 make_short3(short x,short y, short z)
{
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}
# 175 "/usr/tce/packages/cuda/cuda-9.2.148/include/vector_functions.h" 2
# 97 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 2
# 115 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/common_functions.h" 1
# 50 "/usr/tce/packages/cuda/cuda-9.2.148/include/common_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h" 1
# 61 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 62 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h" 2





# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4
extern "C" {





# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 92 "/usr/include/string.h" 3 4
extern void *memchr (const void *__s, int __c, size_t __n)
      throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 106 "/usr/include/string.h" 3 4
extern void *rawmemchr (const void *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 117 "/usr/include/string.h" 3 4
extern void *memrchr (const void *__s, int __c, size_t __n)
      throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));







# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 160 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 232 "/usr/include/string.h" 3 4
extern char *strchr (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 259 "/usr/include/string.h" 3 4
extern char *strrchr (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern char *strchrnul (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 311 "/usr/include/string.h" 3 4
extern char *strpbrk (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 338 "/usr/include/string.h" 3 4
extern char *strstr (const char *__haystack, const char *__needle)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 369 "/usr/include/string.h" 3 4
extern char *strcasestr (const char *__haystack, const char *__needle)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();
# 434 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 485 "/usr/include/string.h" 3 4
extern char *index (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 513 "/usr/include/string.h" 3 4
extern char *rindex (const char *__s, int __c)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));




extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));
# 602 "/usr/include/string.h" 3 4
extern char *basename (const char *__filename) throw () __attribute__ ((__nonnull__ (1)));
# 642 "/usr/include/string.h" 3 4
}
# 68 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
extern "C" {








# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 26 "/usr/include/bits/time.h" 3 4
# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 130 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 131 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 27 "/usr/include/bits/time.h" 2 3 4



struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 88 "/usr/include/bits/time.h" 3 4
# 1 "/usr/include/bits/timex.h" 1 3 4
# 25 "/usr/include/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 89 "/usr/include/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 42 "/usr/include/time.h" 2 3 4
# 59 "/usr/include/time.h" 3 4
typedef __clock_t clock_t;
# 75 "/usr/include/time.h" 3 4
typedef __time_t time_t;
# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };
# 133 "/usr/include/time.h" 3 4
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 161 "/usr/include/time.h" 3 4
struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;





typedef __pid_t pid_t;
# 189 "/usr/include/time.h" 3 4
extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();





extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) throw ();
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 403 "/usr/include/time.h" 3 4
extern int getdate_err;
# 412 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 426 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h" 2

extern "C"
{

extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) clock_t clock(void)



throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void* memset(void*, int, size_t) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void* memcpy(void*, const void*, size_t) throw ();

}
# 93 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/new" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/new" 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++config.h" 1 3
# 186 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 350 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++config.h" 3
namespace std
{
  inline namespace __gnu_cxx_ldbl128 { }
}
# 430 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++config.h" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/os_defines.h" 1 3
# 431 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++config.h" 2 3


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/cpu_defines.h" 1 3
# 434 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++config.h" 2 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/new" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/exception" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/exception" 3

#pragma GCC visibility push(default)



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/atomic_lockfree_defines.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/atomic_lockfree_defines.h" 3
# 39 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/exception" 2 3

extern "C++" {

namespace std
{
# 60 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/exception" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;



    virtual const char* what() const noexcept;
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char* what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 127 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/exception" 3
  bool uncaught_exception() noexcept __attribute__ ((__pure__));


}

namespace __gnu_cxx
{
# 152 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/exception_ptr.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/exception_defines.h" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/exception_ptr.h" 2 3





extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {




    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 111 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 138 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

  }



  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {
      try
 {

   throw __ex;

 }
      catch(...)
 {
   return current_exception();
 }
    }





  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept __attribute__ ((__deprecated__));

  template<typename _Ex>
    exception_ptr
    copy_exception(_Ex __ex) noexcept
    { return std::make_exception_ptr<_Ex>(__ex); }


}

}

#pragma GCC visibility pop
# 163 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/exception" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/nested_exception.h" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/nested_exception.h" 3
#pragma GCC visibility push(default)
# 45 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) = default;

    nested_exception& operator=(const nested_exception&) = default;

    virtual ~nested_exception() noexcept;

    void
    rethrow_nested() const __attribute__ ((__noreturn__))
    { rethrow_exception(_M_ptr); }

    exception_ptr
    nested_ptr() const
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };

  template<typename _Ex>
    struct __get_nested_helper
    {
      static const nested_exception*
      _S_get(const _Ex& __ex)
      { return dynamic_cast<const nested_exception*>(&__ex); }
    };

  template<typename _Ex>
    struct __get_nested_helper<_Ex*>
    {
      static const nested_exception*
      _S_get(const _Ex* __ex)
      { return dynamic_cast<const nested_exception*>(__ex); }
    };

  template<typename _Ex>
    inline const nested_exception*
    __get_nested_exception(const _Ex& __ex)
    { return __get_nested_helper<_Ex>::_S_get(__ex); }

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, const nested_exception* = 0)
    __attribute__ ((__noreturn__));

  template<typename _Ex>
    void
    __throw_with_nested(_Ex&&, ...) __attribute__ ((__noreturn__));




  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, const nested_exception*)
    { throw __ex; }

  template<typename _Ex>
    inline void
    __throw_with_nested(_Ex&& __ex, ...)
    { throw _Nested_exception<_Ex>(static_cast<_Ex&&>(__ex)); }

  template<typename _Ex>
    void
    throw_with_nested(_Ex __ex) __attribute__ ((__noreturn__));



  template<typename _Ex>
    inline void
    throw_with_nested(_Ex __ex)
    {
      if (__get_nested_exception(__ex))
        throw __ex;
      __throw_with_nested(static_cast<_Ex&&>(__ex), &__ex);
    }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    {
      if (const nested_exception* __nested = __get_nested_exception(__ex))
        __nested->rethrow_nested();
    }


  inline void
  rethrow_if_nested(const nested_exception& __ex)
  { __ex.rethrow_nested(); }


}

}



#pragma GCC visibility pop
# 164 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/exception" 2 3
# 41 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { };



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };





  class bad_array_length : public bad_alloc
  {
  public:
    bad_array_length() throw() { };



    virtual ~bad_array_length() throw();


    virtual const char* what() const throw();
  };


  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 128 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/new" 3
void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));
void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));


inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}

#pragma GCC visibility pop
# 94 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h" 2
# 107 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new(std:: size_t, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new[](std:: size_t, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete(void*, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete[](void*, void*) throw();

extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete(void*, std:: size_t) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete[](void*, std:: size_t) throw();





# 1 "/usr/include/stdio.h" 1 3 4
# 29 "/usr/include/stdio.h" 3 4
extern "C" {




# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;
# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 33 "/usr/include/libio.h" 2 3 4
# 50 "/usr/include/libio.h" 3 4
# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stdarg.h" 1 3 4
# 14 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 32 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 51 "/usr/include/libio.h" 2 3 4
# 145 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 155 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 178 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 246 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 294 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 303 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 339 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 435 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 465 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 527 "/usr/include/libio.h" 3 4
}
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 195 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void) ;
# 205 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;
# 237 "/usr/include/stdio.h" 3 4
extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 272 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 297 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();
# 356 "/usr/include/stdio.h" 3 4
extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
# 425 "/usr/include/stdio.h" 3 4
extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 471 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 531 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 573 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);
# 622 "/usr/include/stdio.h" 3 4
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
          ;
# 649 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;
# 689 "/usr/include/stdio.h" 3 4
extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 726 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);
# 749 "/usr/include/stdio.h" 3 4
extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 798 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 818 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;
# 846 "/usr/include/stdio.h" 3 4
extern void perror (const char *__s);







# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 873 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 934 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio.h" 1 3 4
# 35 "/usr/include/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __arg)
{
  return vfprintf (stdout, __fmt, __arg);
}



extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
 feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
 ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 935 "/usr/include/stdio.h" 2 3 4








}
# 119 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {







# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 64 "/usr/include/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 34 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/byteswap-16.h" 1 3 4
# 35 "/usr/include/bits/byteswap.h" 2 3 4
# 61 "/usr/include/endian.h" 2 3 4
# 65 "/usr/include/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 97 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 239 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern __inline __attribute__ ((__gnu_inline__)) int
 atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
 atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}




__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
 atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}
# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





# 1 "/usr/include/sys/types.h" 1 3 4
# 27 "/usr/include/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 104 "/usr/include/sys/types.h" 3 4
typedef __id_t id_t;
# 115 "/usr/include/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 136 "/usr/include/sys/types.h" 3 4
typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;






# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 147 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 23 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;








# 1 "/usr/include/bits/time.h" 1 3 4
# 46 "/usr/include/sys/select.h" 2 3 4








typedef long int __fd_mask;
# 64 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/sys/select.h" 3 4
extern "C" {
# 106 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 131 "/usr/include/sys/select.h" 3 4
}
# 220 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 29 "/usr/include/sys/sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));


__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
 gnu_dev_major (unsigned long long int __dev) throw ()
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
 gnu_dev_minor (unsigned long long int __dev) throw ()
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned long long int
 gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw ()
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}

}
# 223 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;






# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 2 3 4
# 49 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 79 "/usr/include/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 113 "/usr/include/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;


    unsigned int __flags;
  } __data;
# 199 "/usr/include/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/sys/types.h" 2 3 4


}
# 315 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));
# 465 "/usr/include/stdlib.h" 3 4
extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;
# 479 "/usr/include/stdlib.h" 3 4
extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();




# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 492 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__, __alloc_size__ (2)));




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 534 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;





extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 605 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 619 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 629 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 641 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 651 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 662 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 673 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 683 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 693 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 705 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 716 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;






extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 733 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 807 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (const char *__s, size_t __n) throw () ;


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw () ;


extern int wctomb (char *__s, wchar_t __wchar) throw () ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();
# 884 "/usr/include/stdlib.h" 3 4
extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 895 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));



# 1 "/usr/include/bits/stdlib-float.h" 1 3 4
# 25 "/usr/include/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
 atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}
# 952 "/usr/include/stdlib.h" 2 3 4
# 964 "/usr/include/stdlib.h" 3 4
}
# 120 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h" 2





extern "C"
{
extern







__attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) int printf(const char*, ...);



extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* malloc(size_t) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void free(void*) throw ();

}






# 1 "/usr/include/assert.h" 1 3 4
# 65 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 149 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h" 2


extern "C"
{
# 179 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void __assert_fail(
  const char *, const char *, unsigned int, const char *)
  throw ();




}
# 230 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new(std:: size_t) ;
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new[](std:: size_t) ;
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete(void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete[](void*) throw();

extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete(void*, std:: size_t) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete[](void*, std:: size_t) throw();
# 257 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h" 1
# 89 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 90 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h" 2








extern "C"
{
# 182 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) int abs(int) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) long int labs(long int) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) long long int llabs(long long int) throw ();
# 234 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fabs(double x) throw ();
# 275 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fabsf(float x) throw ();



extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int min(int, int);

extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned int umin(unsigned int, unsigned int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llmin(long long int, long long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned long long int ullmin(unsigned long long int, unsigned long long int);
# 304 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fminf(float x, float y) throw ();
# 324 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmin(double x, double y) throw ();






extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int max(int, int);

extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned int umax(unsigned int, unsigned int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llmax(long long int, long long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned long long int ullmax(unsigned long long int, unsigned long long int);
# 356 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmaxf(float x, float y) throw ();
# 376 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmax(double, double) throw ();
# 420 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sin(double x) throw ();
# 453 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cos(double x) throw ();
# 472 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincos(double x, double *sptr, double *cptr) throw ();
# 488 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincosf(float x, float *sptr, float *cptr) throw ();
# 533 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tan(double x) throw ();
# 602 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sqrt(double x) throw ();
# 674 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rsqrt(double x);
# 744 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rsqrtf(float x);
# 800 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log2(double x) throw ();
# 825 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp2(double x) throw ();
# 850 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float exp2f(float x) throw ();
# 877 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp10(double x) throw ();
# 900 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float exp10f(float x) throw ();
# 946 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double expm1(double x) throw ();
# 991 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float expm1f(float x) throw ();
# 1046 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log2f(float x) throw ();
# 1100 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log10(double x) throw ();
# 1171 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log(double x) throw ();
# 1265 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log1p(double x) throw ();
# 1362 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log1pf(float x) throw ();
# 1437 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double floor(double x) throw ();
# 1476 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp(double x) throw ();
# 1507 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cosh(double x) throw ();
# 1537 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sinh(double x) throw ();
# 1567 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tanh(double x) throw ();
# 1602 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double acosh(double x) throw ();
# 1640 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float acoshf(float x) throw ();
# 1656 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double asinh(double x) throw ();
# 1672 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float asinhf(float x) throw ();
# 1726 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atanh(double x) throw ();
# 1780 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atanhf(float x) throw ();
# 1839 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double ldexp(double x, int exp) throw ();
# 1895 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ldexpf(float x, int exp) throw ();
# 1947 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double logb(double x) throw ();
# 2002 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float logbf(float x) throw ();
# 2032 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int ilogb(double x) throw ();
# 2062 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int ilogbf(float x) throw ();
# 2138 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double scalbn(double x, int n) throw ();
# 2214 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float scalbnf(float x, int n) throw ();
# 2290 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double scalbln(double x, long int n) throw ();
# 2366 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float scalblnf(float x, long int n) throw ();
# 2444 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double frexp(double x, int *nptr) throw ();
# 2519 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float frexpf(float x, int *nptr) throw ();
# 2533 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double round(double x) throw ();
# 2550 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float roundf(float x) throw ();
# 2568 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lround(double x) throw ();
# 2586 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lroundf(float x) throw ();
# 2604 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llround(double x) throw ();
# 2622 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llroundf(float x) throw ();
# 2658 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rint(double x) throw ();
# 2674 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rintf(float x) throw ();
# 2691 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lrint(double x) throw ();
# 2708 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lrintf(float x) throw ();
# 2725 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llrint(double x) throw ();
# 2742 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llrintf(float x) throw ();
# 2795 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nearbyint(double x) throw ();
# 2848 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nearbyintf(float x) throw ();
# 2910 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double ceil(double x) throw ();
# 2922 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double trunc(double x) throw ();
# 2937 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float truncf(float x) throw ();
# 2963 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fdim(double x, double y) throw ();
# 2989 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fdimf(float x, float y) throw ();
# 3025 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atan2(double y, double x) throw ();
# 3056 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atan(double x) throw ();
# 3079 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double acos(double x) throw ();
# 3111 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double asin(double x) throw ();
# 3157 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double hypot(double x, double y) throw ();
# 3209 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rhypot(double x, double y) throw ();
# 3255 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float hypotf(float x, float y) throw ();
# 3307 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rhypotf(float x, float y) throw ();
# 3351 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double norm3d(double a, double b, double c) throw ();
# 3402 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rnorm3d(double a, double b, double c) throw ();
# 3451 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double norm4d(double a, double b, double c, double d) throw ();
# 3507 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rnorm4d(double a, double b, double c, double d) throw ();
# 3552 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double norm(int dim, double const * t) throw ();
# 3603 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rnorm(int dim, double const * t) throw ();
# 3655 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rnormf(int dim, float const * a) throw ();
# 3699 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float normf(int dim, float const * a) throw ();
# 3744 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float norm3df(float a, float b, float c) throw ();
# 3795 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rnorm3df(float a, float b, float c) throw ();
# 3844 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float norm4df(float a, float b, float c, float d) throw ();
# 3900 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rnorm4df(float a, float b, float c, float d) throw ();
# 3987 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cbrt(double x) throw ();
# 4073 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cbrtf(float x) throw ();
# 4128 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rcbrt(double x);
# 4178 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rcbrtf(float x);
# 4238 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sinpi(double x);
# 4298 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinpif(float x);
# 4350 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cospi(double x);
# 4402 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cospif(float x);
# 4432 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincospi(double x, double *sptr, double *cptr);
# 4462 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincospif(float x, float *sptr, float *cptr);
# 4774 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double pow(double x, double y) throw ();
# 4830 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double modf(double x, double *iptr) throw ();
# 4889 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmod(double x, double y) throw ();
# 4975 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double remainder(double x, double y) throw ();
# 5065 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float remainderf(float x, float y) throw ();
# 5119 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double remquo(double x, double y, int *quo) throw ();
# 5173 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float remquof(float x, float y, int *quo) throw ();
# 5214 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double j0(double x) throw ();
# 5256 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float j0f(float x) throw ();
# 5317 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double j1(double x) throw ();
# 5378 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float j1f(float x) throw ();
# 5421 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double jn(int n, double x) throw ();
# 5464 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float jnf(int n, float x) throw ();
# 5516 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double y0(double x) throw ();
# 5568 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float y0f(float x) throw ();
# 5620 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double y1(double x) throw ();
# 5672 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float y1f(float x) throw ();
# 5725 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double yn(int n, double x) throw ();
# 5778 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ynf(int n, float x) throw ();
# 5805 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cyl_bessel_i0(double x) throw ();
# 5831 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cyl_bessel_i0f(float x) throw ();
# 5858 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cyl_bessel_i1(double x) throw ();
# 5884 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cyl_bessel_i1f(float x) throw ();
# 5967 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erf(double x) throw ();
# 6049 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erff(float x) throw ();
# 6113 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfinv(double y);
# 6170 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfinvf(float y);
# 6209 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfc(double x) throw ();
# 6247 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcf(float x) throw ();
# 6375 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double lgamma(double x) throw ();
# 6438 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfcinv(double y);
# 6494 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcinvf(float y);
# 6552 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double normcdfinv(double y);
# 6610 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float normcdfinvf(float y);
# 6653 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double normcdf(double y);
# 6696 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float normcdff(float y);
# 6771 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfcx(double x);
# 6846 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcxf(float x);
# 6980 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float lgammaf(float x) throw ();
# 7089 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tgamma(double x) throw ();
# 7198 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tgammaf(float x) throw ();
# 7211 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double copysign(double x, double y) throw ();
# 7224 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float copysignf(float x, float y) throw ();
# 7261 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nextafter(double x, double y) throw ();
# 7298 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nextafterf(float x, float y) throw ();
# 7314 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nan(const char *tagp) throw ();
# 7330 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nanf(const char *tagp) throw ();






extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinff(float) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnanf(float) throw ();
# 7348 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finite(double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finitef(float) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbit(double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnan(double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinf(double) throw ();


extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbitf(float) throw ();
# 7514 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fma(double x, double y, double z) throw ();
# 7672 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmaf(float x, float y, float z) throw ();
# 7683 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbitl(long double) throw ();





extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finitel(long double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinfl(long double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnanl(long double) throw ();
# 7741 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float acosf(float x) throw ();
# 7781 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float asinf(float x) throw ();
# 7821 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atanf(float x) throw ();
# 7854 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atan2f(float y, float x) throw ();
# 7878 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cosf(float x) throw ();
# 7920 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinf(float x) throw ();
# 7962 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tanf(float x) throw ();
# 7986 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float coshf(float x) throw ();
# 8027 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinhf(float x) throw ();
# 8057 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tanhf(float x) throw ();
# 8108 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float logf(float x) throw ();
# 8158 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float expf(float x) throw ();
# 8209 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log10f(float x) throw ();
# 8264 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float modff(float x, float *iptr) throw ();
# 8572 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float powf(float x, float y) throw ();
# 8641 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sqrtf(float x) throw ();
# 8700 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ceilf(float x) throw ();
# 8772 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float floorf(float x) throw ();
# 8831 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmodf(float x, float y) throw ();
# 8846 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
}



# 1 "/usr/include/math.h" 1 3 4
# 29 "/usr/include/math.h" 3 4
extern "C" {




# 1 "/usr/include/bits/huge_val.h" 1 3 4
# 34 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/bits/huge_valf.h" 1 3 4
# 36 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/huge_vall.h" 1 3 4
# 37 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/inf.h" 1 3 4
# 40 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/nan.h" 1 3 4
# 43 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/bits/mathdef.h" 1 3 4
# 34 "/usr/include/bits/mathdef.h" 3 4
typedef float float_t;
typedef double double_t;
# 47 "/usr/include/math.h" 2 3 4
# 70 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 54 "/usr/include/bits/mathcalls.h" 3 4
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();






extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();
# 154 "/usr/include/bits/mathcalls.h" 3 4
extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();
# 179 "/usr/include/bits/mathcalls.h" 3 4
extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));





extern int isinf (double __value) throw () __attribute__ ((__const__));


extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));



extern int isnan (double __value) throw () __attribute__ ((__const__));


extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();
# 364 "/usr/include/bits/mathcalls.h" 3 4
extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 71 "/usr/include/math.h" 2 3 4
# 89 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 54 "/usr/include/bits/mathcalls.h" 3 4
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();






extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();
# 154 "/usr/include/bits/mathcalls.h" 3 4
extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();
# 179 "/usr/include/bits/mathcalls.h" 3 4
extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));





extern int isinff (float __value) throw () __attribute__ ((__const__));


extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));



extern int isnanf (float __value) throw () __attribute__ ((__const__));


extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();
# 364 "/usr/include/bits/mathcalls.h" 3 4
extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 90 "/usr/include/math.h" 2 3 4
# 133 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 54 "/usr/include/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();






extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw ()
     __attribute__ ((__nonnull__ (2)));




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();
# 154 "/usr/include/bits/mathcalls.h" 3 4
extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();
# 179 "/usr/include/bits/mathcalls.h" 3 4
extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));





extern int isinfl (long double __value) throw () __attribute__ ((__const__));


extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));



extern int isnanl (long double __value) throw () __attribute__ ((__const__));


extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();
# 364 "/usr/include/bits/mathcalls.h" 3 4
extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 134 "/usr/include/math.h" 2 3 4
# 149 "/usr/include/math.h" 3 4
extern int signgam;
# 190 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 288 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 311 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 413 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathinline.h" 1 3 4
# 62 "/usr/include/bits/mathinline.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
 __signbitf (float __x) throw ()
{

  return __builtin_signbitf (__x);




}
extern __inline __attribute__ ((__gnu_inline__)) int
 __signbit (double __x) throw ()
{

  return __builtin_signbit (__x);




}

extern __inline __attribute__ ((__gnu_inline__)) int
 __signbitl (long double __x) throw ()
{
  return __signbit ((double) __x);
}
# 414 "/usr/include/math.h" 2 3 4
# 475 "/usr/include/math.h" 3 4
}
# 8850 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h" 2



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cmath" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cmath" 3


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/cpp_type_traits.h" 1 3
# 36 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/cpp_type_traits.h" 3
# 68 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<typename _Iterator>
    class move_iterator;

  template<typename _Iterator>
    struct __is_move_iterator< move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



}
# 43 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cmath" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/type_traits.h" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cmath" 2 3
# 75 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }



  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 431 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 555 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }

  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }

  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }

  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }

  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }

  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }

  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }

  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }

  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }


  constexpr bool
  signbit(float __x)
  { return __builtin_signbitf(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbitl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }

  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }

  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }

  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }

  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }

  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }

  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 918 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cmath" 3
}
# 1033 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;

  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;

  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;


  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }

  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }

  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }

  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }

  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }

  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }

  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }

  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }

  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }

  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }

  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }

  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }

  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }

  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }

  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }

  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }

  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }

  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }

  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }

  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }

  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }


  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }

  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }

  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }

  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }

  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }

  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }

  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }

  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }

  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }

  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }

  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }

  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }

  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }

  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }

  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }

  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }

  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }

  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }


}
# 8854 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h" 2
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 3
# 114 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline long
  abs(long __i) { return __builtin_labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 183 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 3
}
# 196 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 228 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}
# 8855 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h" 2
# 8960 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(long double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(long double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(float x);






__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(double x) throw();

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(long double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(float x);






__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(double x) throw();

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(long double x);
# 9053 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
namespace std
{
  template<typename T> extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) T __pow_helper(T, int);
  template<typename T> extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) T __cmath_power(T, unsigned int);
}

using std::abs;
using std::fabs;
using std::ceil;
using std::floor;
using std::sqrt;

using std::pow;

using std::log;
using std::log10;
using std::fmod;
using std::modf;
using std::exp;
using std::frexp;
using std::ldexp;
using std::asin;
using std::sin;
using std::sinh;
using std::acos;
using std::cos;
using std::cosh;
using std::atan;
using std::atan2;
using std::tan;
using std::tanh;
# 9448 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
namespace std {
# 9457 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long long int abs(long long int);
# 9467 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long int abs(long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float abs(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double abs(double);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fabs(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float ceil(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float floor(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sqrt(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float pow(float, float);




template<typename _Tp, typename _Up>
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin))
typename __gnu_cxx::__promote_2<_Tp, _Up>::__type pow(_Tp, _Up);







extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float log(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float log10(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fmod(float, float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float modf(float, float*);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float exp(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float frexp(float, int*);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float ldexp(float, int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float asin(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sin(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sinh(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float acos(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cos(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cosh(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float atan(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float atan2(float, float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float tan(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float tanh(float);
# 9579 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
}
# 9722 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float logb(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int ilogb(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float scalbn(float a, int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float scalbln(float a, long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float exp2(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float expm1(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float log2(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float log1p(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float acosh(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float asinh(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float atanh(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float hypot(float a, float b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float norm3d(float a, float b, float c);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float norm4d(float a, float b, float c, float d);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cbrt(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float erf(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float erfc(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float lgamma(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float tgamma(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float copysign(float a, float b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float nextafter(float a, float b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float remainder(float a, float b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float remquo(float a, float b, int *quo);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float round(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long int lround(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long long int llround(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float trunc(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float rint(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long int lrint(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long long int llrint(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float nearbyint(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fdim(float a, float b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fma(float a, float b, float c);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fmax(float a, float b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fmin(float a, float b);
# 9831 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float exp10(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float rsqrt(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float rcbrt(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sinpi(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cospi(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void sincospi(float a, float *sptr, float *cptr);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void sincos(float a, float *sptr, float *cptr);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float j0(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float j1(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float jn(int n, float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float y0(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float y1(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float yn(int n, float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cyl_bessel_i0(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cyl_bessel_i1(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float erfinv(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float erfcinv(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float normcdfinv(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float normcdf(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float erfcx(float a);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double copysign(double a, float b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double copysign(float a, double b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned int min(unsigned int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned int min(int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned int min(unsigned int a, int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long int min(long int a, long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned long int min(unsigned long int a, unsigned long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned long int min(long int a, unsigned long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned long int min(unsigned long int a, long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long long int min(long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int min(unsigned long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int min(long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int min(unsigned long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float min(float a, float b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double min(double a, double b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double min(float a, double b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double min(double a, float b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned int max(unsigned int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned int max(int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned int max(unsigned int a, int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long int max(long int a, long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned long int max(unsigned long int a, unsigned long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned long int max(long int a, unsigned long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned long int max(unsigned long int a, long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long long int max(long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int max(unsigned long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int max(long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int max(unsigned long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float max(float a, float b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double max(double a, double b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double max(float a, double b);

static inline __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double max(double a, float b);
# 10222 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.hpp" 1
# 67 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 68 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.hpp" 2
# 316 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.hpp"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(float x) { return __signbitf(x); }



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(double x) { return __signbit(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(long double x) { return __signbitl(x);}
# 333 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.hpp"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(float x) { return __finitef(x); }
# 348 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.hpp"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(double x) { return __finite(x); }
# 361 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.hpp"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(long double x) { return __finitel(x); }


__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(float x) { return __isnanf(x); }



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(double x) throw() { return __isnan(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(long double x) { return __isnanl(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(float x) { return __isinff(x); }



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(double x) throw() { return __isinf(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(long double x) { return __isinfl(x); }
# 584 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.hpp"
static inline __attribute__((host)) __attribute__((device)) float logb(float a)
{
  return logbf(a);
}

static inline __attribute__((host)) __attribute__((device)) int ilogb(float a)
{
  return ilogbf(a);
}

static inline __attribute__((host)) __attribute__((device)) float scalbn(float a, int b)
{
  return scalbnf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float scalbln(float a, long int b)
{
  return scalblnf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float exp2(float a)
{
  return exp2f(a);
}

static inline __attribute__((host)) __attribute__((device)) float expm1(float a)
{
  return expm1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float log2(float a)
{
  return log2f(a);
}

static inline __attribute__((host)) __attribute__((device)) float log1p(float a)
{
  return log1pf(a);
}

static inline __attribute__((host)) __attribute__((device)) float acosh(float a)
{
  return acoshf(a);
}

static inline __attribute__((host)) __attribute__((device)) float asinh(float a)
{
  return asinhf(a);
}

static inline __attribute__((host)) __attribute__((device)) float atanh(float a)
{
  return atanhf(a);
}

static inline __attribute__((host)) __attribute__((device)) float hypot(float a, float b)
{
  return hypotf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float norm3d(float a, float b, float c)
{
  return norm3df(a, b, c);
}

static inline __attribute__((host)) __attribute__((device)) float norm4d(float a, float b, float c, float d)
{
  return norm4df(a, b, c, d);
}

static inline __attribute__((host)) __attribute__((device)) float cbrt(float a)
{
  return cbrtf(a);
}

static inline __attribute__((host)) __attribute__((device)) float erf(float a)
{
  return erff(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfc(float a)
{
  return erfcf(a);
}

static inline __attribute__((host)) __attribute__((device)) float lgamma(float a)
{
  return lgammaf(a);
}

static inline __attribute__((host)) __attribute__((device)) float tgamma(float a)
{
  return tgammaf(a);
}

static inline __attribute__((host)) __attribute__((device)) float copysign(float a, float b)
{
  return copysignf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float nextafter(float a, float b)
{
  return nextafterf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float remainder(float a, float b)
{
  return remainderf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float remquo(float a, float b, int *quo)
{
  return remquof(a, b, quo);
}

static inline __attribute__((host)) __attribute__((device)) float round(float a)
{
  return roundf(a);
}

static inline __attribute__((host)) __attribute__((device)) long int lround(float a)
{
  return lroundf(a);
}

static inline __attribute__((host)) __attribute__((device)) long long int llround(float a)
{
  return llroundf(a);
}

static inline __attribute__((host)) __attribute__((device)) float trunc(float a)
{
  return truncf(a);
}

static inline __attribute__((host)) __attribute__((device)) float rint(float a)
{
  return rintf(a);
}

static inline __attribute__((host)) __attribute__((device)) long int lrint(float a)
{
  return lrintf(a);
}

static inline __attribute__((host)) __attribute__((device)) long long int llrint(float a)
{
  return llrintf(a);
}

static inline __attribute__((host)) __attribute__((device)) float nearbyint(float a)
{
  return nearbyintf(a);
}

static inline __attribute__((host)) __attribute__((device)) float fdim(float a, float b)
{
  return fdimf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float fma(float a, float b, float c)
{
  return fmaf(a, b, c);
}

static inline __attribute__((host)) __attribute__((device)) float fmax(float a, float b)
{
  return fmaxf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float fmin(float a, float b)
{
  return fminf(a, b);
}







static inline __attribute__((host)) __attribute__((device)) float exp10(float a)
{
  return exp10f(a);
}

static inline __attribute__((host)) __attribute__((device)) float rsqrt(float a)
{
  return rsqrtf(a);
}

static inline __attribute__((host)) __attribute__((device)) float rcbrt(float a)
{
  return rcbrtf(a);
}

static inline __attribute__((host)) __attribute__((device)) float sinpi(float a)
{
  return sinpif(a);
}

static inline __attribute__((host)) __attribute__((device)) float cospi(float a)
{
  return cospif(a);
}

static inline __attribute__((host)) __attribute__((device)) void sincospi(float a, float *sptr, float *cptr)
{
  sincospif(a, sptr, cptr);
}

static inline __attribute__((host)) __attribute__((device)) void sincos(float a, float *sptr, float *cptr)
{
  sincosf(a, sptr, cptr);
}

static inline __attribute__((host)) __attribute__((device)) float j0(float a)
{
  return j0f(a);
}

static inline __attribute__((host)) __attribute__((device)) float j1(float a)
{
  return j1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float jn(int n, float a)
{
  return jnf(n, a);
}

static inline __attribute__((host)) __attribute__((device)) float y0(float a)
{
  return y0f(a);
}

static inline __attribute__((host)) __attribute__((device)) float y1(float a)
{
  return y1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float yn(int n, float a)
{
  return ynf(n, a);
}

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i0(float a)
{
  return cyl_bessel_i0f(a);
}

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i1(float a)
{
  return cyl_bessel_i1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfinv(float a)
{
  return erfinvf(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfcinv(float a)
{
  return erfcinvf(a);
}

static inline __attribute__((host)) __attribute__((device)) float normcdfinv(float a)
{
  return normcdfinvf(a);
}

static inline __attribute__((host)) __attribute__((device)) float normcdf(float a)
{
  return normcdff(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfcx(float a)
{
  return erfcxf(a);
}

static inline __attribute__((host)) __attribute__((device)) double copysign(double a, float b)
{
  return copysign(a, (double)b);
}

static inline __attribute__((host)) __attribute__((device)) double copysign(float a, double b)
{
  return copysign((double)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, unsigned int b)
{
  return umin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int min(int a, unsigned int b)
{
  return umin((unsigned int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, int b)
{
  return umin(a, (unsigned int)b);
}

static inline __attribute__((host)) __attribute__((device)) long int min(long int a, long int b)
{





  if (sizeof(long int) == sizeof(int)) {



    return (long int)min((int)a, (int)b);
  } else {
    return (long int)llmin((long long int)a, (long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(unsigned long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int min(unsigned long int a, long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umin((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmin((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) long long int min(long long int a, long long int b)
{
  return llmin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, unsigned long long int b)
{
  return ullmin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(long long int a, unsigned long long int b)
{
  return ullmin((unsigned long long int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, long long int b)
{
  return ullmin(a, (unsigned long long int)b);
}

static inline __attribute__((host)) __attribute__((device)) float min(float a, float b)
{
  return fminf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double min(double a, double b)
{
  return fmin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double min(float a, double b)
{
  return fmin((double)a, b);
}

static inline __attribute__((host)) __attribute__((device)) double min(double a, float b)
{
  return fmin(a, (double)b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, unsigned int b)
{
  return umax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int max(int a, unsigned int b)
{
  return umax((unsigned int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, int b)
{
  return umax(a, (unsigned int)b);
}

static inline __attribute__((host)) __attribute__((device)) long int max(long int a, long int b)
{




  if (sizeof(long int) == sizeof(int)) {



    return (long int)max((int)a, (int)b);
  } else {
    return (long int)llmax((long long int)a, (long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(unsigned long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(long int a, unsigned long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) unsigned long int max(unsigned long int a, long int b)
{



  if (sizeof(unsigned long int) == sizeof(unsigned int)) {



    return (unsigned long int)umax((unsigned int)a, (unsigned int)b);
  } else {
    return (unsigned long int)ullmax((unsigned long long int)a, (unsigned long long int)b);
  }
}

static inline __attribute__((host)) __attribute__((device)) long long int max(long long int a, long long int b)
{
  return llmax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, unsigned long long int b)
{
  return ullmax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(long long int a, unsigned long long int b)
{
  return ullmax((unsigned long long int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, long long int b)
{
  return ullmax(a, (unsigned long long int)b);
}

static inline __attribute__((host)) __attribute__((device)) float max(float a, float b)
{
  return fmaxf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double max(double a, double b)
{
  return fmax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double max(float a, double b)
{
  return fmax((double)a, b);
}

static inline __attribute__((host)) __attribute__((device)) double max(double a, float b)
{
  return fmax(a, (double)b);
}
# 10223 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/math_functions.h" 2
# 258 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/common_functions.h" 2
# 51 "/usr/tce/packages/cuda/cuda-9.2.148/include/common_functions.h" 2
# 116 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_surface_types.h" 1
# 61 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_surface_types.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 62 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_surface_types.h" 2






# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_surface_types.h" 2








template<class T, int dim = 1>
struct __attribute__((device_builtin_surface_type)) surface : public surfaceReference
{

  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<T>();
  }

  __attribute__((host)) surface(struct cudaChannelFormatDesc desc)
  {
    channelDesc = desc;
  }

};

template<int dim>
struct __attribute__((device_builtin_surface_type)) surface<void, dim> : public surfaceReference
{

  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<void>();
  }

};
# 117 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_texture_types.h" 1
# 61 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_texture_types.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 62 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_texture_types.h" 2






# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_texture_types.h" 2








template<class T, int texType = 0x01, enum cudaTextureReadMode mode = cudaReadModeElementType>
struct __attribute__((device_builtin_texture_type)) texture : public textureReference
{

  __attribute__((host)) texture(int norm = 0,
                   enum cudaTextureFilterMode fMode = cudaFilterModePoint,
                   enum cudaTextureAddressMode aMode = cudaAddressModeClamp)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = cudaCreateChannelDesc<T>();
    sRGB = 0;
  }

  __attribute__((host)) texture(int norm,
                   enum cudaTextureFilterMode fMode,
                   enum cudaTextureAddressMode aMode,
                   struct cudaChannelFormatDesc desc)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = desc;
    sRGB = 0;
  }

};
# 118 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_functions.h" 1
# 50 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 79 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
extern "C"
{
# 90 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __mulhi(int x, int y);
# 100 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __umulhi(unsigned int x, unsigned int y);
# 110 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __mul64hi(long long int x, long long int y);
# 120 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __umul64hi(unsigned long long int x, unsigned long long int y);
# 129 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int_as_float(int x);
# 138 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float_as_int(float x);
# 147 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint_as_float(unsigned int x);
# 156 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float_as_uint(float x);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __syncthreads(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __prof_trigger(int);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __threadfence(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __threadfence_block(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __trap(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) void __brkpt(int c = 0);
# 185 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __saturatef(float x);
# 254 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __sad(int x, int y, unsigned int z);
# 322 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __usad(unsigned int x, unsigned int y, unsigned int z);
# 332 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __mul24(int x, int y);
# 342 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __umul24(unsigned int x, unsigned int y);
# 355 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float fdividef(float x, float y);
# 430 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdividef(float x, float y);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) double fdivide(double x, double y);
# 443 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __sinf(float x) throw ();
# 455 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __cosf(float x) throw ();
# 469 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __tanf(float x) throw ();
# 484 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void __sincosf(float x, float *sptr, float *cptr) throw ();
# 534 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __expf(float x) throw ();
# 566 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __exp10f(float x) throw ();
# 592 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __log2f(float x) throw ();
# 620 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __log10f(float x) throw ();
# 664 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __logf(float x) throw ();
# 707 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __powf(float x, float y) throw ();
# 716 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float2int_rn(float x);
# 725 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float2int_rz(float x);
# 734 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float2int_ru(float);
# 743 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __float2int_rd(float x);
# 752 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float2uint_rn(float x);
# 761 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float2uint_rz(float x);
# 770 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float2uint_ru(float x);
# 779 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __float2uint_rd(float x);
# 788 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int2float_rn(int x);
# 797 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int2float_rz(int x);
# 806 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int2float_ru(int x);
# 815 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __int2float_rd(int x);
# 824 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint2float_rn(unsigned int x);
# 833 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint2float_rz(unsigned int x);
# 842 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint2float_ru(unsigned int x);
# 851 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __uint2float_rd(unsigned int x);
# 860 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __float2ll_rn(float x);
# 869 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __float2ll_rz(float x);
# 878 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __float2ll_ru(float x);
# 887 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __float2ll_rd(float x);
# 896 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __float2ull_rn(float x);
# 905 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __float2ull_rz(float x);
# 914 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __float2ull_ru(float x);
# 923 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __float2ull_rd(float x);
# 932 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ll2float_rn(long long int x);
# 941 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ll2float_rz(long long int x);
# 950 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ll2float_ru(long long int x);
# 959 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ll2float_rd(long long int x);
# 968 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ull2float_rn(unsigned long long int x);
# 977 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ull2float_rz(unsigned long long int x);
# 986 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ull2float_ru(unsigned long long int x);
# 995 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __ull2float_rd(unsigned long long int x);
# 1007 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fadd_rn(float x, float y);
# 1019 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fadd_rz(float x, float y);
# 1031 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fadd_ru(float x, float y);
# 1043 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fadd_rd(float x, float y);
# 1055 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsub_rn(float x, float y);
# 1067 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsub_rz(float x, float y);
# 1079 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsub_ru(float x, float y);
# 1091 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsub_rd(float x, float y);
# 1103 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmul_rn(float x, float y);
# 1115 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmul_rz(float x, float y);
# 1127 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmul_ru(float x, float y);
# 1139 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmul_rd(float x, float y);
# 1292 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmaf_rn(float x, float y, float z);
# 1445 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmaf_rz(float x, float y, float z);
# 1598 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmaf_ru(float x, float y, float z);
# 1751 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fmaf_rd(float x, float y, float z);
# 1784 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frcp_rn(float x);
# 1817 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frcp_rz(float x);
# 1850 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frcp_ru(float x);
# 1883 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frcp_rd(float x);
# 1914 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsqrt_rn(float x);
# 1945 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsqrt_rz(float x);
# 1976 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsqrt_ru(float x);
# 2007 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fsqrt_rd(float x);
# 2046 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __frsqrt_rn(float x);
# 2057 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdiv_rn(float x, float y);
# 2068 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdiv_rz(float x, float y);
# 2079 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdiv_ru(float x, float y);
# 2090 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) float __fdiv_rd(float x, float y);
# 2099 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __clz(int x);
# 2110 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __ffs(int x);
# 2119 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __popc(unsigned int x);
# 2128 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __brev(unsigned int x);
# 2137 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __clzll(long long int x);
# 2148 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __ffsll(long long int x);
# 2159 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __popcll(unsigned long long int x);
# 2168 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __brevll(unsigned long long int x);
# 2192 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __byte_perm(unsigned int x, unsigned int y, unsigned int s);
# 2204 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __hadd(int, int);
# 2217 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __rhadd(int, int);
# 2229 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __uhadd(unsigned int, unsigned int);
# 2242 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __urhadd(unsigned int, unsigned int);
# 2252 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) int __double2int_rz(double);
# 2261 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __double2uint_rz(double);
# 2270 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) long long int __double2ll_rz(double);
# 2279 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned long long int __double2ull_rz(double);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __pm0(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __pm1(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __pm2(void);
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __pm3(void);
# 2309 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabs2(unsigned int a);
# 2320 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsss2(unsigned int a);
# 2331 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vadd2(unsigned int a, unsigned int b);
# 2342 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vaddss2 (unsigned int a, unsigned int b);
# 2352 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vaddus2 (unsigned int a, unsigned int b);
# 2363 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vavgs2(unsigned int a, unsigned int b);
# 2374 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vavgu2(unsigned int a, unsigned int b);
# 2385 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vhaddu2(unsigned int a, unsigned int b);
# 2396 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpeq2(unsigned int a, unsigned int b);
# 2407 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpges2(unsigned int a, unsigned int b);
# 2418 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgeu2(unsigned int a, unsigned int b);
# 2429 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgts2(unsigned int a, unsigned int b);
# 2440 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgtu2(unsigned int a, unsigned int b);
# 2451 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmples2(unsigned int a, unsigned int b);
# 2463 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpleu2(unsigned int a, unsigned int b);
# 2474 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmplts2(unsigned int a, unsigned int b);
# 2485 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpltu2(unsigned int a, unsigned int b);
# 2496 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpne2(unsigned int a, unsigned int b);
# 2507 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsdiffu2(unsigned int a, unsigned int b);
# 2518 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmaxs2(unsigned int a, unsigned int b);
# 2529 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmaxu2(unsigned int a, unsigned int b);
# 2540 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmins2(unsigned int a, unsigned int b);
# 2551 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vminu2(unsigned int a, unsigned int b);
# 2562 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vseteq2(unsigned int a, unsigned int b);
# 2573 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetges2(unsigned int a, unsigned int b);
# 2584 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgeu2(unsigned int a, unsigned int b);
# 2595 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgts2(unsigned int a, unsigned int b);
# 2606 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgtu2(unsigned int a, unsigned int b);
# 2617 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetles2(unsigned int a, unsigned int b);
# 2628 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetleu2(unsigned int a, unsigned int b);
# 2639 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetlts2(unsigned int a, unsigned int b);
# 2650 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetltu2(unsigned int a, unsigned int b);
# 2661 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetne2(unsigned int a, unsigned int b);
# 2672 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsadu2(unsigned int a, unsigned int b);
# 2683 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsub2(unsigned int a, unsigned int b);
# 2694 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsubss2 (unsigned int a, unsigned int b);
# 2705 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsubus2 (unsigned int a, unsigned int b);
# 2715 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vneg2(unsigned int a);
# 2725 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vnegss2(unsigned int a);
# 2736 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsdiffs2(unsigned int a, unsigned int b);
# 2747 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsads2(unsigned int a, unsigned int b);
# 2757 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabs4(unsigned int a);
# 2768 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsss4(unsigned int a);
# 2779 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vadd4(unsigned int a, unsigned int b);
# 2790 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vaddss4 (unsigned int a, unsigned int b);
# 2800 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vaddus4 (unsigned int a, unsigned int b);
# 2811 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vavgs4(unsigned int a, unsigned int b);
# 2822 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vavgu4(unsigned int a, unsigned int b);
# 2833 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vhaddu4(unsigned int a, unsigned int b);
# 2844 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpeq4(unsigned int a, unsigned int b);
# 2855 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpges4(unsigned int a, unsigned int b);
# 2866 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgeu4(unsigned int a, unsigned int b);
# 2877 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgts4(unsigned int a, unsigned int b);
# 2888 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpgtu4(unsigned int a, unsigned int b);
# 2899 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmples4(unsigned int a, unsigned int b);
# 2910 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpleu4(unsigned int a, unsigned int b);
# 2921 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmplts4(unsigned int a, unsigned int b);
# 2932 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpltu4(unsigned int a, unsigned int b);
# 2943 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vcmpne4(unsigned int a, unsigned int b);
# 2954 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsdiffu4(unsigned int a, unsigned int b);
# 2965 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmaxs4(unsigned int a, unsigned int b);
# 2976 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmaxu4(unsigned int a, unsigned int b);
# 2987 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vmins4(unsigned int a, unsigned int b);
# 2998 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vminu4(unsigned int a, unsigned int b);
# 3009 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vseteq4(unsigned int a, unsigned int b);
# 3020 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetles4(unsigned int a, unsigned int b);
# 3031 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetleu4(unsigned int a, unsigned int b);
# 3042 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetlts4(unsigned int a, unsigned int b);
# 3053 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetltu4(unsigned int a, unsigned int b);
# 3064 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetges4(unsigned int a, unsigned int b);
# 3075 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgeu4(unsigned int a, unsigned int b);
# 3086 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgts4(unsigned int a, unsigned int b);
# 3097 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetgtu4(unsigned int a, unsigned int b);
# 3108 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsetne4(unsigned int a, unsigned int b);
# 3119 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsadu4(unsigned int a, unsigned int b);
# 3130 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsub4(unsigned int a, unsigned int b);
# 3141 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsubss4(unsigned int a, unsigned int b);
# 3152 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsubus4(unsigned int a, unsigned int b);
# 3162 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vneg4(unsigned int a);
# 3172 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vnegss4(unsigned int a);
# 3183 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vabsdiffs4(unsigned int a, unsigned int b);
# 3194 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
__attribute__((device)) __attribute__((cudart_builtin)) __attribute__((device_builtin)) unsigned int __vsads4(unsigned int a, unsigned int b);






}







static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) int mulhi(int a, int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int mulhi(unsigned int a, unsigned int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int mulhi(int a, unsigned int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int mulhi(unsigned int a, int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) long long int mul64hi(long long int a, long long int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int mul64hi(long long int a, unsigned long long int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned long long int mul64hi(unsigned long long int a, long long int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) int float_as_int(float a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float int_as_float(int a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int float_as_uint(float a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float uint_as_float(unsigned int a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float saturate(float a);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) int mul24(int a, int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int umul24(unsigned int a, unsigned int b);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) int float2int(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) unsigned int float2uint(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float int2float(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) float uint2float(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);
# 3259 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.hpp" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.hpp" 2
# 80 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.hpp"
static __inline__ __attribute__((device)) int mulhi(int a, int b)
{
  return __mulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, unsigned int b)
{
  return __umulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(int a, unsigned int b)
{
  return __umulhi((unsigned int)a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, int b)
{
  return __umulhi(a, (unsigned int)b);
}

static __inline__ __attribute__((device)) long long int mul64hi(long long int a, long long int b)
{
  return __mul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b)
{
  return __umul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(long long int a, unsigned long long int b)
{
  return __umul64hi((unsigned long long int)a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, long long int b)
{
  return __umul64hi(a, (unsigned long long int)b);
}

static __inline__ __attribute__((device)) int float_as_int(float a)
{
  return __float_as_int(a);
}

static __inline__ __attribute__((device)) float int_as_float(int a)
{
  return __int_as_float(a);
}

static __inline__ __attribute__((device)) unsigned int float_as_uint(float a)
{
  return __float_as_uint(a);
}

static __inline__ __attribute__((device)) float uint_as_float(unsigned int a)
{
  return __uint_as_float(a);
}
static __inline__ __attribute__((device)) float saturate(float a)
{
  return __saturatef(a);
}

static __inline__ __attribute__((device)) int mul24(int a, int b)
{
  return __mul24(a, b);
}

static __inline__ __attribute__((device)) unsigned int umul24(unsigned int a, unsigned int b)
{
  return __umul24(a, b);
}

static __inline__ __attribute__((device)) int float2int(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2int_rn(a) :
         mode == cudaRoundPosInf ? __float2int_ru(a) :
         mode == cudaRoundMinInf ? __float2int_rd(a) :
                                    __float2int_rz(a);
}

static __inline__ __attribute__((device)) unsigned int float2uint(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2uint_rn(a) :
         mode == cudaRoundPosInf ? __float2uint_ru(a) :
         mode == cudaRoundMinInf ? __float2uint_rd(a) :
                                    __float2uint_rz(a);
}

static __inline__ __attribute__((device)) float int2float(int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __int2float_rz(a) :
         mode == cudaRoundPosInf ? __int2float_ru(a) :
         mode == cudaRoundMinInf ? __int2float_rd(a) :
                                   __int2float_rn(a);
}

static __inline__ __attribute__((device)) float uint2float(unsigned int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __uint2float_rz(a) :
         mode == cudaRoundPosInf ? __uint2float_ru(a) :
         mode == cudaRoundMinInf ? __uint2float_rd(a) :
                                   __uint2float_rn(a);
}
# 3260 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2


# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.h" 1
# 67 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 68 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.h" 2








extern "C"
{
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicAdd(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicAdd(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicExch(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicExch(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) float __fAtomicExch(float *address, float val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicMin(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicMin(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicMax(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicMax(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicInc(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicDec(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicAnd(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicAnd(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicOr(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicOr(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicXor(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicXor(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicCAS(int *address, int compare, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicCAS(unsigned int *address, unsigned int compare, unsigned int val);
}
# 107 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.h"
static __inline__ __attribute__((device)) int atomicAdd(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicAdd(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicSub(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicSub(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicExch(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicExch(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) float atomicExch(float *address, float val) ;

static __inline__ __attribute__((device)) int atomicMin(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicMin(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicMax(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicMax(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) unsigned int atomicInc(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) unsigned int atomicDec(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicAnd(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicAnd(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicOr(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicOr(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicXor(int *address, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicXor(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device)) int atomicCAS(int *address, int compare, int val) ;

static __inline__ __attribute__((device)) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val) ;








# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 156 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 157 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.h" 2
# 173 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.h"
extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __ullAtomicAdd(unsigned long long int *address, unsigned long long int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __ullAtomicExch(unsigned long long int *address, unsigned long long int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __ullAtomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val);

extern __attribute__((device)) __attribute__((device_builtin)) __attribute__((deprecated("__any""() is not valid on compute_70 and above, and should be replaced with ""__any""_sync()." "To continue using ""__any""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) int __any(int cond);
extern __attribute__((device)) __attribute__((device_builtin)) __attribute__((deprecated("__all""() is not valid on compute_70 and above, and should be replaced with ""__all""_sync()." "To continue using ""__all""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) int __all(int cond);
}
# 191 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.h"
static __inline__ __attribute__((device)) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val) ;

static __inline__ __attribute__((device)) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val) ;

static __inline__ __attribute__((device)) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val) ;

static __inline__ __attribute__((device)) __attribute__((deprecated("__any""() is not valid on compute_70 and above, and should be replaced with ""__any""_sync()." "To continue using ""__any""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) bool any(bool cond) ;

static __inline__ __attribute__((device)) __attribute__((deprecated("__all""() is not valid on compute_70 and above, and should be replaced with ""__all""_sync()." "To continue using ""__all""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) bool all(bool cond) ;
# 210 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.hpp" 1
# 67 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 68 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.hpp" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.hpp" 2







static __inline__ __attribute__((device)) int atomicAdd(int *address, int val)
{
  return __iAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicAdd(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) int atomicSub(int *address, int val)
{
  return __iAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device)) unsigned int atomicSub(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device)) int atomicExch(int *address, int val)
{
  return __iAtomicExch(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicExch(unsigned int *address, unsigned int val)
{
  return __uAtomicExch(address, val);
}

static __inline__ __attribute__((device)) float atomicExch(float *address, float val)
{
  return __fAtomicExch(address, val);
}

static __inline__ __attribute__((device)) int atomicMin(int *address, int val)
{
  return __iAtomicMin(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicMin(unsigned int *address, unsigned int val)
{
  return __uAtomicMin(address, val);
}

static __inline__ __attribute__((device)) int atomicMax(int *address, int val)
{
  return __iAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicMax(unsigned int *address, unsigned int val)
{
  return __uAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicInc(unsigned int *address, unsigned int val)
{
  return __uAtomicInc(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicDec(unsigned int *address, unsigned int val)
{
  return __uAtomicDec(address, val);
}

static __inline__ __attribute__((device)) int atomicAnd(int *address, int val)
{
  return __iAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicAnd(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) int atomicOr(int *address, int val)
{
  return __iAtomicOr(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicOr(unsigned int *address, unsigned int val)
{
  return __uAtomicOr(address, val);
}

static __inline__ __attribute__((device)) int atomicXor(int *address, int val)
{
  return __iAtomicXor(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicXor(unsigned int *address, unsigned int val)
{
  return __uAtomicXor(address, val);
}

static __inline__ __attribute__((device)) int atomicCAS(int *address, int compare, int val)
{
  return __iAtomicCAS(address, compare, val);
}

static __inline__ __attribute__((device)) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val)
{
  return __uAtomicCAS(address, compare, val);
}








# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 188 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.hpp" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 189 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.hpp" 2







static __inline__ __attribute__((device)) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicExch(address, val);
}

static __inline__ __attribute__((device)) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val)
{
  return __ullAtomicCAS(address, compare, val);
}

static __inline__ __attribute__((device)) bool any(bool cond)
{
  return (bool)__any((int)cond);
}

static __inline__ __attribute__((device)) bool all(bool cond)
{
  return (bool)__all((int)cond);
}
# 211 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_atomic_functions.h" 2
# 3263 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h" 1
# 73 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 74 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h" 2



extern "C"
{
# 87 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double_as_longlong(double x);
# 96 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __longlong_as_double(long long int x);
# 253 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rn(double x, double y, double z);
# 410 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rz(double x, double y, double z);
# 567 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_ru(double x, double y, double z);
# 724 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rd(double x, double y, double z);
# 736 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rn(double x, double y);
# 748 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rz(double x, double y);
# 760 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_ru(double x, double y);
# 772 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rd(double x, double y);
# 784 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rn(double x, double y);
# 796 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rz(double x, double y);
# 808 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_ru(double x, double y);
# 820 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rd(double x, double y);
# 832 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rn(double x, double y);
# 844 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rz(double x, double y);
# 856 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_ru(double x, double y);
# 868 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rd(double x, double y);
# 877 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rn(double x);
# 886 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rz(double x);
# 895 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_ru(double x);
# 904 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rd(double x);
# 913 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rn(double x);
# 922 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_ru(double x);
# 931 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rd(double x);
# 940 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rn(double x);
# 949 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_ru(double x);
# 958 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rd(double x);
# 967 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rn(double x);
# 976 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_ru(double x);
# 985 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rd(double x);
# 994 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rn(double x);
# 1003 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_ru(double x);
# 1012 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rd(double x);







extern __attribute__((device)) __attribute__((device_builtin)) double __int2double_rn(int x);







extern __attribute__((device)) __attribute__((device_builtin)) double __uint2double_rn(unsigned int x);
# 1037 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rn(long long int x);
# 1046 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rz(long long int x);
# 1055 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_ru(long long int x);
# 1064 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rd(long long int x);
# 1073 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rn(unsigned long long int x);
# 1082 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rz(unsigned long long int x);
# 1091 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_ru(unsigned long long int x);
# 1100 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rd(unsigned long long int x);
# 1109 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2hiint(double x);
# 1118 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2loint(double x);
# 1128 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __hiloint2double(int hi, int lo);
}







static __inline__ __attribute__((device)) double fma(double a, double b, double c, enum cudaRoundMode mode);

static __inline__ __attribute__((device)) double dmul(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double dadd(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double dsub(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) int double2int(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) unsigned int double2uint(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) long long int double2ll(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) unsigned long long int double2ull(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) double ll2double(long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double ull2double(unsigned long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double int2double(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double uint2double(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double float2double(float a, enum cudaRoundMode mode = cudaRoundNearest);







# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.hpp" 1
# 73 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 74 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.hpp" 2
# 83 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.hpp"
static __inline__ __attribute__((device)) double fma(double a, double b, double c, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __fma_rz(a, b, c) :
         mode == cudaRoundPosInf ? __fma_ru(a, b, c) :
         mode == cudaRoundMinInf ? __fma_rd(a, b, c) :
                                   __fma_rn(a, b, c);
}

static __inline__ __attribute__((device)) double dmul(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dmul_rz(a, b) :
         mode == cudaRoundPosInf ? __dmul_ru(a, b) :
         mode == cudaRoundMinInf ? __dmul_rd(a, b) :
                                   __dmul_rn(a, b);
}

static __inline__ __attribute__((device)) double dadd(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dadd_rz(a, b) :
         mode == cudaRoundPosInf ? __dadd_ru(a, b) :
         mode == cudaRoundMinInf ? __dadd_rd(a, b) :
                                   __dadd_rn(a, b);
}

static __inline__ __attribute__((device)) double dsub(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dsub_rz(a, b) :
         mode == cudaRoundPosInf ? __dsub_ru(a, b) :
         mode == cudaRoundMinInf ? __dsub_rd(a, b) :
                                   __dsub_rn(a, b);
}

static __inline__ __attribute__((device)) int double2int(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2int_rn(a) :
         mode == cudaRoundPosInf ? __double2int_ru(a) :
         mode == cudaRoundMinInf ? __double2int_rd(a) :
                                    __double2int_rz(a);
}

static __inline__ __attribute__((device)) unsigned int double2uint(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2uint_rn(a) :
         mode == cudaRoundPosInf ? __double2uint_ru(a) :
         mode == cudaRoundMinInf ? __double2uint_rd(a) :
                                    __double2uint_rz(a);
}

static __inline__ __attribute__((device)) long long int double2ll(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ll_rn(a) :
         mode == cudaRoundPosInf ? __double2ll_ru(a) :
         mode == cudaRoundMinInf ? __double2ll_rd(a) :
                                    __double2ll_rz(a);
}

static __inline__ __attribute__((device)) unsigned long long int double2ull(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ull_rn(a) :
         mode == cudaRoundPosInf ? __double2ull_ru(a) :
         mode == cudaRoundMinInf ? __double2ull_rd(a) :
                                    __double2ull_rz(a);
}

static __inline__ __attribute__((device)) double ll2double(long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __ll2double_rz(a) :
         mode == cudaRoundPosInf ? __ll2double_ru(a) :
         mode == cudaRoundMinInf ? __ll2double_rd(a) :
                                   __ll2double_rn(a);
}

static __inline__ __attribute__((device)) double ull2double(unsigned long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __ull2double_rz(a) :
         mode == cudaRoundPosInf ? __ull2double_ru(a) :
         mode == cudaRoundMinInf ? __ull2double_rd(a) :
                                   __ull2double_rn(a);
}

static __inline__ __attribute__((device)) double int2double(int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline__ __attribute__((device)) double uint2double(unsigned int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline__ __attribute__((device)) double float2double(float a, enum cudaRoundMode mode)
{
  return (double)a;
}
# 1169 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_double_functions.h" 2
# 3264 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_atomic_functions.h" 1
# 67 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_atomic_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 68 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_atomic_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_atomic_functions.h" 2
# 78 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_atomic_functions.h"
extern "C"
{
extern __attribute__((device)) __attribute__((device_builtin)) float __fAtomicAdd(float *address, float val);
}
# 90 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_atomic_functions.h"
static __inline__ __attribute__((device)) float atomicAdd(float *address, float val) ;








# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_atomic_functions.hpp" 1
# 67 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_atomic_functions.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 68 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_atomic_functions.hpp" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_atomic_functions.hpp" 2







static __inline__ __attribute__((device)) float atomicAdd(float *address, float val)
{
  return __fAtomicAdd(address, val);
}
# 99 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_atomic_functions.h" 2
# 3265 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_atomic_functions.h" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_atomic_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_atomic_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 71 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_atomic_functions.h" 2
# 80 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_atomic_functions.h"
extern "C"
{
extern __attribute__((device)) __attribute__((device_builtin)) long long __illAtomicMin(long long *address, long long val);
extern __attribute__((device)) __attribute__((device_builtin)) long long __illAtomicMax(long long *address, long long val);
extern __attribute__((device)) __attribute__((device_builtin)) long long __llAtomicAnd(long long *address, long long val);
extern __attribute__((device)) __attribute__((device_builtin)) long long __llAtomicOr(long long *address, long long val);
extern __attribute__((device)) __attribute__((device_builtin)) long long __llAtomicXor(long long *address, long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicMin(unsigned long long *address, unsigned long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicMax(unsigned long long *address, unsigned long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicAnd(unsigned long long *address, unsigned long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicOr (unsigned long long *address, unsigned long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicXor(unsigned long long *address, unsigned long long val);
}
# 101 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_atomic_functions.h"
static __inline__ __attribute__((device)) long long atomicMin(long long *address, long long val) ;

static __inline__ __attribute__((device)) long long atomicMax(long long *address, long long val) ;

static __inline__ __attribute__((device)) long long atomicAnd(long long *address, long long val) ;

static __inline__ __attribute__((device)) long long atomicOr(long long *address, long long val) ;

static __inline__ __attribute__((device)) long long atomicXor(long long *address, long long val) ;

static __inline__ __attribute__((device)) unsigned long long atomicMin(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device)) unsigned long long atomicMax(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device)) unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device)) unsigned long long atomicOr(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device)) unsigned long long atomicXor(unsigned long long *address, unsigned long long val) ;
# 129 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_atomic_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_atomic_functions.hpp" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_atomic_functions.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_atomic_functions.hpp" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 71 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_atomic_functions.hpp" 2







static __inline__ __attribute__((device)) long long atomicMin(long long *address, long long val)
{
    return __illAtomicMin(address, val);
}

static __inline__ __attribute__((device)) long long atomicMax(long long *address, long long val)
{
    return __illAtomicMax(address, val);
}

static __inline__ __attribute__((device)) long long atomicAnd(long long *address, long long val)
{
    return __llAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) long long atomicOr(long long *address, long long val)
{
    return __llAtomicOr(address, val);
}

static __inline__ __attribute__((device)) long long atomicXor(long long *address, long long val)
{
    return __llAtomicXor(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicMin(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMin(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicMax(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicAnd(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicOr(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicOr(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicXor(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicXor(address, val);
}
# 130 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_atomic_functions.h" 2
# 3266 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_35_atomic_functions.h" 1
# 3267 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_60_atomic_functions.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_60_atomic_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 71 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_60_atomic_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 72 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_60_atomic_functions.h" 2
# 82 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_60_atomic_functions.h"
extern "C"
{
extern __attribute__((device)) __attribute__((device_builtin)) double __dAtomicAdd(double *address, double val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicAdd_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicAdd_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicAdd_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicAdd_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicAdd_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicAdd_system(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
float __fAtomicAdd_block(float *address, float val);

extern __attribute__((device)) __attribute__((device_builtin))
float __fAtomicAdd_system(float *address, float val);

extern __attribute__((device)) __attribute__((device_builtin))
double __dAtomicAdd_block(double *address, double val);

extern __attribute__((device)) __attribute__((device_builtin))
double __dAtomicAdd_system(double *address, double val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicExch_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicExch_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicExch_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicExch_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicExch_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicExch_system(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
float __fAtomicExch_block(float *address, float val);

extern __attribute__((device)) __attribute__((device_builtin))
float __fAtomicExch_system(float *address, float val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicMin_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicMin_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __illAtomicMin_block(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __illAtomicMin_system(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicMin_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicMin_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicMin_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicMin_system(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicMax_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicMax_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __illAtomicMax_block(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __illAtomicMax_system(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicMax_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicMax_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicMax_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicMax_system(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicInc_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicInc_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicDec_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicDec_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicCAS_block(int *address, int compare, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicCAS_system(int *address, int compare, int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicCAS_block(unsigned int *address, unsigned int compare,
                                unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicCAS_system(unsigned int *address, unsigned int compare,
                                 unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicCAS_block(unsigned long long int *address,
                                        unsigned long long int compare,
                                        unsigned long long int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicCAS_system(unsigned long long int *address,
                                         unsigned long long int compare,
                                         unsigned long long int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicAnd_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicAnd_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __llAtomicAnd_block(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __llAtomicAnd_system(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicAnd_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicAnd_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicAnd_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicAnd_system(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicOr_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicOr_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __llAtomicOr_block(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __llAtomicOr_system(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicOr_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicOr_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicOr_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicOr_system(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicXor_block(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
int __iAtomicXor_system(int *address, int val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __llAtomicXor_block(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
long long __llAtomicXor_system(long long *address, long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicXor_block(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned int __uAtomicXor_system(unsigned int *address, unsigned int val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicXor_block(unsigned long long *address, unsigned long long val);

extern __attribute__((device)) __attribute__((device_builtin))
unsigned long long __ullAtomicXor_system(unsigned long long *address, unsigned long long val);
}
# 304 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_60_atomic_functions.h"
static __inline__ __attribute__((device)) double atomicAdd(double *address, double val) ;

static __inline__ __attribute__((device))
int atomicAdd_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicAdd_system(int *address, int val) ;

static __inline__ __attribute__((device))
unsigned int atomicAdd_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicAdd_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
float atomicAdd_block(float *address, float val) ;

static __inline__ __attribute__((device))
float atomicAdd_system(float *address, float val) ;

static __inline__ __attribute__((device))
double atomicAdd_block(double *address, double val) ;

static __inline__ __attribute__((device))
double atomicAdd_system(double *address, double val) ;

static __inline__ __attribute__((device))
int atomicSub_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicSub_system(int *address, int val) ;

static __inline__ __attribute__((device))
unsigned int atomicSub_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicSub_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
int atomicExch_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicExch_system(int *address, int val) ;

static __inline__ __attribute__((device))
unsigned int atomicExch_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicExch_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
float atomicExch_block(float *address, float val) ;

static __inline__ __attribute__((device))
float atomicExch_system(float *address, float val) ;

static __inline__ __attribute__((device))
int atomicMin_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicMin_system(int *address, int val) ;

static __inline__ __attribute__((device))
long long atomicMin_block(long long *address, long long val) ;

static __inline__ __attribute__((device))
long long atomicMin_system(long long *address, long long val) ;

static __inline__ __attribute__((device))
unsigned int atomicMin_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicMin_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
int atomicMax_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicMax_system(int *address, int val) ;

static __inline__ __attribute__((device))
long long atomicMax_block(long long *address, long long val) ;

static __inline__ __attribute__((device))
long long atomicMax_system(long long *address, long long val) ;

static __inline__ __attribute__((device))
unsigned int atomicMax_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicMax_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned int atomicInc_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicInc_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicDec_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicDec_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
int atomicCAS_block(int *address, int compare, int val) ;

static __inline__ __attribute__((device))
int atomicCAS_system(int *address, int compare, int val) ;

static __inline__ __attribute__((device))
unsigned int atomicCAS_block(unsigned int *address, unsigned int compare,
                             unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicCAS_system(unsigned int *address, unsigned int compare,
                              unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long int atomicCAS_block(unsigned long long int *address,
                                       unsigned long long int compare,
                                       unsigned long long int val) ;

static __inline__ __attribute__((device))
unsigned long long int atomicCAS_system(unsigned long long int *address,
                                        unsigned long long int compare,
                                        unsigned long long int val) ;

static __inline__ __attribute__((device))
int atomicAnd_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicAnd_system(int *address, int val) ;

static __inline__ __attribute__((device))
long long atomicAnd_block(long long *address, long long val) ;

static __inline__ __attribute__((device))
long long atomicAnd_system(long long *address, long long val) ;

static __inline__ __attribute__((device))
unsigned int atomicAnd_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicAnd_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
int atomicOr_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicOr_system(int *address, int val) ;

static __inline__ __attribute__((device))
long long atomicOr_block(long long *address, long long val) ;

static __inline__ __attribute__((device))
long long atomicOr_system(long long *address, long long val) ;

static __inline__ __attribute__((device))
unsigned int atomicOr_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicOr_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
int atomicXor_block(int *address, int val) ;

static __inline__ __attribute__((device))
int atomicXor_system(int *address, int val) ;

static __inline__ __attribute__((device))
long long atomicXor_block(long long *address, long long val) ;

static __inline__ __attribute__((device))
long long atomicXor_system(long long *address, long long val) ;

static __inline__ __attribute__((device))
unsigned int atomicXor_block(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned int atomicXor_system(unsigned int *address, unsigned int val) ;

static __inline__ __attribute__((device))
unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) ;

static __inline__ __attribute__((device))
unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) ;
# 536 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_60_atomic_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_60_atomic_functions.hpp" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_60_atomic_functions.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_60_atomic_functions.hpp" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 71 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_60_atomic_functions.hpp" 2







static __inline__ __attribute__((device)) double atomicAdd(double *address, double val)
{
  return __dAtomicAdd(address, val);
}

static __inline__ __attribute__((device))
int atomicAdd_block(int *address, int val)
{
  return __iAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
int atomicAdd_system(int *address, int val)
{
  return __iAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicAdd_block(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicAdd_system(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
float atomicAdd_block(float *address, float val)
{
  return __fAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
float atomicAdd_system(float *address, float val)
{
  return __fAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
double atomicAdd_block(double *address, double val)
{
  return __dAtomicAdd_block(address, val);
}

static __inline__ __attribute__((device))
double atomicAdd_system(double *address, double val)
{
  return __dAtomicAdd_system(address, val);
}

static __inline__ __attribute__((device))
int atomicSub_block(int *address, int val)
{
  return __iAtomicAdd_block(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device))
int atomicSub_system(int *address, int val)
{
  return __iAtomicAdd_system(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device))
unsigned int atomicSub_block(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd_block(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device))
unsigned int atomicSub_system(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd_system(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device))
int atomicExch_block(int *address, int val)
{
  return __iAtomicExch_block(address, val);
}

static __inline__ __attribute__((device))
int atomicExch_system(int *address, int val)
{
  return __iAtomicExch_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicExch_block(unsigned int *address, unsigned int val)
{
  return __uAtomicExch_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicExch_system(unsigned int *address, unsigned int val)
{
  return __uAtomicExch_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicExch_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicExch_system(address, val);
}

static __inline__ __attribute__((device))
float atomicExch_block(float *address, float val)
{
  return __fAtomicExch_block(address, val);
}

static __inline__ __attribute__((device))
float atomicExch_system(float *address, float val)
{
  return __fAtomicExch_system(address, val);
}

static __inline__ __attribute__((device))
int atomicMin_block(int *address, int val)
{
  return __iAtomicMin_block(address, val);
}

static __inline__ __attribute__((device))
int atomicMin_system(int *address, int val)
{
  return __iAtomicMin_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicMin_block(long long *address, long long val)
{
  return __illAtomicMin_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicMin_system(long long *address, long long val)
{
  return __illAtomicMin_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicMin_block(unsigned int *address, unsigned int val)
{
  return __uAtomicMin_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicMin_system(unsigned int *address, unsigned int val)
{
  return __uAtomicMin_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMin_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMin_system(address, val);
}

static __inline__ __attribute__((device))
int atomicMax_block(int *address, int val)
{
  return __iAtomicMax_block(address, val);
}

static __inline__ __attribute__((device))
int atomicMax_system(int *address, int val)
{
  return __iAtomicMax_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicMax_block(long long *address, long long val)
{
  return __illAtomicMax_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicMax_system(long long *address, long long val)
{
  return __illAtomicMax_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicMax_block(unsigned int *address, unsigned int val)
{
  return __uAtomicMax_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicMax_system(unsigned int *address, unsigned int val)
{
  return __uAtomicMax_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMax_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicMax_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicInc_block(unsigned int *address, unsigned int val)
{
  return __uAtomicInc_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicInc_system(unsigned int *address, unsigned int val)
{
  return __uAtomicInc_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicDec_block(unsigned int *address, unsigned int val)
{
  return __uAtomicDec_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicDec_system(unsigned int *address, unsigned int val)
{
  return __uAtomicDec_system(address, val);
}

static __inline__ __attribute__((device))
int atomicCAS_block(int *address, int compare, int val)
{
  return __iAtomicCAS_block(address, compare, val);
}

static __inline__ __attribute__((device))
int atomicCAS_system(int *address, int compare, int val)
{
  return __iAtomicCAS_system(address, compare, val);
}

static __inline__ __attribute__((device))
unsigned int atomicCAS_block(unsigned int *address, unsigned int compare,
                             unsigned int val)
{
  return __uAtomicCAS_block(address, compare, val);
}

static __inline__ __attribute__((device))
unsigned int atomicCAS_system(unsigned int *address, unsigned int compare,
                              unsigned int val)
{
  return __uAtomicCAS_system(address, compare, val);
}

static __inline__ __attribute__((device))
unsigned long long int atomicCAS_block(unsigned long long int *address,
                                       unsigned long long int compare,
                                       unsigned long long int val)
{
  return __ullAtomicCAS_block(address, compare, val);
}

static __inline__ __attribute__((device))
unsigned long long int atomicCAS_system(unsigned long long int *address,
                                        unsigned long long int compare,
                                        unsigned long long int val)
{
  return __ullAtomicCAS_system(address, compare, val);
}

static __inline__ __attribute__((device))
int atomicAnd_block(int *address, int val)
{
  return __iAtomicAnd_block(address, val);
}

static __inline__ __attribute__((device))
int atomicAnd_system(int *address, int val)
{
  return __iAtomicAnd_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicAnd_block(long long *address, long long val)
{
  return __llAtomicAnd_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicAnd_system(long long *address, long long val)
{
  return __llAtomicAnd_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicAnd_block(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicAnd_system(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAnd_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicAnd_system(address, val);
}

static __inline__ __attribute__((device))
int atomicOr_block(int *address, int val)
{
  return __iAtomicOr_block(address, val);
}

static __inline__ __attribute__((device))
int atomicOr_system(int *address, int val)
{
  return __iAtomicOr_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicOr_block(long long *address, long long val)
{
  return __llAtomicOr_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicOr_system(long long *address, long long val)
{
  return __llAtomicOr_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicOr_block(unsigned int *address, unsigned int val)
{
  return __uAtomicOr_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicOr_system(unsigned int *address, unsigned int val)
{
  return __uAtomicOr_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicOr_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicOr_system(address, val);
}

static __inline__ __attribute__((device))
int atomicXor_block(int *address, int val)
{
  return __iAtomicXor_block(address, val);
}

static __inline__ __attribute__((device))
int atomicXor_system(int *address, int val)
{
  return __iAtomicXor_system(address, val);
}

static __inline__ __attribute__((device))
long long atomicXor_block(long long *address, long long val)
{
  return __llAtomicXor_block(address, val);
}

static __inline__ __attribute__((device))
long long atomicXor_system(long long *address, long long val)
{
  return __llAtomicXor_system(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicXor_block(unsigned int *address, unsigned int val)
{
  return __uAtomicXor_block(address, val);
}

static __inline__ __attribute__((device))
unsigned int atomicXor_system(unsigned int *address, unsigned int val)
{
  return __uAtomicXor_system(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicXor_block(address, val);
}

static __inline__ __attribute__((device))
unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val)
{
  return __ullAtomicXor_system(address, val);
}
# 537 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_60_atomic_functions.h" 2
# 3268 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h" 1
# 67 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 68 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h" 2

# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h" 2
# 92 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern "C"
{
extern __attribute__((device)) __attribute__((device_builtin)) void __threadfence_system(void);
# 106 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_rn(double x, double y);
# 118 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_rz(double x, double y);
# 130 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_ru(double x, double y);
# 142 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_rd(double x, double y);
# 176 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_rn(double x);
# 210 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_rz(double x);
# 244 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_ru(double x);
# 278 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_rd(double x);
# 310 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_rn(double x);
# 342 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_rz(double x);
# 374 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_ru(double x);
# 406 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_rd(double x);
extern __attribute__((device)) __attribute__((device_builtin)) __attribute__((deprecated("__ballot""() is not valid on compute_70 and above, and should be replaced with ""__ballot""_sync()." "To continue using ""__ballot""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned int __ballot(int);
extern __attribute__((device)) __attribute__((device_builtin)) int __syncthreads_count(int);
extern __attribute__((device)) __attribute__((device_builtin)) int __syncthreads_and(int);
extern __attribute__((device)) __attribute__((device_builtin)) int __syncthreads_or(int);
extern __attribute__((device)) __attribute__((device_builtin)) long long int clock64(void);






extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_rn(float, float, float);
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_rz(float, float, float);
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_ru(float, float, float);
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_rd(float, float, float);
# 433 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double_as_longlong(double x);
# 442 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __longlong_as_double(long long int x);
# 599 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rn(double x, double y, double z);
# 756 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rz(double x, double y, double z);
# 913 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_ru(double x, double y, double z);
# 1070 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rd(double x, double y, double z);
# 1082 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rn(double x, double y);
# 1094 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rz(double x, double y);
# 1106 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_ru(double x, double y);
# 1118 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rd(double x, double y);
# 1130 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rn(double x, double y);
# 1142 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rz(double x, double y);
# 1154 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_ru(double x, double y);
# 1166 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rd(double x, double y);
# 1178 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rn(double x, double y);
# 1190 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rz(double x, double y);
# 1202 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_ru(double x, double y);
# 1214 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rd(double x, double y);
# 1223 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rn(double x);
# 1232 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rz(double x);
# 1241 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_ru(double x);
# 1250 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rd(double x);
# 1259 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rn(double x);
# 1268 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_ru(double x);
# 1277 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rd(double x);
# 1286 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rn(double x);
# 1295 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_ru(double x);
# 1304 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rd(double x);
# 1313 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rn(double x);
# 1322 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_ru(double x);
# 1331 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rd(double x);
# 1340 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rn(double x);
# 1349 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_ru(double x);
# 1358 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rd(double x);







extern __attribute__((device)) __attribute__((device_builtin)) double __int2double_rn(int x);







extern __attribute__((device)) __attribute__((device_builtin)) double __uint2double_rn(unsigned int x);
# 1383 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rn(long long int x);
# 1392 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rz(long long int x);
# 1401 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_ru(long long int x);
# 1410 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rd(long long int x);
# 1419 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rn(unsigned long long int x);
# 1428 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rz(unsigned long long int x);
# 1437 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_ru(unsigned long long int x);
# 1446 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rd(unsigned long long int x);
# 1455 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2hiint(double x);
# 1464 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2loint(double x);
# 1474 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __hiloint2double(int hi, int lo);


}






static __inline__ __attribute__((device)) __attribute__((deprecated("__ballot""() is not valid on compute_70 and above, and should be replaced with ""__ballot""_sync()." "To continue using ""__ballot""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned int ballot(bool pred) ;

static __inline__ __attribute__((device)) int syncthreads_count(bool pred) ;

static __inline__ __attribute__((device)) bool syncthreads_and(bool pred) ;

static __inline__ __attribute__((device)) bool syncthreads_or(bool pred) ;






static __inline__ __attribute__((device)) unsigned int __isGlobal(const void *ptr) ;








# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.hpp" 1
# 67 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 68 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.hpp" 2

# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.hpp" 2







static __inline__ __attribute__((device)) unsigned int ballot(bool pred)
{
  return __ballot((int)pred);
}

static __inline__ __attribute__((device)) int syncthreads_count(bool pred)
{
  return __syncthreads_count((int)pred);
}

static __inline__ __attribute__((device)) bool syncthreads_and(bool pred)
{
  return (bool)__syncthreads_and((int)pred);
}

static __inline__ __attribute__((device)) bool syncthreads_or(bool pred)
{
  return (bool)__syncthreads_or((int)pred);
}




static __inline__ __attribute__((device)) unsigned int __isGlobal(const void *ptr)
{
    unsigned int ret;
    asm volatile ("{ \n\t"
                  "    .reg .pred p; \n\t"
                  "    isspacep.global p, %1; \n\t"
                  "    selp.u32 %0, 1, 0, p;  \n\t"

                  "} \n\t" : "=r"(ret) : "l"(ptr));




    return ret;
}
# 1506 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_20_intrinsics.h" 2
# 3269 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_30_intrinsics.h" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_30_intrinsics.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_30_intrinsics.h" 2

# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 72 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_30_intrinsics.h" 2
# 107 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_30_intrinsics.h"
static __attribute__((device)) __inline__ unsigned __fns(unsigned mask, unsigned base, int offset) ;
static __attribute__((device)) __inline__ void __barrier_sync(unsigned id) ;
static __attribute__((device)) __inline__ void __barrier_sync_count(unsigned id, unsigned cnt) ;
static __attribute__((device)) __inline__ void __syncwarp(unsigned mask=0xFFFFFFFF) ;
static __attribute__((device)) __inline__ int __all_sync(unsigned mask, int pred) ;
static __attribute__((device)) __inline__ int __any_sync(unsigned mask, int pred) ;
static __attribute__((device)) __inline__ int __uni_sync(unsigned mask, int pred) ;
static __attribute__((device)) __inline__ unsigned __ballot_sync(unsigned mask, int pred) ;
static __attribute__((device)) __inline__ unsigned __activemask() ;







static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl""() is not valid on compute_70 and above, and should be replaced with ""__shfl""_sync()." "To continue using ""__shfl""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) int __shfl(int var, int srcLane, int width=32) ;
static __attribute__((device)) __inline__ int __shfl_sync(unsigned mask, int var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl""() is not valid on compute_70 and above, and should be replaced with ""__shfl""_sync()." "To continue using ""__shfl""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned int __shfl(unsigned int var, int srcLane, int width=32) ;
static __attribute__((device)) __inline__ unsigned int __shfl_sync(unsigned mask, unsigned int var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_up""() is not valid on compute_70 and above, and should be replaced with ""__shfl_up""_sync()." "To continue using ""__shfl_up""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) int __shfl_up(int var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ int __shfl_up_sync(unsigned mask, int var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_up""() is not valid on compute_70 and above, and should be replaced with ""__shfl_up""_sync()." "To continue using ""__shfl_up""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned int __shfl_up(unsigned int var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ unsigned int __shfl_up_sync(unsigned mask, unsigned int var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_down""() is not valid on compute_70 and above, and should be replaced with ""__shfl_down""_sync()." "To continue using ""__shfl_down""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) int __shfl_down(int var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ int __shfl_down_sync(unsigned mask, int var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_down""() is not valid on compute_70 and above, and should be replaced with ""__shfl_down""_sync()." "To continue using ""__shfl_down""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned int __shfl_down(unsigned int var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ unsigned int __shfl_down_sync(unsigned mask, unsigned int var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_xor""() is not valid on compute_70 and above, and should be replaced with ""__shfl_xor""_sync()." "To continue using ""__shfl_xor""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) int __shfl_xor(int var, int laneMask, int width=32) ;
static __attribute__((device)) __inline__ int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_xor""() is not valid on compute_70 and above, and should be replaced with ""__shfl_xor""_sync()." "To continue using ""__shfl_xor""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned int __shfl_xor(unsigned int var, int laneMask, int width=32) ;
static __attribute__((device)) __inline__ unsigned int __shfl_xor_sync(unsigned mask, unsigned int var, int laneMask, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl""() is not valid on compute_70 and above, and should be replaced with ""__shfl""_sync()." "To continue using ""__shfl""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) float __shfl(float var, int srcLane, int width=32) ;
static __attribute__((device)) __inline__ float __shfl_sync(unsigned mask, float var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_up""() is not valid on compute_70 and above, and should be replaced with ""__shfl_up""_sync()." "To continue using ""__shfl_up""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) float __shfl_up(float var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ float __shfl_up_sync(unsigned mask, float var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_down""() is not valid on compute_70 and above, and should be replaced with ""__shfl_down""_sync()." "To continue using ""__shfl_down""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) float __shfl_down(float var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ float __shfl_down_sync(unsigned mask, float var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_xor""() is not valid on compute_70 and above, and should be replaced with ""__shfl_xor""_sync()." "To continue using ""__shfl_xor""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) float __shfl_xor(float var, int laneMask, int width=32) ;
static __attribute__((device)) __inline__ float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width=32) ;


static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl""() is not valid on compute_70 and above, and should be replaced with ""__shfl""_sync()." "To continue using ""__shfl""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) long long __shfl(long long var, int srcLane, int width=32) ;
static __attribute__((device)) __inline__ long long __shfl_sync(unsigned mask, long long var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl""() is not valid on compute_70 and above, and should be replaced with ""__shfl""_sync()." "To continue using ""__shfl""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned long long __shfl(unsigned long long var, int srcLane, int width=32) ;
static __attribute__((device)) __inline__ unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_up""() is not valid on compute_70 and above, and should be replaced with ""__shfl_up""_sync()." "To continue using ""__shfl_up""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) long long __shfl_up(long long var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ long long __shfl_up_sync(unsigned mask, long long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_up""() is not valid on compute_70 and above, and should be replaced with ""__shfl_up""_sync()." "To continue using ""__shfl_up""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned long long __shfl_up(unsigned long long var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_down""() is not valid on compute_70 and above, and should be replaced with ""__shfl_down""_sync()." "To continue using ""__shfl_down""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) long long __shfl_down(long long var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ long long __shfl_down_sync(unsigned mask, long long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_down""() is not valid on compute_70 and above, and should be replaced with ""__shfl_down""_sync()." "To continue using ""__shfl_down""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned long long __shfl_down(unsigned long long var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_xor""() is not valid on compute_70 and above, and should be replaced with ""__shfl_xor""_sync()." "To continue using ""__shfl_xor""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) long long __shfl_xor(long long var, int laneMask, int width=32) ;
static __attribute__((device)) __inline__ long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_xor""() is not valid on compute_70 and above, and should be replaced with ""__shfl_xor""_sync()." "To continue using ""__shfl_xor""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width=32) ;
static __attribute__((device)) __inline__ unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl""() is not valid on compute_70 and above, and should be replaced with ""__shfl""_sync()." "To continue using ""__shfl""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) double __shfl(double var, int srcLane, int width=32) ;
static __attribute__((device)) __inline__ double __shfl_sync(unsigned mask, double var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_up""() is not valid on compute_70 and above, and should be replaced with ""__shfl_up""_sync()." "To continue using ""__shfl_up""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) double __shfl_up(double var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ double __shfl_up_sync(unsigned mask, double var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_down""() is not valid on compute_70 and above, and should be replaced with ""__shfl_down""_sync()." "To continue using ""__shfl_down""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) double __shfl_down(double var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ double __shfl_down_sync(unsigned mask, double var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_xor""() is not valid on compute_70 and above, and should be replaced with ""__shfl_xor""_sync()." "To continue using ""__shfl_xor""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) double __shfl_xor(double var, int laneMask, int width=32) ;
static __attribute__((device)) __inline__ double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width=32) ;



static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl""() is not valid on compute_70 and above, and should be replaced with ""__shfl""_sync()." "To continue using ""__shfl""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) long __shfl(long var, int srcLane, int width=32) ;
static __attribute__((device)) __inline__ long __shfl_sync(unsigned mask, long var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl""() is not valid on compute_70 and above, and should be replaced with ""__shfl""_sync()." "To continue using ""__shfl""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned long __shfl(unsigned long var, int srcLane, int width=32) ;
static __attribute__((device)) __inline__ unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_up""() is not valid on compute_70 and above, and should be replaced with ""__shfl_up""_sync()." "To continue using ""__shfl_up""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) long __shfl_up(long var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ long __shfl_up_sync(unsigned mask, long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_up""() is not valid on compute_70 and above, and should be replaced with ""__shfl_up""_sync()." "To continue using ""__shfl_up""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned long __shfl_up(unsigned long var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_down""() is not valid on compute_70 and above, and should be replaced with ""__shfl_down""_sync()." "To continue using ""__shfl_down""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) long __shfl_down(long var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ long __shfl_down_sync(unsigned mask, long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_down""() is not valid on compute_70 and above, and should be replaced with ""__shfl_down""_sync()." "To continue using ""__shfl_down""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned long __shfl_down(unsigned long var, unsigned int delta, int width=32) ;
static __attribute__((device)) __inline__ unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned int delta, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_xor""() is not valid on compute_70 and above, and should be replaced with ""__shfl_xor""_sync()." "To continue using ""__shfl_xor""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) long __shfl_xor(long var, int laneMask, int width=32) ;
static __attribute__((device)) __inline__ long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width=32) ;

static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_xor""() is not valid on compute_70 and above, and should be replaced with ""__shfl_xor""_sync()." "To continue using ""__shfl_xor""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) unsigned long __shfl_xor(unsigned long var, int laneMask, int width=32) ;
static __attribute__((device)) __inline__ unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width=32) ;
# 238 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_30_intrinsics.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_30_intrinsics.hpp" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_30_intrinsics.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_30_intrinsics.hpp" 2

# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 72 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_30_intrinsics.hpp" 2



extern "C"
{
}
# 91 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_30_intrinsics.hpp"
static __attribute__((device)) __inline__
unsigned __fns(unsigned mask, unsigned base, int offset) {
  extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __nvvm_fns(unsigned int mask, unsigned int base, int offset);
  return __nvvm_fns(mask, base, offset);
}

static __attribute__((device)) __inline__
void __barrier_sync(unsigned id) {
  extern __attribute__((device)) __attribute__((device_builtin)) void __nvvm_barrier_sync(unsigned id);
  return __nvvm_barrier_sync(id);
}

static __attribute__((device)) __inline__
void __barrier_sync_count(unsigned id, unsigned cnt) {
  extern __attribute__((device)) __attribute__((device_builtin)) void __nvvm_barrier_sync_cnt(unsigned id, unsigned cnt);
  return __nvvm_barrier_sync_cnt(id, cnt);
}

static __attribute__((device)) __inline__
void __syncwarp(unsigned mask) {
  extern __attribute__((device)) __attribute__((device_builtin)) void __nvvm_bar_warp_sync(unsigned mask);
  return __nvvm_bar_warp_sync(mask);
}

static __attribute__((device)) __inline__
int __all_sync(unsigned mask, int pred) {
  extern __attribute__((device)) __attribute__((device_builtin)) int __nvvm_vote_all_sync(unsigned int mask, int pred);
  return __nvvm_vote_all_sync(mask, pred);
}

static __attribute__((device)) __inline__
int __any_sync(unsigned mask, int pred) {
  extern __attribute__((device)) __attribute__((device_builtin)) int __nvvm_vote_any_sync(unsigned int mask, int pred);
  return __nvvm_vote_any_sync(mask, pred);
}

static __attribute__((device)) __inline__
int __uni_sync(unsigned mask, int pred) {
  extern __attribute__((device)) __attribute__((device_builtin)) int __nvvm_vote_uni_sync(unsigned int mask, int pred);
  return __nvvm_vote_uni_sync(mask, pred);
}

static __attribute__((device)) __inline__
unsigned __ballot_sync(unsigned mask, int pred) {
  extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __nvvm_vote_ballot_sync(unsigned int mask, int pred);
  return __nvvm_vote_ballot_sync(mask, pred);
}

static __attribute__((device)) __inline__
unsigned __activemask() {
    unsigned ret;
    asm volatile ("activemask.b32 %0;" : "=r"(ret));
    return ret;
}






static __attribute__((device)) __inline__ int __shfl(int var, int srcLane, int width) {
 int ret;
 int c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.idx.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(srcLane), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ int __shfl_sync(unsigned mask, int var, int srcLane, int width) {
        extern __attribute__((device)) __attribute__((device_builtin)) unsigned __nvvm_shfl_idx_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
 int ret;
 int c = ((32 -width) << 8) | 0x1f;
        ret = __nvvm_shfl_idx_sync(mask, var, srcLane, c);
 return ret;
}

static __attribute__((device)) __inline__ unsigned int __shfl(unsigned int var, int srcLane, int width) {
 return (unsigned int) __shfl((int)var, srcLane, width);
}

static __attribute__((device)) __inline__ unsigned int __shfl_sync(unsigned mask, unsigned int var, int srcLane, int width) {
        return (unsigned int) __shfl_sync(mask, (int)var, srcLane, width);
}

static __attribute__((device)) __inline__ int __shfl_up(int var, unsigned int delta, int width) {
 int ret;
 int c = (32 -width) << 8;
 asm volatile ("shfl.up.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(delta), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ int __shfl_up_sync(unsigned mask, int var, unsigned int delta, int width) {
        extern __attribute__((device)) __attribute__((device_builtin)) unsigned __nvvm_shfl_up_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
 int ret;
 int c = (32 -width) << 8;
        ret = __nvvm_shfl_up_sync(mask, var, delta, c);
 return ret;
}

static __attribute__((device)) __inline__ unsigned int __shfl_up(unsigned int var, unsigned int delta, int width) {
 return (unsigned int) __shfl_up((int)var, delta, width);
}

static __attribute__((device)) __inline__ unsigned int __shfl_up_sync(unsigned mask, unsigned int var, unsigned int delta, int width) {
        return (unsigned int) __shfl_up_sync(mask, (int)var, delta, width);
}

static __attribute__((device)) __inline__ int __shfl_down(int var, unsigned int delta, int width) {
 int ret;
 int c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.down.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(delta), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ int __shfl_down_sync(unsigned mask, int var, unsigned int delta, int width) {
        extern __attribute__((device)) __attribute__((device_builtin)) unsigned __nvvm_shfl_down_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
 int ret;
 int c = ((32 -width) << 8) | 0x1f;
        ret = __nvvm_shfl_down_sync(mask, var, delta, c);
 return ret;
}

static __attribute__((device)) __inline__ unsigned int __shfl_down(unsigned int var, unsigned int delta, int width) {
 return (unsigned int) __shfl_down((int)var, delta, width);
}

static __attribute__((device)) __inline__ unsigned int __shfl_down_sync(unsigned mask, unsigned int var, unsigned int delta, int width) {
        return (unsigned int) __shfl_down_sync(mask, (int)var, delta, width);
}

static __attribute__((device)) __inline__ int __shfl_xor(int var, int laneMask, int width) {
 int ret;
 int c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.bfly.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(laneMask), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width) {
        extern __attribute__((device)) __attribute__((device_builtin)) unsigned __nvvm_shfl_bfly_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
 int ret;
 int c = ((32 -width) << 8) | 0x1f;
        ret = __nvvm_shfl_bfly_sync(mask, var, laneMask, c);
 return ret;
}

static __attribute__((device)) __inline__ unsigned int __shfl_xor(unsigned int var, int laneMask, int width) {
 return (unsigned int) __shfl_xor((int)var, laneMask, width);
}

static __attribute__((device)) __inline__ unsigned int __shfl_xor_sync(unsigned mask, unsigned int var, int laneMask, int width) {
 return (unsigned int) __shfl_xor_sync(mask, (int)var, laneMask, width);
}

static __attribute__((device)) __inline__ float __shfl(float var, int srcLane, int width) {
 float ret;
        int c;
 c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.idx.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(srcLane), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ float __shfl_sync(unsigned mask, float var, int srcLane, int width) {
        extern __attribute__((device)) __attribute__((device_builtin)) unsigned __nvvm_shfl_idx_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
        int ret;
        int c;
 c = ((32 -width) << 8) | 0x1f;
        ret = __nvvm_shfl_idx_sync(mask, __float_as_int(var), srcLane, c);
 return __int_as_float(ret);
}

static __attribute__((device)) __inline__ float __shfl_up(float var, unsigned int delta, int width) {
 float ret;
        int c;
 c = (32 -width) << 8;
 asm volatile ("shfl.up.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(delta), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ float __shfl_up_sync(unsigned mask, float var, unsigned int delta, int width) {
        extern __attribute__((device)) __attribute__((device_builtin)) unsigned __nvvm_shfl_up_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
 int ret;
        int c;
 c = (32 -width) << 8;
        ret = __nvvm_shfl_up_sync(mask, __float_as_int(var), delta, c);
 return __int_as_float(ret);
}

static __attribute__((device)) __inline__ float __shfl_down(float var, unsigned int delta, int width) {
 float ret;
        int c;
 c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.down.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(delta), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ float __shfl_down_sync(unsigned mask, float var, unsigned int delta, int width) {
        extern __attribute__((device)) __attribute__((device_builtin)) unsigned __nvvm_shfl_down_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
 int ret;
        int c;
 c = ((32 -width) << 8) | 0x1f;
        ret = __nvvm_shfl_down_sync(mask, __float_as_int(var), delta, c);
 return __int_as_float(ret);
}

static __attribute__((device)) __inline__ float __shfl_xor(float var, int laneMask, int width) {
 float ret;
        int c;
 c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.bfly.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(laneMask), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width) {
        extern __attribute__((device)) __attribute__((device_builtin)) unsigned __nvvm_shfl_bfly_sync(unsigned mask, unsigned a, unsigned b, unsigned c);
 int ret;
        int c;
 c = ((32 -width) << 8) | 0x1f;
        ret = __nvvm_shfl_bfly_sync(mask, __float_as_int(var), laneMask, c);
 return __int_as_float(ret);
}


static __attribute__((device)) __inline__ long long __shfl(long long var, int srcLane, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl(hi, srcLane, width);
 lo = __shfl(lo, srcLane, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ long long __shfl_sync(unsigned mask, long long var, int srcLane, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl_sync(mask, hi, srcLane, width);
 lo = __shfl_sync(mask, lo, srcLane, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ unsigned long long __shfl(unsigned long long var, int srcLane, int width) {
 return (unsigned long long) __shfl((long long) var, srcLane, width);
}

static __attribute__((device)) __inline__ unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width) {
        return (unsigned long long) __shfl_sync(mask, (long long) var, srcLane, width);
}

static __attribute__((device)) __inline__ long long __shfl_up(long long var, unsigned int delta, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl_up(hi, delta, width);
 lo = __shfl_up(lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ long long __shfl_up_sync(unsigned mask, long long var, unsigned int delta, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl_up_sync(mask, hi, delta, width);
 lo = __shfl_up_sync(mask, lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ unsigned long long __shfl_up(unsigned long long var, unsigned int delta, int width) {
 return (unsigned long long) __shfl_up((long long) var, delta, width);
}

static __attribute__((device)) __inline__ unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned int delta, int width) {
        return (unsigned long long) __shfl_up_sync(mask, (long long) var, delta, width);
}

static __attribute__((device)) __inline__ long long __shfl_down(long long var, unsigned int delta, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl_down(hi, delta, width);
 lo = __shfl_down(lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ long long __shfl_down_sync(unsigned mask, long long var, unsigned int delta, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl_down_sync(mask, hi, delta, width);
 lo = __shfl_down_sync(mask, lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ unsigned long long __shfl_down(unsigned long long var, unsigned int delta, int width) {
 return (unsigned long long) __shfl_down((long long) var, delta, width);
}

static __attribute__((device)) __inline__ unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned int delta, int width) {
        return (unsigned long long) __shfl_down_sync(mask, (long long) var, delta, width);
}

static __attribute__((device)) __inline__ long long __shfl_xor(long long var, int laneMask, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl_xor(hi, laneMask, width);
 lo = __shfl_xor(lo, laneMask, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl_xor_sync(mask, hi, laneMask, width);
 lo = __shfl_xor_sync(mask, lo, laneMask, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width) {
 return (unsigned long long) __shfl_xor((long long) var, laneMask, width);
}

static __attribute__((device)) __inline__ unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width) {
        return (unsigned long long) __shfl_xor_sync(mask, (long long) var, laneMask, width);
}

static __attribute__((device)) __inline__ double __shfl(double var, int srcLane, int width) {
 unsigned lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
 hi = __shfl(hi, srcLane, width);
 lo = __shfl(lo, srcLane, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ double __shfl_sync(unsigned mask, double var, int srcLane, int width) {
 unsigned lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
 hi = __shfl_sync(mask, hi, srcLane, width);
 lo = __shfl_sync(mask, lo, srcLane, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
 return var;
}


static __attribute__((device)) __inline__ double __shfl_up(double var, unsigned int delta, int width) {
 unsigned lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
 hi = __shfl_up(hi, delta, width);
 lo = __shfl_up(lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ double __shfl_up_sync(unsigned mask, double var, unsigned int delta, int width) {
 unsigned lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
 hi = __shfl_up_sync(mask, hi, delta, width);
 lo = __shfl_up_sync(mask, lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ double __shfl_down(double var, unsigned int delta, int width) {
 unsigned lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
 hi = __shfl_down(hi, delta, width);
 lo = __shfl_down(lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ double __shfl_down_sync(unsigned mask, double var, unsigned int delta, int width) {
 unsigned lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
 hi = __shfl_down_sync(mask, hi, delta, width);
 lo = __shfl_down_sync(mask, lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ double __shfl_xor(double var, int laneMask, int width) {
 unsigned lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
 hi = __shfl_xor(hi, laneMask, width);
 lo = __shfl_xor(lo, laneMask, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width) {
 unsigned lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "d"(var));
 hi = __shfl_xor_sync(mask, hi, laneMask, width);
 lo = __shfl_xor_sync(mask, lo, laneMask, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "r"(lo), "r"(hi));
 return var;
}



static __attribute__((device)) __inline__ long __shfl(long var, int srcLane, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl((long long) var, srcLane, width) :
  __shfl((int) var, srcLane, width);
}

static __attribute__((device)) __inline__ long __shfl_sync(unsigned mask, long var, int srcLane, int width) {
 return (sizeof(long) == sizeof(long long)) ?
                __shfl_sync(mask, (long long) var, srcLane, width) :
  __shfl_sync(mask, (int) var, srcLane, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl(unsigned long var, int srcLane, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl((unsigned long long) var, srcLane, width) :
  __shfl((unsigned int) var, srcLane, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width) {
 return (sizeof(long) == sizeof(long long)) ?
                __shfl_sync(mask, (unsigned long long) var, srcLane, width) :
  __shfl_sync(mask, (unsigned int) var, srcLane, width);
}

static __attribute__((device)) __inline__ long __shfl_up(long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_up((long long) var, delta, width) :
  __shfl_up((int) var, delta, width);
}

static __attribute__((device)) __inline__ long __shfl_up_sync(unsigned mask, long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_up_sync(mask, (long long) var, delta, width) :
  __shfl_up_sync(mask, (int) var, delta, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl_up(unsigned long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_up((unsigned long long) var, delta, width) :
  __shfl_up((unsigned int) var, delta, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_up_sync(mask, (unsigned long long) var, delta, width) :
  __shfl_up_sync(mask, (unsigned int) var, delta, width);
}

static __attribute__((device)) __inline__ long __shfl_down(long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_down((long long) var, delta, width) :
  __shfl_down((int) var, delta, width);
}

static __attribute__((device)) __inline__ long __shfl_down_sync(unsigned mask, long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_down_sync(mask, (long long) var, delta, width) :
  __shfl_down_sync(mask, (int) var, delta, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl_down(unsigned long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_down((unsigned long long) var, delta, width) :
  __shfl_down((unsigned int) var, delta, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_down_sync(mask, (unsigned long long) var, delta, width) :
  __shfl_down_sync(mask, (unsigned int) var, delta, width);
}

static __attribute__((device)) __inline__ long __shfl_xor(long var, int laneMask, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_xor((long long) var, laneMask, width) :
  __shfl_xor((int) var, laneMask, width);
}

static __attribute__((device)) __inline__ long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_xor_sync(mask, (long long) var, laneMask, width) :
  __shfl_xor_sync(mask, (int) var, laneMask, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl_xor(unsigned long var, int laneMask, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_xor((unsigned long long) var, laneMask, width) :
  __shfl_xor((unsigned int) var, laneMask, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_xor_sync(mask, (unsigned long long) var, laneMask, width) :
  __shfl_xor_sync(mask, (unsigned int) var, laneMask, width);
}
# 239 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_30_intrinsics.h" 2
# 3270 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.h" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.h" 2

# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 72 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.h" 2
# 89 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.h"
static __attribute__((device)) __inline__ long __ldg(const long *ptr) ;
static __attribute__((device)) __inline__ unsigned long __ldg(const unsigned long *ptr) ;

static __attribute__((device)) __inline__ char __ldg(const char *ptr) ;
static __attribute__((device)) __inline__ signed char __ldg(const signed char *ptr) ;
static __attribute__((device)) __inline__ short __ldg(const short *ptr) ;
static __attribute__((device)) __inline__ int __ldg(const int *ptr) ;
static __attribute__((device)) __inline__ long long __ldg(const long long *ptr) ;
static __attribute__((device)) __inline__ char2 __ldg(const char2 *ptr) ;
static __attribute__((device)) __inline__ char4 __ldg(const char4 *ptr) ;
static __attribute__((device)) __inline__ short2 __ldg(const short2 *ptr) ;
static __attribute__((device)) __inline__ short4 __ldg(const short4 *ptr) ;
static __attribute__((device)) __inline__ int2 __ldg(const int2 *ptr) ;
static __attribute__((device)) __inline__ int4 __ldg(const int4 *ptr) ;
static __attribute__((device)) __inline__ longlong2 __ldg(const longlong2 *ptr) ;

static __attribute__((device)) __inline__ unsigned char __ldg(const unsigned char *ptr) ;
static __attribute__((device)) __inline__ unsigned short __ldg(const unsigned short *ptr) ;
static __attribute__((device)) __inline__ unsigned int __ldg(const unsigned int *ptr) ;
static __attribute__((device)) __inline__ unsigned long long __ldg(const unsigned long long *ptr) ;
static __attribute__((device)) __inline__ uchar2 __ldg(const uchar2 *ptr) ;
static __attribute__((device)) __inline__ uchar4 __ldg(const uchar4 *ptr) ;
static __attribute__((device)) __inline__ ushort2 __ldg(const ushort2 *ptr) ;
static __attribute__((device)) __inline__ ushort4 __ldg(const ushort4 *ptr) ;
static __attribute__((device)) __inline__ uint2 __ldg(const uint2 *ptr) ;
static __attribute__((device)) __inline__ uint4 __ldg(const uint4 *ptr) ;
static __attribute__((device)) __inline__ ulonglong2 __ldg(const ulonglong2 *ptr) ;

static __attribute__((device)) __inline__ float __ldg(const float *ptr) ;
static __attribute__((device)) __inline__ double __ldg(const double *ptr) ;
static __attribute__((device)) __inline__ float2 __ldg(const float2 *ptr) ;
static __attribute__((device)) __inline__ float4 __ldg(const float4 *ptr) ;
static __attribute__((device)) __inline__ double2 __ldg(const double2 *ptr) ;



static __attribute__((device)) __inline__ long __ldcg(const long *ptr) ;
static __attribute__((device)) __inline__ unsigned long __ldcg(const unsigned long *ptr) ;

static __attribute__((device)) __inline__ char __ldcg(const char *ptr) ;
static __attribute__((device)) __inline__ signed char __ldcg(const signed char *ptr) ;
static __attribute__((device)) __inline__ short __ldcg(const short *ptr) ;
static __attribute__((device)) __inline__ int __ldcg(const int *ptr) ;
static __attribute__((device)) __inline__ long long __ldcg(const long long *ptr) ;
static __attribute__((device)) __inline__ char2 __ldcg(const char2 *ptr) ;
static __attribute__((device)) __inline__ char4 __ldcg(const char4 *ptr) ;
static __attribute__((device)) __inline__ short2 __ldcg(const short2 *ptr) ;
static __attribute__((device)) __inline__ short4 __ldcg(const short4 *ptr) ;
static __attribute__((device)) __inline__ int2 __ldcg(const int2 *ptr) ;
static __attribute__((device)) __inline__ int4 __ldcg(const int4 *ptr) ;
static __attribute__((device)) __inline__ longlong2 __ldcg(const longlong2 *ptr) ;

static __attribute__((device)) __inline__ unsigned char __ldcg(const unsigned char *ptr) ;
static __attribute__((device)) __inline__ unsigned short __ldcg(const unsigned short *ptr) ;
static __attribute__((device)) __inline__ unsigned int __ldcg(const unsigned int *ptr) ;
static __attribute__((device)) __inline__ unsigned long long __ldcg(const unsigned long long *ptr) ;
static __attribute__((device)) __inline__ uchar2 __ldcg(const uchar2 *ptr) ;
static __attribute__((device)) __inline__ uchar4 __ldcg(const uchar4 *ptr) ;
static __attribute__((device)) __inline__ ushort2 __ldcg(const ushort2 *ptr) ;
static __attribute__((device)) __inline__ ushort4 __ldcg(const ushort4 *ptr) ;
static __attribute__((device)) __inline__ uint2 __ldcg(const uint2 *ptr) ;
static __attribute__((device)) __inline__ uint4 __ldcg(const uint4 *ptr) ;
static __attribute__((device)) __inline__ ulonglong2 __ldcg(const ulonglong2 *ptr) ;

static __attribute__((device)) __inline__ float __ldcg(const float *ptr) ;
static __attribute__((device)) __inline__ double __ldcg(const double *ptr) ;
static __attribute__((device)) __inline__ float2 __ldcg(const float2 *ptr) ;
static __attribute__((device)) __inline__ float4 __ldcg(const float4 *ptr) ;
static __attribute__((device)) __inline__ double2 __ldcg(const double2 *ptr) ;



static __attribute__((device)) __inline__ long __ldca(const long *ptr) ;
static __attribute__((device)) __inline__ unsigned long __ldca(const unsigned long *ptr) ;

static __attribute__((device)) __inline__ char __ldca(const char *ptr) ;
static __attribute__((device)) __inline__ signed char __ldca(const signed char *ptr) ;
static __attribute__((device)) __inline__ short __ldca(const short *ptr) ;
static __attribute__((device)) __inline__ int __ldca(const int *ptr) ;
static __attribute__((device)) __inline__ long long __ldca(const long long *ptr) ;
static __attribute__((device)) __inline__ char2 __ldca(const char2 *ptr) ;
static __attribute__((device)) __inline__ char4 __ldca(const char4 *ptr) ;
static __attribute__((device)) __inline__ short2 __ldca(const short2 *ptr) ;
static __attribute__((device)) __inline__ short4 __ldca(const short4 *ptr) ;
static __attribute__((device)) __inline__ int2 __ldca(const int2 *ptr) ;
static __attribute__((device)) __inline__ int4 __ldca(const int4 *ptr) ;
static __attribute__((device)) __inline__ longlong2 __ldca(const longlong2 *ptr) ;

static __attribute__((device)) __inline__ unsigned char __ldca(const unsigned char *ptr) ;
static __attribute__((device)) __inline__ unsigned short __ldca(const unsigned short *ptr) ;
static __attribute__((device)) __inline__ unsigned int __ldca(const unsigned int *ptr) ;
static __attribute__((device)) __inline__ unsigned long long __ldca(const unsigned long long *ptr) ;
static __attribute__((device)) __inline__ uchar2 __ldca(const uchar2 *ptr) ;
static __attribute__((device)) __inline__ uchar4 __ldca(const uchar4 *ptr) ;
static __attribute__((device)) __inline__ ushort2 __ldca(const ushort2 *ptr) ;
static __attribute__((device)) __inline__ ushort4 __ldca(const ushort4 *ptr) ;
static __attribute__((device)) __inline__ uint2 __ldca(const uint2 *ptr) ;
static __attribute__((device)) __inline__ uint4 __ldca(const uint4 *ptr) ;
static __attribute__((device)) __inline__ ulonglong2 __ldca(const ulonglong2 *ptr) ;

static __attribute__((device)) __inline__ float __ldca(const float *ptr) ;
static __attribute__((device)) __inline__ double __ldca(const double *ptr) ;
static __attribute__((device)) __inline__ float2 __ldca(const float2 *ptr) ;
static __attribute__((device)) __inline__ float4 __ldca(const float4 *ptr) ;
static __attribute__((device)) __inline__ double2 __ldca(const double2 *ptr) ;



static __attribute__((device)) __inline__ long __ldcs(const long *ptr) ;
static __attribute__((device)) __inline__ unsigned long __ldcs(const unsigned long *ptr) ;

static __attribute__((device)) __inline__ char __ldcs(const char *ptr) ;
static __attribute__((device)) __inline__ signed char __ldcs(const signed char *ptr) ;
static __attribute__((device)) __inline__ short __ldcs(const short *ptr) ;
static __attribute__((device)) __inline__ int __ldcs(const int *ptr) ;
static __attribute__((device)) __inline__ long long __ldcs(const long long *ptr) ;
static __attribute__((device)) __inline__ char2 __ldcs(const char2 *ptr) ;
static __attribute__((device)) __inline__ char4 __ldcs(const char4 *ptr) ;
static __attribute__((device)) __inline__ short2 __ldcs(const short2 *ptr) ;
static __attribute__((device)) __inline__ short4 __ldcs(const short4 *ptr) ;
static __attribute__((device)) __inline__ int2 __ldcs(const int2 *ptr) ;
static __attribute__((device)) __inline__ int4 __ldcs(const int4 *ptr) ;
static __attribute__((device)) __inline__ longlong2 __ldcs(const longlong2 *ptr) ;

static __attribute__((device)) __inline__ unsigned char __ldcs(const unsigned char *ptr) ;
static __attribute__((device)) __inline__ unsigned short __ldcs(const unsigned short *ptr) ;
static __attribute__((device)) __inline__ unsigned int __ldcs(const unsigned int *ptr) ;
static __attribute__((device)) __inline__ unsigned long long __ldcs(const unsigned long long *ptr) ;
static __attribute__((device)) __inline__ uchar2 __ldcs(const uchar2 *ptr) ;
static __attribute__((device)) __inline__ uchar4 __ldcs(const uchar4 *ptr) ;
static __attribute__((device)) __inline__ ushort2 __ldcs(const ushort2 *ptr) ;
static __attribute__((device)) __inline__ ushort4 __ldcs(const ushort4 *ptr) ;
static __attribute__((device)) __inline__ uint2 __ldcs(const uint2 *ptr) ;
static __attribute__((device)) __inline__ uint4 __ldcs(const uint4 *ptr) ;
static __attribute__((device)) __inline__ ulonglong2 __ldcs(const ulonglong2 *ptr) ;

static __attribute__((device)) __inline__ float __ldcs(const float *ptr) ;
static __attribute__((device)) __inline__ double __ldcs(const double *ptr) ;
static __attribute__((device)) __inline__ float2 __ldcs(const float2 *ptr) ;
static __attribute__((device)) __inline__ float4 __ldcs(const float4 *ptr) ;
static __attribute__((device)) __inline__ double2 __ldcs(const double2 *ptr) ;
# 246 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.h"
static __attribute__((device)) __inline__ unsigned int __funnelshift_l(unsigned int lo, unsigned int hi, unsigned int shift) ;
# 258 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.h"
static __attribute__((device)) __inline__ unsigned int __funnelshift_lc(unsigned int lo, unsigned int hi, unsigned int shift) ;
# 271 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.h"
static __attribute__((device)) __inline__ unsigned int __funnelshift_r(unsigned int lo, unsigned int hi, unsigned int shift) ;
# 283 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.h"
static __attribute__((device)) __inline__ unsigned int __funnelshift_rc(unsigned int lo, unsigned int hi, unsigned int shift) ;
# 293 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.hpp" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.hpp" 2

# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 72 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.hpp" 2



extern "C"
{


}
# 103 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.hpp"
static __attribute__((device)) __inline__ long __ldg(const long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long)ret; }
static __attribute__((device)) __inline__ unsigned long __ldg(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }






static __attribute__((device)) __inline__ char __ldg(const char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __attribute__((device)) __inline__ signed char __ldg(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (signed char)ret; }
static __attribute__((device)) __inline__ short __ldg(const short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.s16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __attribute__((device)) __inline__ int __ldg(const int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __attribute__((device)) __inline__ long long __ldg(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __attribute__((device)) __inline__ char2 __ldg(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.nc.v2.s8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __attribute__((device)) __inline__ char4 __ldg(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.nc.v4.s8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __attribute__((device)) __inline__ short2 __ldg(const short2 *ptr) { short2 ret; asm volatile ("ld.global.nc.v2.s16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ short4 __ldg(const short4 *ptr) { short4 ret; asm volatile ("ld.global.nc.v4.s16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int2 __ldg(const int2 *ptr) { int2 ret; asm volatile ("ld.global.nc.v2.s32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int4 __ldg(const int4 *ptr) { int4 ret; asm volatile ("ld.global.nc.v4.s32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ longlong2 __ldg(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.nc.v2.s64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ unsigned char __ldg(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (unsigned char)ret; }
static __attribute__((device)) __inline__ unsigned short __ldg(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.u16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned int __ldg(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned long long __ldg(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uchar2 __ldg(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.nc.v2.u8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __attribute__((device)) __inline__ uchar4 __ldg(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.nc.v4.u8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __attribute__((device)) __inline__ ushort2 __ldg(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.nc.v2.u16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ushort4 __ldg(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.nc.v4.u16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint2 __ldg(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.nc.v2.u32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint4 __ldg(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.nc.v4.u32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ulonglong2 __ldg(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.nc.v2.u64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ float __ldg(const float *ptr) { float ret; asm volatile ("ld.global.nc.f32 %0, [%1];" : "=f"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double __ldg(const double *ptr) { double ret; asm volatile ("ld.global.nc.f64 %0, [%1];" : "=d"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float2 __ldg(const float2 *ptr) { float2 ret; asm volatile ("ld.global.nc.v2.f32 {%0,%1}, [%2];" : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float4 __ldg(const float4 *ptr) { float4 ret; asm volatile ("ld.global.nc.v4.f32 {%0,%1,%2,%3}, [%4];" : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double2 __ldg(const double2 *ptr) { double2 ret; asm volatile ("ld.global.nc.v2.f64 {%0,%1}, [%2];" : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }
# 149 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.hpp"
static __attribute__((device)) __inline__ long __ldcg(const long *ptr) { unsigned long ret; asm volatile ("ld.global.cg.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long)ret; }
static __attribute__((device)) __inline__ unsigned long __ldcg(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.cg.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }






static __attribute__((device)) __inline__ char __ldcg(const char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __attribute__((device)) __inline__ signed char __ldcg(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (signed char)ret; }
static __attribute__((device)) __inline__ short __ldcg(const short *ptr) { unsigned short ret; asm volatile ("ld.global.cg.s16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __attribute__((device)) __inline__ int __ldcg(const int *ptr) { unsigned int ret; asm volatile ("ld.global.cg.s32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __attribute__((device)) __inline__ long long __ldcg(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cg.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __attribute__((device)) __inline__ char2 __ldcg(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.cg.v2.s8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __attribute__((device)) __inline__ char4 __ldcg(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.cg.v4.s8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __attribute__((device)) __inline__ short2 __ldcg(const short2 *ptr) { short2 ret; asm volatile ("ld.global.cg.v2.s16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ short4 __ldcg(const short4 *ptr) { short4 ret; asm volatile ("ld.global.cg.v4.s16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int2 __ldcg(const int2 *ptr) { int2 ret; asm volatile ("ld.global.cg.v2.s32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int4 __ldcg(const int4 *ptr) { int4 ret; asm volatile ("ld.global.cg.v4.s32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ longlong2 __ldcg(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.cg.v2.s64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ unsigned char __ldcg(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.cg.u8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (unsigned char)ret; }
static __attribute__((device)) __inline__ unsigned short __ldcg(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.cg.u16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned int __ldcg(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.cg.u32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned long long __ldcg(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cg.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uchar2 __ldcg(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.cg.v2.u8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __attribute__((device)) __inline__ uchar4 __ldcg(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.cg.v4.u8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __attribute__((device)) __inline__ ushort2 __ldcg(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.cg.v2.u16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ushort4 __ldcg(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.cg.v4.u16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint2 __ldcg(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.cg.v2.u32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint4 __ldcg(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.cg.v4.u32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ulonglong2 __ldcg(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.cg.v2.u64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ float __ldcg(const float *ptr) { float ret; asm volatile ("ld.global.cg.f32 %0, [%1];" : "=f"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double __ldcg(const double *ptr) { double ret; asm volatile ("ld.global.cg.f64 %0, [%1];" : "=d"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float2 __ldcg(const float2 *ptr) { float2 ret; asm volatile ("ld.global.cg.v2.f32 {%0,%1}, [%2];" : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float4 __ldcg(const float4 *ptr) { float4 ret; asm volatile ("ld.global.cg.v4.f32 {%0,%1,%2,%3}, [%4];" : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double2 __ldcg(const double2 *ptr) { double2 ret; asm volatile ("ld.global.cg.v2.f64 {%0,%1}, [%2];" : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }







static __attribute__((device)) __inline__ long __ldca(const long *ptr) { unsigned long ret; asm volatile ("ld.global.ca.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long)ret; }
static __attribute__((device)) __inline__ unsigned long __ldca(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.ca.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }






static __attribute__((device)) __inline__ char __ldca(const char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __attribute__((device)) __inline__ signed char __ldca(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (signed char)ret; }
static __attribute__((device)) __inline__ short __ldca(const short *ptr) { unsigned short ret; asm volatile ("ld.global.ca.s16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __attribute__((device)) __inline__ int __ldca(const int *ptr) { unsigned int ret; asm volatile ("ld.global.ca.s32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __attribute__((device)) __inline__ long long __ldca(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.ca.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __attribute__((device)) __inline__ char2 __ldca(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.ca.v2.s8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __attribute__((device)) __inline__ char4 __ldca(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.ca.v4.s8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __attribute__((device)) __inline__ short2 __ldca(const short2 *ptr) { short2 ret; asm volatile ("ld.global.ca.v2.s16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ short4 __ldca(const short4 *ptr) { short4 ret; asm volatile ("ld.global.ca.v4.s16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int2 __ldca(const int2 *ptr) { int2 ret; asm volatile ("ld.global.ca.v2.s32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int4 __ldca(const int4 *ptr) { int4 ret; asm volatile ("ld.global.ca.v4.s32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ longlong2 __ldca(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.ca.v2.s64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ unsigned char __ldca(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.ca.u8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (unsigned char)ret; }
static __attribute__((device)) __inline__ unsigned short __ldca(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.ca.u16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned int __ldca(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.ca.u32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned long long __ldca(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.ca.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uchar2 __ldca(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.ca.v2.u8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __attribute__((device)) __inline__ uchar4 __ldca(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.ca.v4.u8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __attribute__((device)) __inline__ ushort2 __ldca(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.ca.v2.u16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ushort4 __ldca(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.ca.v4.u16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint2 __ldca(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.ca.v2.u32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint4 __ldca(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.ca.v4.u32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ulonglong2 __ldca(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.ca.v2.u64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ float __ldca(const float *ptr) { float ret; asm volatile ("ld.global.ca.f32 %0, [%1];" : "=f"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double __ldca(const double *ptr) { double ret; asm volatile ("ld.global.ca.f64 %0, [%1];" : "=d"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float2 __ldca(const float2 *ptr) { float2 ret; asm volatile ("ld.global.ca.v2.f32 {%0,%1}, [%2];" : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float4 __ldca(const float4 *ptr) { float4 ret; asm volatile ("ld.global.ca.v4.f32 {%0,%1,%2,%3}, [%4];" : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double2 __ldca(const double2 *ptr) { double2 ret; asm volatile ("ld.global.ca.v2.f64 {%0,%1}, [%2];" : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }







static __attribute__((device)) __inline__ long __ldcs(const long *ptr) { unsigned long ret; asm volatile ("ld.global.cs.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long)ret; }
static __attribute__((device)) __inline__ unsigned long __ldcs(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.cs.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }






static __attribute__((device)) __inline__ char __ldcs(const char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __attribute__((device)) __inline__ signed char __ldcs(const signed char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (signed char)ret; }
static __attribute__((device)) __inline__ short __ldcs(const short *ptr) { unsigned short ret; asm volatile ("ld.global.cs.s16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __attribute__((device)) __inline__ int __ldcs(const int *ptr) { unsigned int ret; asm volatile ("ld.global.cs.s32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __attribute__((device)) __inline__ long long __ldcs(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cs.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __attribute__((device)) __inline__ char2 __ldcs(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.cs.v2.s8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __attribute__((device)) __inline__ char4 __ldcs(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.cs.v4.s8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __attribute__((device)) __inline__ short2 __ldcs(const short2 *ptr) { short2 ret; asm volatile ("ld.global.cs.v2.s16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ short4 __ldcs(const short4 *ptr) { short4 ret; asm volatile ("ld.global.cs.v4.s16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int2 __ldcs(const int2 *ptr) { int2 ret; asm volatile ("ld.global.cs.v2.s32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int4 __ldcs(const int4 *ptr) { int4 ret; asm volatile ("ld.global.cs.v4.s32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ longlong2 __ldcs(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.cs.v2.s64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ unsigned char __ldcs(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.cs.u8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (unsigned char)ret; }
static __attribute__((device)) __inline__ unsigned short __ldcs(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.cs.u16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned int __ldcs(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.cs.u32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned long long __ldcs(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.cs.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uchar2 __ldcs(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.cs.v2.u8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __attribute__((device)) __inline__ uchar4 __ldcs(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.cs.v4.u8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __attribute__((device)) __inline__ ushort2 __ldcs(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.cs.v2.u16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ushort4 __ldcs(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.cs.v4.u16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint2 __ldcs(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.cs.v2.u32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint4 __ldcs(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.cs.v4.u32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ulonglong2 __ldcs(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.cs.v2.u64 {%0,%1}, [%2];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ float __ldcs(const float *ptr) { float ret; asm volatile ("ld.global.cs.f32 %0, [%1];" : "=f"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double __ldcs(const double *ptr) { double ret; asm volatile ("ld.global.cs.f64 %0, [%1];" : "=d"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float2 __ldcs(const float2 *ptr) { float2 ret; asm volatile ("ld.global.cs.v2.f32 {%0,%1}, [%2];" : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float4 __ldcs(const float4 *ptr) { float4 ret; asm volatile ("ld.global.cs.v4.f32 {%0,%1,%2,%3}, [%4];" : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double2 __ldcs(const double2 *ptr) { double2 ret; asm volatile ("ld.global.cs.v2.f64 {%0,%1}, [%2];" : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }
# 286 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.hpp"
static __attribute__((device)) __inline__ unsigned int __funnelshift_l(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.l.wrap.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
static __attribute__((device)) __inline__ unsigned int __funnelshift_lc(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.l.clamp.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}


static __attribute__((device)) __inline__ unsigned int __funnelshift_r(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.r.wrap.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
static __attribute__((device)) __inline__ unsigned int __funnelshift_rc(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.r.clamp.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
# 294 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_32_intrinsics.h" 2
# 3271 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_35_intrinsics.h" 1
# 3272 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_61_intrinsics.h" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_61_intrinsics.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_61_intrinsics.h" 2

# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 72 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_61_intrinsics.h" 2
# 91 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_61_intrinsics.h"
static __attribute__((device)) __inline__ int __dp2a_lo(int srcA, int srcB, int c) ;
static __attribute__((device)) __inline__ unsigned int __dp2a_lo(unsigned int srcA, unsigned int srcB, unsigned int c) ;

static __attribute__((device)) __inline__ int __dp2a_lo(short2 srcA, char4 srcB, int c) ;
static __attribute__((device)) __inline__ unsigned int __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned int c) ;

static __attribute__((device)) __inline__ int __dp2a_hi(int srcA, int srcB, int c) ;
static __attribute__((device)) __inline__ unsigned int __dp2a_hi(unsigned int srcA, unsigned int srcB, unsigned int c) ;

static __attribute__((device)) __inline__ int __dp2a_hi(short2 srcA, char4 srcB, int c) ;
static __attribute__((device)) __inline__ unsigned int __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned int c) ;






static __attribute__((device)) __inline__ int __dp4a(int srcA, int srcB, int c) ;
static __attribute__((device)) __inline__ unsigned int __dp4a(unsigned int srcA, unsigned int srcB, unsigned int c) ;

static __attribute__((device)) __inline__ int __dp4a(char4 srcA, char4 srcB, int c) ;
static __attribute__((device)) __inline__ unsigned int __dp4a(uchar4 srcA, uchar4 srcB, unsigned int c) ;
# 122 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_61_intrinsics.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_61_intrinsics.hpp" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_61_intrinsics.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_61_intrinsics.hpp" 2

# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 72 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_61_intrinsics.hpp" 2
# 81 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_61_intrinsics.hpp"
static __attribute__((device)) __inline__ int __dp4a(int srcA, int srcB, int c) {
    int ret;
    asm volatile ("dp4a.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ unsigned int __dp4a(unsigned int srcA, unsigned int srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp4a.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ int __dp4a(char4 srcA, char4 srcB, int c) {
    int ret;
    asm volatile ("dp4a.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(int *)&srcA), "r"(*(int *)&srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ unsigned int __dp4a(uchar4 srcA, uchar4 srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp4a.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(unsigned int *)&srcA), "r"(*(unsigned int *)&srcB), "r"(c));
    return ret;
}


static __attribute__((device)) __inline__ int __dp2a_lo(int srcA, int srcB, int c) {
    int ret;
    asm volatile ("dp2a.lo.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ unsigned int __dp2a_lo(unsigned int srcA, unsigned int srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp2a.lo.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ int __dp2a_lo(short2 srcA, char4 srcB, int c) {
    int ret;
    asm volatile ("dp2a.lo.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(int *)&srcA), "r"(*(int *)&srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ unsigned int __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp2a.lo.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(unsigned int *)&srcA), "r"(*(unsigned int *)&srcB), "r"(c));
    return ret;
}


static __attribute__((device)) __inline__ int __dp2a_hi(int srcA, int srcB, int c) {
    int ret;
    asm volatile ("dp2a.hi.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ unsigned int __dp2a_hi(unsigned int srcA, unsigned int srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp2a.hi.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(srcA), "r"(srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ int __dp2a_hi(short2 srcA, char4 srcB, int c) {
    int ret;
    asm volatile ("dp2a.hi.s32.s32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(int *)&srcA), "r"(*(int *)&srcB), "r"(c));
    return ret;
}

static __attribute__((device)) __inline__ unsigned int __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned int c) {
    unsigned int ret;
    asm volatile ("dp2a.hi.u32.u32 %0, %1, %2, %3;" : "=r"(ret) : "r"(*(unsigned int *)&srcA), "r"(*(unsigned int *)&srcB), "r"(c));
    return ret;
}
# 123 "/usr/tce/packages/cuda/cuda-9.2.148/include/sm_61_intrinsics.h" 2
# 3273 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/sm_70_rt.h" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/sm_70_rt.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/sm_70_rt.h" 2
# 83 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/sm_70_rt.h"
static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, unsigned value) ;
static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, int value) ;
static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, unsigned long value) ;
static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, long value) ;
static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, unsigned long long value) ;
static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, long long value) ;
static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, float value) ;
static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, double value) ;

static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, unsigned value, int *pred) ;
static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, int value, int *pred) ;
static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, unsigned long value, int *pred) ;
static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, long value, int *pred) ;
static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, unsigned long long value, int *pred) ;
static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, long long value, int *pred) ;
static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, float value, int *pred) ;
static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, double value, int *pred) ;

static __attribute__((device)) __inline__ void __nanosleep(unsigned int ns) ;
# 111 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/sm_70_rt.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/sm_70_rt.hpp" 1
# 69 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/sm_70_rt.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 70 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/sm_70_rt.hpp" 2
# 83 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/sm_70_rt.hpp"
static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, unsigned value) {
  return __match32_any_sync(mask, value);
}

static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, int value) {
  return __match32_any_sync(mask, value);
}

static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, unsigned long value) {
  return (sizeof(long) == sizeof(long long)) ?
    __match64_any_sync(mask, (unsigned long long)value):
    __match32_any_sync(mask, (unsigned)value);
}

static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, long value) {
  return (sizeof(long) == sizeof(long long)) ?
    __match64_any_sync(mask, (unsigned long long)value):
    __match32_any_sync(mask, (unsigned)value);
}

static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, unsigned long long value) {
  return __match64_any_sync(mask, value);
}

static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, long long value) {
  return __match64_any_sync(mask, value);
}

static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, float value) {
  return __match32_any_sync(mask, float_as_uint(value));
}

static __attribute__((device)) __inline__ unsigned int __match_any_sync(unsigned mask, double value) {
  return __match64_any_sync(mask, __double_as_longlong(value));
}




static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, unsigned value, int *pred) {
  return __match32_all_sync(mask, value, pred);
}

static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, int value, int *pred) {
  return __match32_all_sync(mask, value, pred);
}

static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, unsigned long value, int *pred) {
  return (sizeof(long) == sizeof(long long)) ?
    __match64_all_sync(mask, (unsigned long long)value, pred):
    __match32_all_sync(mask, (unsigned)value, pred);
}

static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, long value, int *pred) {
  return (sizeof(long) == sizeof(long long)) ?
    __match64_all_sync(mask, (unsigned long long)value, pred):
    __match32_all_sync(mask, (unsigned)value, pred);
}

static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, unsigned long long value, int *pred) {
  return __match64_all_sync(mask, value, pred);
}

static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, long long value, int *pred) {
  return __match64_all_sync(mask, value, pred);
}

static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, float value, int *pred) {
  return __match32_all_sync(mask, float_as_uint(value), pred);
}

static __attribute__((device)) __inline__ unsigned int __match_all_sync(unsigned mask, double value, int *pred) {
  return __match64_all_sync(mask, __double_as_longlong(value), pred);
}

static __attribute__((device)) __inline__ void __nanosleep(unsigned int ns) {
    asm volatile("nanosleep.u32 %0;" :: "r"(ns));
}
# 112 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/sm_70_rt.h" 2
# 3274 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/surface_functions.h" 1
# 61 "/usr/tce/packages/cuda/cuda-9.2.148/include/surface_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 62 "/usr/tce/packages/cuda/cuda-9.2.148/include/surface_functions.h" 2

# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 64 "/usr/tce/packages/cuda/cuda-9.2.148/include/surface_functions.h" 2



template <typename T> struct __nv_surf_trait { typedef void * cast_type; };

template<> struct __nv_surf_trait<char> { typedef char * cast_type; };
template<> struct __nv_surf_trait<signed char> { typedef signed char * cast_type; };
template<> struct __nv_surf_trait<unsigned char> { typedef unsigned char * cast_type; };
template<> struct __nv_surf_trait<char1> { typedef char1 * cast_type; };
template<> struct __nv_surf_trait<uchar1> { typedef uchar1 * cast_type; };
template<> struct __nv_surf_trait<char2> { typedef char2 * cast_type; };
template<> struct __nv_surf_trait<uchar2> { typedef uchar2 * cast_type; };
template<> struct __nv_surf_trait<char4> { typedef char4 * cast_type; };
template<> struct __nv_surf_trait<uchar4> { typedef uchar4 * cast_type; };
template<> struct __nv_surf_trait<short> { typedef short * cast_type; };
template<> struct __nv_surf_trait<unsigned short> { typedef unsigned short * cast_type; };
template<> struct __nv_surf_trait<short1> { typedef short1 * cast_type; };
template<> struct __nv_surf_trait<ushort1> { typedef ushort1 * cast_type; };
template<> struct __nv_surf_trait<short2> { typedef short2 * cast_type; };
template<> struct __nv_surf_trait<ushort2> { typedef ushort2 * cast_type; };
template<> struct __nv_surf_trait<short4> { typedef short4 * cast_type; };
template<> struct __nv_surf_trait<ushort4> { typedef ushort4 * cast_type; };
template<> struct __nv_surf_trait<int> { typedef int * cast_type; };
template<> struct __nv_surf_trait<unsigned int> { typedef unsigned int * cast_type; };
template<> struct __nv_surf_trait<int1> { typedef int1 * cast_type; };
template<> struct __nv_surf_trait<uint1> { typedef uint1 * cast_type; };
template<> struct __nv_surf_trait<int2> { typedef int2 * cast_type; };
template<> struct __nv_surf_trait<uint2> { typedef uint2 * cast_type; };
template<> struct __nv_surf_trait<int4> { typedef int4 * cast_type; };
template<> struct __nv_surf_trait<uint4> { typedef uint4 * cast_type; };
template<> struct __nv_surf_trait<long long> { typedef long long * cast_type; };
template<> struct __nv_surf_trait<unsigned long long> { typedef unsigned long long * cast_type; };
template<> struct __nv_surf_trait<longlong1> { typedef longlong1 * cast_type; };
template<> struct __nv_surf_trait<ulonglong1> { typedef ulonglong1 * cast_type; };
template<> struct __nv_surf_trait<longlong2> { typedef longlong2 * cast_type; };
template<> struct __nv_surf_trait<ulonglong2> { typedef ulonglong2 * cast_type; };
# 110 "/usr/tce/packages/cuda/cuda-9.2.148/include/surface_functions.h"
template<> struct __nv_surf_trait<float> { typedef float * cast_type; };
template<> struct __nv_surf_trait<float1> { typedef float1 * cast_type; };
template<> struct __nv_surf_trait<float2> { typedef float2 * cast_type; };
template<> struct __nv_surf_trait<float4> { typedef float4 * cast_type; };


template <typename T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf1Dread(T *res, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1Dread_v2", (void *)res, s, surf, x, mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) T surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf1Dread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, mode);
  return temp;

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf1Dread(T *res, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1Dread<T>(surf, x, mode);

}


template <typename T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2Dread_v2", (void *)res, s, surf, x, y, mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) T surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf2Dread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, mode);
  return temp;

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2Dread<T>(surf, x, y, mode);

}


template <typename T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf3Dread_v2", (void *)res, s, surf, x, y, z, mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) T surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf3Dread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, z, mode);
  return temp;

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf3Dread<T>(surf, x, y, z, mode);

}



template <typename T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1DLayeredread_v2", (void *)res, s, surf, x, layer, mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) T surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf1DLayeredread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, layer, mode);
  return temp;

}


template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf1DLayeredread<T>(surf, x, layer, mode);

}


template <typename T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2DLayeredread_v2", (void *)res, s, surf, x, y, layer, mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) T surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surf2DLayeredread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, layer, mode);
  return temp;

}


template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surf2DLayeredread<T>(surf, x, y, layer, mode);

}


template <typename T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapread_v2", (void *)res, s, surf, x, y, face, mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) T surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;

  __nv_tex_surf_handler("__surfCubemapread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, face, mode);
  return temp;

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapread<T>(surf, x, y, face, mode);

}


template <typename T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapLayeredread_v2", (void *)res, s, surf, x, y, layerFace, mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) T surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  T temp;
  __nv_tex_surf_handler("__surfCubemapLayeredread_v2", (typename __nv_surf_trait<T>::cast_type)&temp, (int)sizeof(T), surf, x, y, layerFace, mode);
  return temp;

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  *res = surfCubemapLayeredread<T>(surf, x, y, layerFace, mode);

}


template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1Dwrite_v2", (void *)&val, s, surf, x, mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1Dwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, mode);

}



template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2Dwrite_v2", (void *)&val, s, surf, x, y, mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2Dwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, y, mode);

}


template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf3Dwrite_v2", (void *)&val, s, surf, x, y, z,mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf3Dwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, y, z, mode);

}


template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1DLayeredwrite_v2", (void *)&val, s, surf, x, layer,mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf1DLayeredwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, layer, mode);

}


template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2DLayeredwrite_v2", (void *)&val, s, surf, x, y, layer,mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surf2DLayeredwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, y, layer, mode);

}


template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapwrite_v2", (void *)&val, s, surf, x, y, face, mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, y, face, mode);

}



template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapLayeredwrite_v2", (void *)&val, s, surf, x, y, layerFace, mode);

}

template<class T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__surfCubemapLayeredwrite_v2", (typename __nv_surf_trait<T>::cast_type)&val, (int)sizeof(T), surf, x, y, layerFace, mode);

}
# 3275 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/texture_fetch_functions.h" 1
# 62 "/usr/tce/packages/cuda/cuda-9.2.148/include/texture_fetch_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 63 "/usr/tce/packages/cuda/cuda-9.2.148/include/texture_fetch_functions.h" 2

# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 65 "/usr/tce/packages/cuda/cuda-9.2.148/include/texture_fetch_functions.h" 2



template <typename T>
struct __nv_tex_rmet_ret { };

template<> struct __nv_tex_rmet_ret<char> { typedef char type; };
template<> struct __nv_tex_rmet_ret<signed char> { typedef signed char type; };
template<> struct __nv_tex_rmet_ret<unsigned char> { typedef unsigned char type; };
template<> struct __nv_tex_rmet_ret<char1> { typedef char1 type; };
template<> struct __nv_tex_rmet_ret<uchar1> { typedef uchar1 type; };
template<> struct __nv_tex_rmet_ret<char2> { typedef char2 type; };
template<> struct __nv_tex_rmet_ret<uchar2> { typedef uchar2 type; };
template<> struct __nv_tex_rmet_ret<char4> { typedef char4 type; };
template<> struct __nv_tex_rmet_ret<uchar4> { typedef uchar4 type; };

template<> struct __nv_tex_rmet_ret<short> { typedef short type; };
template<> struct __nv_tex_rmet_ret<unsigned short> { typedef unsigned short type; };
template<> struct __nv_tex_rmet_ret<short1> { typedef short1 type; };
template<> struct __nv_tex_rmet_ret<ushort1> { typedef ushort1 type; };
template<> struct __nv_tex_rmet_ret<short2> { typedef short2 type; };
template<> struct __nv_tex_rmet_ret<ushort2> { typedef ushort2 type; };
template<> struct __nv_tex_rmet_ret<short4> { typedef short4 type; };
template<> struct __nv_tex_rmet_ret<ushort4> { typedef ushort4 type; };

template<> struct __nv_tex_rmet_ret<int> { typedef int type; };
template<> struct __nv_tex_rmet_ret<unsigned int> { typedef unsigned int type; };
template<> struct __nv_tex_rmet_ret<int1> { typedef int1 type; };
template<> struct __nv_tex_rmet_ret<uint1> { typedef uint1 type; };
template<> struct __nv_tex_rmet_ret<int2> { typedef int2 type; };
template<> struct __nv_tex_rmet_ret<uint2> { typedef uint2 type; };
template<> struct __nv_tex_rmet_ret<int4> { typedef int4 type; };
template<> struct __nv_tex_rmet_ret<uint4> { typedef uint4 type; };
# 109 "/usr/tce/packages/cuda/cuda-9.2.148/include/texture_fetch_functions.h"
template<> struct __nv_tex_rmet_ret<float> { typedef float type; };
template<> struct __nv_tex_rmet_ret<float1> { typedef float1 type; };
template<> struct __nv_tex_rmet_ret<float2> { typedef float2 type; };
template<> struct __nv_tex_rmet_ret<float4> { typedef float4 type; };


template <typename T> struct __nv_tex_rmet_cast { typedef T* type; };
# 127 "/usr/tce/packages/cuda/cuda-9.2.148/include/texture_fetch_functions.h"
template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex1Dfetch(texture<T, 0x01, cudaReadModeElementType> t, int x)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1Dfetch_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x);
  return temp;

}

template <typename T>
struct __nv_tex_rmnf_ret { };

template <> struct __nv_tex_rmnf_ret<char> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<signed char> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<unsigned char> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<short> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<unsigned short> { typedef float type; };
template <> struct __nv_tex_rmnf_ret<char1> { typedef float1 type; };
template <> struct __nv_tex_rmnf_ret<uchar1> { typedef float1 type; };
template <> struct __nv_tex_rmnf_ret<short1> { typedef float1 type; };
template <> struct __nv_tex_rmnf_ret<ushort1> { typedef float1 type; };
template <> struct __nv_tex_rmnf_ret<char2> { typedef float2 type; };
template <> struct __nv_tex_rmnf_ret<uchar2> { typedef float2 type; };
template <> struct __nv_tex_rmnf_ret<short2> { typedef float2 type; };
template <> struct __nv_tex_rmnf_ret<ushort2> { typedef float2 type; };
template <> struct __nv_tex_rmnf_ret<char4> { typedef float4 type; };
template <> struct __nv_tex_rmnf_ret<uchar4> { typedef float4 type; };
template <> struct __nv_tex_rmnf_ret<short4> { typedef float4 type; };
template <> struct __nv_tex_rmnf_ret<ushort4> { typedef float4 type; };

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex1Dfetch(texture<T, 0x01, cudaReadModeNormalizedFloat> t, int x)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1Dfetch_rmnf_v2", &type_dummy, &retval, t, x);
  return retval;

}


template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex1D(texture<T, 0x01, cudaReadModeElementType> t, float x)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1D_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex1D(texture<T, 0x01, cudaReadModeNormalizedFloat> t, float x)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1D_rmnf_v2", &type_dummy, &retval, t, x);
  return retval;

}



template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex2D(texture<T, 0x02, cudaReadModeElementType> t, float x, float y)
{

  typename __nv_tex_rmet_ret<T>::type temp;

  __nv_tex_surf_handler("__tex2D_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, y);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex2D(texture<T, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2D_rmnf_v2", &type_dummy, &retval, t, x, y);
  return retval;

}



template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex1DLayered(texture<T, 0xF1, cudaReadModeElementType> t, float x, int layer)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DLayered_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, layer);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex1DLayered(texture<T, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DLayered_rmnf_v2", &type_dummy, &retval, t, x, layer);
  return retval;

}



template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex2DLayered(texture<T, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DLayered_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, y, layer);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex2DLayered(texture<T, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DLayered_rmnf_v2", &type_dummy, &retval, t, x, y, layer);
  return retval;

}


template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex3D(texture<T, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex3D_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, y, z);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex3D(texture<T, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex3D_rmnf_v2", &type_dummy, &retval, t, x, y, z);
  return retval;

}


template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type texCubemap(texture<T, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemap_v2", (typename __nv_tex_rmet_cast<T>::type) &temp, t, x, y, z);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type texCubemap(texture<T, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemap_rmnf_v2", &type_dummy, &retval, t, x, y, z);
  return retval;

}


template <typename T>
struct __nv_tex2dgather_ret { };
template <> struct __nv_tex2dgather_ret<char> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<signed char> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<char1> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<char2> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<char3> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<char4> { typedef char4 type; };
template <> struct __nv_tex2dgather_ret<unsigned char> { typedef uchar4 type; };
template <> struct __nv_tex2dgather_ret<uchar1> { typedef uchar4 type; };
template <> struct __nv_tex2dgather_ret<uchar2> { typedef uchar4 type; };
template <> struct __nv_tex2dgather_ret<uchar3> { typedef uchar4 type; };
template <> struct __nv_tex2dgather_ret<uchar4> { typedef uchar4 type; };

template <> struct __nv_tex2dgather_ret<short> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<short1> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<short2> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<short3> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<short4> { typedef short4 type; };
template <> struct __nv_tex2dgather_ret<unsigned short> { typedef ushort4 type; };
template <> struct __nv_tex2dgather_ret<ushort1> { typedef ushort4 type; };
template <> struct __nv_tex2dgather_ret<ushort2> { typedef ushort4 type; };
template <> struct __nv_tex2dgather_ret<ushort3> { typedef ushort4 type; };
template <> struct __nv_tex2dgather_ret<ushort4> { typedef ushort4 type; };

template <> struct __nv_tex2dgather_ret<int> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<int1> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<int2> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<int3> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<int4> { typedef int4 type; };
template <> struct __nv_tex2dgather_ret<unsigned int> { typedef uint4 type; };
template <> struct __nv_tex2dgather_ret<uint1> { typedef uint4 type; };
template <> struct __nv_tex2dgather_ret<uint2> { typedef uint4 type; };
template <> struct __nv_tex2dgather_ret<uint3> { typedef uint4 type; };
template <> struct __nv_tex2dgather_ret<uint4> { typedef uint4 type; };

template <> struct __nv_tex2dgather_ret<float> { typedef float4 type; };
template <> struct __nv_tex2dgather_ret<float1> { typedef float4 type; };
template <> struct __nv_tex2dgather_ret<float2> { typedef float4 type; };
template <> struct __nv_tex2dgather_ret<float3> { typedef float4 type; };
template <> struct __nv_tex2dgather_ret<float4> { typedef float4 type; };

template <typename T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __nv_tex2dgather_ret<T>::type tex2Dgather(texture<T, 0x02, cudaReadModeElementType> t, float x, float y, int comp=0)
{

  T type_dummy;
  typename __nv_tex2dgather_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2Dgather_v2", &type_dummy, &retval, t, x, y, comp);
  return retval;

}


template<typename T> struct __nv_tex2dgather_rmnf_ret { };
template<> struct __nv_tex2dgather_rmnf_ret<char> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<signed char> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<unsigned char> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<char1> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<uchar1> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<char2> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<uchar2> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<char3> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<uchar3> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<char4> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<uchar4> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<signed short> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<unsigned short> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<short1> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<ushort1> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<short2> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<ushort2> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<short3> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<ushort3> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<short4> { typedef float4 type; };
template<> struct __nv_tex2dgather_rmnf_ret<ushort4> { typedef float4 type; };

template <typename T>
static __attribute__((device)) __inline__ __attribute__((always_inline)) typename __nv_tex2dgather_rmnf_ret<T>::type tex2Dgather(texture<T, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{

  T type_dummy;
  typename __nv_tex2dgather_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2Dgather_rmnf_v2", &type_dummy, &retval, t, x, y, comp);
  return retval;

}



template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex1DLod(texture<T, 0x01, cudaReadModeElementType> t, float x, float level)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, level);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex1DLod(texture<T, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DLod_rmnf_v2", &type_dummy, &retval, t, x, level);
  return retval;

}


template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex2DLod(texture<T, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, level);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex2DLod(texture<T, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DLod_rmnf_v2", &type_dummy, &retval, t, x, y, level);
  return retval;

}


template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex1DLayeredLod(texture<T, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DLayeredLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, layer, level);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex1DLayeredLod(texture<T, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DLayeredLod_rmnf_v2", &type_dummy, &retval, t, x, layer, level);
  return retval;

}


template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex2DLayeredLod(texture<T, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DLayeredLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, layer, level);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex2DLayeredLod(texture<T, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DLayeredLod_rmnf_v2", &type_dummy, &retval, t, x, y, layer, level);
  return retval;

}


template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex3DLod(texture<T, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex3DLod_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, level);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex3DLod(texture<T, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex3DLod_rmnf_v2", &type_dummy, &retval, t, x, y, z, level);
  return retval;

}


template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type texCubemapLod(texture<T, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapLod_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, level);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type texCubemapLod(texture<T, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapLod_rmnf_v2", &type_dummy, &retval, t, x, y, z, level);
  return retval;

}



template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type texCubemapLayered(texture<T, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapLayered_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, layer);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type texCubemapLayered(texture<T, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapLayered_rmnf_v2", &type_dummy, &retval, t, x, y, z, layer);
  return retval;

}



template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type texCubemapLayeredLod(texture<T, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapLayeredLod_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, layer, level);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type texCubemapLayeredLod(texture<T, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapLayeredLod_rmnf_v2", &type_dummy, &retval, t, x, y, z, layer, level);
  return retval;

}



template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type texCubemapGrad(texture<T, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, &dPdx, &dPdy);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type texCubemapGrad(texture<T, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapGrad_rmnf_v2", &type_dummy, &retval, t, x, y, z, &dPdx, &dPdy);
  return retval;

}



template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type texCubemapLayeredGrad(texture<T, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__texCubemapLayeredGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, layer, &dPdx, &dPdy);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type texCubemapLayeredGrad(texture<T, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__texCubemapLayeredGrad_rmnf_v2", &type_dummy, &retval,t, x, y, z, layer, &dPdx, &dPdy);
  return retval;

}



template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex1DGrad(texture<T, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, dPdx, dPdy);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex1DGrad(texture<T, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DGrad_rmnf_v2", &type_dummy, &retval,t, x,dPdx, dPdy);
  return retval;

}



template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex2DGrad(texture<T, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, &dPdx, &dPdy);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex2DGrad(texture<T, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DGrad_rmnf_v2", &type_dummy, &retval,t, x, y, &dPdx, &dPdy);
  return retval;

}


template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex1DLayeredGrad(texture<T, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex1DLayeredGrad_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, layer, dPdx, dPdy);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex1DLayeredGrad(texture<T, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex1DLayeredGrad_rmnf_v2", &type_dummy, &retval,t, x, layer, dPdx, dPdy);
  return retval;

}


template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex2DLayeredGrad(texture<T, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex2DLayeredGrad_v2",(typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, layer, &dPdx, &dPdy);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex2DLayeredGrad(texture<T, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex2DLayeredGrad_rmnf_v2", &type_dummy, &retval,t, x, y, layer, &dPdx, &dPdy);
  return retval;

}


template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmet_ret<T>::type tex3DGrad(texture<T, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{

  typename __nv_tex_rmet_ret<T>::type temp;
  __nv_tex_surf_handler("__tex3DGrad_v2", (typename __nv_tex_rmet_cast<T>::type)&temp, t, x, y, z, &dPdx, &dPdy);
  return temp;

}

template <typename T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) typename __nv_tex_rmnf_ret<T>::type tex3DGrad(texture<T, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{

  T type_dummy;
  typename __nv_tex_rmnf_ret<T>::type retval;
  __nv_tex_surf_handler("__tex3DGrad_rmnf_v2", &type_dummy, &retval,t, x, y, z, &dPdx, &dPdy);
  return retval;

}
# 3276 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/texture_indirect_functions.h" 1
# 57 "/usr/tce/packages/cuda/cuda-9.2.148/include/texture_indirect_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 58 "/usr/tce/packages/cuda/cuda-9.2.148/include/texture_indirect_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 59 "/usr/tce/packages/cuda/cuda-9.2.148/include/texture_indirect_functions.h" 2


template <typename T> struct __nv_itex_trait { };
template<> struct __nv_itex_trait<char> { typedef void type; };
template<> struct __nv_itex_trait<signed char> { typedef void type; };
template<> struct __nv_itex_trait<char1> { typedef void type; };
template<> struct __nv_itex_trait<char2> { typedef void type; };
template<> struct __nv_itex_trait<char4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned char> { typedef void type; };
template<> struct __nv_itex_trait<uchar1> { typedef void type; };
template<> struct __nv_itex_trait<uchar2> { typedef void type; };
template<> struct __nv_itex_trait<uchar4> { typedef void type; };
template<> struct __nv_itex_trait<short> { typedef void type; };
template<> struct __nv_itex_trait<short1> { typedef void type; };
template<> struct __nv_itex_trait<short2> { typedef void type; };
template<> struct __nv_itex_trait<short4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned short> { typedef void type; };
template<> struct __nv_itex_trait<ushort1> { typedef void type; };
template<> struct __nv_itex_trait<ushort2> { typedef void type; };
template<> struct __nv_itex_trait<ushort4> { typedef void type; };
template<> struct __nv_itex_trait<int> { typedef void type; };
template<> struct __nv_itex_trait<int1> { typedef void type; };
template<> struct __nv_itex_trait<int2> { typedef void type; };
template<> struct __nv_itex_trait<int4> { typedef void type; };
template<> struct __nv_itex_trait<unsigned int> { typedef void type; };
template<> struct __nv_itex_trait<uint1> { typedef void type; };
template<> struct __nv_itex_trait<uint2> { typedef void type; };
template<> struct __nv_itex_trait<uint4> { typedef void type; };
# 97 "/usr/tce/packages/cuda/cuda-9.2.148/include/texture_indirect_functions.h"
template<> struct __nv_itex_trait<float> { typedef void type; };
template<> struct __nv_itex_trait<float1> { typedef void type; };
template<> struct __nv_itex_trait<float2> { typedef void type; };
template<> struct __nv_itex_trait<float4> { typedef void type; };



template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x)
{

   __nv_tex_surf_handler("__itex1Dfetch", ptr, obj, x);

}

template <class T>
static __attribute__((device)) T tex1Dfetch(cudaTextureObject_t texObject, int x)
{

  T ret;
  tex1Dfetch(&ret, texObject, x);
  return ret;

}

template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex1D(T *ptr, cudaTextureObject_t obj, float x)
{

   __nv_tex_surf_handler("__itex1D", ptr, obj, x);

}


template <class T>
static __attribute__((device)) T tex1D(cudaTextureObject_t texObject, float x)
{

  T ret;
  tex1D(&ret, texObject, x);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex2D(T *ptr, cudaTextureObject_t obj, float x, float y)
{

   __nv_tex_surf_handler("__itex2D", ptr, obj, x, y);

}

template <class T>
static __attribute__((device)) T tex2D(cudaTextureObject_t texObject, float x, float y)
{

  T ret;
  tex2D(&ret, texObject, x, y);
  return ret;

}

template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z)
{

   __nv_tex_surf_handler("__itex3D", ptr, obj, x, y, z);

}

template <class T>
static __attribute__((device)) T tex3D(cudaTextureObject_t texObject, float x, float y, float z)
{

  T ret;
  tex3D(&ret, texObject, x, y, z);
  return ret;

}

template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer)
{

   __nv_tex_surf_handler("__itex1DLayered", ptr, obj, x, layer);

}

template <class T>
static __attribute__((device)) T tex1DLayered(cudaTextureObject_t texObject, float x, int layer)
{

  T ret;
  tex1DLayered(&ret, texObject, x, layer);
  return ret;

}

template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer)
{

  __nv_tex_surf_handler("__itex2DLayered", ptr, obj, x, y, layer);

}

template <class T>
static __attribute__((device)) T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer)
{

  T ret;
  tex2DLayered(&ret, texObject, x, y, layer);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z)
{

  __nv_tex_surf_handler("__itexCubemap", ptr, obj, x, y, z);

}


template <class T>
static __attribute__((device)) T texCubemap(cudaTextureObject_t texObject, float x, float y, float z)
{

  T ret;
  texCubemap(&ret, texObject, x, y, z);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer)
{

  __nv_tex_surf_handler("__itexCubemapLayered", ptr, obj, x, y, z, layer);

}

template <class T>
static __attribute__((device)) T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer)
{

  T ret;
  texCubemapLayered(&ret, texObject, x, y, z, layer);
  return ret;

}

template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0)
{

  __nv_tex_surf_handler("__itex2Dgather", ptr, obj, x, y, comp);

}

template <class T>
static __attribute__((device)) T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0)
{

  T ret;
  tex2Dgather(&ret, to, x, y, comp);
  return ret;

}



template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level)
{

  __nv_tex_surf_handler("__itex1DLod", ptr, obj, x, level);

}

template <class T>
static __attribute__((device)) T tex1DLod(cudaTextureObject_t texObject, float x, float level)
{

  T ret;
  tex1DLod(&ret, texObject, x, level);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level)
{

  __nv_tex_surf_handler("__itex2DLod", ptr, obj, x, y, level);

}

template <class T>
static __attribute__((device)) T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level)
{

  T ret;
  tex2DLod(&ret, texObject, x, y, level);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level)
{

  __nv_tex_surf_handler("__itex3DLod", ptr, obj, x, y, z, level);

}

template <class T>
static __attribute__((device)) T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{

  T ret;
  tex3DLod(&ret, texObject, x, y, z, level);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level)
{

  __nv_tex_surf_handler("__itex1DLayeredLod", ptr, obj, x, layer, level);

}

template <class T>
static __attribute__((device)) T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level)
{

  T ret;
  tex1DLayeredLod(&ret, texObject, x, layer, level);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level)
{

  __nv_tex_surf_handler("__itex2DLayeredLod", ptr, obj, x, y, layer, level);

}

template <class T>
static __attribute__((device)) T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level)
{

  T ret;
  tex2DLayeredLod(&ret, texObject, x, y, layer, level);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level)
{

  __nv_tex_surf_handler("__itexCubemapLod", ptr, obj, x, y, z, level);

}

template <class T>
static __attribute__((device)) T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{

  T ret;
  texCubemapLod(&ret, texObject, x, y, z, level);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy)
{

  __nv_tex_surf_handler("__itexCubemapGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy);

}

template <class T>
static __attribute__((device)) T texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{

  T ret;
  texCubemapGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;

}

template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level)
{

  __nv_tex_surf_handler("__itexCubemapLayeredLod", ptr, obj, x, y, z, layer, level);

}

template <class T>
static __attribute__((device)) T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{

  T ret;
  texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level);
  return ret;

}

template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy)
{

  __nv_tex_surf_handler("__itex1DGrad", ptr, obj, x, dPdx, dPdy);

}

template <class T>
static __attribute__((device)) T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{

  T ret;
  tex1DGrad(&ret, texObject, x, dPdx, dPdy);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy)
{

  __nv_tex_surf_handler("__itex2DGrad_v2", ptr, obj, x, y, &dPdx, &dPdy);


}

template <class T>
static __attribute__((device)) T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{

  T ret;
  tex2DGrad(&ret, texObject, x, y, dPdx, dPdy);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy)
{

  __nv_tex_surf_handler("__itex3DGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy);

}

template <class T>
static __attribute__((device)) T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{

  T ret;
  tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy)
{

  __nv_tex_surf_handler("__itex1DLayeredGrad", ptr, obj, x, layer, dPdx, dPdy);

}

template <class T>
static __attribute__((device)) T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{

  T ret;
  tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type tex2DLayeredGrad(T * ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy)
{

  __nv_tex_surf_handler("__itex2DLayeredGrad_v2", ptr, obj, x, y, layer, &dPdx, &dPdy);

}

template <class T>
static __attribute__((device)) T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{

  T ret;
  tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy);
  return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_itex_trait<T>::type texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)
{

  __nv_tex_surf_handler("__itexCubemapLayeredGrad_v2", ptr, obj, x, y, z, layer, &dPdx, &dPdy);

}

template <class T>
static __attribute__((device)) T texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy)
{

  T ret;
  texCubemapLayeredGrad(&ret, texObject, x, y, z, layer, dPdx, dPdy);
  return ret;

}
# 3277 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/surface_indirect_functions.h" 1
# 57 "/usr/tce/packages/cuda/cuda-9.2.148/include/surface_indirect_functions.h"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/builtin_types.h" 1
# 58 "/usr/tce/packages/cuda/cuda-9.2.148/include/surface_indirect_functions.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/host_defines.h" 1
# 59 "/usr/tce/packages/cuda/cuda-9.2.148/include/surface_indirect_functions.h" 2

template<typename T> struct __nv_isurf_trait { };
template<> struct __nv_isurf_trait<char> { typedef void type; };
template<> struct __nv_isurf_trait<signed char> { typedef void type; };
template<> struct __nv_isurf_trait<char1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned char> { typedef void type; };
template<> struct __nv_isurf_trait<uchar1> { typedef void type; };
template<> struct __nv_isurf_trait<short> { typedef void type; };
template<> struct __nv_isurf_trait<short1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned short> { typedef void type; };
template<> struct __nv_isurf_trait<ushort1> { typedef void type; };
template<> struct __nv_isurf_trait<int> { typedef void type; };
template<> struct __nv_isurf_trait<int1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned int> { typedef void type; };
template<> struct __nv_isurf_trait<uint1> { typedef void type; };
template<> struct __nv_isurf_trait<long long> { typedef void type; };
template<> struct __nv_isurf_trait<longlong1> { typedef void type; };
template<> struct __nv_isurf_trait<unsigned long long> { typedef void type; };
template<> struct __nv_isurf_trait<ulonglong1> { typedef void type; };
template<> struct __nv_isurf_trait<float> { typedef void type; };
template<> struct __nv_isurf_trait<float1> { typedef void type; };

template<> struct __nv_isurf_trait<char2> { typedef void type; };
template<> struct __nv_isurf_trait<uchar2> { typedef void type; };
template<> struct __nv_isurf_trait<short2> { typedef void type; };
template<> struct __nv_isurf_trait<ushort2> { typedef void type; };
template<> struct __nv_isurf_trait<int2> { typedef void type; };
template<> struct __nv_isurf_trait<uint2> { typedef void type; };
template<> struct __nv_isurf_trait<longlong2> { typedef void type; };
template<> struct __nv_isurf_trait<ulonglong2> { typedef void type; };
template<> struct __nv_isurf_trait<float2> { typedef void type; };

template<> struct __nv_isurf_trait<char4> { typedef void type; };
template<> struct __nv_isurf_trait<uchar4> { typedef void type; };
template<> struct __nv_isurf_trait<short4> { typedef void type; };
template<> struct __nv_isurf_trait<ushort4> { typedef void type; };
template<> struct __nv_isurf_trait<int4> { typedef void type; };
template<> struct __nv_isurf_trait<uint4> { typedef void type; };
template<> struct __nv_isurf_trait<float4> { typedef void type; };


template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf1Dread", ptr, obj, x, mode);

}

template <class T>
static __attribute__((device)) T surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1Dread(&ret, surfObject, x, boundaryMode);
   return ret;

}

template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf2Dread", ptr, obj, x, y, mode);

}

template <class T>
static __attribute__((device)) T surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2Dread(&ret, surfObject, x, y, boundaryMode);
   return ret;

}


template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf3Dread", ptr, obj, x, y, z, mode);

}

template <class T>
static __attribute__((device)) T surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf3Dread(&ret, surfObject, x, y, z, boundaryMode);
   return ret;

}

template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf1DLayeredread", ptr, obj, x, layer, mode);

}

template <class T>
static __attribute__((device)) T surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode);
   return ret;

}

template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf2DLayeredread", ptr, obj, x, y, layer, mode);

}

template <class T>
static __attribute__((device)) T surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode);
   return ret;

}

template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurfCubemapread", ptr, obj, x, y, face, mode);

}

template <class T>
static __attribute__((device)) T surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapread(&ret, surfObject, x, y, face, boundaryMode);
   return ret;

}

template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurfCubemapLayeredread", ptr, obj, x, y, layerface, mode);

}

template <class T>
static __attribute__((device)) T surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{

   T ret;
   surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode);
   return ret;

}

template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf1Dwrite_v2", &val, obj, x, mode);

}

template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf2Dwrite_v2", &val, obj, x, y, mode);

}

template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf3Dwrite_v2", &val, obj, x, y, z, mode);

}

template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf1DLayeredwrite_v2", &val, obj, x, layer, mode);

}

template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurf2DLayeredwrite_v2", &val, obj, x, y, layer, mode);

}

template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurfCubemapwrite_v2", &val, obj, x, y, face, mode);

}

template <typename T>
static __attribute__((device)) typename __nv_isurf_trait<T>::type surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{

  __nv_tex_surf_handler("__isurfCubemapLayeredwrite_v2", &val, obj, x, y, layerface, mode);

}
# 3278 "/usr/tce/packages/cuda/cuda-9.2.148/include/crt/device_functions.h" 2


extern "C" __attribute__((host)) __attribute__((device)) unsigned __cudaPushCallConfiguration(dim3 gridDim,
                                      dim3 blockDim,
                                      size_t sharedMem = 0,
                                      void *stream = 0);
# 51 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_functions.h" 2
# 119 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 2
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_launch_parameters.h" 1
# 68 "/usr/tce/packages/cuda/cuda-9.2.148/include/device_launch_parameters.h"
extern "C" {


uint3 __attribute__((device_builtin)) extern const threadIdx;
uint3 __attribute__((device_builtin)) extern const blockIdx;
dim3 __attribute__((device_builtin)) extern const blockDim;
dim3 __attribute__((device_builtin)) extern const gridDim;
int __attribute__((device_builtin)) extern const warpSize;




}
# 120 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 2


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 1 3
# 47 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_function.h" 1 3
# 60 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_function.h" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/move.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/move.h" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/concept_check.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/concept_check.h" 3
# 35 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) noexcept
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


}



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/type_traits" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/type_traits" 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/type_traits" 3
namespace std
{
  typedef unsigned short uint_least16_t;
  typedef unsigned int uint_least32_t;
}





namespace std __attribute__ ((__visibility__ ("default")))
{
# 68 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const { return value; }




      constexpr value_type operator()() const { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;



  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public integral_constant<bool, !_Pp::value>
    { };






  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };
# 256 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };
# 284 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/type_traits" 3
  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...)>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......)>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes...) const volatile &&>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile &>
    : public true_type { };

  template<typename _Res, typename... _ArgTypes>
    struct is_function<_Res(_ArgTypes......) const volatile &&>
    : public true_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args>
    struct __is_referenceable<_Res(_Args...)>
    : public true_type
    { };

  template<typename _Res, typename... _Args>
    struct __is_referenceable<_Res(_Args......)>
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };




  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>::type
    { };




  template<typename>
    struct add_rvalue_reference;





  template<typename _Tp>
    typename add_rvalue_reference<_Tp>::type declval() noexcept;

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>::type
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>::type
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;






  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>::type
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };
# 864 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/type_traits" 3
  struct __do_is_static_castable_impl
  {
    template<typename _From, typename _To, typename
             = decltype(static_cast<_To>(declval<_From>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _From, typename _To>
    struct __is_static_castable_impl
    : public __do_is_static_castable_impl
    {
      typedef decltype(__test<_From, _To>(0)) type;
    };

  template<typename _From, typename _To>
    struct __is_static_castable_safe
    : public __is_static_castable_impl<_From, _To>::type
    { };


  template<typename _From, typename _To>
    struct __is_static_castable
    : public integral_constant<bool, (__is_static_castable_safe<
          _From, _To>::value)>
    { };






  struct __do_is_direct_constructible_impl
  {
    template<typename _Tp, typename _Arg, typename
      = decltype(::new _Tp(declval<_Arg>()))>
      static true_type __test(int);

    template<typename, typename>
      static false_type __test(...);
  };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_impl
    : public __do_is_direct_constructible_impl
    {
      typedef decltype(__test<_Tp, _Arg>(0)) type;
    };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new_safe
    : public __and_<is_destructible<_Tp>,
                    __is_direct_constructible_impl<_Tp, _Arg>>::type
    { };

  template<typename, typename>
    struct is_same;

  template<typename, typename>
    struct is_base_of;

  template<typename>
    struct remove_reference;

  template<typename _From, typename _To, bool
           = __not_<__or_<is_void<_From>,
                          is_function<_From>>>::value>
    struct __is_base_to_derived_ref;



  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<_From
        >::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<_To
        >::type>::type __dst_t;
      typedef __and_<__not_<is_same<__src_t, __dst_t>>,
       is_base_of<__src_t, __dst_t>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_base_to_derived_ref<_From, _To, false>
    : public false_type
    { };

  template<typename _From, typename _To, bool
           = __and_<is_lvalue_reference<_From>,
                    is_rvalue_reference<_To>>::value>
    struct __is_lvalue_to_rvalue_ref;



  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, true>
    {
      typedef typename remove_cv<typename remove_reference<
        _From>::type>::type __src_t;
      typedef typename remove_cv<typename remove_reference<
        _To>::type>::type __dst_t;
      typedef __and_<__not_<is_function<__src_t>>,
        __or_<is_same<__src_t, __dst_t>,
      is_base_of<__dst_t, __src_t>>> type;
      static constexpr bool value = type::value;
    };

  template<typename _From, typename _To>
    struct __is_lvalue_to_rvalue_ref<_From, _To, false>
    : public false_type
    { };







  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_ref_cast
    : public __and_<__is_static_castable<_Arg, _Tp>,
                    __not_<__or_<__is_base_to_derived_ref<_Arg, _Tp>,
                                 __is_lvalue_to_rvalue_ref<_Arg, _Tp>
                   >>>::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible_new
    : public conditional<is_reference<_Tp>::value,
    __is_direct_constructible_ref_cast<_Tp, _Arg>,
    __is_direct_constructible_new_safe<_Tp, _Arg>
    >::type
    { };

  template<typename _Tp, typename _Arg>
    struct __is_direct_constructible
    : public __is_direct_constructible_new<_Tp, _Arg>::type
    { };






  struct __do_is_nary_constructible_impl
  {
    template<typename _Tp, typename... _Args, typename
             = decltype(_Tp(declval<_Args>()...))>
      static true_type __test(int);

    template<typename, typename...>
      static false_type __test(...);
  };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible_impl
    : public __do_is_nary_constructible_impl
    {
      typedef decltype(__test<_Tp, _Args...>(0)) type;
    };

  template<typename _Tp, typename... _Args>
    struct __is_nary_constructible
    : public __is_nary_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(sizeof...(_Args) > 1,
                    "Only useful for > 1 arguments");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __is_nary_constructible<_Tp, _Args...>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_constructible_impl<_Tp, _Arg>
    : public __is_direct_constructible<_Tp, _Arg>
    { };

  template<typename _Tp>
    struct __is_constructible_impl<_Tp>
    : public is_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
    : public __is_constructible_impl<_Tp, _Args...>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>::type
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>::type
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    class __is_assignable_helper
    {
      template<typename _Tp1, typename _Up1,
        typename = decltype(declval<_Tp1>() = declval<_Up1>())>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __is_assignable_helper<_Tp, _Up>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>::type
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };
# 1300 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/type_traits" 3
  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>::type
    { };


  template<typename _Tp>
    struct has_trivial_default_constructor
    : public integral_constant<bool, __has_trivial_constructor(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_copy_constructor
    : public integral_constant<bool, __has_trivial_copy(_Tp)>
    { };


  template<typename _Tp>
    struct has_trivial_copy_assign
    : public integral_constant<bool, __has_trivial_assign(_Tp)>
    { };


  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };





  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };






  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<wchar_t> : __make_unsigned<int>
    { };
# 1628 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      typedef conditional<__b2, unsigned int, unsigned long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };
# 1710 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/type_traits" 3
  template<>
    struct __make_signed<char16_t> : __make_signed<uint_least16_t>
    { };
  template<>
    struct __make_signed<char32_t> : __make_signed<uint_least32_t>
    { };
# 1725 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {

      typedef signed char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(signed short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(signed int);
      typedef conditional<__b2, signed int, signed long> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, signed short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

    public:
      typedef typename conditional<__b0, __smallest, __cond1_type>::type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 1879 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };




  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };


  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
      static typename add_rvalue_reference<_Tp>::type __delegate();
    };

  template<typename _Tp>
    inline typename add_rvalue_reference<_Tp>::type
    declval() noexcept
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval_protector<_Tp>::__delegate();
    }


  template<typename _Signature>
    class result_of;






  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __success_type<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      )> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __success_type<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      )> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __success_type<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      )> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __success_type<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      )> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type, _Arg>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type, _Arg, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __success_type<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      )> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
     _Functor, _ArgTypes...
      >::type
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;
# 2284 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/type_traits" 3
}
# 58 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 74 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 118 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 133 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



}
# 149 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 164 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)

    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)

    {



      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])

    noexcept(noexcept(swap(*__a, *__b)))

    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 61 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_function.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 104 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 144 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_function.h" 3
  struct __is_transparent;

  template<typename _Tp = void>
    struct plus;

  template<typename _Tp = void>
    struct minus;

  template<typename _Tp = void>
    struct multiplies;

  template<typename _Tp = void>
    struct divides;

  template<typename _Tp = void>
    struct modulus;

  template<typename _Tp = void>
    struct negate;



  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };






  template<>
    struct plus<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct minus<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct multiplies<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct divides<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct modulus<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct negate<void>
    {
      template <typename _Tp>
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(-std::forward<_Tp>(__t)))
 -> decltype(-std::forward<_Tp>(__t))
 { return -std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 319 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct equal_to;

  template<typename _Tp = void>
    struct not_equal_to;

  template<typename _Tp = void>
    struct greater;

  template<typename _Tp = void>
    struct less;

  template<typename _Tp = void>
    struct greater_equal;

  template<typename _Tp = void>
    struct less_equal;



  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };



  template<>
    struct equal_to<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct not_equal_to<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct less<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater_equal<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct less_equal<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };
# 489 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct logical_and;

  template<typename _Tp = void>
    struct logical_or;

  template<typename _Tp = void>
    struct logical_not;



  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };



  template<>
    struct logical_and<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_or<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_not<void>
    {
      template <typename _Tp>
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(!std::forward<_Tp>(__t)))
 -> decltype(!std::forward<_Tp>(__t))
 { return !std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };




  template<typename _Tp = void>
    struct bit_and;

  template<typename _Tp = void>
    struct bit_or;

  template<typename _Tp = void>
    struct bit_xor;

  template<typename _Tp = void>
    struct bit_not;




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };


  template <>
    struct bit_and<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_or<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_xor<void>
    {
      template <typename _Tp, typename _Up>
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_not<void>
    {
      template <typename _Tp>
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(~std::forward<_Tp>(__t)))
 -> decltype(~std::forward<_Tp>(__t))
 { return ~std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 703 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 774 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 894 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/binders.h" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/binders.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 103 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}
# 1085 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_function.h" 2 3
# 50 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 2 3



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/typeinfo" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/typeinfo" 3



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hash_bytes.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 136 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }


    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 54 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 2 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/tuple" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/tuple" 3





# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/utility" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/utility" 3
# 69 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/utility" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_relops.h" 1 3
# 67 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace rel_ops
  {
# 85 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }


  }

}
# 70 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/utility" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_pair.h" 1 3
# 65 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_pair.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 76 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_pair.h" 3
  struct piecewise_construct_t { };


  constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();


  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;
# 95 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      constexpr pair()
      : first(), second() { }


      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }







      template<class _U1, class _U2, class = typename
        enable_if<__and_<is_convertible<const _U1&, _T1>,
    is_convertible<const _U2&, _T2>>::value>::type>
 constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }

      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<class _U1, class = typename
        enable_if<is_convertible<_U1, _T1>::value>::type>
 constexpr pair(_U1&& __x, const _T2& __y)
 : first(std::forward<_U1>(__x)), second(__y) { }

      template<class _U2, class = typename
        enable_if<is_convertible<_U2, _T2>::value>::type>
 constexpr pair(const _T1& __x, _U2&& __y)
 : first(__x), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<class _U1, class _U2, class = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(const pair& __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(pair&& __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
               is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<class _U1, class _U2>
 pair&
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<class _U1, class _U2>
 pair&
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      noexcept(noexcept(swap(first, __p.first))
        && noexcept(swap(second, __p.second)))
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>
        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };


  template<class _T1, class _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<class _T1, class _T2>
    inline void
    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
# 273 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 293 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_pair.h" 3
}
# 71 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/utility" 2 3




# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/initializer_list" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 76 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/utility" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<class _Tp>
    class tuple_size;

  template<std::size_t _Int, class _Tp>
    class tuple_element;


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };

  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };

  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }





  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }




  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }




  template<size_t... _Indexes>
    struct _Index_tuple
    {
      typedef _Index_tuple<_Indexes..., sizeof...(_Indexes)> __next;
    };


  template<size_t _Num>
    struct _Build_index_tuple
    {
      typedef typename _Build_index_tuple<_Num - 1>::__type::__next __type;
    };

  template<>
    struct _Build_index_tuple<0>
    {
      typedef _Index_tuple<> __type;
    };






  template<typename _Tp, _Tp... _Idx>
    struct integer_sequence
    {
      typedef _Tp value_type;
      static constexpr size_t size() { return sizeof...(_Idx); }
    };

  template<typename _Tp, _Tp _Num,
    typename _ISeq = typename _Build_index_tuple<_Num>::__type>
    struct _Make_integer_sequence;

  template<typename _Tp, _Tp _Num, size_t... _Idx>
    struct _Make_integer_sequence<_Tp, _Num, _Index_tuple<_Idx...>>
    {
      static_assert( _Num >= 0,
       "Cannot make integer sequence of negative length" );

      typedef integer_sequence<_Tp, static_cast<_Tp>(_Idx)...> __type;
    };


  template<typename _Tp, _Tp _Num>
    using make_integer_sequence
      = typename _Make_integer_sequence<_Tp, _Num>::__type;


  template<size_t... _Idx>
    using index_sequence = integer_sequence<size_t, _Idx...>;


  template<size_t _Num>
    using make_index_sequence = make_integer_sequence<size_t, _Num>;


  template<typename... _Types>
    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;



}
# 39 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/tuple" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/array" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/array" 3





# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/stdexcept" 1 3
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/stdexcept" 3


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/string" 1 3
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/string" 3


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stringfwd.h" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stringfwd.h" 3


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/memoryfwd.h" 1 3
# 47 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/memoryfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{
# 63 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;


  template<typename, typename>
    struct uses_allocator;




}
# 41 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stringfwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 52 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stringfwd.h" 3
  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;


  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;


  typedef basic_string<wchar_t> wstring;





  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;





}
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/string" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/char_traits.h" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/char_traits.h" 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 1 3
# 60 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/functexcept.h" 1 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/functexcept.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 2 3


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/numeric_traits.h" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 54 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 106) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 31);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 308);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 2 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator_base_types.h" 1 3
# 63 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{
# 89 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 142 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator_base_types.h" 3
template<typename _Tp> class __has_iterator_category_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::iterator_category>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_iterator_category : public __has_iterator_category_helper <typename remove_cv<_Tp>::type>::type { };

  template<typename _Iterator,
    bool = __has_iterator_category<_Iterator>::value>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator, true>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 174 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }





  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };


  template<typename _InIter>
    using _RequireInputIter = typename
      enable_if<is_convertible<typename
  iterator_traits<_InIter>::iterator_category,
          input_iterator_tag>::value>::type;



}
# 66 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator_base_funcs.h" 1 3
# 63 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator_base_funcs.h" 3


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/debug/debug.h" 1 3
# 46 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 66 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {



      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {



      return __last - __first;
    }
# 112 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {


                                     ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {



      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {



      __i += __n;
    }
# 171 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _ForwardIterator>
    inline _ForwardIterator
    next(_ForwardIterator __x, typename
  iterator_traits<_ForwardIterator>::difference_type __n = 1)
    {
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {
      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 1 3
# 66 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ptr_traits.h" 1 3
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ptr_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


template<typename _Tp> class __has_element_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::element_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_element_type : public __has_element_type_helper <typename remove_cv<_Tp>::type>::type { };
template<typename _Tp> class __has_difference_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::difference_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_difference_type : public __has_difference_type_helper <typename remove_cv<_Tp>::type>::type { };

  template<typename _Tp, bool = __has_element_type<_Tp>::value>
    struct __ptrtr_elt_type;

  template<typename _Tp>
    struct __ptrtr_elt_type<_Tp, true>
    {
      typedef typename _Tp::element_type __type;
    };

  template<template<typename, typename...> class _SomePtr, typename _Tp,
            typename... _Args>
    struct __ptrtr_elt_type<_SomePtr<_Tp, _Args...>, false>
    {
      typedef _Tp __type;
    };

  template<typename _Tp, bool = __has_difference_type<_Tp>::value>
    struct __ptrtr_diff_type
    {
      typedef typename _Tp::difference_type __type;
    };

  template<typename _Tp>
    struct __ptrtr_diff_type<_Tp, false>
    {
      typedef ptrdiff_t __type;
    };

  template<typename _Ptr, typename _Up>
    class __ptrtr_rebind_helper
    {
      template<typename _Ptr2, typename _Up2>
 static constexpr true_type
 _S_chk(typename _Ptr2::template rebind<_Up2>*);

      template<typename, typename>
 static constexpr false_type
 _S_chk(...);

    public:
      using __type = decltype(_S_chk<_Ptr, _Up>(nullptr));
    };

  template<typename _Tp, typename _Up,
           bool = __ptrtr_rebind_helper<_Tp, _Up>::__type::value>
    struct __ptrtr_rebind;

  template<typename _Tp, typename _Up>
    struct __ptrtr_rebind<_Tp, _Up, true>
    {
      typedef typename _Tp::template rebind<_Up> __type;
    };

  template<template<typename, typename...> class _SomePtr, typename _Up,
            typename _Tp, typename... _Args>
    struct __ptrtr_rebind<_SomePtr<_Tp, _Args...>, _Up, false>
    {
      typedef _SomePtr<_Up, _Args...> __type;
    };

  template<typename _Tp, typename = typename remove_cv<_Tp>::type>
    struct __ptrtr_not_void
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __ptrtr_not_void<_Tp, void>
    {
      struct __type { };
    };

  template<typename _Ptr>
    class __ptrtr_pointer_to
    {
      typedef typename __ptrtr_elt_type<_Ptr>::__type __orig_type;
      typedef typename __ptrtr_not_void<__orig_type>::__type __element_type;

    public:
      static _Ptr pointer_to(__element_type& __e)
      { return _Ptr::pointer_to(__e); }
    };





  template<typename _Ptr>
    struct pointer_traits : __ptrtr_pointer_to<_Ptr>
    {

      typedef _Ptr pointer;

      typedef typename __ptrtr_elt_type<_Ptr>::__type element_type;

      typedef typename __ptrtr_diff_type<_Ptr>::__type difference_type;

      template<typename _Up>
        using rebind = typename __ptrtr_rebind<_Ptr, _Up>::__type;
    };





  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;






      static pointer
      pointer_to(typename __ptrtr_not_void<element_type>::__type& __r) noexcept
      { return std::addressof(__r); }
    };


}
# 67 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 96 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }
# 160 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 290 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>


    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())





    { return __y.base() - __x.base(); }
# 402 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 436 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 478 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 493 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 526 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 568 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 587 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 638 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 682 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 706 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }


      reference
      operator*() const noexcept
      { return *_M_current; }

      pointer
      operator->() const noexcept
      { return _M_current; }

      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }


      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 806 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}



namespace std __attribute__ ((__visibility__ ("default")))
{
# 946 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;
      typedef value_type&& reference;

      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>
 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
      { return std::move(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline auto
    operator-(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(__i); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }




}
# 68 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 2 3



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/predefined_ops.h" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
    };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {
    template<typename _Value, typename _Iterator>
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
    };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
    };

  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
    };

  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      _Iter_comp_iter(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Iterator1, typename _Iterator2>
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(__comp); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

      _Iter_comp_val(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Iterator, typename _Value>
 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(__comp); }

  template<typename _Compare>
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(__comp._M_comp); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

      _Val_comp_iter(_Compare __comp)
 : _M_comp(__comp)
      { }

      template<typename _Value, typename _Iterator>
 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(__comp); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(__comp._M_comp); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      typename std::iterator_traits<_Iterator1>::reference _M_ref;

      _Iter_equals_iter(_Iterator1 __it1)
 : _M_ref(*__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == _M_ref; }
    };

  template<typename _Iterator>
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

      _Iter_pred(_Predicate __pred)
 : _M_pred(__pred)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(__pred); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(__comp), _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
    __iter_comp_val(_Compare __comp, _Value &__val)
    { return _Iter_comp_to_val<_Compare, _Value>(__comp, __val); }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      typename std::iterator_traits<_Iterator1>::reference _M_ref;

      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(__comp), _M_ref(*__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, _M_ref)); }
    };

  template<typename _Compare, typename _Iterator>
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    { return _Iter_comp_to_iter<_Compare, _Iterator>(__comp._M_comp, __it); }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

      _Iter_negate(_Predicate __pred)
 : _M_pred(__pred)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(__pred._M_pred); }

}
}
# 72 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 118 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
# 148 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 164 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {





                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 192 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {



      if (__b < __a)
 return __b;
      return __a;
    }
# 215 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {



      if (__a < __b)
 return __b;
      return __a;
    }
# 238 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 259 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {


   static_assert( is_copy_assignable<_Tp>::value,
                  "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 454 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 487 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {




                                                     ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {


   static_assert( is_copy_assignable<_Tp>::value,
                  "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 628 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 664 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {






                                                     ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }
# 730 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {



                                                     ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 790 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {



      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   if (const size_t __len = (__last1 - __first1))
     return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
   return true;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 return std::__lexicographical_compare_impl(__first1, __last1,
         __first2, __last2,
     __gnu_cxx::__ops::__iter_less_iter());
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = __builtin_memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 990 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {




                                                                  ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline constexpr int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }
# 1047 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {






                                                       ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1079 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1112 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {






                                                       ;
                                                       ;

      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2);
 }

      for (; __first1 != __last1 && __first2 != __last2; ++__first1, ++__first2)
 if (!(*__first1 == *__first2))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1160 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
    {



                                                       ;
                                                       ;

      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_IIter1>::iterator_category;
      using _Cat2 = typename iterator_traits<_IIter2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2,
           __binary_pred);
 }

      for (; __first1 != __last1 && __first2 != __last2; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1207 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {
# 1221 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
                                                       ;
                                                       ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1243 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {



                                                       ;
                                                       ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1286 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {






                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1319 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {



                                                       ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __first2 != __last2
      && __binary_pred(__first1, __first2))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1366 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1401 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _BinaryPredicate __binary_pred)
    {



                                                       ;
                                                       ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }



}
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/char_traits.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/postypes.h" 1 3
# 39 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/postypes.h" 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwchar" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 41 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/bits/wchar.h" 1 3 4
# 42 "/usr/include/wchar.h" 2 3 4
# 51 "/usr/include/wchar.h" 3 4
# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 116 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 52 "/usr/include/wchar.h" 2 3 4
# 106 "/usr/include/wchar.h" 3 4
typedef __mbstate_t mbstate_t;
# 132 "/usr/include/wchar.h" 3 4
extern "C" {




struct tm;
# 147 "/usr/include/wchar.h" 3 4
extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));




extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();





extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    __locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, __locale_t __loc) throw ();





extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();
# 206 "/usr/include/wchar.h" 3 4
extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        __locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, __locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));
# 227 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));
# 237 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __attribute__ ((__pure__));






extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));
# 266 "/usr/include/wchar.h" 3 4
extern wchar_t *wcspbrk (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));
# 277 "/usr/include/wchar.h" 3 4
extern wchar_t *wcsstr (const wchar_t *__haystack, const wchar_t *__needle)
     throw () __attribute__ ((__pure__));



extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));
# 299 "/usr/include/wchar.h" 3 4
extern wchar_t *wcswcs (const wchar_t *__haystack, const wchar_t *__needle)
     throw () __attribute__ ((__pure__));





extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));
# 320 "/usr/include/wchar.h" 3 4
extern wchar_t *wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)
     throw () __attribute__ ((__pure__));



extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();





extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();






extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();
# 386 "/usr/include/wchar.h" 3 4
extern wint_t __btowc_alias (int __c) __asm ("btowc");
extern __inline __attribute__ ((__gnu_inline__)) wint_t
 btowc (int __c) throw ()
{ return (__builtin_constant_p (__c) && __c >= '\0' && __c <= '\x7f'
   ? (wint_t) __c : __btowc_alias (__c)); }

extern int __wctob_alias (wint_t __c) __asm ("wctob");
extern __inline __attribute__ ((__gnu_inline__)) int
 wctob (wint_t __wc) throw ()
{ return (__builtin_constant_p (__wc) && __wc >= L'\0' && __wc <= L'\x7f'
   ? (int) __wc : __wctob_alias (__wc)); }

extern __inline __attribute__ ((__gnu_inline__)) size_t
 mbrlen (const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps) throw ()

{ return (__ps != __null
   ? mbrtowc (__null, __s, __n, __ps) : __mbrlen (__s, __n, __null)); }





extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();






extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();






extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();





extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();







extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();






__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();






__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();
# 530 "/usr/include/wchar.h" 3 4
extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     __locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, __locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, __locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, __locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         __locale_t __loc) throw ();






extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();






extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();






extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;
# 689 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 745 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 801 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 827 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 837 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);







extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();







extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) throw ();
# 891 "/usr/include/wchar.h" 3 4
}
# 45 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwchar" 2 3
# 62 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }



}







namespace __gnu_cxx
{





  using ::wcstold;
# 257 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 277 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/postypes.h" 2 3
# 68 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 88 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/char_traits.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwchar" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 45 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwchar" 2 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/char_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{
# 57 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 82 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{
# 226 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((0xffffffffu)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}





# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdint" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdint" 3








# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stdint.h" 1 3
# 52 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stdint.h" 3
# 1 "/usr/include/stdint.h" 1 3 4
# 27 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 48 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 65 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 103 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 119 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 134 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 53 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stdint.h" 2 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdint" 2 3




namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 381 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/char_traits.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/string" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/allocator.h" 1 3
# 46 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/allocator.h" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++allocator.h" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++allocator.h" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/new_allocator.h" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 57 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };




      typedef std::true_type propagate_on_container_move_assignment;


      new_allocator() noexcept { }

      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) noexcept { }

      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const noexcept
      { return size_t(-1) / sizeof(_Tp); }


      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void
        destroy(_Up* __p) { __p->~_Up(); }
# 135 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/new_allocator.h" 3
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++allocator.h" 2 3


namespace std
{
# 47 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/allocator.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 62 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/allocator.h" 3
  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

    };
# 91 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __allocator_base<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;


      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {
 try
   {
     _Tp(__make_move_if_noexcept_iterator(__c.begin()),
  __make_move_if_noexcept_iterator(__c.end()),
  __c.get_allocator()).swap(__c);
     return true;
   }
 catch(...)
   { return false; }
      }
    };



}
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/string" 2 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/localefwd.h" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/localefwd.h" 3


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++locale.h" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++locale.h" 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/clocale" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 29 "/usr/include/locale.h" 3 4
# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/bits/locale.h" 1 3 4
# 31 "/usr/include/locale.h" 2 3 4

extern "C" {
# 54 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 121 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();
# 152 "/usr/include/locale.h" 3 4
extern __locale_t newlocale (int __category_mask, const char *__locale,
        __locale_t __base) throw ();
# 187 "/usr/include/locale.h" 3 4
extern __locale_t duplocale (__locale_t __dataset) throw ();



extern void freelocale (__locale_t __dataset) throw ();






extern __locale_t uselocale (__locale_t __dataset) throw ();







}
# 43 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/clocale" 2 3








namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 41 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/localefwd.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/iosfwd" 1 3
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/iosfwd" 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 74 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/localefwd.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cctype" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 29 "/usr/include/ctype.h" 3 4
extern "C" {
# 47 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 80 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 111 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();
# 137 "/usr/include/ctype.h" 3 4
extern int isblank (int) throw ();






extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 272 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) throw ();
extern int isalpha_l (int, __locale_t) throw ();
extern int iscntrl_l (int, __locale_t) throw ();
extern int isdigit_l (int, __locale_t) throw ();
extern int islower_l (int, __locale_t) throw ();
extern int isgraph_l (int, __locale_t) throw ();
extern int isprint_l (int, __locale_t) throw ();
extern int ispunct_l (int, __locale_t) throw ();
extern int isspace_l (int, __locale_t) throw ();
extern int isupper_l (int, __locale_t) throw ();
extern int isxdigit_l (int, __locale_t) throw ();

extern int isblank_l (int, __locale_t) throw ();



extern int __tolower_l (int __c, __locale_t __l) throw ();
extern int tolower_l (int __c, __locale_t __l) throw ();


extern int __toupper_l (int __c, __locale_t __l) throw ();
extern int toupper_l (int __c, __locale_t __l) throw ();
# 348 "/usr/include/ctype.h" 3 4
}
# 43 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cctype" 2 3
# 62 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}







namespace std
{
  using ::isblank;
}
# 43 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;


namespace __gnu_cxx_ldbl128 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;
}
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __gnu_cxx_ldbl128 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;


}
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/string" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ostream_insert.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ostream_insert.h" 3


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/cxxabi_forced.h" 1 3
# 35 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/string" 2 3






# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/range_access.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/range_access.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{







  template<class _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<class _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<class _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<class _Tp, size_t _Nm>
    inline _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<class _Tp, size_t _Nm>
    inline _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }


}
# 52 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/string" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/atomicity.h" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/atomicity.h" 3


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr.h" 1 3
# 30 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr.h" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr-default.h" 1 3
# 35 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 23 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 42 "/usr/include/sched.h" 3 4
# 1 "/usr/include/bits/sched.h" 1 3 4
# 73 "/usr/include/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int setns (int __fd, int __nstype) throw ();



}







struct __sched_param
  {
    int __sched_priority;
  };
# 119 "/usr/include/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 202 "/usr/include/bits/sched.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 43 "/usr/include/sched.h" 2 3 4




extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 117 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 32 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 33 "/usr/include/bits/setjmp.h" 2 3 4
# 43 "/usr/include/bits/setjmp.h" 3 4
typedef long int __jmp_buf[64] __attribute__ ((__aligned__ (16)));
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 116 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 157 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 192 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 230 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 488 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 500 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 534 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 736 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 800 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 882 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 994 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1038 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1105 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1139 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();




extern __inline __attribute__ ((__gnu_inline__)) int
 pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ()
{
  return __thread1 == __thread2;
}


}
# 36 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr-default.h" 2 3
# 47 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 101 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));

static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));

static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_init) __gthrw_pthread_cond_init __attribute__ ((__weakref__("pthread_cond_init")));
static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));

static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 236 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr-default.h" 3
static __typeof(pthread_key_create) __gthrw___pthread_key_create __attribute__ ((__weakref__("__pthread_key_create")));
# 246 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw___pthread_key_create;
  return __gthread_active_ptr != 0;
}
# 658 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    __gthrw_pthread_mutex_init (__mutex, __null);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}


static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 807 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 849 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 149 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/atomicity.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/atomic_word.h" 1 3
# 28 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 111 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 148 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 173 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep() noexcept
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const noexcept
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const noexcept
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked() noexcept
        { this->_M_refcount = -1; }

        void
 _M_set_sharable() noexcept
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n) noexcept
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a) noexcept
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {

                                                                  ;
       if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
        -1) <= 0)
  {
                                                              ;
    _M_destroy(__a);
  }
     }
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a) noexcept
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const noexcept
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p) noexcept
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const noexcept
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const noexcept
      { return iterator(_M_data()); }

      iterator
      _M_iend() const noexcept
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)"),

       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n) noexcept
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n) noexcept
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c) noexcept
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 noexcept
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      noexcept
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep() noexcept
      { return _Rep::_S_empty_rep(); }

    public:







      basic_string()

      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }







      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 488 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 512 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string(basic_string&& __str)

      noexcept

      : _M_dataplus(__str._M_dataplus)
      {

 __str._M_data(_S_empty_rep()._M_refdata());



      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc());
# 539 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string() noexcept
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 572 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 588 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      {

 this->swap(__str);
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }







      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const noexcept
      { return _M_rep()->_M_length; }



      size_type
      length() const noexcept
      { return _M_rep()->_M_length; }


      size_type
      max_size() const noexcept
      { return _Rep::_S_max_size; }
# 748 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 761 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit() noexcept
      {
 if (capacity() > size())
   {
     try
       { reserve(0); }
     catch(...)
       { }
   }
      }






      size_type
      capacity() const noexcept
      { return _M_rep()->_M_capacity; }
# 805 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);





      void
      clear()
      { _M_mutate(0, this->size(), 0); }





      bool
      empty() const noexcept
      { return this->size() == 0; }
# 835 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const noexcept
      {
                                       ;
 return _M_data()[__pos];
      }
# 852 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {


                                       ;

                                                                   ;
 _M_leak();
 return _M_data()[__pos];
      }
# 874 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
 return _M_data()[__n];
      }
# 896 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
 _M_leak();
 return _M_data()[__n];
      }






      reference
      front()
      { return operator[](0); }





      const_reference
      front() const noexcept
      { return operator[](0); }





      reference
      back()
      { return operator[](this->size() - 1); }





      const_reference
      back() const noexcept
      { return operator[](this->size() - 1); }
# 948 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }







      basic_string&
      append(const basic_string& __str);
# 1005 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
                               ;
 return this->append(__s, traits_type::length(__s));
      }
# 1037 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1059 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 1096 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      {
 this->swap(__str);
 return *this;
      }
# 1117 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 1133 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 1145 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
                               ;
 return this->assign(__s, traits_type::length(__s));
      }
# 1161 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1173 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1202 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1218 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1230 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
                                                                 ;
 this->insert(__p - _M_ibegin(), __l.begin(), __l.size());
      }
# 1250 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1272 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1295 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1313 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
                               ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1336 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1354 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
                                                                 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1379 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1395 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {

                               ;
 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1415 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last);







      void
      pop_back()
      { erase(size()-1, 1); }
# 1446 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1468 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1493 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1513 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
                               ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1537 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1555 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1574 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {

                          ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1595 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
                               ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1616 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {

                          ;
 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1639 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {

                            ;
                                             ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                          ;
                                           ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1710 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string& replace(iterator __i1, iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.end()); }


    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct_aux_2(static_cast<size_type>(__beg),
        __end, __a); }

      static _CharT*
      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
      { return _S_construct(__req, __c, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1797 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1808 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1818 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }







      const _CharT*
      data() const noexcept
      { return _M_data(); }




      allocator_type
      get_allocator() const noexcept
      { return _M_dataplus; }
# 1851 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1864 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
 noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 1879 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1896 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 1909 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
 noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1926 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1939 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1956 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 1970 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
 noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1987 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2000 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2019 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 2034 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
 noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2051 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2064 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2083 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 2097 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
 noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2114 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2128 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
                               ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2145 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
 noexcept;
# 2160 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
 noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2177 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2191 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
                               ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2208 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
 noexcept;
# 2224 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2243 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2275 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2301 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2319 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2343 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2370 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
# 2382 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 2503 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2549 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2586 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2623 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2660 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2697 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2734 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2752 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2770 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2793 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2810 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}




# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/string_conversions.h" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/string_conversions.h" 3








# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/string_conversions.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwchar" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 45 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwchar" 2 3
# 43 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/string_conversions.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdio" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdio" 3
# 96 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdio" 3
namespace __gnu_cxx
{
# 175 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/string_conversions.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cerrno" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cerrno" 3

# 1 "/usr/include/errno.h" 1 3 4
# 31 "/usr/include/errno.h" 3 4
extern "C" {




# 1 "/usr/include/bits/errno.h" 1 3 4
# 24 "/usr/include/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/asm/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 6 "/usr/include/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 25 "/usr/include/bits/errno.h" 2 3 4
# 50 "/usr/include/bits/errno.h" 3 4
extern int *__errno_location (void) throw () __attribute__ ((__const__));
# 36 "/usr/include/errno.h" 2 3 4
# 54 "/usr/include/errno.h" 3 4
extern char *program_invocation_name, *program_invocation_short_name;



}
# 68 "/usr/include/errno.h" 3 4
typedef int error_t;
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cerrno" 2 3
# 45 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/string_conversions.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;
      (*__errno_location ()) = 0;
      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*__errno_location ()) == 34
        || (std::__are_same<_Ret, int>::__value
     && (__tmp < __numeric_traits<int>::__min
         || __tmp > __numeric_traits<int>::__max)))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 2850 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }




  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }


  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }



  inline wstring
  to_wstring(int __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int),
         L"%d", __val); }

  inline wstring
  to_wstring(unsigned __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned),
         L"%u", __val); }

  inline wstring
  to_wstring(long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long),
         L"%ld", __val); }

  inline wstring
  to_wstring(unsigned long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long),
         L"%lu", __val); }

  inline wstring
  to_wstring(long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(long long),
         L"%lld", __val); }

  inline wstring
  to_wstring(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf,
         4 * sizeof(unsigned long long),
         L"%llu", __val); }

  inline wstring
  to_wstring(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%f", __val);
  }

  inline wstring
  to_wstring(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n,
         L"%Lf", __val);
  }




}






# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/functional_hash.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/functional_hash.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{
# 49 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type;
      typedef _Arg argument_type;
    };


  template<typename _Tp>
    struct hash;


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 80 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };



  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };

  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };







  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 3070 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string>> : std::false_type
    { };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring>> : std::false_type
    { };





  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string>> : std::false_type
    { };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string>> : std::false_type
    { };






  inline namespace literals
  {
  inline namespace string_literals
  {

    inline basic_string<char>
    operator""s(const char* __str, size_t __len)
    { return basic_string<char>{__str, __len}; }


    inline basic_string<wchar_t>
    operator""s(const wchar_t* __str, size_t __len)
    { return basic_string<wchar_t>{__str, __len}; }



    inline basic_string<char16_t>
    operator""s(const char16_t* __str, size_t __len)
    { return basic_string<char16_t>{__str, __len}; }

    inline basic_string<char32_t>
    operator""s(const char32_t* __str, size_t __len)
    { return basic_string<char32_t>{__str, __len}; }


  }
  }




}
# 53 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/string" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.tcc" 1 3
# 41 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 try
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   __throw_logic_error(("basic_string::_S_construct null not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 try
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {

      if (__n == 0 && __a == _Alloc())
 return _S_empty_rep()._M_refdata();


      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(initializer_list<_CharT> __l, const _Alloc& __a)
    : _M_dataplus(_S_construct(__l.begin(), __l.end(), __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
                                             ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
                                             ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
                                              ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {

                           ;




       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
                                               ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {

      if (_M_rep() == &_S_empty_rep())
 return;

      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 577 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
                                      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
                                             ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
                                             ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
                                    ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
                                    ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
                                              ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 54 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/string" 2 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/stdexcept" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/stdexcept" 3
  class logic_error : public exception
  {
    string _M_msg;

  public:

    explicit
    logic_error(const string& __arg);

    virtual ~logic_error() noexcept;



    virtual const char*
    what() const noexcept;
  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg);
    virtual ~domain_error() noexcept;
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg);
    virtual ~invalid_argument() noexcept;
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg);
    virtual ~length_error() noexcept;
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg);
    virtual ~out_of_range() noexcept;
  };






  class runtime_error : public exception
  {
    string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg);

    virtual ~runtime_error() noexcept;



    virtual const char*
    what() const noexcept;
  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg);
    virtual ~range_error() noexcept;
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg);
    virtual ~overflow_error() noexcept;
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg);
    virtual ~underflow_error() noexcept;
  };




}
# 39 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/array" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, std::size_t _Nm>
    struct __array_traits
    {
      typedef _Tp _Type[_Nm];

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }

      static constexpr _Tp*
      _S_ptr(const _Type& __t) noexcept
      { return const_cast<_Tp*>(__t); }
    };

 template<typename _Tp>
   struct __array_traits<_Tp, 0>
   {
     struct _Type { };

     static constexpr _Tp&
     _S_ref(const _Type&, std::size_t) noexcept
     { return *static_cast<_Tp*>(nullptr); }

     static constexpr _Tp*
     _S_ptr(const _Type&) noexcept
     { return nullptr; }
   };
# 88 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/array" 3
  template<typename _Tp, std::size_t _Nm>
    struct array
    {
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef value_type* iterator;
      typedef const value_type* const_iterator;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;


      typedef std::__array_traits<_Tp, _Nm> _AT_Type;
      typename _AT_Type::_Type _M_elems;




      void
      fill(const value_type& __u)
      { std::fill_n(begin(), size(), __u); }

      void
      swap(array& __other)
      noexcept(noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>())))
      { std::swap_ranges(begin(), end(), __other.begin()); }


      iterator
      begin() noexcept
      { return iterator(data()); }

      const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      iterator
      end() noexcept
      { return iterator(data() + _Nm); }

      const_iterator
      end() const noexcept
      { return const_iterator(data() + _Nm); }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      const_iterator
      cbegin() const noexcept
      { return const_iterator(data()); }

      const_iterator
      cend() const noexcept
      { return const_iterator(data() + _Nm); }

      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      constexpr size_type
      size() const noexcept { return _Nm; }

      constexpr size_type
      max_size() const noexcept { return _Nm; }

      constexpr bool
      empty() const noexcept { return size() == 0; }


      reference
      operator[](size_type __n) noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      reference
      at(size_type __n)
      {
 if (__n >= _Nm)
   std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)"),

     __n, _Nm);
 return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      at(size_type __n) const
      {


 return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
   : (std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)"),

        __n, _Nm),
      _AT_Type::_S_ref(_M_elems, 0));
      }

      reference
      front() noexcept
      { return *begin(); }

      constexpr const_reference
      front() const noexcept
      { return _AT_Type::_S_ref(_M_elems, 0); }

      reference
      back() noexcept
      { return _Nm ? *(end() - 1) : *end(); }

      constexpr const_reference
      back() const noexcept
      {
 return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
             : _AT_Type::_S_ref(_M_elems, 0);
      }

      pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      const_pointer
      data() const noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
    };


  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one == __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)
    {
      return std::lexicographical_compare(__a.begin(), __a.end(),
       __b.begin(), __b.end());
    }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return __two < __one; }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one > __two); }

  template<typename _Tp, std::size_t _Nm>
    inline bool
    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one < __two); }


  template<typename _Tp, std::size_t _Nm>
    inline void
    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)
    noexcept(noexcept(__one.swap(__two)))
    { __one.swap(__two); }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&
    get(array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&&
    get(array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      return std::move(get<_Int>(__arr));
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr const _Tp&
    get(const array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{





  template<typename _Tp>
    class tuple_size;

  template<typename _Tp, std::size_t _Nm>
    struct tuple_size<std::array<_Tp, _Nm>>
    : public integral_constant<std::size_t, _Nm> { };


  template<std::size_t _Int, typename _Tp>
    class tuple_element;

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    struct tuple_element<_Int, std::array<_Tp, _Nm>>
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      typedef _Tp type;
    };


}
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/tuple" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/uses_allocator.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/uses_allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct allocator_arg_t { };

  constexpr allocator_arg_t allocator_arg = allocator_arg_t();

template<typename _Tp> class __has_allocator_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::allocator_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_allocator_type : public __has_allocator_type_helper <typename remove_cv<_Tp>::type>::type { };

  template<typename _Tp, typename _Alloc,
    bool = __has_allocator_type<_Tp>::value>
    struct __uses_allocator_helper
    : public false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc, true>
    : public integral_constant<bool, is_convertible<_Alloc,
         typename _Tp::allocator_type>::value>
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : public integral_constant<bool,
          __uses_allocator_helper<_Tp, _Alloc>::value>
    { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_allocator_arg
    : is_constructible<_Tp, _Alloc, _Args...>
    { static_assert( uses_allocator<_Tp, _Alloc>::value, "uses allocator" ); };

  struct __uses_alloc_base { };
  struct __uses_alloc0 : __uses_alloc_base
  { struct _Anything { _Anything(...) { } } _M_a; };
  template<typename _Alloc>
    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };
  template<typename _Alloc>
    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };

  template<bool, typename _Alloc, typename... _Args>
    struct __uses_alloc;

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<true, _Tp, _Alloc, _Args...>
    : conditional<
        is_constructible<_Tp, allocator_arg_t, _Alloc, _Args...>::value,
        __uses_alloc1<_Alloc>,
        __uses_alloc2<_Alloc>>::type
    { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<false, _Tp, _Alloc, _Args...>
    : __uses_alloc0 { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc_impl
    : __uses_alloc<uses_allocator<_Tp, _Alloc>::value, _Tp, _Alloc, _Args...>
    { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    __uses_alloc_impl<_Tp, _Alloc, _Args...>
    __use_alloc(const _Alloc& __a)
    {
      __uses_alloc_impl<_Tp, _Alloc, _Args...> __ret;
      __ret._M_a = &__a;
      return __ret;
    }


}
# 41 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/tuple" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 52 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/tuple" 3
  template<typename _Tp>
    struct __add_c_ref
    { typedef const _Tp& type; };

  template<typename _Tp>
    struct __add_c_ref<_Tp&>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct __add_ref
    { typedef _Tp& type; };

  template<typename _Tp>
    struct __add_ref<_Tp&>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct __add_r_ref
    { typedef _Tp&& type; };

  template<typename _Tp>
    struct __add_r_ref<_Tp&>
    { typedef _Tp& type; };

  template<std::size_t _Idx, typename _Head, bool _IsEmptyNotFinal>
    struct _Head_base;

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
      : _Head(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _Head(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _Head() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _Head(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _Head(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _M_head_impl() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _M_head_impl(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _M_head_impl(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }

      _Head _M_head_impl;
    };
# 185 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/tuple" 3
  template<std::size_t _Idx, typename... _Elements>
    struct _Tuple_impl;





  template<std::size_t _Idx>
    struct _Tuple_impl<_Idx>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      _Tuple_impl() = default;

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t, const _Alloc&) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t, const _Alloc&, const _Tuple_impl&) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t, const _Alloc&, _Tuple_impl&&) { }

    protected:
      void _M_swap(_Tuple_impl&) noexcept { }
    };

  template<typename _Tp>
    struct __is_empty_non_tuple : is_empty<_Tp> { };


  template<typename _El0, typename... _El>
    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };


  template<typename _Tp>
    using __empty_not_final
    = typename conditional<__is_final(_Tp), false_type,
      __is_empty_non_tuple<_Tp>>::type;






  template<std::size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head, __empty_not_final<_Head>::value>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head, __empty_not_final<_Head>::value> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
               is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))),
 _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename... _UElements>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _UHead, typename... _UTails>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a),
          _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head, const _Tail&... __tail)
 : _Inherited(__tag, __a, __tail...),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead, typename... _UTail,
               typename = typename enable_if<sizeof...(_Tail)
          == sizeof...(_UTail)>::type>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head, _UTail&&... __tail)
 : _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
          _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>
        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Inherited(__tag, __a, _M_tail(__in)),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Inherited(__tag, __a, std::move(_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename... _UElements>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(__tag, __a,
       _Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  _Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead, typename... _UTails>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(__tag, __a, std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      _Tuple_impl&
      operator=(const _Tuple_impl& __in)
      {
 _M_head(*this) = _M_head(__in);
 _M_tail(*this) = _M_tail(__in);
 return *this;
      }

      _Tuple_impl&
      operator=(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_assignable<_Head>,
               is_nothrow_move_assignable<_Inherited>>::value)
      {
 _M_head(*this) = std::forward<_Head>(_M_head(__in));
 _M_tail(*this) = std::move(_M_tail(__in));
 return *this;
      }

      template<typename... _UElements>
        _Tuple_impl&
        operator=(const _Tuple_impl<_Idx, _UElements...>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
   _M_tail(*this) = _Tuple_impl<_Idx, _UElements...>::_M_tail(__in);
   return *this;
 }

      template<typename _UHead, typename... _UTails>
        _Tuple_impl&
        operator=(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
   _M_head(*this) = std::forward<_UHead>
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
   _M_tail(*this) = std::move
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in));
   return *this;
 }

    protected:
      void
      _M_swap(_Tuple_impl& __in)
      noexcept(noexcept(swap(std::declval<_Head&>(),
        std::declval<_Head&>()))
        && noexcept(_M_tail(__in)._M_swap(_M_tail(__in))))
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
 _Inherited::_M_swap(_M_tail(__in));
      }
    };


  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _Elements&... __elements)
      : _Inherited(__elements...) { }

      template<typename... _UElements, typename = typename
        enable_if<__and_<is_convertible<_UElements,
     _Elements>...>::value>::type>
 explicit
        constexpr tuple(_UElements&&... __elements)
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename... _UElements, typename = typename
        enable_if<__and_<is_convertible<const _UElements&,
     _Elements>...>::value>::type>
        constexpr tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
        { }

      template<typename... _UElements, typename = typename
        enable_if<__and_<is_convertible<_UElements,
     _Elements>...>::value>::type>
        constexpr tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
        { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      noexcept(is_nothrow_move_assignable<_Inherited>::value)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
        tuple&
        operator=(const tuple<_UElements...>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename... _UElements, typename = typename
        enable_if<sizeof...(_UElements)
    == sizeof...(_Elements)>::type>
        tuple&
        operator=(tuple<_UElements...>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      void
      swap(tuple& __in)
      noexcept(noexcept(__in._M_swap(__in)))
      { _Inherited::_M_swap(__in); }
    };


  template<>
    class tuple<>
    {
    public:
      void swap(tuple&) noexcept { }
    };



  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;

    public:
      constexpr tuple()
      : _Inherited() { }

      explicit
      constexpr tuple(const _T1& __a1, const _T2& __a2)
      : _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2, typename = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
        explicit
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename _U1, typename _U2, typename = typename
 enable_if<__and_<is_convertible<const _U1&, _T1>,
    is_convertible<const _U2&, _T2>>::value>::type>
        constexpr tuple(const tuple<_U1, _U2>& __in)
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2, typename = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
        constexpr tuple(tuple<_U1, _U2>&& __in)
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2, typename = typename
 enable_if<__and_<is_convertible<const _U1&, _T1>,
    is_convertible<const _U2&, _T2>>::value>::type>
        constexpr tuple(const pair<_U1, _U2>& __in)
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2, typename = typename
        enable_if<__and_<is_convertible<_U1, _T1>,
    is_convertible<_U2, _T2>>::value>::type>
        constexpr tuple(pair<_U1, _U2>&& __in)
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }



      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _U1, typename _U2>
 tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _U1, typename _U2>
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2>
 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2>
        tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2>
        tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      tuple&
      operator=(const tuple& __in)
      {
 static_cast<_Inherited&>(*this) = __in;
 return *this;
      }

      tuple&
      operator=(tuple&& __in)
      noexcept(is_nothrow_move_assignable<_Inherited>::value)
      {
 static_cast<_Inherited&>(*this) = std::move(__in);
 return *this;
      }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const tuple<_U1, _U2>& __in)
        {
   static_cast<_Inherited&>(*this) = __in;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(tuple<_U1, _U2>&& __in)
        {
   static_cast<_Inherited&>(*this) = std::move(__in);
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(const pair<_U1, _U2>& __in)
        {
   this->_M_head(*this) = __in.first;
   this->_M_tail(*this)._M_head(*this) = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>
        tuple&
        operator=(pair<_U1, _U2>&& __in)
        {
   this->_M_head(*this) = std::forward<_U1>(__in.first);
   this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
   return *this;
 }

      void
      swap(tuple& __in)
      noexcept(noexcept(__in._M_swap(__in)))
      { _Inherited::_M_swap(__in); }
    };



  template<std::size_t __i, typename _Tp>
    struct tuple_element;





  template<std::size_t __i, typename _Head, typename... _Tail>
    struct tuple_element<__i, tuple<_Head, _Tail...> >
    : tuple_element<__i - 1, tuple<_Tail...> > { };




  template<typename _Head, typename... _Tail>
    struct tuple_element<0, tuple<_Head, _Tail...> >
    {
      typedef _Head type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      typedef typename
      add_const<typename tuple_element<__i, _Tp>::type>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      typedef typename
      add_volatile<typename tuple_element<__i, _Tp>::type>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      typedef typename
      add_cv<typename tuple_element<__i, _Tp>::type>::type type;
    };


  template<std::size_t __i, typename _Tp>
    using tuple_element_t = typename tuple_element<__i, _Tp>::type;



  template<typename _Tp>
    struct tuple_size;



  template<typename _Tp>
    struct tuple_size<const _Tp>
    : public integral_constant<size_t, tuple_size<_Tp>::value> { };

  template<typename _Tp>
    struct tuple_size<volatile _Tp>
    : public integral_constant<size_t, tuple_size<_Tp>::value> { };

  template<typename _Tp>
    struct tuple_size<const volatile _Tp>
    : public integral_constant<size_t, tuple_size<_Tp>::value> { };


  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr typename __add_c_ref<_Head>::type
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_c_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(const tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr typename __add_r_ref<
                      typename tuple_element<__i, tuple<_Elements...>>::type
                    >::type
    get(tuple<_Elements...>&& __t) noexcept
    { return std::forward<typename tuple_element<__i,
 tuple<_Elements...>>::type&&>(get<__i>(__t)); }





  template<typename _Head, size_t __i, typename... _Tail>
    constexpr typename __add_ref<_Head>::type
    __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<typename _Head, size_t __i, typename... _Tail>
    constexpr typename __add_c_ref<_Head>::type
    __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&
    get(tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&&
    get(tuple<_Types...>&& __t) noexcept
    { return std::forward<_Tp&&>(std::__get_helper2<_Tp>(__t)); }


  template <typename _Tp, typename... _Types>
    constexpr const _Tp&
    get(const tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }




  template<std::size_t __check_equal_size, std::size_t __i, std::size_t __j,
    typename _Tp, typename _Up>
    struct __tuple_compare;

  template<std::size_t __i, std::size_t __j, typename _Tp, typename _Up>
    struct __tuple_compare<0, __i, __j, _Tp, _Up>
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
 return (get<__i>(__t) == get<__i>(__u) &&
  __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__eq(__t, __u));
      }

      static constexpr bool
      __less(const _Tp& __t, const _Up& __u)
      {
 return ((get<__i>(__t) < get<__i>(__u))
  || !(get<__i>(__u) < get<__i>(__t)) &&
  __tuple_compare<0, __i + 1, __j, _Tp, _Up>::__less(__t, __u));
      }
    };

  template<std::size_t __i, typename _Tp, typename _Up>
    struct __tuple_compare<0, __i, __i, _Tp, _Up>
    {
      static constexpr bool
      __eq(const _Tp&, const _Up&) { return true; }

      static constexpr bool
      __less(const _Tp&, const _Up&) { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      typedef tuple<_TElements...> _Tp;
      typedef tuple<_UElements...> _Up;
      return bool(__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,
       0, tuple_size<_Tp>::value, _Tp, _Up>::__eq(__t, __u));
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      typedef tuple<_TElements...> _Tp;
      typedef tuple<_UElements...> _Up;
      return bool(__tuple_compare<tuple_size<_Tp>::value - tuple_size<_Up>::value,
       0, tuple_size<_Tp>::value, _Tp, _Up>::__less(__t, __u));
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }


  template<typename... _Elements>
    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }

  template<typename... _Elements>
    tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };

  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<pair<_T1, _T2>> : true_type
    { };

  template<typename _Tp, std::size_t _Nm>
    struct __is_tuple_like_impl<array<_Tp, _Nm>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<typename std::remove_cv
            <typename std::remove_reference<_Tp>::type>::type>::type
    { };

  template<std::size_t, typename, typename, std::size_t>
    struct __make_tuple_impl;

  template<std::size_t _Idx, typename _Tuple, typename... _Tp,
           std::size_t _Nm>
    struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
    {
      typedef typename __make_tuple_impl<_Idx + 1, tuple<_Tp...,
 typename std::tuple_element<_Idx, _Tuple>::type>, _Tuple, _Nm>::__type
      __type;
    };

  template<std::size_t _Nm, typename _Tuple, typename... _Tp>
    struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
    {
      typedef tuple<_Tp...> __type;
    };

  template<typename _Tuple>
    struct __do_make_tuple
    : public __make_tuple_impl<0, tuple<>, _Tuple,
                               std::tuple_size<_Tuple>::value>
    { };


  template<typename _Tuple>
    struct __make_tuple
    : public __do_make_tuple<typename std::remove_cv
            <typename std::remove_reference<_Tuple>::type>::type>
    { };


  template<typename...>
    struct __combine_tuples;

  template<>
    struct __combine_tuples<>
    {
      typedef tuple<> __type;
    };

  template<typename... _Ts>
    struct __combine_tuples<tuple<_Ts...>>
    {
      typedef tuple<_Ts...> __type;
    };

  template<typename... _T1s, typename... _T2s, typename... _Rem>
    struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
    {
      typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
     _Rem...>::__type __type;
    };


  template<typename... _Tpls>
    struct __tuple_cat_result
    {
      typedef typename __combine_tuples
        <typename __make_tuple<_Tpls>::__type...>::__type __type;
    };



  template<typename...>
    struct __make_1st_indices;

  template<>
    struct __make_1st_indices<>
    {
      typedef std::_Index_tuple<> __type;
    };

  template<typename _Tp, typename... _Tpls>
    struct __make_1st_indices<_Tp, _Tpls...>
    {
      typedef typename std::_Build_index_tuple<std::tuple_size<
 typename std::remove_reference<_Tp>::type>::value>::__type __type;
    };




  template<typename _Ret, typename _Indices, typename... _Tpls>
    struct __tuple_concater;

  template<typename _Ret, std::size_t... _Is, typename _Tp, typename... _Tpls>
    struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>
    {
      template<typename... _Us>
        static constexpr _Ret
        _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
        {
   typedef typename __make_1st_indices<_Tpls...>::__type __idx;
   typedef __tuple_concater<_Ret, __idx, _Tpls...> __next;
   return __next::_S_do(std::forward<_Tpls>(__tps)...,
          std::forward<_Us>(__us)...,
          std::get<_Is>(std::forward<_Tp>(__tp))...);
 }
    };

  template<typename _Ret>
    struct __tuple_concater<_Ret, std::_Index_tuple<>>
    {
      template<typename... _Us>
 static constexpr _Ret
 _S_do(_Us&&... __us)
        {
   return _Ret(std::forward<_Us>(__us)...);
 }
    };


  template<typename... _Tpls, typename = typename
           enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>
    constexpr auto
    tuple_cat(_Tpls&&... __tpls)
    -> typename __tuple_cat_result<_Tpls...>::__type
    {
      typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
      typedef typename __make_1st_indices<_Tpls...>::__type __idx;
      typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
      return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
    }


  template<typename... _Elements>
    inline tuple<_Elements&...>
    tie(_Elements&... __args) noexcept
    { return tuple<_Elements&...>(__args...); }


  template<typename... _Elements>
    inline void
    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }



  struct _Swallow_assign
  {
    template<class _Tp>
      const _Swallow_assign&
      operator=(const _Tp&) const
      { return *this; }
  };

  const _Swallow_assign ignore{};


  template<typename... _Types, typename _Alloc>
    struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };


  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
      inline
      pair<_T1, _T2>::
      pair(piecewise_construct_t,
    tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
      typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
      typename _Build_index_tuple<sizeof...(_Args2)>::__type())
      { }

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
    _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
      { }




}
# 56 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _MemberPointer>
    class _Mem_fn;
  template<typename _Tp, typename _Class>
    _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::*) noexcept;

template<typename _Tp> class __has_result_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::result_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_result_type : public __has_result_type_helper <typename remove_cv<_Tp>::type>::type { };


  template<bool _Has_result_type, typename _Functor>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<true, _Functor>
    { typedef typename _Functor::result_type result_type; };





  template<typename _Functor>
    struct _Weak_result_type_impl
    : _Maybe_get_result_type<__has_result_type<_Functor>::value, _Functor>
    { };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes...) const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(_ArgTypes......) const volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(&)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) const>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) const>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...) volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......) volatile>
    { typedef _Res result_type; };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes...)
      const volatile>
    { typedef _Res result_type; };

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Weak_result_type_impl<_Res (_Class::*)(_ArgTypes......)
      const volatile>
    { typedef _Res result_type; };





  template<typename _Functor>
    struct _Weak_result_type
    : _Weak_result_type_impl<typename remove_cv<_Functor>::type>
    { };





  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (!is_member_pointer<_Functor>::value
       && !is_function<_Functor>::value
       && !is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor&(_Args&&...)>::type
    >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }

  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
             (is_member_pointer<_Functor>::value
              && !is_function<_Functor>::value
              && !is_function<typename remove_pointer<_Functor>::type>::value),
             typename result_of<_Functor(_Args&&...)>::type
           >::type
    __invoke(_Functor& __f, _Args&&... __args)
    {
      return std::mem_fn(__f)(std::forward<_Args>(__args)...);
    }


  template<typename _Functor, typename... _Args>
    inline
    typename enable_if<
      (is_pointer<_Functor>::value
       && is_function<typename remove_pointer<_Functor>::type>::value),
      typename result_of<_Functor(_Args&&...)>::type
    >::type
    __invoke(_Functor __f, _Args&&... __args)
    {
      return __f(std::forward<_Args>(__args)...);
    }






  template<bool _Unary, bool _Binary, typename _Tp>
    struct _Reference_wrapper_base_impl;


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, false, _Tp>
    : _Weak_result_type<_Tp>
    { };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, false, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
    };


  template<typename _Tp>
    struct _Reference_wrapper_base_impl<false, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };


   template<typename _Tp>
    struct _Reference_wrapper_base_impl<true, true, _Tp>
    : _Weak_result_type<_Tp>
    {
      typedef typename _Tp::argument_type argument_type;
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };

  template<typename _Tp> class __has_argument_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::argument_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_argument_type : public __has_argument_type_helper <typename remove_cv<_Tp>::type>::type { };
  template<typename _Tp> class __has_first_argument_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::first_argument_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_first_argument_type : public __has_first_argument_type_helper <typename remove_cv<_Tp>::type>::type { };
  template<typename _Tp> class __has_second_argument_type_helper { template<typename _Up> struct _Wrap_type { }; template<typename _Up> static true_type __test(_Wrap_type<typename _Up::second_argument_type>*); template<typename _Up> static false_type __test(...); public: typedef decltype(__test<_Tp>(0)) type; }; template<typename _Tp> struct __has_second_argument_type : public __has_second_argument_type_helper <typename remove_cv<_Tp>::type>::type { };







  template<typename _Tp>
    struct _Reference_wrapper_base
    : _Reference_wrapper_base_impl<
      __has_argument_type<_Tp>::value,
      __has_first_argument_type<_Tp>::value
      && __has_second_argument_type<_Tp>::value,
      _Tp>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1)>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) volatile>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const volatile>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(*)(_T1)>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(*)(_T1, _T2)>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)()>
    : unary_function<_T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2)>
    : binary_function<_T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const>
    : unary_function<const _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const>
    : binary_function<const _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() volatile>
    : unary_function<volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) volatile>
    : binary_function<volatile _T1*, _T2, _Res>
    { };


  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res (_T1::*)() const volatile>
    : unary_function<const volatile _T1*, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res (_T1::*)(_T2) const volatile>
    : binary_function<const volatile _T1*, _T2, _Res>
    { };






  template<typename _Tp>
    class reference_wrapper
    : public _Reference_wrapper_base<typename remove_cv<_Tp>::type>
    {
      _Tp* _M_data;

    public:
      typedef _Tp type;

      reference_wrapper(_Tp& __indata) noexcept
      : _M_data(std::__addressof(__indata))
      { }

      reference_wrapper(_Tp&&) = delete;

      reference_wrapper(const reference_wrapper<_Tp>& __inref) noexcept
      : _M_data(__inref._M_data)
      { }

      reference_wrapper&
      operator=(const reference_wrapper<_Tp>& __inref) noexcept
      {
 _M_data = __inref._M_data;
 return *this;
      }

      operator _Tp&() const noexcept
      { return this->get(); }

      _Tp&
      get() const noexcept
      { return *_M_data; }

      template<typename... _Args>
 typename result_of<_Tp&(_Args&&...)>::type
 operator()(_Args&&... __args) const
 {
   return __invoke(get(), std::forward<_Args>(__args)...);
 }
    };



  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
    { return reference_wrapper<_Tp>(__t); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(const _Tp& __t) noexcept
    { return reference_wrapper<const _Tp>(__t); }

  template<typename _Tp>
    void ref(const _Tp&&) = delete;

  template<typename _Tp>
    void cref(const _Tp&&) = delete;


  template<typename _Tp>
    inline reference_wrapper<_Tp>
    ref(reference_wrapper<_Tp> __t) noexcept
    { return ref(__t.get()); }


  template<typename _Tp>
    inline reference_wrapper<const _Tp>
    cref(reference_wrapper<_Tp> __t) noexcept
    { return cref(__t.get()); }



  template<typename... _Types>
    struct _Pack : integral_constant<size_t, sizeof...(_Types)>
    { };

  template<typename _From, typename _To, bool = _From::value == _To::value>
    struct _AllConvertible : false_type
    { };

  template<typename... _From, typename... _To>
    struct _AllConvertible<_Pack<_From...>, _Pack<_To...>, true>
    : __and_<is_convertible<_From, _To>...>
    { };

  template<typename _Tp1, typename _Tp2>
    using _NotSame = __not_<is_same<typename std::decay<_Tp1>::type,
        typename std::decay<_Tp2>::type>>;






  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };


  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
    : std::unary_function<_T1, _Res> { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>
    : std::binary_function<_T1, _T2, _Res> { };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...);

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __object, const volatile _Class *,
  _Args&&... __args) const
 {
   return (std::forward<_Tp>(__object).*__pmf)
     (std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __ptr, const volatile void *, _Args&&... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_Args>(__args)...); }


      template<typename... _Args>
 using _RequireValidArgs
   = _Require<_AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;



      template<typename _Tp, typename... _Args>
 using _RequireValidArgs2
   = _Require<_NotSame<_Class, _Tp>, _NotSame<_Class*, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;



      template<typename _Tp, typename... _Args>
 using _RequireValidArgs3
   = _Require<is_base_of<_Class, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(_Class& __object, _Args&&... __args) const
 { return (__object.*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(_Class&& __object, _Args&&... __args) const
 {
   return (std::move(__object).*__pmf)(std::forward<_Args>(__args)...);
 }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(_Class* __object, _Args&&... __args) const
 { return (__object->*__pmf)(std::forward<_Args>(__args)...); }


      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs2<_Tp, _Args...>>
 _Res
 operator()(_Tp&& __object, _Args&&... __args) const
 {
   return _M_call(std::forward<_Tp>(__object), &__object,
       std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs3<_Tp, _Args...>>
 _Res
 operator()(reference_wrapper<_Tp> __ref, _Args&&... __args) const
 { return operator()(__ref.get(), std::forward<_Args>(__args)...); }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) const>
    : public _Maybe_unary_or_binary_function<_Res, const _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) const;

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __object, const volatile _Class *,
  _Args&&... __args) const
 {
   return (std::forward<_Tp>(__object).*__pmf)
     (std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __ptr, const volatile void *, _Args&&... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args>
 using _RequireValidArgs
   = _Require<_AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

      template<typename _Tp, typename... _Args>
 using _RequireValidArgs2
   = _Require<_NotSame<_Class, _Tp>, _NotSame<const _Class*, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

      template<typename _Tp, typename... _Args>
 using _RequireValidArgs3
   = _Require<is_base_of<_Class, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(const _Class& __object, _Args&&... __args) const
 { return (__object.*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(const _Class&& __object, _Args&&... __args) const
 {
   return (std::move(__object).*__pmf)(std::forward<_Args>(__args)...);
 }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(const _Class* __object, _Args&&... __args) const
 { return (__object->*__pmf)(std::forward<_Args>(__args)...); }


      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs2<_Tp, _Args...>>
 _Res operator()(_Tp&& __object, _Args&&... __args) const
 {
   return _M_call(std::forward<_Tp>(__object), &__object,
       std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs3<_Tp, _Args...>>
 _Res
 operator()(reference_wrapper<_Tp> __ref, _Args&&... __args) const
 { return operator()(__ref.get(), std::forward<_Args>(__args)...); }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) volatile>
    : public _Maybe_unary_or_binary_function<_Res, volatile _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) volatile;

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __object, const volatile _Class *,
  _Args&&... __args) const
 {
   return (std::forward<_Tp>(__object).*__pmf)
     (std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __ptr, const volatile void *, _Args&&... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args>
 using _RequireValidArgs
   = _Require<_AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

      template<typename _Tp, typename... _Args>
 using _RequireValidArgs2
   = _Require<_NotSame<_Class, _Tp>, _NotSame<volatile _Class*, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

      template<typename _Tp, typename... _Args>
 using _RequireValidArgs3
   = _Require<is_base_of<_Class, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(volatile _Class& __object, _Args&&... __args) const
 { return (__object.*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(volatile _Class&& __object, _Args&&... __args) const
 {
   return (std::move(__object).*__pmf)(std::forward<_Args>(__args)...);
 }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(volatile _Class* __object, _Args&&... __args) const
 { return (__object->*__pmf)(std::forward<_Args>(__args)...); }


      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs2<_Tp, _Args...>>
 _Res
 operator()(_Tp&& __object, _Args&&... __args) const
 {
   return _M_call(std::forward<_Tp>(__object), &__object,
       std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs3<_Tp, _Args...>>
 _Res
 operator()(reference_wrapper<_Tp> __ref, _Args&&... __args) const
 { return operator()(__ref.get(), std::forward<_Args>(__args)...); }

    private:
      _Functor __pmf;
    };


  template<typename _Res, typename _Class, typename... _ArgTypes>
    class _Mem_fn<_Res (_Class::*)(_ArgTypes...) const volatile>
    : public _Maybe_unary_or_binary_function<_Res, const volatile _Class*,
          _ArgTypes...>
    {
      typedef _Res (_Class::*_Functor)(_ArgTypes...) const volatile;

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __object, const volatile _Class *,
  _Args&&... __args) const
 {
   return (std::forward<_Tp>(__object).*__pmf)
     (std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args>
 _Res
 _M_call(_Tp&& __ptr, const volatile void *, _Args&&... __args) const
 { return ((*__ptr).*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args>
 using _RequireValidArgs
   = _Require<_AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

      template<typename _Tp, typename... _Args>
 using _RequireValidArgs2
   = _Require<_NotSame<_Class, _Tp>,
       _NotSame<const volatile _Class*, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

      template<typename _Tp, typename... _Args>
 using _RequireValidArgs3
   = _Require<is_base_of<_Class, _Tp>,
       _AllConvertible<_Pack<_Args...>, _Pack<_ArgTypes...>>>;

    public:
      typedef _Res result_type;

      explicit _Mem_fn(_Functor __pmf) : __pmf(__pmf) { }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(const volatile _Class& __object, _Args&&... __args) const
 { return (__object.*__pmf)(std::forward<_Args>(__args)...); }

      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(const volatile _Class&& __object, _Args&&... __args) const
 {
   return (std::move(__object).*__pmf)(std::forward<_Args>(__args)...);
 }


      template<typename... _Args, typename _Req = _RequireValidArgs<_Args...>>
 _Res
 operator()(const volatile _Class* __object, _Args&&... __args) const
 { return (__object->*__pmf)(std::forward<_Args>(__args)...); }


      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs2<_Tp, _Args...>>
 _Res operator()(_Tp&& __object, _Args&&... __args) const
 {
   return _M_call(std::forward<_Tp>(__object), &__object,
       std::forward<_Args>(__args)...);
 }

      template<typename _Tp, typename... _Args,
        typename _Req = _RequireValidArgs3<_Tp, _Args...>>
 _Res
 operator()(reference_wrapper<_Tp> __ref, _Args&&... __args) const
 { return operator()(__ref.get(), std::forward<_Args>(__args)...); }

    private:
      _Functor __pmf;
    };


  template<typename _Tp, bool>
    struct _Mem_fn_const_or_non
    {
      typedef const _Tp& type;
    };

  template<typename _Tp>
    struct _Mem_fn_const_or_non<_Tp, false>
    {
      typedef _Tp& type;
    };

  template<typename _Res, typename _Class>
    class _Mem_fn<_Res _Class::*>
    {
      using __pm_type = _Res _Class::*;




      template<typename _Tp>
 auto
 _M_call(_Tp&& __object, const _Class *) const noexcept
 -> decltype(std::forward<_Tp>(__object).*std::declval<__pm_type&>())
 { return std::forward<_Tp>(__object).*__pm; }

      template<typename _Tp, typename _Up>
 auto
 _M_call(_Tp&& __object, _Up * const *) const noexcept
 -> decltype((*std::forward<_Tp>(__object)).*std::declval<__pm_type&>())
 { return (*std::forward<_Tp>(__object)).*__pm; }

      template<typename _Tp>
 auto
 _M_call(_Tp&& __ptr, const volatile void*) const
 noexcept(noexcept((*__ptr).*std::declval<__pm_type&>()))
 -> decltype((*__ptr).*std::declval<__pm_type&>())
 { return (*__ptr).*__pm; }

    public:
      explicit
      _Mem_fn(_Res _Class::*__pm) noexcept : __pm(__pm) { }


      _Res&
      operator()(_Class& __object) const noexcept
      { return __object.*__pm; }

      const _Res&
      operator()(const _Class& __object) const noexcept
      { return __object.*__pm; }

      _Res&&
      operator()(_Class&& __object) const noexcept
      { return std::forward<_Class>(__object).*__pm; }

      const _Res&&
      operator()(const _Class&& __object) const noexcept
      { return std::forward<const _Class>(__object).*__pm; }


      _Res&
      operator()(_Class* __object) const noexcept
      { return __object->*__pm; }

      const _Res&
      operator()(const _Class* __object) const noexcept
      { return __object->*__pm; }


      template<typename _Tp, typename _Req = _Require<_NotSame<_Class*, _Tp>>>
 auto
 operator()(_Tp&& __unknown) const
 noexcept(noexcept(std::declval<_Mem_fn*>()->_M_call
     (std::forward<_Tp>(__unknown), &__unknown)))
 -> decltype(this->_M_call(std::forward<_Tp>(__unknown), &__unknown))
 { return _M_call(std::forward<_Tp>(__unknown), &__unknown); }

      template<typename _Tp, typename _Req = _Require<is_base_of<_Class, _Tp>>>
 auto
 operator()(reference_wrapper<_Tp> __ref) const
 noexcept(noexcept(std::declval<_Mem_fn&>()(__ref.get())))
 -> decltype((*this)(__ref.get()))
 { return (*this)(__ref.get()); }

    private:
      _Res _Class::*__pm;
    };
# 927 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
  template<typename _Tp, typename _Class>
    inline _Mem_fn<_Tp _Class::*>
    mem_fn(_Tp _Class::* __pm) noexcept
    {
      return _Mem_fn<_Tp _Class::*>(__pm);
    }







  template<typename _Tp>
    struct is_bind_expression
    : public false_type { };






  template<typename _Tp>
    struct is_placeholder
    : public integral_constant<int, 0>
    { };




  template<int _Num> struct _Placeholder { };







  namespace placeholders
  {





    extern const _Placeholder<1> _1;
    extern const _Placeholder<2> _2;
    extern const _Placeholder<3> _3;
    extern const _Placeholder<4> _4;
    extern const _Placeholder<5> _5;
    extern const _Placeholder<6> _6;
    extern const _Placeholder<7> _7;
    extern const _Placeholder<8> _8;
    extern const _Placeholder<9> _9;
    extern const _Placeholder<10> _10;
    extern const _Placeholder<11> _11;
    extern const _Placeholder<12> _12;
    extern const _Placeholder<13> _13;
    extern const _Placeholder<14> _14;
    extern const _Placeholder<15> _15;
    extern const _Placeholder<16> _16;
    extern const _Placeholder<17> _17;
    extern const _Placeholder<18> _18;
    extern const _Placeholder<19> _19;
    extern const _Placeholder<20> _20;
    extern const _Placeholder<21> _21;
    extern const _Placeholder<22> _22;
    extern const _Placeholder<23> _23;
    extern const _Placeholder<24> _24;
    extern const _Placeholder<25> _25;
    extern const _Placeholder<26> _26;
    extern const _Placeholder<27> _27;
    extern const _Placeholder<28> _28;
    extern const _Placeholder<29> _29;

  }
# 1011 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
  template<int _Num>
    struct is_placeholder<_Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };

  template<int _Num>
    struct is_placeholder<const _Placeholder<_Num> >
    : public integral_constant<int, _Num>
    { };





  struct _No_tuple_element;






  template<std::size_t __i, typename _Tuple, bool _IsSafe>
    struct _Safe_tuple_element_impl
    : tuple_element<__i, _Tuple> { };






  template<std::size_t __i, typename _Tuple>
    struct _Safe_tuple_element_impl<__i, _Tuple, false>
    {
      typedef _No_tuple_element type;
    };





 template<std::size_t __i, typename _Tuple>
   struct _Safe_tuple_element
   : _Safe_tuple_element_impl<__i, _Tuple,
         (__i < tuple_size<_Tuple>::value)>
   { };
# 1068 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
  template<typename _Arg,
    bool _IsBindExp = is_bind_expression<_Arg>::value,
    bool _IsPlaceholder = (is_placeholder<_Arg>::value > 0)>
    class _Mu;





  template<typename _Tp>
    class _Mu<reference_wrapper<_Tp>, false, false>
    {
    public:
      typedef _Tp& result_type;





      template<typename _CVRef, typename _Tuple>
 result_type
 operator()(_CVRef& __arg, _Tuple&) const volatile
 { return __arg.get(); }
    };






  template<typename _Arg>
    class _Mu<_Arg, true, false>
    {
    public:
      template<typename _CVArg, typename... _Args>
 auto
 operator()(_CVArg& __arg,
     tuple<_Args...>& __tuple) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {

   typedef typename _Build_index_tuple<sizeof...(_Args)>::__type
     _Indexes;
   return this->__call(__arg, __tuple, _Indexes());
 }

    private:


      template<typename _CVArg, typename... _Args, std::size_t... _Indexes>
 auto
 __call(_CVArg& __arg, tuple<_Args...>& __tuple,
        const _Index_tuple<_Indexes...>&) const volatile
 -> decltype(__arg(declval<_Args>()...))
 {
   return __arg(std::forward<_Args>(get<_Indexes>(__tuple))...);
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, true>
    {
    public:
      template<typename _Signature> class result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 class result<_CVMu(_CVArg, _Tuple)>
 {



   typedef typename _Safe_tuple_element<(is_placeholder<_Arg>::value
      - 1), _Tuple>::type
     __base_type;

 public:
   typedef typename add_rvalue_reference<__base_type>::type type;
 };

      template<typename _Tuple>
 typename result<_Mu(_Arg, _Tuple)>::type
 operator()(const volatile _Arg&, _Tuple& __tuple) const volatile
 {
   return std::forward<typename result<_Mu(_Arg, _Tuple)>::type>(
       ::std::get<(is_placeholder<_Arg>::value - 1)>(__tuple));
 }
    };






  template<typename _Arg>
    class _Mu<_Arg, false, false>
    {
    public:
      template<typename _Signature> struct result;

      template<typename _CVMu, typename _CVArg, typename _Tuple>
 struct result<_CVMu(_CVArg, _Tuple)>
 {
   typedef typename add_lvalue_reference<_CVArg>::type type;
 };


      template<typename _CVArg, typename _Tuple>
 _CVArg&&
 operator()(_CVArg&& __arg, _Tuple&) const volatile
 { return std::forward<_CVArg>(__arg); }
    };






  template<typename _Tp>
    struct _Maybe_wrap_member_pointer
    {
      typedef _Tp type;

      static const _Tp&
      __do_wrap(const _Tp& __x)
      { return __x; }

      static _Tp&&
      __do_wrap(_Tp&& __x)
      { return static_cast<_Tp&&>(__x); }
    };






  template<typename _Tp, typename _Class>
    struct _Maybe_wrap_member_pointer<_Tp _Class::*>
    {
      typedef _Mem_fn<_Tp _Class::*> type;

      static type
      __do_wrap(_Tp _Class::* __pm)
      { return type(__pm); }
    };





  template<>
    struct _Maybe_wrap_member_pointer<void>
    {
      typedef void type;
    };


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(volatile tuple<_Tp...>& __tuple)
    -> typename tuple_element<_Ind, tuple<_Tp...>>::type volatile&
    { return std::get<_Ind>(const_cast<tuple<_Tp...>&>(__tuple)); }


  template<std::size_t _Ind, typename... _Tp>
    inline auto
    __volget(const volatile tuple<_Tp...>& __tuple)
    -> typename tuple_element<_Ind, tuple<_Tp...>>::type const volatile&
    { return std::get<_Ind>(const_cast<const tuple<_Tp...>&>(__tuple)); }


  template<typename _Signature>
    struct _Bind;

   template<typename _Functor, typename... _Bound_args>
    class _Bind<_Functor(_Bound_args...)>
    : public _Weak_result_type<_Functor>
    {
      typedef _Bind __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_v(tuple<_Args...>&& __args,
   _Index_tuple<_Indexes...>) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Result, typename... _Args, std::size_t... _Indexes>
 _Result
 __call_c_v(tuple<_Args...>&& __args,
     _Index_tuple<_Indexes...>) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

     public:
      template<typename... _Args>
 explicit _Bind(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args, typename _Result
 = decltype( std::declval<_Functor>()(
       _Mu<_Bound_args>()( std::declval<_Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
         typename add_const<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<const _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const
 {
   return this->__call_c<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_volatile<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) volatile
 {
   return this->__call_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args, typename _Result
 = decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),
                       typename add_cv<_Functor>::type>::type>()(
       _Mu<_Bound_args>()( std::declval<const volatile _Bound_args&>(),
      std::declval<tuple<_Args...>&>() )... ) )>
 _Result
 operator()(_Args&&... __args) const volatile
 {
   return this->__call_c_v<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };


  template<typename _Result, typename _Signature>
    struct _Bind_result;

  template<typename _Result, typename _Functor, typename... _Bound_args>
    class _Bind_result<_Result, _Functor(_Bound_args...)>
    {
      typedef _Bind_result __self_type;
      typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type
 _Bound_indexes;

      _Functor _M_f;
      tuple<_Bound_args...> _M_bound_args;


      template<typename _Res>
 struct __enable_if_void : enable_if<is_void<_Res>::value, int> { };
      template<typename _Res>
 struct __disable_if_void : enable_if<!is_void<_Res>::value, int> { };


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0)
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0)
 {
   _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const
 {
   return _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const
 {
   _M_f(_Mu<_Bound_args>()
        (get<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 void
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 _Result
 __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>,
     typename __disable_if_void<_Res>::type = 0) const volatile
 {
   return _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }


      template<typename _Res, typename... _Args, std::size_t... _Indexes>
 void
 __call(tuple<_Args...>&& __args,
        _Index_tuple<_Indexes...>,
     typename __enable_if_void<_Res>::type = 0) const volatile
 {
   _M_f(_Mu<_Bound_args>()
        (__volget<_Indexes>(_M_bound_args), __args)...);
 }

    public:
      typedef _Result result_type;

      template<typename... _Args>
 explicit _Bind_result(const _Functor& __f, _Args&&... __args)
 : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      template<typename... _Args>
 explicit _Bind_result(_Functor&& __f, _Args&&... __args)
 : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
 { }

      _Bind_result(const _Bind_result&) = default;

      _Bind_result(_Bind_result&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
      { }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args)
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }


      template<typename... _Args>
 result_type
 operator()(_Args&&... __args) const volatile
 {
   return this->__call<_Result>(
       std::forward_as_tuple(std::forward<_Args>(__args)...),
       _Bound_indexes());
 }
    };





  template<typename _Signature>
    struct is_bind_expression<_Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<volatile _Bind<_Signature> >
    : public true_type { };





  template<typename _Signature>
    struct is_bind_expression<const volatile _Bind<_Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<_Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<volatile _Bind_result<_Result, _Signature>>
    : public true_type { };





  template<typename _Result, typename _Signature>
    struct is_bind_expression<const volatile _Bind_result<_Result, _Signature>>
    : public true_type { };




  template<typename _Tp, typename _Tp2 = typename decay<_Tp>::type>
    using __is_socketlike = __or_<is_integral<_Tp2>, is_enum<_Tp2>>;

  template<bool _SocketLike, typename _Func, typename... _BoundArgs>
    struct _Bind_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>
 __maybe_type;
      typedef typename __maybe_type::type __func_type;
      typedef _Bind<__func_type(typename decay<_BoundArgs>::type...)> type;
    };




  template<typename _Func, typename... _BoundArgs>
    struct _Bind_helper<true, _Func, _BoundArgs...>
    { };





  template<typename _Func, typename... _BoundArgs>
    inline typename
    _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Func>(__f)),
      std::forward<_BoundArgs>(__args)...);
    }

  template<typename _Result, typename _Func, typename... _BoundArgs>
    struct _Bindres_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>
 __maybe_type;
      typedef typename __maybe_type::type __functor_type;
      typedef _Bind_result<_Result,
      __functor_type(typename decay<_BoundArgs>::type...)>
 type;
    };





  template<typename _Result, typename _Func, typename... _BoundArgs>
    inline
    typename _Bindres_helper<_Result, _Func, _BoundArgs...>::type
    bind(_Func&& __f, _BoundArgs&&... __args)
    {
      typedef _Bindres_helper<_Result, _Func, _BoundArgs...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::type __result_type;
      return __result_type(__maybe_type::__do_wrap(std::forward<_Func>(__f)),
      std::forward<_BoundArgs>(__args)...);
    }

  template<typename _Signature>
    struct _Bind_simple;

  template<typename _Callable, typename... _Args>
    struct _Bind_simple<_Callable(_Args...)>
    {
      typedef typename result_of<_Callable(_Args...)>::type result_type;

      template<typename... _Args2, typename = typename
               enable_if< sizeof...(_Args) == sizeof...(_Args2)>::type>
        explicit
        _Bind_simple(const _Callable& __callable, _Args2&&... __args)
        : _M_bound(__callable, std::forward<_Args2>(__args)...)
        { }

      template<typename... _Args2, typename = typename
               enable_if< sizeof...(_Args) == sizeof...(_Args2)>::type>
        explicit
        _Bind_simple(_Callable&& __callable, _Args2&&... __args)
        : _M_bound(std::move(__callable), std::forward<_Args2>(__args)...)
        { }

      _Bind_simple(const _Bind_simple&) = default;
      _Bind_simple(_Bind_simple&&) = default;

      result_type
      operator()()
      {
        typedef typename _Build_index_tuple<sizeof...(_Args)>::__type _Indices;
        return _M_invoke(_Indices());
      }

    private:

      template<std::size_t... _Indices>
        typename result_of<_Callable(_Args...)>::type
        _M_invoke(_Index_tuple<_Indices...>)
        {


          return std::forward<_Callable>(std::get<0>(_M_bound))(
              std::forward<_Args>(std::get<_Indices+1>(_M_bound))...);
        }

      std::tuple<_Callable, _Args...> _M_bound;
    };

  template<typename _Func, typename... _BoundArgs>
    struct _Bind_simple_helper
    {
      typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>
        __maybe_type;
      typedef typename __maybe_type::type __func_type;
      typedef _Bind_simple<__func_type(typename decay<_BoundArgs>::type...)>
        __type;
    };



  template<typename _Callable, typename... _Args>
    typename _Bind_simple_helper<_Callable, _Args...>::__type
    __bind_simple(_Callable&& __callable, _Args&&... __args)
    {
      typedef _Bind_simple_helper<_Callable, _Args...> __helper_type;
      typedef typename __helper_type::__maybe_type __maybe_type;
      typedef typename __helper_type::__type __result_type;
      return __result_type(
          __maybe_type::__do_wrap( std::forward<_Callable>(__callable)),
          std::forward<_Args>(__args)...);
    }






  class bad_function_call : public std::exception
  {
  public:
    virtual ~bad_function_call() noexcept;

    const char* what() const noexcept;
  };






  template<typename _Tp>
    struct __is_location_invariant
    : integral_constant<bool, (is_pointer<_Tp>::value
          || is_member_pointer<_Tp>::value)>
    { };

  class _Undefined_class;

  union _Nocopy_types
  {
    void* _M_object;
    const void* _M_const_object;
    void (*_M_function_pointer)();
    void (_Undefined_class::*_M_member_pointer)();
  };

  union _Any_data
  {
    void* _M_access() { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }

    template<typename _Tp>
      _Tp&
      _M_access()
      { return *static_cast<_Tp*>(_M_access()); }

    template<typename _Tp>
      const _Tp&
      _M_access() const
      { return *static_cast<const _Tp*>(_M_access()); }

    _Nocopy_types _M_unused;
    char _M_pod_data[sizeof(_Nocopy_types)];
  };

  enum _Manager_operation
  {
    __get_type_info,
    __get_functor_ptr,
    __clone_functor,
    __destroy_functor
  };



  template<typename _Tp>
    struct _Simple_type_wrapper
    {
      _Simple_type_wrapper(_Tp __value) : __value(__value) { }

      _Tp __value;
    };

  template<typename _Tp>
    struct __is_location_invariant<_Simple_type_wrapper<_Tp> >
    : __is_location_invariant<_Tp>
    { };



  template<typename _Functor>
    inline _Functor&
    __callable_functor(_Functor& __f)
    { return __f; }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* &__p)
    { return std::mem_fn(__p); }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* const &__p)
    { return std::mem_fn(__p); }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* volatile &__p)
    { return std::mem_fn(__p); }

  template<typename _Member, typename _Class>
    inline _Mem_fn<_Member _Class::*>
    __callable_functor(_Member _Class::* const volatile &__p)
    { return std::mem_fn(__p); }

  template<typename _Signature>
    class function;


  class _Function_base
  {
  public:
    static const std::size_t _M_max_size = sizeof(_Nocopy_types);
    static const std::size_t _M_max_align = __alignof__(_Nocopy_types);

    template<typename _Functor>
      class _Base_manager
      {
      protected:
 static const bool __stored_locally =
 (__is_location_invariant<_Functor>::value
  && sizeof(_Functor) <= _M_max_size
  && __alignof__(_Functor) <= _M_max_align
  && (_M_max_align % __alignof__(_Functor) == 0));

 typedef integral_constant<bool, __stored_locally> _Local_storage;


 static _Functor*
 _M_get_pointer(const _Any_data& __source)
 {
   const _Functor* __ptr =
     __stored_locally? std::__addressof(__source._M_access<_Functor>())
                                 : __source._M_access<_Functor*>();
   return const_cast<_Functor*>(__ptr);
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 {
   new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 }



 static void
 _M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
 {
   __dest._M_access<_Functor*>() =
     new _Functor(*__source._M_access<_Functor*>());
 }



 static void
 _M_destroy(_Any_data& __victim, true_type)
 {
   __victim._M_access<_Functor>().~_Functor();
 }


 static void
 _M_destroy(_Any_data& __victim, false_type)
 {
   delete __victim._M_access<_Functor*>();
 }

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = _M_get_pointer(__source);
       break;

     case __clone_functor:
       _M_clone(__dest, __source, _Local_storage());
       break;

     case __destroy_functor:
       _M_destroy(__dest, _Local_storage());
       break;
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f)
 { _M_init_functor(__functor, std::move(__f), _Local_storage()); }

 template<typename _Signature>
   static bool
   _M_not_empty_function(const function<_Signature>& __f)
   { return static_cast<bool>(__f); }

 template<typename _Tp>
   static bool
   _M_not_empty_function(_Tp* const& __fp)
   { return __fp; }

 template<typename _Class, typename _Tp>
   static bool
   _M_not_empty_function(_Tp _Class::* const& __mp)
   { return __mp; }

 template<typename _Tp>
   static bool
   _M_not_empty_function(const _Tp&)
   { return true; }

      private:
 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 { new (__functor._M_access()) _Functor(std::move(__f)); }

 static void
 _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
 { __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    template<typename _Functor>
      class _Ref_manager : public _Base_manager<_Functor*>
      {
 typedef _Function_base::_Base_manager<_Functor*> _Base;

      public:
 static bool
 _M_manager(_Any_data& __dest, const _Any_data& __source,
     _Manager_operation __op)
 {
   switch (__op)
     {

     case __get_type_info:
       __dest._M_access<const type_info*>() = &typeid(_Functor);
       break;

     case __get_functor_ptr:
       __dest._M_access<_Functor*>() = *_Base::_M_get_pointer(__source);
       return is_const<_Functor>::value;
       break;

     default:
       _Base::_M_manager(__dest, __source, __op);
     }
   return false;
 }

 static void
 _M_init_functor(_Any_data& __functor, reference_wrapper<_Functor> __f)
 {
   _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
 }
      };

    _Function_base() : _M_manager(0) { }

    ~_Function_base()
    {
      if (_M_manager)
 _M_manager(_M_functor, _M_functor, __destroy_functor);
    }


    bool _M_empty() const { return !_M_manager; }

    typedef bool (*_Manager_type)(_Any_data&, const _Any_data&,
      _Manager_operation);

    _Any_data _M_functor;
    _Manager_type _M_manager;
  };

  template<typename _Signature, typename _Functor>
    class _Function_handler;

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Functor>
    : public _Function_base::_Base_manager<_Functor>
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 (*_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Res, typename _Functor, typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return __callable_functor(**_Base::_M_get_pointer(__functor))(
       std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Functor, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), reference_wrapper<_Functor> >
    : public _Function_base::_Ref_manager<_Functor>
    {
      typedef _Function_base::_Ref_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 __callable_functor(**_Base::_M_get_pointer(__functor))(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename _Res,
    typename... _ArgTypes>
    class _Function_handler<_Res(_ArgTypes...), _Member _Class::*>
    : public _Function_handler<void(_ArgTypes...), _Member _Class::*>
    {
      typedef _Function_handler<void(_ArgTypes...), _Member _Class::*>
 _Base;

     public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 return std::mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _Class, typename _Member, typename... _ArgTypes>
    class _Function_handler<void(_ArgTypes...), _Member _Class::*>
    : public _Function_base::_Base_manager<
   _Simple_type_wrapper< _Member _Class::* > >
    {
      typedef _Member _Class::* _Functor;
      typedef _Simple_type_wrapper<_Functor> _Wrapper;
      typedef _Function_base::_Base_manager<_Wrapper> _Base;

    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   _Manager_operation __op)
      {
 switch (__op)
   {

   case __get_type_info:
     __dest._M_access<const type_info*>() = &typeid(_Functor);
     break;

   case __get_functor_ptr:
     __dest._M_access<_Functor*>() =
       &_Base::_M_get_pointer(__source)->__value;
     break;

   default:
     _Base::_M_manager(__dest, __source, __op);
   }
 return false;
      }

      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes... __args)
      {
 std::mem_fn(_Base::_M_get_pointer(__functor)->__value)(
     std::forward<_ArgTypes>(__args)...);
      }
    };

  template<typename _From, typename _To>
    using __check_func_return_type
      = __or_<is_void<_To>, is_convertible<_From, _To>>;







  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
    : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
      private _Function_base
    {
      typedef _Res _Signature_type(_ArgTypes...);

      template<typename _Functor>
 using _Invoke = decltype(__callable_functor(std::declval<_Functor&>())
     (std::declval<_ArgTypes>()...) );



      template<typename _Tp>
 using _NotSelf = __not_<is_same<_Tp, function>>;

      template<typename _Functor>
 using _Callable
   = __and_<_NotSelf<_Functor>,
     __check_func_return_type<_Invoke<_Functor>, _Res>>;

      template<typename _Cond, typename _Tp>
 using _Requires = typename enable_if<_Cond::value, _Tp>::type;

    public:
      typedef _Res result_type;







      function() noexcept
      : _Function_base() { }





      function(nullptr_t) noexcept
      : _Function_base() { }
# 2192 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
      function(const function& __x);
# 2201 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
      function(function&& __x) : _Function_base()
      {
 __x.swap(*this);
      }
# 2224 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
      template<typename _Functor,
        typename = _Requires<_Callable<_Functor>, void>>
 function(_Functor);
# 2240 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
      function&
      operator=(const function& __x)
      {
 function(__x).swap(*this);
 return *this;
      }
# 2258 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
      function&
      operator=(function&& __x)
      {
 function(std::move(__x)).swap(*this);
 return *this;
      }
# 2272 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
      function&
      operator=(nullptr_t)
      {
 if (_M_manager)
   {
     _M_manager(_M_functor, _M_functor, __destroy_functor);
     _M_manager = 0;
     _M_invoker = 0;
   }
 return *this;
      }
# 2300 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
      template<typename _Functor>
 _Requires<_Callable<typename decay<_Functor>::type>, function&>
 operator=(_Functor&& __f)
 {
   function(std::forward<_Functor>(__f)).swap(*this);
   return *this;
 }


      template<typename _Functor>
 function&
 operator=(reference_wrapper<_Functor> __f) noexcept
 {
   function(__f).swap(*this);
   return *this;
 }
# 2326 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
      void swap(function& __x)
      {
 std::swap(_M_functor, __x._M_functor);
 std::swap(_M_manager, __x._M_manager);
 std::swap(_M_invoker, __x._M_invoker);
      }
# 2354 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
      explicit operator bool() const noexcept
      { return !_M_empty(); }
# 2367 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
      _Res operator()(_ArgTypes... __args) const;
# 2380 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
      const type_info& target_type() const noexcept;
# 2391 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
      template<typename _Functor> _Functor* target() noexcept;


      template<typename _Functor> const _Functor* target() const noexcept;


    private:
      typedef _Res (*_Invoker_type)(const _Any_data&, _ArgTypes...);
      _Invoker_type _M_invoker;
  };


  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 {
   __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   _M_invoker = __x._M_invoker;
   _M_manager = __x._M_manager;
 }
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename>
      function<_Res(_ArgTypes...)>::
      function(_Functor __f)
      : _Function_base()
      {
 typedef _Function_handler<_Signature_type, _Functor> _My_handler;

 if (_My_handler::_M_not_empty_function(__f))
   {
     _My_handler::_M_init_functor(_M_functor, std::move(__f));
     _M_invoker = &_My_handler::_M_invoke;
     _M_manager = &_My_handler::_M_manager;
   }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 __throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }


  template<typename _Res, typename... _ArgTypes>
    const type_info&
    function<_Res(_ArgTypes...)>::
    target_type() const noexcept
    {
      if (_M_manager)
 {
   _Any_data __typeinfo_result;
   _M_manager(__typeinfo_result, _M_functor, __get_type_info);
   return *__typeinfo_result._M_access<const type_info*>();
 }
      else
 return typeid(void);
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      _Functor*
      function<_Res(_ArgTypes...)>::
      target() noexcept
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     if (_M_manager(__ptr, _M_functor, __get_functor_ptr)
  && !is_const<_Functor>::value)
       return 0;
     else
       return __ptr._M_access<_Functor*>();
   }
 else
   return 0;
      }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor>
      const _Functor*
      function<_Res(_ArgTypes...)>::
      target() const noexcept
      {
 if (typeid(_Functor) == target_type() && _M_manager)
   {
     _Any_data __ptr;
     _M_manager(__ptr, _M_functor, __get_functor_ptr);
     return __ptr._M_access<const _Functor*>();
   }
 else
   return 0;
      }
# 2503 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return !static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator==(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return !static_cast<bool>(__f); }
# 2521 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
    { return static_cast<bool>(__f); }


  template<typename _Res, typename... _Args>
    inline bool
    operator!=(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
    { return static_cast<bool>(__f); }
# 2539 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/functional" 3
  template<typename _Res, typename... _Args>
    inline void
    swap(function<_Res(_Args...)>& __x, function<_Res(_Args...)>& __y)
    { __x.swap(__y); }


}
# 123 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h" 2

struct __attribute__((device_builtin)) __nv_lambda_preheader_injection { };
# 185 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaLaunchKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}
# 245 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaLaunchCooperativeKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}
# 283 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaSetupArgument(
  T arg,
  size_t offset
)
{
  return ::cudaSetupArgument((const void*)&arg, sizeof(T), offset);
}
# 322 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
static __inline__ __attribute__((host)) cudaError_t cudaEventCreate(
  cudaEvent_t *event,
  unsigned int flags
)
{
  return ::cudaEventCreateWithFlags(event, flags);
}
# 385 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
static __inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  void **ptr,
  size_t size,
  unsigned int flags
)
{
  return ::cudaHostAlloc(ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaHostAlloc(
  T **ptr,
  size_t size,
  unsigned int flags
)
{
  return ::cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaHostGetDevicePointer(
  T **pDevice,
  void *pHost,
  unsigned int flags
)
{
  return ::cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}
# 512 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocManaged(
  T **devPtr,
  size_t size,
  unsigned int flags = 0x01
)
{
  return ::cudaMallocManaged((void**)(void*)devPtr, size, flags);
}
# 600 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaStreamAttachMemAsync(
  cudaStream_t stream,
  T *devPtr,
  size_t length = 0,
  unsigned int flags = 0x04
)
{
  return ::cudaStreamAttachMemAsync(stream, (void*)devPtr, length, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMalloc(
  T **devPtr,
  size_t size
)
{
  return ::cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  T **ptr,
  size_t size,
  unsigned int flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocPitch(
  T **devPtr,
  size_t *pitch,
  size_t width,
  size_t height
)
{
  return ::cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}
# 676 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbol(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice
)
{
  return ::cudaMemcpyToSymbol((const void*)&symbol, src, count, offset, kind);
}
# 728 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice,
        cudaStream_t stream = 0
)
{
  return ::cudaMemcpyToSymbolAsync((const void*)&symbol, src, count, offset, kind, stream);
}
# 774 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost
)
{
  return ::cudaMemcpyFromSymbol(dst, (const void*)&symbol, count, offset, kind);
}
# 826 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost,
        cudaStream_t stream = 0
)
{
  return ::cudaMemcpyFromSymbolAsync(dst, (const void*)&symbol, count, offset, kind, stream);
}
# 860 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaGetSymbolAddress(
        void **devPtr,
  const T &symbol
)
{
  return ::cudaGetSymbolAddress(devPtr, (const void*)&symbol);
}
# 890 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaGetSymbolSize(
        size_t *size,
  const T &symbol
)
{
  return ::cudaGetSymbolSize(size, (const void*)&symbol);
}
# 932 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
        size_t size = (2147483647 *2U +1U)
)
{
  return ::cudaBindTexture(offset, &tex, devPtr, &desc, size);
}
# 976 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
        size_t size = (2147483647 *2U +1U)
)
{
  return cudaBindTexture(offset, tex, devPtr, tex.channelDesc, size);
}
# 1031 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
}
# 1088 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}
# 1129 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindTextureToArray(&tex, array, &desc);
}
# 1166 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindTextureToArray(tex, array, desc) : err;
}
# 1206 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t mipmappedArray,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc);
}
# 1243 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t mipmappedArray
)
{
  struct cudaChannelFormatDesc desc;
  cudaArray_t levelArray;
  cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0);

  if (err != cudaSuccess) {
      return err;
  }
  err = ::cudaGetChannelDesc(&desc, levelArray);

  return err == cudaSuccess ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err;
}
# 1284 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaUnbindTexture(
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaUnbindTexture(&tex);
}
# 1318 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaGetTextureAlignmentOffset(offset, &tex);
}
# 1370 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(
  T *func,
  enum cudaFuncCache cacheConfig
)
{
  return ::cudaFuncSetCacheConfig((const void*)func, cacheConfig);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncSetSharedMemConfig(
  T *func,
  enum cudaSharedMemConfig config
)
{
  return ::cudaFuncSetSharedMemConfig((const void*)func, config);
}
# 1415 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(
    int *numBlocks,
    T func,
    int blockSize,
    size_t dynamicSMemSize)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, 0x00);
}
# 1466 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
    int *numBlocks,
    T func,
    int blockSize,
    size_t dynamicSMemSize,
    unsigned int flags)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, flags);
}




class __cudaOccupancyB2DHelper {
  size_t n;
public:
  inline __attribute__((host)) __attribute__((device)) __cudaOccupancyB2DHelper(size_t n_) : n(n_) {}
  inline __attribute__((host)) __attribute__((device)) size_t operator()(int)
  {
      return n;
  }
};
# 1535 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<typename UnaryFunction, class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(
    int *minGridSize,
    int *blockSize,
    T func,
    UnaryFunction blockSizeToDynamicSMemSize,
    int blockSizeLimit = 0,
    unsigned int flags = 0)
{
    cudaError_t status;


    int device;
    struct cudaFuncAttributes attr;


    int maxThreadsPerMultiProcessor;
    int warpSize;
    int devMaxThreadsPerBlock;
    int multiProcessorCount;
    int funcMaxThreadsPerBlock;
    int occupancyLimit;
    int granularity;


    int maxBlockSize = 0;
    int numBlocks = 0;
    int maxOccupancy = 0;


    int blockSizeToTryAligned;
    int blockSizeToTry;
    int blockSizeLimitAligned;
    int occupancyInBlocks;
    int occupancyInThreads;
    size_t dynamicSMemSize;





    if (!minGridSize || !blockSize || !func) {
        return cudaErrorInvalidValue;
    }





    status = ::cudaGetDevice(&device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &maxThreadsPerMultiProcessor,
        cudaDevAttrMaxThreadsPerMultiProcessor,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &warpSize,
        cudaDevAttrWarpSize,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &devMaxThreadsPerBlock,
        cudaDevAttrMaxThreadsPerBlock,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &multiProcessorCount,
        cudaDevAttrMultiProcessorCount,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaFuncGetAttributes(&attr, func);
    if (status != cudaSuccess) {
        return status;
    }

    funcMaxThreadsPerBlock = attr.maxThreadsPerBlock;





    occupancyLimit = maxThreadsPerMultiProcessor;
    granularity = warpSize;

    if (blockSizeLimit == 0) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (devMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (funcMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = funcMaxThreadsPerBlock;
    }

    blockSizeLimitAligned = ((blockSizeLimit + (granularity - 1)) / granularity) * granularity;

    for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) {



        if (blockSizeLimit < blockSizeToTryAligned) {
            blockSizeToTry = blockSizeLimit;
        } else {
            blockSizeToTry = blockSizeToTryAligned;
        }

        dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry);

        status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
            &occupancyInBlocks,
            func,
            blockSizeToTry,
            dynamicSMemSize,
            flags);

        if (status != cudaSuccess) {
            return status;
        }

        occupancyInThreads = blockSizeToTry * occupancyInBlocks;

        if (occupancyInThreads > maxOccupancy) {
            maxBlockSize = blockSizeToTry;
            numBlocks = occupancyInBlocks;
            maxOccupancy = occupancyInThreads;
        }



        if (occupancyLimit == maxOccupancy) {
            break;
        }
    }







    *minGridSize = numBlocks * multiProcessorCount;
    *blockSize = maxBlockSize;

    return status;
}
# 1730 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<typename UnaryFunction, class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMem(
    int *minGridSize,
    int *blockSize,
    T func,
    UnaryFunction blockSizeToDynamicSMemSize,
    int blockSizeLimit = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0x00);
}
# 1775 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSize(
    int *minGridSize,
    int *blockSize,
    T func,
    size_t dynamicSMemSize = 0,
    int blockSizeLimit = 0)
{
  return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, 0x00);
}
# 1834 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags(
    int *minGridSize,
    int *blockSize,
    T func,
    size_t dynamicSMemSize = 0,
    int blockSizeLimit = 0,
    unsigned int flags = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, flags);
}
# 1885 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaLaunch(
  T *func
)
{
  return ::cudaLaunch((const void*)func);
}
# 1922 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncGetAttributes(
  struct cudaFuncAttributes *attr,
  T *entry
)
{
  return ::cudaFuncGetAttributes(attr, (const void*)entry);
}
# 1967 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncSetAttribute(
  T *entry,
  enum cudaFuncAttribute attr,
  int value
)
{
  return ::cudaFuncSetAttribute((const void*)entry, attr, value);
}
# 1997 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T, int dim>
static __inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindSurfaceToArray(&surf, array, &desc);
}
# 2026 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
template<class T, int dim>
static __inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindSurfaceToArray(surf, array, desc) : err;
}
# 2047 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_runtime.h"
#pragma GCC diagnostic pop
# 2 "<built-in>" 2
# 1 "/usr/global/tools/fpchecker/blueos_3_ppc64le_ib_p9/fpchecker-0.1.4-clang-9.0.0/bin/../src/Runtime_plugin.h" 1
# 33 "/usr/global/tools/fpchecker/blueos_3_ppc64le_ib_p9/fpchecker-0.1.4-clang-9.0.0/bin/../src/Runtime_plugin.h"
__attribute__((device)) static void _FPC_PRINT_ERRORS_();
__attribute__((device)) static void _FPC_FP32_CHECK_ADD_(float x, float y, float z, int loc);
__attribute__((device)) static void _FPC_FP32_CHECK_SUB_(float x, float y, float z, int loc);
__attribute__((device)) static void _FPC_FP32_CHECK_MUL_(float x, float y, float z, int loc);
__attribute__((device)) static void _FPC_FP32_CHECK_DIV_(float x, float y, float z, int loc);
__attribute__((device)) static void _FPC_FP64_CHECK_ADD_(double x, double y, double z, int loc);
__attribute__((device)) static void _FPC_FP64_CHECK_SUB_(double x, double y, double z, int loc);
__attribute__((device)) static void _FPC_FP64_CHECK_MUL_(double x, double y, double z, int loc);
__attribute__((device)) static void _FPC_FP64_CHECK_DIV_(double x, double y, double z, int loc);
# 55 "/usr/global/tools/fpchecker/blueos_3_ppc64le_ib_p9/fpchecker-0.1.4-clang-9.0.0/bin/../src/Runtime_plugin.h"
__attribute__((device)) __attribute__((noinline)) static void _FPC_INTERRUPT_(int errorType, int op, int loc, float fp32_val, double fp64_val);
__attribute__((device)) __attribute__((noinline)) static void _FPC_WARNING_(int errorType, int op, int loc, float fp32_val, double fp64_val);
__attribute__((device)) __attribute__((host)) static int _FPC_LEN_(const char *s);
__attribute__((device)) __attribute__((host)) static void _FPC_CPY_(char *d, const char *s);
__attribute__((device)) __attribute__((host)) static void _FPC_CAT_(char *d, const char *s);
__attribute__((device)) __attribute__((host)) static void _FPC_PRINT_REPORT_LINE_(const char border);
__attribute__((device)) __attribute__((host)) static void _FPC_PRINT_REPORT_HEADER_(int type);
__attribute__((device)) __attribute__((host)) static void _FPC_PRINT_REPORT_ROW_(const char *val, int space, int last, char lastChar);
__attribute__((device)) __attribute__((host)) static void _FPC_PRINT_REPORT_ROW_(int val, int space, int last);
__attribute__((device)) __attribute__((host)) static void _FPC_PRINT_REPORT_ROW_(float val, int space, int last);
__attribute__((device)) __attribute__((host)) static void _FPC_PRINT_REPORT_ROW_(double val, int space, int last);
__attribute__((device)) static void _FPC_FP32_CHECK_OPERATION_(float x, float y, float z, int loc, int op);
__attribute__((device)) static int _FPC_FP32_IS_SUBNORMAL(float x);
__attribute__((device)) static int _FPC_FP32_IS_ALMOST_OVERFLOW(float x);
__attribute__((device)) static int _FPC_FP32_IS_ALMOST_SUBNORMAL(float x);
__attribute__((device)) static void _FPC_FP64_CHECK_OPERATION_(double x, double y, double z, int loc, int op);
__attribute__((device)) __attribute__((host)) static int _FPC_FP64_IS_SUBNORMAL(double x);
__attribute__((device)) static int _FPC_FP64_IS_ALMOST_OVERFLOW(double x);
__attribute__((device)) static int _FPC_FP64_IS_ALMOST_SUBNORMAL(double x);
__attribute__((device)) static int _FPC_GET_GLOBAL_IDX_3D_3D();
__attribute__((device)) static int _FPC_FP32_IS_FLUSH_TO_ZERO(float x, float y, float z, int op);
__attribute__((device)) static int _FPC_FP64_IS_FLUSH_TO_ZERO(double x, double y, double z, int op);


static void _FPC_PRINT_AT_MAIN_();
# 99 "/usr/global/tools/fpchecker/blueos_3_ppc64le_ib_p9/fpchecker-0.1.4-clang-9.0.0/bin/../src/Runtime_plugin.h"
__attribute__((device)) static char *_FPC_FILE_NAME_[1];



__attribute__((device)) static int _FPC_LOCK_STATE_ = 0;




__attribute__((device)) static long long int _FPC_ERRORS_ARRAY_SIZE_ = 10;
__attribute__((device)) static long long int _FPC_ARR_NOT_USED_[10];
# 121 "/usr/global/tools/fpchecker/blueos_3_ppc64le_ib_p9/fpchecker-0.1.4-clang-9.0.0/bin/../src/Runtime_plugin.h"
__attribute__((device)) __attribute__((host))
static int _FPC_LEN_(const char *s)
{
 int maxLen = 1024;
 int i = 0;
 while(s[i] != '\0' && i < maxLen)
  i++;
 return i;
}

__attribute__((device)) __attribute__((host))
static void _FPC_CPY_(char *d, const char *s)
{
 int len = _FPC_LEN_(s);
 int i=0;
 for (i=0; i < len; ++i)
  d[i] = s[i];
 d[i] = '\0';
}

__attribute__((device)) __attribute__((host))
static void _FPC_CAT_(char *d, const char *s)
{
 int lenS = _FPC_LEN_(s);
 int lenD = _FPC_LEN_(d);
 int i=0;
 for (i=0; i < lenS; ++i)
  d[i+lenD] = s[i];
 d[i+lenD] = '\0';
}

__attribute__((device)) __attribute__((host))
static void _FPC_PRINT_REPORT_LINE_(const char border)
{
 printf("%c",border);
 for (int i=0; i < 80 -2; ++i)
  printf("-");
 printf("%c\n",border);
}

__attribute__((device)) __attribute__((host))
static void _FPC_PRINT_REPORT_HEADER_(int type)
{


 char msg[255];
 msg[0] = '\0';
 if (type == 0)
  _FPC_CPY_(msg," FPChecker Error Report ");
 else
  _FPC_CPY_(msg," FPChecker Warning Report ");

 int l = _FPC_LEN_(msg);
 l = 80 -l-2;
 char line[255];
 line[0] = '\0';
 _FPC_CAT_(line,"+");
 for (int i=0; i < l/2; ++i)
  _FPC_CAT_(line,"-");
 if (l%2)
  _FPC_CAT_(line,"-");
 _FPC_CAT_(line,msg);
 for (int i=0; i < l/2; ++i)
  _FPC_CAT_(line,"-");
 _FPC_CAT_(line,"+");
 printf("%s\n",line);
}

__attribute__((device)) __attribute__((host))
static void _FPC_PRINT_REPORT_ROW_(const char *val, int space, int last, char lastChar)
{
 char msg[255];
 msg[0] = '\0';
 _FPC_CPY_(msg," ");
 _FPC_CAT_(msg, val);
 int rem = _FPC_LEN_(msg);
 for (int i=0; i < space-rem; ++i)
  _FPC_CAT_(msg," ");
 printf("%s",msg);

 if (last==0)
  printf("%c", lastChar);
 else
  printf("\n");
}

__attribute__((device)) __attribute__((host))
static void _FPC_PRINT_REPORT_ROW_(int val, int space, int last)
{
 int numChars = floor(log10 ((double)abs (val))) + 1;
 printf(" %d", val);

 char msg[255];
 msg[0] = '\0';
 int rem = numChars + 1;
 for (int i=0; i < space-rem; ++i)
  _FPC_CAT_(msg," ");
 printf("%s",msg);

 if (last==0)
  printf(":");
 else
  printf("\n");
}

__attribute__((device)) __attribute__((host))
static void _FPC_PRINT_REPORT_ROW_(float val, int space, int last)
{
 int numChars = 18;
 printf("(%1.9e)", val);

 char msg[255];
 msg[0] = '\0';
 int rem = numChars + 1;
 for (int i=0; i < space-rem; ++i)
  _FPC_CAT_(msg," ");
 printf("%s",msg);




 if (last!=0)
  printf("\n");
}

__attribute__((device)) __attribute__((host))
static void _FPC_PRINT_REPORT_ROW_(double val, int space, int last)
{
 int numChars = 18;
 printf("(%1.9e)", val);

 char msg[255];
 msg[0] = '\0';
 int rem = numChars + 1;
 for (int i=0; i < space-rem; ++i)
  _FPC_CAT_(msg," ");
 printf("%s",msg);




 if (last!=0)
  printf("\n");
}



__attribute__((device))
__attribute__((noinline)) static void _FPC_INTERRUPT_(int errorType, int op, int loc, float fp32_val, double fp64_val)
{



 bool blocked = true;

 while(blocked) {
   if(0 == atomicCAS(&_FPC_LOCK_STATE_, 0, 1)) {

    char e[64]; e[0] = '\0';
    char o[64]; o[0] = '\0';

    if (errorType == 0) _FPC_CPY_(e, "NaN");
    else if (errorType == 1) _FPC_CPY_(e, "INF");
    else if (errorType == 2) _FPC_CPY_(e, "Underflow");
    else _FPC_CPY_(e, "NONE");

    if (op == 0) _FPC_CPY_(o, "ADD");
    else if (op == 1) _FPC_CPY_(o, "SUB");
    else if (op == 2) _FPC_CPY_(o, "MUL");
    else if (op == 3) _FPC_CPY_(o, "DIV");
    else _FPC_CPY_(o, "NONE");

    _FPC_PRINT_REPORT_HEADER_(0);
    _FPC_PRINT_REPORT_ROW_("Error", 15, 0, ':');
    _FPC_PRINT_REPORT_ROW_(e, 80 -15 -1, 1, ' ');
    _FPC_PRINT_REPORT_ROW_("Operation", 15, 0, ':');
    if (errorType == 2)
    {
     _FPC_PRINT_REPORT_ROW_(o, 4, 0, ' ');
     if (fp32_val != 0)
      _FPC_PRINT_REPORT_ROW_(fp32_val, 80 -15 -1, 1);
     else
      _FPC_PRINT_REPORT_ROW_(fp64_val, 80 -15 -1, 1);
    }
    else
    {
     _FPC_PRINT_REPORT_ROW_(o, 80 -15 -1, 1, ' ');
    }
    _FPC_PRINT_REPORT_ROW_("File", 15, 0, ':');
    _FPC_PRINT_REPORT_ROW_(_FPC_FILE_NAME_[0], 80 -15 -1, 1, ' ');
    _FPC_PRINT_REPORT_ROW_("Line", 15, 0, ':');

    _FPC_PRINT_REPORT_ROW_(loc, 80 -15 -1, 1);
    _FPC_PRINT_REPORT_LINE_('+');

    asm("trap;");
  }
 }
}

__attribute__((device))
static void _FPC_WARNING_(int errorType, int op, int loc, float fp32_val, double fp64_val)
{



 bool blocked = true;

   while(blocked) {
   if(0 == atomicCAS(&_FPC_LOCK_STATE_, 0, 1)) {

    char e[64]; e[0] = '\0';
    char o[64]; o[0] = '\0';

    if (errorType == 0) _FPC_CPY_(e, "NaN");
    else if (errorType == 1) _FPC_CPY_(e, "INF");
    else if (errorType == 2) _FPC_CPY_(e, "Underflow");
    else _FPC_CPY_(e, "NONE");

    if (op == 0) _FPC_CPY_(o, "ADD");
    else if (op == 1) _FPC_CPY_(o, "SUB");
    else if (op == 2) _FPC_CPY_(o, "MUL");
    else if (op == 3) _FPC_CPY_(o, "DIV");
    else _FPC_CPY_(o, "NONE");

    _FPC_PRINT_REPORT_HEADER_(1);
    _FPC_PRINT_REPORT_ROW_("Error", 15, 0, ':');
    _FPC_PRINT_REPORT_ROW_(e, 80 -15 -1, 1, ' ');
    _FPC_PRINT_REPORT_ROW_("Operation", 15, 0, ':');
    if (errorType == 1 || errorType == 2)
    {
     _FPC_PRINT_REPORT_ROW_(o, 4, 0, ' ');
     if (fp32_val != 0)
      _FPC_PRINT_REPORT_ROW_(fp32_val, 80 -15 -1, 1);
     else
      _FPC_PRINT_REPORT_ROW_(fp64_val, 80 -15 -1, 1);
    }
    else
    {
     _FPC_PRINT_REPORT_ROW_(o, 80 -15 -1, 1, ' ');
    }
    _FPC_PRINT_REPORT_ROW_("File", 15, 0, ':');
    _FPC_PRINT_REPORT_ROW_(_FPC_FILE_NAME_[0], 80 -15 -1, 1, ' ');
    _FPC_PRINT_REPORT_ROW_("Line", 15, 0, ':');

    _FPC_PRINT_REPORT_ROW_(loc, 80 -15 -1, 1);
    _FPC_PRINT_REPORT_LINE_('+');

    asm("trap;");
  }
 }
}

void _FPC_PRINT_AT_MAIN_()
{
 printf("\n");
 printf("========================================\n");
 printf(" FPChecker (v0.1.0, %s)\n", "Oct 22 2020");
 printf("========================================\n");
 printf("\n");
}
# 415 "/usr/global/tools/fpchecker/blueos_3_ppc64le_ib_p9/fpchecker-0.1.4-clang-9.0.0/bin/../src/Runtime_plugin.h"
__attribute__((device))
static int _FPC_GET_GLOBAL_IDX_3D_3D()
{
 int blockId = blockIdx.x + blockIdx.y * gridDim.x
  + gridDim.x * gridDim.y * blockIdx.z;
 int threadId = blockId * (blockDim.x * blockDim.y * blockDim.z)
   + (threadIdx.z * (blockDim.x * blockDim.y))
   + (threadIdx.y * blockDim.x) + threadIdx.x;
 return threadId;
}
# 483 "/usr/global/tools/fpchecker/blueos_3_ppc64le_ib_p9/fpchecker-0.1.4-clang-9.0.0/bin/../src/Runtime_plugin.h"
__attribute__((device))
static void _FPC_FP32_CHECK_OPERATION_(float x, float y, float z, int loc, int op)
{
 if (isinf(x))
 {
  _FPC_INTERRUPT_(1, op, loc, x, 0);
 }
 else if (isnan(x))
 {
  _FPC_INTERRUPT_(0, op, loc, x, 0);
 }
 else
 {
  if (_FPC_FP32_IS_SUBNORMAL(x))
  {
   _FPC_INTERRUPT_(2, op, loc, x, 0);
  }
  else if (_FPC_FP32_IS_FLUSH_TO_ZERO(x, y, z, op))
  {
   _FPC_INTERRUPT_(2, op, loc, x, 0);
  }
  else if (_FPC_FP32_IS_ALMOST_SUBNORMAL(x))
  {
   _FPC_WARNING_(2, op, loc, x, 0);
  }
  else if (_FPC_FP32_IS_ALMOST_OVERFLOW(x))
  {
   _FPC_WARNING_(1, op, loc, x, 0);
  }
 }
}



__attribute__((device))
static int _FPC_FP32_IS_FLUSH_TO_ZERO(float x, float y, float z, int op)
{
 int ret = 0;
 if (x == 0.0 || x == -0.0)
 {
  if (y != 0.0 && y != -0.0 && z != 0.0 && z != -0.0)
  {
   if (op != 0 && op != 1)
    ret = 1;
  }
 }

 return ret;
}


__attribute__((device))
static int _FPC_FP32_IS_SUBNORMAL(float x)
{
 int ret = 0;
 uint32_t val;
  memcpy((void *) &val, (void *) &x, sizeof(val));
  val = val << 1;
  val = val >> 24;
  if (x != 0.0 && x != -0.0)
  {
   if (val == 0)
    ret = 1;
  }
  return ret;
}

__attribute__((device))
static int _FPC_FP32_IS_ALMOST_OVERFLOW(float x)
{
 int ret = 0;
 uint32_t val;
  memcpy((void *) &val, (void *) &x, sizeof(val));
  val = val << 1;
  val = val >> 24;
  if (x != 0.0 && x != -0.0)
  {
   int maxVal = 256 - (int)(0.05*256.0);
   if (val >= maxVal)
    ret = 1;
  }
  return ret;
}

__attribute__((device))
static int _FPC_FP32_IS_ALMOST_SUBNORMAL(float x)
{
 int ret = 0;
 uint32_t val;
  memcpy((void *) &val, (void *) &x, sizeof(val));
  val = val << 1;
  val = val >> 24;
  if (x != 0.0 && x != -0.0)
  {
   int minVal = (int)(0.05*256.0);
   if (val <= minVal)
    ret = 1;
  }
  return ret;
}
__attribute__((device))
void _FPC_FP32_CHECK_ADD_(float x, float y, float z, int loc)
{
 _FPC_FP32_CHECK_OPERATION_(x, y, z, loc, 0);
}

__attribute__((device))
void _FPC_FP32_CHECK_SUB_(float x, float y, float z, int loc)
{
 _FPC_FP32_CHECK_OPERATION_(x, y, z, loc, 1);
}

__attribute__((device))
void _FPC_FP32_CHECK_MUL_(float x, float y, float z, int loc)
{
 _FPC_FP32_CHECK_OPERATION_(x, y, z, loc, 2);
}

__attribute__((device))
void _FPC_FP32_CHECK_DIV_(float x, float y, float z, int loc)
{
 _FPC_FP32_CHECK_OPERATION_(x, y, z, loc, 3);
}



__attribute__((device))
static void _FPC_FP64_CHECK_OPERATION_(double x, double y, double z, int loc, int op)
{
 if (isinf(x))
 {
  _FPC_INTERRUPT_(1, op, loc, 0, x);
 }
 else if (isnan(x))
 {
  _FPC_INTERRUPT_(0, op, loc, 0, x);
 }
 else
 {
  if (_FPC_FP64_IS_SUBNORMAL(x))
  {
   _FPC_INTERRUPT_(2, op, loc, 0, x);
  }
  else if (_FPC_FP64_IS_FLUSH_TO_ZERO(x, y, z, op))
  {
   _FPC_INTERRUPT_(2, op, loc, x, 0);
  }
  else if (_FPC_FP64_IS_ALMOST_SUBNORMAL(x))
  {
   _FPC_WARNING_(2, op, loc, 0, x);
  }
  else if (_FPC_FP64_IS_ALMOST_OVERFLOW(x))
  {
   _FPC_WARNING_(1, op, loc, 0, x);
  }
 }
}



__attribute__((device))
static int _FPC_FP64_IS_FLUSH_TO_ZERO(double x, double y, double z, int op)
{
 int ret = 0;
 if (x == 0.0 || x == -0.0)
 {
  if (y != 0.0 && y != -0.0 && z != 0.0 && z != -0.0)
  {
   if (op != 0 && op != 1)
    ret = 1;
  }
 }

 return ret;
}



__attribute__((device)) __attribute__((host))
static int _FPC_FP64_IS_SUBNORMAL(double x)
{
  int ret = 0;
  uint64_t val;
  memcpy((void *) &val, (void *) &x, sizeof(val));
  val = val << 1;
  val = val >> 53;
  if (x != 0.0 && x != -0.0)
  {
    if (val == 0)
      ret = 1;
  }
  return ret;
}

__attribute__((device))
static int _FPC_FP64_IS_ALMOST_OVERFLOW(double x)
{
 int ret = 0;
 uint64_t val;
  memcpy((void *) &val, (void *) &x, sizeof(val));
  val = val << 1;
  val = val >> 53;
  if (x != 0.0 && x != -0.0)
  {
   int maxVal = 2048 - (int)(0.05*2048.0);
   if (val >= maxVal)
    ret = 1;
  }
  return ret;
}

__attribute__((device))
static int _FPC_FP64_IS_ALMOST_SUBNORMAL(double x)
{
 int ret = 0;
 uint64_t val;
  memcpy((void *) &val, (void *) &x, sizeof(val));
  val = val << 1;
  val = val >> 53;
  if (x != 0.0 && x != -0.0)
  {
   int minVal = (int)(0.05*2048.0);
   if (val <= minVal)
    ret = 1;
  }
  return ret;
}

__attribute__((device))
void _FPC_FP64_CHECK_ADD_(double x, double y, double z, int loc)
{
 _FPC_FP64_CHECK_OPERATION_(x, y, z, loc, 0);
}

__attribute__((device))
void _FPC_FP64_CHECK_SUB_(double x, double y, double z, int loc)
{
 _FPC_FP64_CHECK_OPERATION_(x, y, z, loc, 1);
}

__attribute__((device))
void _FPC_FP64_CHECK_MUL_(double x, double y, double z, int loc)
{
 _FPC_FP64_CHECK_OPERATION_(x, y, z, loc, 2);
}

__attribute__((device))
void _FPC_FP64_CHECK_DIV_(double x, double y, double z, int loc)
{
 _FPC_FP64_CHECK_OPERATION_(x, y, z, loc, 3);
}
# 743 "/usr/global/tools/fpchecker/blueos_3_ppc64le_ib_p9/fpchecker-0.1.4-clang-9.0.0/bin/../src/Runtime_plugin.h"
__attribute__((device))
__attribute__((noinline)) static void _FPC_PLUGIN_INTERRUPT_(int errorType, int op, int loc, float fp32_val, double fp64_val, const char* fileName)
{

 volatile bool blocked = true;
 while(blocked) {
   if(0 == atomicCAS(&_FPC_LOCK_STATE_, 0, 1)) {

    char e[64]; e[0] = '\0';
    char o[64]; o[0] = '\0';

    if (errorType == 0) _FPC_CPY_(e, "NaN");
    else if (errorType == 1) _FPC_CPY_(e, "INF");
    else if (errorType == 2) _FPC_CPY_(e, "Underflow");
    else _FPC_CPY_(e, "NONE");

    if (op == 0) _FPC_CPY_(o, "ADD");
    else if (op == 1) _FPC_CPY_(o, "SUB");
    else if (op == 2) _FPC_CPY_(o, "MUL");
    else if (op == 3) _FPC_CPY_(o, "DIV");
    else _FPC_CPY_(o, "NONE");

    _FPC_PRINT_REPORT_HEADER_(0);
    _FPC_PRINT_REPORT_ROW_("Error", 15, 0, ':');
    _FPC_PRINT_REPORT_ROW_(e, 80 -15 -1, 1, ' ');
    _FPC_PRINT_REPORT_ROW_("Operation", 15, 0, ':');
    if (errorType == 2)
    {
     _FPC_PRINT_REPORT_ROW_(o, 4, 0, ' ');
     if (fp32_val != 0)
      _FPC_PRINT_REPORT_ROW_(fp32_val, 80 -15 -1, 1);
     else
      _FPC_PRINT_REPORT_ROW_(fp64_val, 80 -15 -1, 1);
    }
    else
    {
     _FPC_PRINT_REPORT_ROW_(o, 80 -15 -1, 1, ' ');
    }
    _FPC_PRINT_REPORT_ROW_("File", 15, 0, ':');
    _FPC_PRINT_REPORT_ROW_(fileName, 80 -15 -1, 1, ' ');
    _FPC_PRINT_REPORT_ROW_("Line", 15, 0, ':');

    _FPC_PRINT_REPORT_ROW_(loc, 80 -15 -1, 1);
        printf(" Block (%d,%d,%d), Thread (%d,%d,%d)\n", blockIdx.x, blockIdx.y, blockIdx.z, threadIdx.x, threadIdx.y, threadIdx.z);
    _FPC_PRINT_REPORT_LINE_('+');

    asm("trap;");
  }
 }
}
# 850 "/usr/global/tools/fpchecker/blueos_3_ppc64le_ib_p9/fpchecker-0.1.4-clang-9.0.0/bin/../src/Runtime_plugin.h"
__attribute__((device))
__attribute__((noinline)) static void _FPC_PLUGIN_WARNING_(int errorType, int op, int loc, float fp32_val, double fp64_val, const char* fileName)
{

 volatile bool blocked = true;
   while(blocked) {
   if(0 == atomicCAS(&_FPC_LOCK_STATE_, 0, 1)) {

    char e[64]; e[0] = '\0';
    char o[64]; o[0] = '\0';

    if (errorType == 0) _FPC_CPY_(e, "NaN");
    else if (errorType == 1) _FPC_CPY_(e, "INF");
    else if (errorType == 2) _FPC_CPY_(e, "Underflow");
    else _FPC_CPY_(e, "NONE");

    if (op == 0) _FPC_CPY_(o, "ADD");
    else if (op == 1) _FPC_CPY_(o, "SUB");
    else if (op == 2) _FPC_CPY_(o, "MUL");
    else if (op == 3) _FPC_CPY_(o, "DIV");
    else _FPC_CPY_(o, "NONE");

    _FPC_PRINT_REPORT_HEADER_(1);
    _FPC_PRINT_REPORT_ROW_("Error", 15, 0, ':');
    _FPC_PRINT_REPORT_ROW_(e, 80 -15 -1, 1, ' ');
    _FPC_PRINT_REPORT_ROW_("Operation", 15, 0, ':');
    if (errorType == 1 || errorType == 2)
    {
     _FPC_PRINT_REPORT_ROW_(o, 4, 0, ' ');
     if (fp32_val != 0)
      _FPC_PRINT_REPORT_ROW_(fp32_val, 80 -15 -1, 1);
     else
      _FPC_PRINT_REPORT_ROW_(fp64_val, 80 -15 -1, 1);
    }
    else
    {
     _FPC_PRINT_REPORT_ROW_(o, 80 -15 -1, 1, ' ');
    }
    _FPC_PRINT_REPORT_ROW_("File", 15, 0, ':');
    _FPC_PRINT_REPORT_ROW_(fileName, 80 -15 -1, 1, ' ');
    _FPC_PRINT_REPORT_ROW_("Line", 15, 0, ':');

    _FPC_PRINT_REPORT_ROW_(loc, 80 -15 -1, 1);
        printf(" Block (%d,%d,%d), Thread (%d,%d,%d)\n", blockIdx.x, blockIdx.y, blockIdx.z, threadIdx.x, threadIdx.y, threadIdx.z);
    _FPC_PRINT_REPORT_LINE_('+');

    asm("trap;");
  }
 }
}

__attribute__((device)) static int _FPC_HAS_PRINTED_ = 0;






__attribute__((device)) static
double _FPC_CHECK_(double x, int loc, const char *fileName)
{





  int id = _FPC_GET_GLOBAL_IDX_3D_3D();
  if (id == 0)
  {
    if (_FPC_HAS_PRINTED_==0) {
      printf("#FPCHECKER: checking on %f\n", x);
      _FPC_HAS_PRINTED_=1;
    }
  }



 if (isinf(x))
 {



  _FPC_PLUGIN_INTERRUPT_(1, -1, loc, 0, x, fileName);

 }
 else if (isnan(x))
 {



  _FPC_PLUGIN_INTERRUPT_(0, -1, loc, 0, x, fileName);

 }
 else
 {


  if (_FPC_FP64_IS_SUBNORMAL(x))
  {



   _FPC_PLUGIN_INTERRUPT_(2, -1, loc, 0, x, fileName);

  }



  if (_FPC_FP64_IS_ALMOST_SUBNORMAL(x))
  {



   _FPC_PLUGIN_WARNING_(2, -1, loc, 0, x, fileName);

  }
  else if (_FPC_FP64_IS_ALMOST_OVERFLOW(x))
  {



   _FPC_PLUGIN_WARNING_(1, -1, loc, 0, x, fileName);

  }


 }

 return x;

}


__attribute__((device)) static
float _FPC_CHECK_(float x, int loc, const char *fileName)
{





  int id = _FPC_GET_GLOBAL_IDX_3D_3D();
  if (id == 0)
  {
    if (_FPC_HAS_PRINTED_==0) {
      printf("#FPCHECKER: checking on %f\n", x);
      _FPC_HAS_PRINTED_=1;
    }
  }



 if (isinf(x))
 {



  _FPC_PLUGIN_INTERRUPT_(1, -1, loc, x, 0, fileName);

 }
 else if (isnan(x))
 {



  _FPC_PLUGIN_INTERRUPT_(0, -1, loc, x, 0, fileName);

 }
 else
 {


  if (_FPC_FP64_IS_SUBNORMAL(x))
  {



   _FPC_PLUGIN_INTERRUPT_(2, -1, loc, x, 0, fileName);

  }




  if (_FPC_FP64_IS_ALMOST_SUBNORMAL(x))
  {



   _FPC_PLUGIN_WARNING_(2, -1, loc, x, 0, fileName);

  }
  else if (_FPC_FP64_IS_ALMOST_OVERFLOW(x))
  {



   _FPC_PLUGIN_WARNING_(1, -1, loc, x, 0, fileName);

  }


 }

 return x;

}

__attribute__((device)) static
double _FPC_CHECK_(int x, int loc, const char *fileName)
{
  return (double)x;
}

__attribute__((device)) static
double _FPC_CHECK_(unsigned int x, int loc, const char *fileName)
{
  return (double)x;
}

__attribute__((device)) static
double _FPC_CHECK_(const unsigned long long x, int loc, const char *fileName)
{
  return (double)x;
}

__attribute__((device)) static
double _FPC_CHECK_(long x, int loc, const char *fileName)
{
  return (double)x;
}

__attribute__((device)) static
double _FPC_CHECK_(unsigned long x, int loc, const char *fileName)
{
  return (double)x;
}

__attribute__((device)) static
double _FPC_CHECK_(long long x, int loc, const char *fileName)
{
  return (double)x;
}

__attribute__((device)) static
long double _FPC_CHECK_(long double x, int loc, const char *fileName)
{
  return x;
}
# 3 "<built-in>" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.cpp" 2







# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.h" 1
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.h"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/DataStore.h" 1
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/DataStore.h"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke.h" 1
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke.h"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/build/include/KripkeConfig.h" 1
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke.h" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 1
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/build/tpl/raja/include/RAJA/config.hpp" 1
# 146 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/build/tpl/raja/include/RAJA/config.hpp"
namespace RAJA {
# 193 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/build/tpl/raja/include/RAJA/config.hpp"
const int DATA_ALIGN = 64;
# 399 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/build/tpl/raja/include/RAJA/config.hpp"
template<typename T>
inline __attribute__((always_inline))
T * align_hint(T * x)
{







  return static_cast<T *>(x);

}

}
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Operators.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Operators.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cfloat" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cfloat" 3

# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/float.h" 1 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cfloat" 2 3
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Operators.hpp" 2






# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/concepts.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/concepts.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/iterator" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/iterator" 3





# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 1 3
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ios" 1 3
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ios" 3





# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 62 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 98 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 117 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    locale() throw();
# 126 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 136 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 151 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 164 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 177 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 191 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 206 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 225 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 253 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 269 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    static locale
    global(const locale& __loc);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 304 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 338 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 369 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 436 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

                                                           ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
                                                              ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 583 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 610 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 624 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 641 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 660 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 674 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 703 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 717 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 730 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };


}


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.tcc" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }
# 102 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.tcc" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }
# 130 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.tcc" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 788 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_classes.h" 2 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 199 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 255 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 330 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 361 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 393 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 419 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 436 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 448 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

                                                             ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
                                                                ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 561 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 577 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 594 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 620 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 671 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 683 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 694 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 705 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 724 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 740 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 761 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 778 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }


}
# 43 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ios" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 1 3
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3








namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 119 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 208 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 225 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 238 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 250 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 262 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 283 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 297 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 315 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 337 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 356 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 371 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 396 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 423 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 449 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 463 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 481 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 497 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 508 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 528 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 544 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 554 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 575 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      virtual void
      imbue(const locale& __loc)
      { }
# 590 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 601 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 613 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 626 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      virtual int
      sync() { return 0; }
# 648 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 664 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 686 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 699 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 723 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      virtual int_type
      pbackfail(int_type __c = traits_type::eof())
      { return traits_type::eof(); }
# 741 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 767 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      virtual int_type
      overflow(int_type __c = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 782 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }

    private:


      basic_streambuf(const basic_streambuf& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      basic_streambuf&
      operator=(const basic_streambuf&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);



}


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/streambuf.tcc" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 829 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/streambuf" 2 3
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ios" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwctype" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwctype" 3
# 50 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 33 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 34 "/usr/include/wctype.h" 2 3 4
# 52 "/usr/include/wctype.h" 3 4
typedef unsigned long int wctype_t;
# 71 "/usr/include/wctype.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {
# 111 "/usr/include/wctype.h" 3 4
extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 171 "/usr/include/wctype.h" 3 4
extern wctype_t wctype (const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();
# 186 "/usr/include/wctype.h" 3 4
typedef const __int32_t *wctrans_t;







extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();


}
# 213 "/usr/include/wctype.h" 3 4
extern "C" {




extern wctrans_t wctrans (const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();
# 230 "/usr/include/wctype.h" 3 4
extern int iswalnum_l (wint_t __wc, __locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, __locale_t __locale) throw ();



extern wctype_t wctype_l (const char *__property, __locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, __locale_t __locale)
     throw ();







extern wint_t towlower_l (wint_t __wc, __locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, __locale_t __locale) throw ();



extern wctrans_t wctrans_l (const char *__property, __locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      __locale_t __locale) throw ();



}
# 51 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwctype" 2 3
# 80 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cctype" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cctype" 3
# 41 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/ctype_base.h" 1 3
# 36 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;
  };


}
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 2 3






# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/streambuf_iterator.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 49 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
                      _CharT*,


        _CharT>



    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      constexpr istreambuf_iterator() noexcept
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;

      ~istreambuf_iterator() = default;



      istreambuf_iterator(istream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const noexcept
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }




}
# 49 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 64 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 142 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 161 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 178 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 194 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 210 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 224 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 239 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 253 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 268 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 285 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 304 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 323 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 345 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 370 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 389 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 408 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 427 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 445 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 462 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 478 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 495 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 514 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 535 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 556 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 581 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 604 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 673 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 710 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 723 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 736 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 751 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 765 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 779 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 794 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 811 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 827 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 844 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 864 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 891 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 922 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 955 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1004 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1021 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1037 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1054 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1074 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1097 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1123 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const
      { return __c; }
# 1149 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1174 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1207 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1218 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1242 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1261 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1279 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1297 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1314 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1331 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1347 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1364 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1384 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1406 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1429 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1455 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };



}



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/ctype_inline.h" 1 3
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1512 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1640 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1678 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1692 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1706 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1719 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1750 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1763 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1776 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1793 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1805 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1818 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1831 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1844 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };

namespace __gnu_cxx_ldbl128 {
# 1914 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1935 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1961 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1998 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2058 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2101 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2172 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;



      virtual iter_type
      __do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
        double&) const;






      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;



      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2253 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2274 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2292 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2334 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2397 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2422 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2470 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;



      virtual iter_type
      __do_put(iter_type, ios_base&, char_type, double) const;





      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;



      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;

}







  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.tcc" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   _M_grouping_size = __np.grouping().size();
   __grouping = new char[_M_grouping_size];
   __np.grouping().copy(__grouping, _M_grouping_size);
   _M_grouping = __grouping;
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(_M_grouping[0]) > 0
        && (_M_grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   _M_truename_size = __np.truename().size();
   __truename = new _CharT[_M_truename_size];
   __np.truename().copy(__truename, _M_truename_size);
   _M_truename = __truename;

   _M_falsename_size = __np.falsename().size();
   __falsename = new _CharT[_M_falsename_size];
   __np.falsename().copy(__falsename, _M_falsename_size);
   _M_falsename = __falsename;

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 136 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();

namespace __gnu_cxx_ldbl128 {

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }


  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    __do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }


  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }

}

  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }

namespace __gnu_cxx_ldbl128 {

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 966 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1027 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }


  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    __do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }


  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }

}
# 1189 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class __gnu_cxx_ldbl128:: num_get<char>;
  extern template class __gnu_cxx_ldbl128:: num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class __gnu_cxx_ldbl128:: num_get<wchar_t>;
  extern template class __gnu_cxx_ldbl128:: num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2609 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/locale_facets.h" 2 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 65 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 130 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 141 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 194 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 215 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 250 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 288 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 300 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 340 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 354 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 383 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 403 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 423 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 442 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };


}


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.tcc" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 476 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/basic_ios.h" 2 3
# 45 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ios" 2 3
# 39 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 57 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
# 219 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 244 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 269 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 302 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      __ostream_type&
      put(char_type __c);






      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 334 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 347 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      __ostream_type&
      flush();
# 357 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      pos_type
      tellp();
# 368 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 380 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);
    };
# 399 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 418 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 428 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 447 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 469 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 511 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 562 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 574 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 600 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 3
  template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>&& __os, const _Tp& __x)
    {
      __os << __x;
      return __os;
    }



}


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ostream.tcc" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 613 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ostream" 2 3
# 65 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/iterator" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 1 3
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 57 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 119 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
# 213 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 234 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 258 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 268 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 301 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      int_type
      get();
# 315 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      get(char_type& __c);
# 342 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 353 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 376 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 386 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 415 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 426 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 450 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 467 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      int_type
      peek();
# 485 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 504 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 521 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      putback(char_type __c);
# 537 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      unget();
# 555 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      int
      sync();
# 570 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      pos_type
      tellg();
# 585 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      seekg(pos_type);
# 601 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 656 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 692 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 703 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 721 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 763 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 794 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 854 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 870 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 3
  template<typename _CharT, typename _Traits, typename _Tp>
    inline basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>&& __is, _Tp& __x)
    {
      __is >> __x;
      return __is;
    }



}


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/istream.tcc" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 513 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 883 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/istream" 2 3
# 66 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/iterator" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stream_iterator.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stream_iterator.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{
# 47 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stream_iterator.h" 3
  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t>
    class istream_iterator
    : public iterator<input_iterator_tag, _Tp, _Dist, const _Tp*, const _Tp&>
    {
    public:
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_istream<_CharT, _Traits> istream_type;

    private:
      istream_type* _M_stream;
      _Tp _M_value;
      bool _M_ok;

    public:

      constexpr istream_iterator()
      : _M_stream(0), _M_value(), _M_ok(false) {}


      istream_iterator(istream_type& __s)
      : _M_stream(&__s)
      { _M_read(); }

      istream_iterator(const istream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_value(__obj._M_value),
        _M_ok(__obj._M_ok)
      { }

      const _Tp&
      operator*() const
      {


                        ;
 return _M_value;
      }

      const _Tp*
      operator->() const { return &(operator*()); }

      istream_iterator&
      operator++()
      {


                        ;
 _M_read();
 return *this;
      }

      istream_iterator
      operator++(int)
      {


                        ;
 istream_iterator __tmp = *this;
 _M_read();
 return __tmp;
      }

      bool
      _M_equal(const istream_iterator& __x) const
      { return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream); }

    private:
      void
      _M_read()
      {
 _M_ok = (_M_stream && *_M_stream) ? true : false;
 if (_M_ok)
   {
     *_M_stream >> _M_value;
     _M_ok = *_M_stream ? true : false;
   }
      }
    };


  template<typename _Tp, typename _CharT, typename _Traits, typename _Dist>
    inline bool
    operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
        const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
    { return __x._M_equal(__y); }


  template <class _Tp, class _CharT, class _Traits, class _Dist>
    inline bool
    operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
        const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
    { return !__x._M_equal(__y); }
# 152 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stream_iterator.h" 3
  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT> >
    class ostream_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:


      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


    private:
      ostream_type* _M_stream;
      const _CharT* _M_string;

    public:

      ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}
# 183 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stream_iterator.h" 3
      ostream_iterator(ostream_type& __s, const _CharT* __c)
      : _M_stream(&__s), _M_string(__c) { }


      ostream_iterator(const ostream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string) { }



      ostream_iterator&
      operator=(const _Tp& __value)
      {


                        ;
 *_M_stream << __value;
 if (_M_string) *_M_stream << _M_string;
 return *this;
      }

      ostream_iterator&
      operator*()
      { return *this; }

      ostream_iterator&
      operator++()
      { return *this; }

      ostream_iterator&
      operator++(int)
      { return *this; }
    };




}
# 67 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/iterator" 2 3
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/concepts.hpp" 2


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/concepts.hpp" 1
# 17 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/concepts.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/helpers.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/helpers.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstddef" 1 3
# 43 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstddef" 3


# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 1 3
# 46 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstddef" 2 3


namespace std
{

  using ::max_align_t;
}
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/helpers.hpp" 2



# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/defines.hpp" 1
# 21 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/defines.hpp"
namespace camp
{
# 155 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/defines.hpp"
using idx_t = std::ptrdiff_t;
using nullptr_t = decltype(nullptr);
# 166 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/defines.hpp"
}
# 19 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/helpers.hpp" 2

namespace camp
{


template <typename T>
T* declptr();


template <typename T>
__attribute__((host)) __attribute__((device))
auto val() noexcept -> decltype(std::declval<T>());


template <typename T>
__attribute__((host)) __attribute__((device))
auto cval() noexcept -> decltype(std::declval<T const>());


template <typename... Ts>
__attribute__((host)) __attribute__((device))

constexpr

inline void sink(Ts const& ...)
{
}


using std::begin;
using std::swap;

namespace type
{
  namespace ref
  {
    template <class T>
    struct rem_s {
      using type = T;
    };
    template <class T>
    struct rem_s<T&> {
      using type = T;
    };
    template <class T>
    struct rem_s<T&&> {
      using type = T;
    };


    template <class T>
    using rem = typename rem_s<T>::type;


    template <class T>
    using add = T&;
  }

  namespace rvref
  {

    template <class T>
    using add = T&&;
  }

  namespace ptr
  {
    template <class T>
    struct rem_s {
      using type = T;
    };
    template <class T>
    struct rem_s<T*> {
      using type = T;
    };


    template <class T>
    using rem = typename rem_s<T>::type;


    template <class T>
    using add = T*;
  }

  namespace c
  {
    template <class T>
    struct rem_s {
      using type = T;
    };
    template <class T>
    struct rem_s<const T> {
      using type = T;
    };


    template <class T>
    using rem = typename rem_s<T>::type;


    template <class T>
    using add = const T;
  }

  namespace v
  {
    template <class T>
    struct rem_s {
      using type = T;
    };
    template <class T>
    struct rem_s<volatile T> {
      using type = T;
    };


    template <class T>
    using rem = typename rem_s<T>::type;


    template <class T>
    using add = volatile T;
  }

  namespace cv
  {
    template <class T>
    struct rem_s {
      using type = T;
    };
    template <class T>
    struct rem_s<const T> {
      using type = T;
    };
    template <class T>
    struct rem_s<volatile T> {
      using type = T;
    };
    template <class T>
    struct rem_s<const volatile T> {
      using type = T;
    };


    template <class T>
    using rem = typename rem_s<T>::type;


    template <class T>
    using add = const volatile T;
  }
}

template <typename T>
using decay = type::cv::rem<type::ref::rem<T>>;

template <typename T>
using plain = type::ref::rem<T>;

template <typename T>
using diff_from = decltype(val<plain<T>>() - val<plain<T>>());
template <typename T, typename U>
using diff_between = decltype(val<plain<T>>() - val<plain<U>>());

template <typename T>
using iterator_from = decltype(begin(val<plain<T>>()));

template <class T>
__attribute__((host)) __attribute__((device)) constexpr T&& forward(type::ref::rem<T>& t) noexcept
{
  return static_cast<T&&>(t);
}
template <class T>
__attribute__((host)) __attribute__((device)) constexpr T&& forward(type::ref::rem<T>&& t) noexcept
{
  return static_cast<T&&>(t);
}

template <typename T>
__attribute__((host)) __attribute__((device)) constexpr type::ref::rem<T>&& move(T&& t) noexcept
{
  return static_cast<type::ref::rem<T>&&>(t);
}

template <typename T>
__attribute__((host)) __attribute__((device)) void safe_swap(T& t1, T& t2)
{

  T temp{std::move(t1)};
  t1 = std::move(t2);
  t2 = std::move(temp);




}

template <typename T, typename = decltype(sink(swap(val<T>(), val<T>())))>
__attribute__((host)) __attribute__((device)) void safe_swap(T& t1, T& t2)
{
  using std::swap;
  swap(t1, t2);
}
}
# 18 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/concepts.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list/at.hpp" 1
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list/at.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list/list.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list/list.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/number.hpp" 1
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/number.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/number/if.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/number/if.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/value.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/value.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/number/number.hpp" 1
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/number/number.hpp"
namespace camp
{


template <class NumT, NumT v>
struct integral_constant {
  static constexpr NumT value = v;
  using value_type = NumT;
  using type = integral_constant;
  constexpr operator value_type() const noexcept { return value; }
  constexpr value_type operator()() const noexcept { return value; }
};






template <idx_t N>
using num = integral_constant<idx_t, N>;

using true_type = num<true>;
using false_type = num<false>;

using t = num<true>;

}
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/value.hpp" 2

namespace camp
{


namespace detail
{
  struct nothing;
}



template <typename val = detail::nothing>
struct value;

template <typename val>
struct value {
  using type = val;
};

template <>
struct value<detail::nothing> {
  using type = value;
};


using nil = value<>;


template <typename Val>
struct is_value_s {
  using type = camp::t;
};


template <typename Val>
using is_value = typename is_value_s<Val>::type;
}
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/number/if.hpp" 2



namespace camp
{


template <bool Cond,
          typename Then = camp::true_type,
          typename Else = camp::false_type>
struct if_cs {
  using type = Then;
};

template <typename Then, typename Else>
struct if_cs<false, Then, Else> {
  using type = Else;
};


template <bool Cond,
          typename Then = camp::true_type,
          typename Else = camp::false_type>
using if_c = typename if_cs<Cond, Then, Else>::type;


template <typename Cond,
          typename Then = camp::true_type,
          typename Else = camp::false_type>
struct if_s : if_cs<Cond::value, Then, Else> {
};

template <typename Then, typename Else>
struct if_s<nil, Then, Else> : if_cs<false, Then, Else> {
};


template <typename... Ts>
using if_ = typename if_s<Ts...>::type;

}
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/number.hpp" 2







namespace camp
{


template <typename T, T... vs>
struct int_seq {
  using type = int_seq;
};

template <idx_t... vs>
using idx_seq = int_seq<idx_t, vs...>;

namespace detail
{
  template <typename T, typename N>
  struct gen_seq;
# 50 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/number.hpp"
  template <typename T, typename S1, typename S2>
  struct concat;

  template <typename T, T... I1, T... I2>
  struct concat<T, int_seq<T, I1...>, int_seq<T, I2...>> {
    using type = typename int_seq<T, I1..., (sizeof...(I1) + I2)...>::type;
  };

  template <typename T, typename N_t>
  struct gen_seq
      : concat<T,
               typename gen_seq<T, integral_constant<T, N_t::value / 2>>::type,
               typename gen_seq<
                   T,
                   integral_constant<T, N_t::value - N_t::value / 2>>::type>::
            type {
  };

  template <typename T>
  struct gen_seq<T, integral_constant<T, 0>> : int_seq<T> {
  };
  template <typename T>
  struct gen_seq<T, integral_constant<T, 1>> : int_seq<T, 0> {
  };

}


template <idx_t Upper>
struct make_idx_seq {
  using type =
      typename detail::gen_seq<idx_t, integral_constant<idx_t, Upper>>::type;
};



template <idx_t Upper>
using make_idx_seq_t = typename make_idx_seq<Upper>::type;


template <class... Ts>
using idx_seq_for_t = typename make_idx_seq<sizeof...(Ts)>::type;


template <typename T>
struct idx_seq_from;


template <template <typename...> class T, typename... Args>
struct idx_seq_from<T<Args...>> : make_idx_seq<sizeof...(Args)> {
};


template <typename T, T... Args>
struct idx_seq_from<int_seq<T, Args...>> : make_idx_seq<sizeof...(Args)> {
};


template <typename T>
using idx_seq_from_t = typename idx_seq_from<camp::decay<T>>::type;


template <typename T, T Upper>
struct make_int_seq : detail::gen_seq<T, integral_constant<T, Upper>>::type {
};


template <typename T, idx_t Upper>
using make_int_seq_t = typename make_int_seq<T, Upper>::type;


template <typename T>
struct not_ {
  using type = typename if_s<T, false_type, true_type>::type;
};


template <idx_t N, typename IdxSeg>
struct seq_at;

template <idx_t N, typename T, T Idx0, T... IdxRest>
struct seq_at<N, camp::int_seq<T, Idx0, IdxRest...>> {
  static constexpr T value =
      seq_at<N - 1, camp::int_seq<T, IdxRest...>>::value;
};

template <typename T, T Idx0, T... IdxRest>
struct seq_at<0, camp::int_seq<T, Idx0, IdxRest...>> {
  static constexpr T value = Idx0;
};


}
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list/list.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/size.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/size.hpp"
namespace camp
{

template <typename T>
struct size;

}
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list/list.hpp" 2

namespace camp
{


template <typename... Ts>
struct list {
  using type = list;
};

namespace detail
{
  template <typename T>
  struct _as_list;
  template <template <typename...> class T, typename... Args>
  struct _as_list<T<Args...>> {
    using type = list<Args...>;
  };
  template <typename T, T... Args>
  struct _as_list<int_seq<T, Args...>> {
    using type = list<integral_constant<T, Args>...>;
  };
}

template <typename T>
struct as_list_s : detail::_as_list<T>::type {
};

template <typename T>
using as_list = typename as_list_s<T>::type;

template <typename... Args>
struct size<list<Args...>> {
  constexpr static idx_t value{sizeof...(Args)};
  using type = num<sizeof...(Args)>;
};

}
# 17 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list/at.hpp" 2



namespace camp
{

namespace detail
{
  template <typename T, idx_t Idx>
  struct _at;
# 35 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list/at.hpp"
  template <idx_t, typename>
  struct entry {
  };

  template <typename, typename>
  struct entries;

  template <idx_t... keys, typename... vals>
  struct entries<idx_seq<keys...>, list<vals...>> : entry<keys, vals>... {
  };

  template <idx_t key, typename val>
  value<val> _lookup_impl(entry<key, val>*);

  template <typename>
  value<> _lookup_impl(...);

  template <typename vals, typename indices, idx_t Idx>
  struct _lookup
      : decltype(_lookup_impl<Idx>(declptr<entries<indices, vals>>())) {
  };

  template <template <class...> class T, typename X, typename... Rest>
  struct _at<T<X, Rest...>, 0> {
    using type = X;
  };
  template <template <class...> class T,
            typename X,
            typename Y,
            typename... Rest>
  struct _at<T<X, Y, Rest...>, 1> {
    using type = Y;
  };
  template <template <class...> class T, idx_t Idx, typename... Rest>
  struct _at<T<Rest...>, Idx> {
    static_assert(Idx < sizeof...(Rest), "at: index out of range");
    using type = typename _lookup<T<Rest...>,
                                  make_idx_seq_t<sizeof...(Rest)>,
                                  Idx>::type;
  };

}


template <typename Seq, typename Num>
struct at;
template <typename T, idx_t Val>
struct at<T, num<Val>> {
  using type = typename detail::_at<T, Val>::type;
};


template <typename T>
using first = typename at<T, num<0>>::type;

template <typename T>
using second = typename at<T, num<1>>::type;


template <typename T, idx_t Idx>
using at_v = typename at<T, num<Idx>>::type;


template <typename T, typename U>
using at_t = typename at<T, U>::type;
}
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list/find_if.hpp" 1
# 17 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list/find_if.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/lambda.hpp" 1
# 21 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/lambda.hpp"
namespace camp
{

template <template <typename...> class Expr>
struct lambda {
  template <typename... Ts>
  using expr = typename Expr<Ts...>::type;
};

template <typename Lambda, typename Seq>
struct apply_l;
template <typename Lambda, typename... Args>
struct apply_l<Lambda, list<Args...>> {
  using type = typename Lambda::template expr<Args...>::type;
};

template <typename Lambda, typename... Args>
struct invoke_l {
  using type = typename Lambda::template expr<Args...>::type;
};

template <idx_t n>
struct arg {
  template <typename... Ts>
  using expr = typename at<list<Ts...>, num<n - 1>>::type;
};

using _1 = arg<1>;
using _2 = arg<2>;
using _3 = arg<3>;
using _4 = arg<4>;
using _5 = arg<5>;
using _6 = arg<6>;
using _7 = arg<7>;
using _8 = arg<8>;
using _9 = arg<9>;

namespace detail
{
  template <typename T, typename... Args>
  struct get_bound_arg {
    using type = T;
  };
  template <idx_t i, typename... Args>
  struct get_bound_arg<arg<i>, Args...> {
    using type = typename arg<i>::template expr<Args...>;
  };
}

template <template <typename...> class Expr, typename... ArgBindings>
struct bind {
  using bindings = list<ArgBindings...>;
  template <typename... Ts>
  using expr = typename Expr<
      typename detail::get_bound_arg<ArgBindings, Ts...>::type...>::type;
  using type = bind;
};

template <template <typename...> class Expr, typename... BoundArgs>
struct bind_front {
  template <typename... Ts>
  using expr = typename Expr<BoundArgs..., Ts...>::type;
  using type = bind_front;
};

template <typename Lambda, typename... Rest> struct bind_front_l { using type = typename bind_front<Lambda::template expr, Rest...>::type; };

}
# 18 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list/find_if.hpp" 2




namespace camp
{


namespace detail
{
  template <template <typename...> class Cond, typename... Elements>
  struct _find_if;
  template <template <typename...> class Cond, typename First, typename... Rest>
  struct _find_if<Cond, First, Rest...> {
    using type = if_<typename Cond<First>::type,
                     First,
                     typename _find_if<Cond, Rest...>::type>;
  };
  template <template <typename...> class Cond>
  struct _find_if<Cond> {
    using type = nil;
  };
}


template <template <typename...> class Cond, typename Seq>
struct find_if;


template <template <typename...> class Cond, typename... Elements>
struct find_if<Cond, list<Elements...>> {
  using type = typename detail::_find_if<Cond, Elements...>::type;
};

template <typename Lambda, typename... Rest> struct find_if_l { using type = typename find_if<Lambda::template expr, Rest...>::type; };

}
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/list.hpp" 2
# 19 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/concepts.hpp" 2


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/type_traits/is_same.hpp" 1
# 17 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/type_traits/is_same.hpp"
namespace camp
{

template <typename T, typename U>
struct is_same_s : false_type {
};

template <typename T>
struct is_same_s<T, T> : true_type {
};





template <typename T, typename U>
using is_same = typename is_same_s<T, U>::type;


template <typename T, typename U>
using is_same_t = is_same<T, U>;

}
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/concepts.hpp" 2

namespace camp
{

namespace concepts
{

  namespace metalib
  {
    using camp::is_same;


    template <typename T>
    struct negate_t : num<!T::value> {
    };


    template <bool... Bs>
    struct all_of : metalib::is_same<list<t, num<Bs>...>, list<num<Bs>..., t>> {
    };


    template <bool... Bs>
    struct none_of
        : metalib::is_same<idx_seq<false, Bs...>, idx_seq<Bs..., false>> {
    };


    template <bool... Bs>
    struct any_of : negate_t<none_of<Bs...>> {
    };


    template <typename... Bs>
    struct all_of_t : all_of<Bs::value...> {
    };


    template <typename... Bs>
    struct none_of_t : none_of<Bs::value...> {
    };


    template <typename... Bs>
    struct any_of_t : any_of<Bs::value...> {
    };

  }

}
}

template <typename... T>
camp::true_type ___valid_expr___(T &&...) noexcept;






namespace camp
{
namespace concepts
{

  namespace detail
  {

    template <class...>
    struct TL {
    };

    template <class...>
    struct voider {
      using type = void;
    };

    template <class Default,
              class ,
              template <class...> class Concept,
              class TArgs>
    struct detector {
      using value_t = false_type;
      using type = Default;
    };

    template <class Default, template <class...> class Concept, class... Args>
    struct detector<Default,
                    typename voider<Concept<Args...>>::type,
                    Concept,
                    TL<Args...>> {
      using value_t = true_type;
      using type = Concept<Args...>;
    };

    template <template <class...> class Concept, class TArgs>
    using is_detected = detector<void, void, Concept, TArgs>;

    template <template <class...> class Concept, class TArgs>
    using detected = typename is_detected<Concept, TArgs>::value_t;


    template <typename Ret, typename T>
    Ret returns(T const &) noexcept;

  }

  template <typename T>
  using negate = metalib::negate_t<T>;



  template <typename T, typename U>
  constexpr auto convertible_to(U &&u) noexcept
      -> decltype(detail::returns<camp::true_type>(static_cast<T>((U &&) u)));



  template <typename T, typename U>
  constexpr auto has_type(U &&) noexcept -> metalib::is_same<T, U>;

  template <typename BoolLike>
  constexpr auto is(BoolLike) noexcept
      -> camp::if_<BoolLike, camp::true_type, camp::false_type>;

  template <typename BoolLike>
  constexpr auto is_not(BoolLike) noexcept
      -> camp::if_c<!BoolLike::value, camp::true_type, camp::false_type>;


  template <typename... Args>
  struct all_of : metalib::all_of_t<Args...> {
  };


  template <typename... Args>
  struct none_of : metalib::none_of_t<Args...> {
  };


  template <typename... Args>
  struct any_of : metalib::any_of_t<Args...> {
  };


  template <typename... Args>
  using enable_if = typename std::enable_if<all_of<Args...>::value, void>::type;

  template <typename T, typename... Args>
  using enable_if_t = typename std::enable_if<all_of<Args...>::value, T>::type;


  template <template <class...> class Op, class... Args>
  struct requires_ : detail::detected<Op, detail::TL<Args...>> {
  };

  template <typename T>
  struct Swappable : decltype(___valid_expr___(swap(val<T>(), val<T>()))) {
  };

  template <typename T>
  struct LessThanComparable
      : decltype(___valid_expr___(convertible_to<bool>(val<T>() < val<T>()))) {
  };

  template <typename T>
  struct GreaterThanComparable
      : decltype(___valid_expr___(convertible_to<bool>(val<T>() > val<T>()))) {
  };

  template <typename T>
  struct LessEqualComparable
      : decltype(___valid_expr___(convertible_to<bool>(val<T>() <= val<T>()))) {
  };

  template <typename T>
  struct GreaterEqualComparable
      : decltype(___valid_expr___(convertible_to<bool>(val<T>() >= val<T>()))) {
  };

  template <typename T>
  struct EqualityComparable
      : decltype(___valid_expr___(convertible_to<bool>(val<T>() == val<T>()))) {
  };

  template <typename T, typename U>
  struct ComparableTo
      : decltype(___valid_expr___(convertible_to<bool>(val<U>() < val<T>()), convertible_to<bool>(val<T>() < val<U>()), convertible_to<bool>(val<U>() <= val<T>()), convertible_to<bool>(val<T>() <= val<U>()), convertible_to<bool>(val<U>() > val<T>()), convertible_to<bool>(val<T>() > val<U>()), convertible_to<bool>(val<U>() >= val<T>()), convertible_to<bool>(val<T>() >= val<U>()), convertible_to<bool>(val<U>() == val<T>()), convertible_to<bool>(val<T>() == val<U>()), convertible_to<bool>(val<U>() != val<T>()), convertible_to<bool>(val<T>() != val<U>()))) {
# 221 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/concepts.hpp"
  };

  template <typename T>
  struct Comparable : ComparableTo<T, T> {
  };

  template <typename T>
  struct Arithmetic : decltype(___valid_expr___(is(std::is_arithmetic<T>()))) {
  };

  template <typename T>
  struct FloatingPoint : decltype(___valid_expr___(is(std::is_floating_point<T>()))) {
  };

  template <typename T>
  struct Integral : decltype(___valid_expr___(is(std::is_integral<T>()))) {
  };

  template <typename T>
  struct Signed : decltype(___valid_expr___(Integral<T>(), is(std::is_signed<T>()))) {
  };

  template <typename T>
  struct Unsigned : decltype(___valid_expr___(Integral<T>(), is(std::is_unsigned<T>()))) {
  };

  template <typename T>
  struct Iterator
      : decltype(___valid_expr___(is_not(Integral<T>()), *(val<T>()), has_type<T &>(++val<T &>()))) {


  };

  template <typename T>
  struct ForwardIterator
      : decltype(___valid_expr___(Iterator<T>(), val<T &>()++, *val<T &>()++)) {
  };

  template <typename T>
  struct BidirectionalIterator
      : decltype(___valid_expr___(ForwardIterator<T>(), has_type<T &>(--val<T &>()), convertible_to<T const &>(val<T &>()--), *val<T &>()--)) {



  };

  template <typename T>
  struct RandomAccessIterator
      : decltype(___valid_expr___(BidirectionalIterator<T>(), Comparable<T>(), has_type<T &>(val<T &>() += val<diff_from<T>>()), has_type<T>(val<T>() + val<diff_from<T>>()), has_type<T>(val<diff_from<T>>() + val<T>()), has_type<T &>(val<T &>() -= val<diff_from<T>>()), has_type<T>(val<T>() - val<diff_from<T>>()), val<T>()[val<diff_from<T>>()])) {







  };

  template <typename T>
  struct HasBeginEnd : decltype(___valid_expr___(std::begin(val<T>()), std::end(val<T>()))) {
  };

  template <typename T>
  struct Range : decltype(___valid_expr___(HasBeginEnd<T>(), Iterator<iterator_from<T>>())) {
  };

  template <typename T>
  struct ForwardRange
      : decltype(___valid_expr___(HasBeginEnd<T>(), ForwardIterator<iterator_from<T>>())) {
  };

  template <typename T>
  struct BidirectionalRange
      : decltype(___valid_expr___(HasBeginEnd<T>(), BidirectionalIterator<iterator_from<T>>())) {

  };

  template <typename T>
  struct RandomAccessRange
      : decltype(___valid_expr___(HasBeginEnd<T>(), RandomAccessIterator<iterator_from<T>>())) {

  };

}

namespace type_traits
{
  template <typename... Args> struct is_iterator : camp::concepts::requires_<camp::concepts::Iterator, Args...> { };
  template <typename... Args> struct is_forward_iterator : camp::concepts::requires_<camp::concepts::ForwardIterator, Args...> { };

  template <typename... Args> struct is_bidirectional_iterator : camp::concepts::requires_<camp::concepts::BidirectionalIterator, Args...> { };

  template <typename... Args> struct is_random_access_iterator : camp::concepts::requires_<camp::concepts::RandomAccessIterator, Args...> { };


  template <typename... Args> struct is_range : camp::concepts::requires_<camp::concepts::Range, Args...> { };
  template <typename... Args> struct is_forward_range : camp::concepts::requires_<camp::concepts::ForwardRange, Args...> { };
  template <typename... Args> struct is_bidirectional_range : camp::concepts::requires_<camp::concepts::BidirectionalRange, Args...> { };

  template <typename... Args> struct is_random_access_range : camp::concepts::requires_<camp::concepts::RandomAccessRange, Args...> { };


  template <typename... Args> struct is_comparable : camp::concepts::requires_<camp::concepts::Comparable, Args...> { };
  template <typename... Args> struct is_comparable_to : camp::concepts::requires_<camp::concepts::ComparableTo, Args...> { };

  template <typename... Args> struct is_arithmetic : camp::concepts::requires_<camp::concepts::Arithmetic, Args...> { };
  template <typename... Args> struct is_floating_point : camp::concepts::requires_<camp::concepts::FloatingPoint, Args...> { };
  template <typename... Args> struct is_integral : camp::concepts::requires_<camp::concepts::Integral, Args...> { };
  template <typename... Args> struct is_signed : camp::concepts::requires_<camp::concepts::Signed, Args...> { };
  template <typename... Args> struct is_unsigned : camp::concepts::requires_<camp::concepts::Unsigned, Args...> { };

  template <typename T>
  using IterableValue = decltype(*std::begin(camp::val<T>()));

  template <typename T>
  using IteratorValue = decltype(*camp::val<T>());

  namespace detail
  {


    template <typename, template <typename...> class, typename...>
    struct IsSpecialized : camp::false_type {
    };

    template <template <typename...> class Template, typename... T>
    struct IsSpecialized<typename concepts::detail::voider<decltype(
                             camp::val<Template<T...>>())>::type,
                         Template,
                         T...> : camp::true_type {
    };

    template <template <class...> class,
              template <class...> class,
              bool,
              class...>
    struct SpecializationOf : camp::false_type {
    };

    template <template <class...> class Expected,
              template <class...> class Actual,
              class... Args>
    struct SpecializationOf<Expected, Actual, true, Args...>
        : camp::concepts::metalib::is_same<Expected<Args...>, Actual<Args...>> {
    };


  }


  template <template <class...> class Outer, class... Args>
  using IsSpecialized = detail::IsSpecialized<void, Outer, Args...>;

  template <template <class...> class, typename T>
  struct SpecializationOf : camp::false_type {
  };

  template <template <class...> class Expected,
            template <class...> class Actual,
            class... Args>
  struct SpecializationOf<Expected, Actual<Args...>>
      : detail::SpecializationOf<Expected,
                                 Actual,
                                 IsSpecialized<Expected, Args...>::value,
                                 Args...> {
  };

}
}
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/concepts.hpp" 2

namespace RAJA
{

namespace concepts
{
using namespace camp::concepts;

template <typename From, typename To>
struct ConvertibleTo
  : decltype(___valid_expr___(::RAJA::concepts::convertible_to<To>(camp::val<From>()))) {
};

}

namespace type_traits
{
using namespace camp::type_traits;

template <typename... Args> struct convertible_to : camp::concepts::requires_<concepts::ConvertibleTo, Args...> { };
}

}
# 34 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Operators.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/macros.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/macros.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 3
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/macros.hpp" 2
# 103 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/macros.hpp"
template <typename... T>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) void RAJA_UNUSED_VAR(T &&...) noexcept
{
}
# 126 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/macros.hpp"
__attribute__((host)) __attribute__((device))
inline void RAJA_ABORT_OR_THROW(const char *str)
{

  asm ("trap;");
# 155 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/macros.hpp"
}
# 35 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Operators.hpp" 2

namespace RAJA
{

namespace operators
{

namespace detail
{

struct associative_tag {
};

template <typename Arg1, typename Arg2, typename Result>
struct binary_function {
  using first_argument_type = Arg1;
  using second_argument_type = Arg2;
  using result_type = Result;
};

template <typename Argument, typename Result>
struct unary_function {
  using argument_type = Argument;
  using result_type = Result;
};

template <typename Arg1, typename Arg2>
struct comparison_function : public binary_function<Arg1, Arg2, bool> {
};

}

namespace types
{

template <typename T>
struct is_unsigned_int {
  static constexpr const bool value =
      std::is_unsigned<T>::value && std::is_integral<T>::value;
};

template <typename T>
struct is_signed_int {
  static constexpr const bool value =
      !std::is_unsigned<T>::value && std::is_integral<T>::value;
};






template <typename T, bool GPU = false>
struct larger {
};

template <>
struct larger<uint8_t> {
  using type = uint16_t;
};

template <>
struct larger<uint16_t> {
  using type = uint32_t;
};

template <>
struct larger<uint32_t> {
  using type = uint64_t;
};

template <>
struct larger<int8_t> {
  using type = int16_t;
};

template <>
struct larger<int16_t> {
  using type = int32_t;
};

template <>
struct larger<int32_t> {
  using type = int64_t;
};

template <>
struct larger<float> {
  using type = double;
};

template <>
struct larger<double> {
  using type = long double;
};

template <>
struct larger<double, true> {
  using type = double;
};

namespace detail
{

template <typename T, bool isInt, bool isSigned, bool isFP, bool gpu = false>
struct largest {
};

template <typename T>
struct largest<T, true, false, false> {
  using type = uint64_t;
};

template <typename T>
struct largest<T, true, true, false> {
  using type = int64_t;
};

template <typename T>
struct largest<T, false, false, true, false> {
  using type = long double;
};

template <typename T>
struct largest<T, false, false, true, true> {
  using type = double;
};
}





template <typename T, bool gpu = false>
struct largest {
  using type = typename detail::largest<T,
                                        std::is_integral<T>::value,
                                        std::is_signed<T>::value,
                                        std::is_floating_point<T>::value,
                                        gpu>::type;
};


template <typename T>
struct size_of {
  enum { value = sizeof(T) };
};

namespace detail
{

template <typename T, typename U, bool lhsLarger>
struct larger_of {
};

template <typename T, typename U>
struct larger_of<T, U, true> {
  using type = T;
};

template <typename T, typename U>
struct larger_of<T, U, false> {
  using type = U;
};
}

template <typename T, typename U>
struct larger_of {
  using type = typename detail::
      larger_of<T, U, (size_of<T>::value > size_of<U>::value)>::type;
};

}



template <typename T, typename Enable = void>
struct limits;



template <typename T>
struct limits<T,
  typename std::enable_if<std::is_integral<T>::value &&
  !std::is_unsigned<T>::value>::type>
{
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) static constexpr T min()
  {



    return static_cast<T>(1llu << ((8llu * sizeof(T)) - 1llu) );



  }
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) static constexpr T max()
  {



    return static_cast<T>(~(1llu << ((8llu * sizeof(T)) - 1llu)));



  }
};


template <typename T>
struct limits<T,
  typename std::enable_if<std::is_integral<T>::value &&
  std::is_unsigned<T>::value>::type>
{
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) static constexpr T min()
  {
    return static_cast<T>(0);
  }
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) static constexpr T max()
  {



    return static_cast<T>(0xFFFFFFFFFFFFFFFF);



  }
};


template <>
struct limits<float> {
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) static constexpr float min()
  {
    return -3.40282347e+38F;
  }
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) static constexpr float max()
  {
    return 3.40282347e+38F;
  }
};

template <>
struct limits<double> {
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) static constexpr double min()
  {
    return -1.7976931348623157e+308;
  }
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) static constexpr double max()
  {
     return 1.7976931348623157e+308;
  }
};

template <>
struct limits<long double> {
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) static constexpr long double min()
  {
    return -1.79769313486231580793728971405301e+308L;
  }
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) static constexpr long double max()
  {
    return 1.79769313486231580793728971405301e+308L;
  }
};
# 328 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Operators.hpp"
template <typename Ret, typename Arg1 = Ret, typename Arg2 = Arg1>
struct plus : public detail::binary_function<Arg1, Arg2, Ret>,
              detail::associative_tag {
  __attribute__((host)) __attribute__((device)) constexpr Ret operator()(const Arg1& lhs,
                                            const Arg2& rhs) const
  {
    return Ret{lhs} + rhs;
  }
  __attribute__((host)) __attribute__((device)) static constexpr Ret identity() { return Ret{0}; }
};

template <typename Ret, typename Arg1 = Ret, typename Arg2 = Arg1>
struct minus : public detail::binary_function<Arg1, Arg2, Ret> {
  __attribute__((host)) __attribute__((device)) constexpr Ret operator()(const Arg1& lhs,
                                            const Arg2& rhs) const
  {
    return Ret{lhs} - rhs;
  }
};

template <typename Ret, typename Arg1 = Ret, typename Arg2 = Arg1>
struct multiplies : public detail::binary_function<Arg1, Arg2, Ret>,
                    detail::associative_tag {

  __attribute__((host)) __attribute__((device)) constexpr Ret operator()(const Arg1& lhs,
                                            const Arg2& rhs) const
  {
    return Ret{lhs} * rhs;
  }
  __attribute__((host)) __attribute__((device)) static constexpr Ret identity() { return Ret{1}; }
};

template <typename Ret, typename Arg1 = Ret, typename Arg2 = Arg1>
struct divides : public detail::binary_function<Arg1, Arg2, Ret> {
  __attribute__((host)) __attribute__((device)) constexpr Ret operator()(const Arg1& lhs,
                                            const Arg2& rhs) const
  {
    return Ret{lhs} / rhs;
  }
};

template <typename Ret, typename Arg1 = Ret, typename Arg2 = Arg1>
struct modulus : public detail::binary_function<Arg1, Arg2, Ret> {
  __attribute__((host)) __attribute__((device)) constexpr Ret operator()(const Arg1& lhs,
                                            const Arg2& rhs) const
  {
    return Ret{lhs} % rhs;
  }
};



template <typename Arg1, typename Arg2 = Arg1>
struct logical_and : public detail::comparison_function<Arg1, Arg2>,
                     detail::associative_tag {
  __attribute__((host)) __attribute__((device)) constexpr bool operator()(const Arg1& lhs,
                                             const Arg2& rhs) const
  {
    return lhs && rhs;
  }
  __attribute__((host)) __attribute__((device)) static constexpr bool identity() { return true; }
};

template <typename Arg1, typename Arg2 = Arg1>
struct logical_or : public detail::comparison_function<Arg1, Arg2>,
                    detail::associative_tag {
  __attribute__((host)) __attribute__((device)) constexpr bool operator()(const Arg1& lhs,
                                             const Arg2& rhs) const
  {
    return lhs || rhs;
  }
  __attribute__((host)) __attribute__((device)) static constexpr bool identity() { return false; }
};

template <typename T>
struct logical_not : public detail::unary_function<T, bool> {
  __attribute__((host)) __attribute__((device)) constexpr bool operator()(const T& lhs) const
  {
    return !lhs;
  }
};



template <typename Ret, typename Arg1 = Ret, typename Arg2 = Arg1>
struct bit_or : public detail::binary_function<Arg1, Arg2, Ret> {
  __attribute__((host)) __attribute__((device)) constexpr Ret operator()(const Arg1& lhs,
                                            const Arg2& rhs) const
  {
    return lhs | rhs;
  }

__attribute__((host)) __attribute__((device)) static constexpr Ret identity() { return Ret{0}; }
};

template <typename Ret, typename Arg1 = Ret, typename Arg2 = Arg1>
struct bit_and : public detail::binary_function<Arg1, Arg2, Ret> {
  __attribute__((host)) __attribute__((device)) constexpr Ret operator()(const Arg1& lhs,
                                            const Arg2& rhs) const
  {
    return lhs & rhs;
  }

__attribute__((host)) __attribute__((device)) static constexpr Ret identity() { return ~Ret{0}; }
};


template <typename Ret, typename Arg1 = Ret, typename Arg2 = Arg1>
struct bit_xor : public detail::binary_function<Arg1, Arg2, Ret> {
  __attribute__((host)) __attribute__((device)) constexpr Ret operator()(const Arg1& lhs,
                                            const Arg2& rhs) const
  {
    return lhs ^ rhs;
  }
};
# 451 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Operators.hpp"
template <typename Ret, typename Arg1 = Ret, typename Arg2 = Arg1>
struct minimum : public detail::binary_function<Arg1, Arg2, Ret>,
                 detail::associative_tag {
  __attribute__((host)) __attribute__((device)) constexpr Ret operator()(const Arg1& lhs,
                                            const Arg2& rhs) const
  {
    return (rhs < lhs) ? rhs : lhs;
  }
  __attribute__((host)) __attribute__((device)) static constexpr Ret identity()
  {
    return limits<Ret>::max();
  }
};

template <typename Ret, typename Arg1 = Ret, typename Arg2 = Arg1>
struct maximum : public detail::binary_function<Arg1, Arg2, Ret>,
                 detail::associative_tag {
  __attribute__((host)) __attribute__((device)) constexpr Ret operator()(const Arg1& lhs,
                                            const Arg2& rhs) const
  {
    return (lhs >= rhs) ? lhs : rhs;
  }
  __attribute__((host)) __attribute__((device)) static constexpr Ret identity()
  {
    return limits<Ret>::min();
  }
};



template <typename Arg1, typename Arg2 = Arg1>
struct equal_to : public detail::comparison_function<Arg1, Arg2> {
  __attribute__((host)) __attribute__((device)) constexpr bool operator()(const Arg1& lhs,
                                             const Arg2& rhs) const
  {
    return lhs == rhs;
  }
};

template <typename Arg1, typename Arg2 = Arg1>
struct not_equal_to : public detail::comparison_function<Arg1, Arg2> {
  __attribute__((host)) __attribute__((device)) constexpr bool operator()(const Arg1& lhs,
                                             const Arg2& rhs) const
  {
    return lhs != rhs;
  }
};

template <typename Arg1, typename Arg2 = Arg1>
struct greater : public detail::comparison_function<Arg1, Arg2> {
  __attribute__((host)) __attribute__((device)) constexpr bool operator()(const Arg1& lhs,
                                             const Arg2& rhs) const
  {
    return lhs > rhs;
  }
};

template <typename Arg1, typename Arg2 = Arg1>
struct less : public detail::comparison_function<Arg1, Arg2> {
  __attribute__((host)) __attribute__((device)) constexpr bool operator()(const Arg1& lhs,
                                             const Arg2& rhs) const
  {
    return lhs < rhs;
  }
};


template <typename Arg1, typename Arg2 = Arg1>
struct greater_equal : public detail::comparison_function<Arg1, Arg2> {
  __attribute__((host)) __attribute__((device)) constexpr bool operator()(const Arg1& lhs,
                                             const Arg2& rhs) const
  {
    return lhs >= rhs;
  }
};

template <typename Arg1, typename Arg2 = Arg1>
struct less_equal : public detail::comparison_function<Arg1, Arg2> {
  __attribute__((host)) __attribute__((device)) constexpr bool operator()(const Arg1& lhs,
                                             const Arg2& rhs) const
  {
    return lhs <= rhs;
  }
};



template <typename Ret, typename Orig = Ret>
struct identity : public detail::unary_function<Orig, Ret> {
  __attribute__((host)) __attribute__((device)) constexpr Ret operator()(const Orig& lhs) const
  {
    return lhs;
  }
};

template <typename T, typename U>
struct project1st : public detail::binary_function<T, U, T> {
  __attribute__((host)) __attribute__((device)) constexpr T operator()(const T& lhs,
                                          const U& ) const
  {
    return lhs;
  }
};

template <typename T, typename U = T>
struct project2nd : public detail::binary_function<T, U, U> {
  __attribute__((host)) __attribute__((device)) constexpr U operator()(const T& ,
                                          const U& rhs) const
  {
    return rhs;
  }
};



template <typename T>
struct is_associative {
  static constexpr const bool value =
      std::is_base_of<detail::associative_tag, T>::value;
};

template <typename Arg1, typename Arg2 = Arg1>
struct safe_plus
    : public plus<Arg1,
                  Arg2,
                  typename types::larger<
                      typename types::larger_of<Arg1, Arg2>::type>::type> {
};

}

namespace concepts
{

template <typename Function,
          typename Return,
          typename Arg1 = Return,
          typename Arg2 = Arg1>
struct BinaryFunction
    : decltype(___valid_expr___(::RAJA::concepts::convertible_to<Return>( camp::val<Function>()(camp::val<Arg1>(), camp::val<Arg2>())))) {

};

template <typename Function, typename Return, typename Arg = Return>
struct UnaryFunction : decltype(___valid_expr___(::RAJA::concepts::convertible_to<Return>( camp::val<Function>()(camp::val<Arg>())))) {

};

namespace detail
{

template <typename Fun, typename Ret, typename T, typename U>
using is_binary_function = ::RAJA::concepts::requires_<BinaryFunction, Ret, T, U>;

template <typename Fun, typename Ret, typename T>
using is_unary_function = ::RAJA::concepts::requires_<UnaryFunction, Ret, T>;
}

}

namespace type_traits
{
template <typename... Args> struct is_binary_function : camp::concepts::requires_<RAJA::concepts::BinaryFunction, Args...> { };
template <typename... Args> struct is_unary_function : camp::concepts::requires_<RAJA::concepts::UnaryFunction, Args...> { };
}

}
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/basic_mempool.hpp" 1
# 21 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/basic_mempool.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 1 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 3

# 1 "/usr/include/assert.h" 1 3 4
# 65 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 2 3
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/basic_mempool.hpp" 2

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdio" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdio" 3
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/basic_mempool.hpp" 2
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 3
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/basic_mempool.hpp" 2
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/list" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/list" 3




# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 1 3
# 64 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace __detail
  {
# 77 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
    struct _List_node_base
    {
      _List_node_base* _M_next;
      _List_node_base* _M_prev;

      static void
      swap(_List_node_base& __x, _List_node_base& __y) noexcept;

      void
      _M_transfer(_List_node_base* const __first,
    _List_node_base* const __last) noexcept;

      void
      _M_reverse() noexcept;

      void
      _M_hook(_List_node_base* const __position) noexcept;

      void
      _M_unhook() noexcept;
    };


  }




  template<typename _Tp>
    struct _List_node : public __detail::_List_node_base
    {

      _Tp _M_data;


      template<typename... _Args>
        _List_node(_Args&&... __args)
 : __detail::_List_node_base(), _M_data(std::forward<_Args>(__args)...)
        { }

    };






  template<typename _Tp>
    struct _List_iterator
    {
      typedef _List_iterator<_Tp> _Self;
      typedef _List_node<_Tp> _Node;

      typedef ptrdiff_t difference_type;
      typedef std::bidirectional_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;

      _List_iterator() noexcept
      : _M_node() { }

      explicit
      _List_iterator(__detail::_List_node_base* __x) noexcept
      : _M_node(__x) { }

      _Self
      _M_const_cast() const noexcept
      { return *this; }


      reference
      operator*() const noexcept
      { return static_cast<_Node*>(_M_node)->_M_data; }

      pointer
      operator->() const noexcept
      { return std::__addressof(static_cast<_Node*>(_M_node)->_M_data); }

      _Self&
      operator++() noexcept
      {
 _M_node = _M_node->_M_next;
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_next;
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _M_node->_M_prev;
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_prev;
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }


      __detail::_List_node_base* _M_node;
    };






  template<typename _Tp>
    struct _List_const_iterator
    {
      typedef _List_const_iterator<_Tp> _Self;
      typedef const _List_node<_Tp> _Node;
      typedef _List_iterator<_Tp> iterator;

      typedef ptrdiff_t difference_type;
      typedef std::bidirectional_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;

      _List_const_iterator() noexcept
      : _M_node() { }

      explicit
      _List_const_iterator(const __detail::_List_node_base* __x)
      noexcept
      : _M_node(__x) { }

      _List_const_iterator(const iterator& __x) noexcept
      : _M_node(__x._M_node) { }

      iterator
      _M_const_cast() const noexcept
      { return iterator(const_cast<__detail::_List_node_base*>(_M_node)); }



      reference
      operator*() const noexcept
      { return static_cast<_Node*>(_M_node)->_M_data; }

      pointer
      operator->() const noexcept
      { return std::__addressof(static_cast<_Node*>(_M_node)->_M_data); }

      _Self&
      operator++() noexcept
      {
 _M_node = _M_node->_M_next;
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_next;
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _M_node->_M_prev;
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _M_node->_M_prev;
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }


      const __detail::_List_node_base* _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _List_iterator<_Val>& __x,
        const _List_const_iterator<_Val>& __y) noexcept
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _List_iterator<_Val>& __x,
               const _List_const_iterator<_Val>& __y) noexcept
    { return __x._M_node != __y._M_node; }



  template<typename _Tp, typename _Alloc>
    class _List_base
    {
    protected:
# 314 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      typedef typename _Alloc::template rebind<_List_node<_Tp> >::other
        _Node_alloc_type;

      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _List_impl
      : public _Node_alloc_type
      {
 __detail::_List_node_base _M_node;

 _List_impl()
 : _Node_alloc_type(), _M_node()
 { }

 _List_impl(const _Node_alloc_type& __a) noexcept
 : _Node_alloc_type(__a), _M_node()
 { }


 _List_impl(_Node_alloc_type&& __a) noexcept
 : _Node_alloc_type(std::move(__a)), _M_node()
 { }

      };

      _List_impl _M_impl;

      _List_node<_Tp>*
      _M_get_node()
      { return _M_impl._Node_alloc_type::allocate(1); }

      void
      _M_put_node(_List_node<_Tp>* __p) noexcept
      { _M_impl._Node_alloc_type::deallocate(__p, 1); }

  public:
      typedef _Alloc allocator_type;

      _Node_alloc_type&
      _M_get_Node_allocator() noexcept
      { return *static_cast<_Node_alloc_type*>(&_M_impl); }

      const _Node_alloc_type&
      _M_get_Node_allocator() const noexcept
      { return *static_cast<const _Node_alloc_type*>(&_M_impl); }

      _Tp_alloc_type
      _M_get_Tp_allocator() const noexcept
      { return _Tp_alloc_type(_M_get_Node_allocator()); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Node_allocator()); }

      _List_base()
      : _M_impl()
      { _M_init(); }

      _List_base(const _Node_alloc_type& __a) noexcept
      : _M_impl(__a)
      { _M_init(); }


      _List_base(_List_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Node_allocator()))
      {
 _M_init();
 __detail::_List_node_base::swap(_M_impl._M_node, __x._M_impl._M_node);
      }



      ~_List_base() noexcept
      { _M_clear(); }

      void
      _M_clear() noexcept;

      void
      _M_init() noexcept
      {
        this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
        this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
      }
    };
# 446 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class list : protected _List_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;



      typedef _List_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef typename _Base::_Node_alloc_type _Node_alloc_type;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type::pointer pointer;
      typedef typename _Tp_alloc_type::const_pointer const_pointer;
      typedef typename _Tp_alloc_type::reference reference;
      typedef typename _Tp_alloc_type::const_reference const_reference;
      typedef _List_iterator<_Tp> iterator;
      typedef _List_const_iterator<_Tp> const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:


      typedef _List_node<_Tp> _Node;

      using _Base::_M_impl;
      using _Base::_M_put_node;
      using _Base::_M_get_node;
      using _Base::_M_get_Tp_allocator;
      using _Base::_M_get_Node_allocator;
# 507 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      template<typename... _Args>
        _Node*
        _M_create_node(_Args&&... __args)
 {
   _Node* __p = this->_M_get_node();
   try
     {
       _M_get_Node_allocator().construct(__p,
      std::forward<_Args>(__args)...);
     }
   catch(...)
     {
       _M_put_node(__p);
       throw;
     }
   return __p;
 }


    public:






      list()

      noexcept(is_nothrow_default_constructible<_Node_alloc_type>::value)

      : _Base() { }





      explicit
      list(const allocator_type& __a) noexcept
      : _Base(_Node_alloc_type(__a)) { }
# 555 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      explicit
      list(size_type __n)
      : _Base()
      { _M_default_initialize(__n); }
# 568 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      list(size_type __n, const value_type& __value,
    const allocator_type& __a = allocator_type())
      : _Base(_Node_alloc_type(__a))
      { _M_fill_initialize(__n, __value); }
# 595 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      list(const list& __x)
      : _Base(__x._M_get_Node_allocator())
      { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }
# 607 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      list(list&& __x) noexcept
      : _Base(std::move(__x)) { }
# 618 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      list(initializer_list<value_type> __l,
           const allocator_type& __a = allocator_type())
      : _Base(_Node_alloc_type(__a))
      { _M_initialize_dispatch(__l.begin(), __l.end(), __false_type()); }
# 635 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        list(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
 : _Base(_Node_alloc_type(__a))
        { _M_initialize_dispatch(__first, __last, __false_type()); }
# 668 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      list&
      operator=(const list& __x);
# 679 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      list&
      operator=(list&& __x)
      {


 this->clear();
 this->swap(__x);
 return *this;
      }
# 696 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      list&
      operator=(initializer_list<value_type> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }
# 714 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 731 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        void
        assign(_InputIterator __first, _InputIterator __last)
        { _M_assign_dispatch(__first, __last, __false_type()); }
# 755 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      assign(initializer_list<value_type> __l)
      { this->assign(__l.begin(), __l.end()); }



      allocator_type
      get_allocator() const noexcept
      { return _Base::get_allocator(); }






      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_node._M_next); }






      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_node._M_next); }






      iterator
      end() noexcept
      { return iterator(&this->_M_impl._M_node); }






      const_iterator
      end() const noexcept
      { return const_iterator(&this->_M_impl._M_node); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_node._M_next); }






      const_iterator
      cend() const noexcept
      { return const_iterator(&this->_M_impl._M_node); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }







      bool
      empty() const noexcept
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }


      size_type
      size() const noexcept
      { return std::distance(begin(), end()); }


      size_type
      max_size() const noexcept
      { return _M_get_Node_allocator().max_size(); }
# 904 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      resize(size_type __new_size);
# 917 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      resize(size_type __new_size, const value_type& __x);
# 939 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      reference
      front() noexcept
      { return *begin(); }





      const_reference
      front() const noexcept
      { return *begin(); }





      reference
      back() noexcept
      {
 iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }





      const_reference
      back() const noexcept
      {
 const_iterator __tmp = end();
 --__tmp;
 return *__tmp;
      }
# 986 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      push_front(const value_type& __x)
      { this->_M_insert(begin(), __x); }


      void
      push_front(value_type&& __x)
      { this->_M_insert(begin(), std::move(__x)); }

      template<typename... _Args>
        void
        emplace_front(_Args&&... __args)
        { this->_M_insert(begin(), std::forward<_Args>(__args)...); }
# 1013 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      pop_front() noexcept
      { this->_M_erase(begin()); }
# 1027 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      push_back(const value_type& __x)
      { this->_M_insert(end(), __x); }


      void
      push_back(value_type&& __x)
      { this->_M_insert(end(), std::move(__x)); }

      template<typename... _Args>
        void
        emplace_back(_Args&&... __args)
        { this->_M_insert(end(), std::forward<_Args>(__args)...); }
# 1053 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      pop_back() noexcept
      { this->_M_erase(iterator(this->_M_impl._M_node._M_prev)); }
# 1070 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      template<typename... _Args>
        iterator
        emplace(const_iterator __position, _Args&&... __args);
# 1085 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1115 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 1134 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      iterator
      insert(const_iterator __p, initializer_list<value_type> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }
# 1154 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x);
# 1193 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last);
# 1237 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      iterator

      erase(const_iterator __position) noexcept;
# 1262 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last) noexcept



      {
 while (__first != __last)
   __first = erase(__first);
 return __last._M_const_cast();
      }
# 1283 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      swap(list& __x)
      {
 __detail::_List_node_base::swap(this->_M_impl._M_node,
     __x._M_impl._M_node);



 std::__alloc_swap<typename _Base::_Node_alloc_type>::
   _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator());
      }







      void
      clear() noexcept
      {
        _Base::_M_clear();
        _Base::_M_init();
      }
# 1320 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void

      splice(const_iterator __position, list&& __x) noexcept



      {
 if (!__x.empty())
   {
     _M_check_equal_allocators(__x);

     this->_M_transfer(__position._M_const_cast(),
         __x.begin(), __x.end());
   }
      }


      void
      splice(const_iterator __position, list& __x) noexcept
      { splice(__position, std::move(__x)); }
# 1353 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      splice(const_iterator __position, list&& __x, const_iterator __i) noexcept
# 1368 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      {
 iterator __j = __i._M_const_cast();
 ++__j;
 if (__position == __i || __position == __j)
   return;

 if (this != &__x)
   _M_check_equal_allocators(__x);

 this->_M_transfer(__position._M_const_cast(),
     __i._M_const_cast(), __j);
      }
# 1392 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      splice(const_iterator __position, list& __x, const_iterator __i) noexcept
      { splice(__position, std::move(__x), __i); }
# 1411 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      splice(const_iterator __position, list&& __x, const_iterator __first,
      const_iterator __last) noexcept
# 1431 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      {
 if (__first != __last)
   {
     if (this != &__x)
       _M_check_equal_allocators(__x);

     this->_M_transfer(__position._M_const_cast(),
         __first._M_const_cast(),
         __last._M_const_cast());
   }
      }
# 1457 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      splice(const_iterator __position, list& __x, const_iterator __first,
      const_iterator __last) noexcept
      { splice(__position, std::move(__x), __first, __last); }
# 1474 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      remove(const _Tp& __value);
# 1488 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      template<typename _Predicate>
        void
        remove_if(_Predicate);
# 1502 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      unique();
# 1517 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      template<typename _BinaryPredicate>
        void
        unique(_BinaryPredicate);
# 1531 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      merge(list&& __x);

      void
      merge(list& __x)
      { merge(std::move(__x)); }
# 1556 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      template<typename _StrictWeakOrdering>
        void
        merge(list&& __x, _StrictWeakOrdering __comp);

      template<typename _StrictWeakOrdering>
        void
        merge(list& __x, _StrictWeakOrdering __comp)
        { merge(std::move(__x), __comp); }
# 1575 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      void
      reverse() noexcept
      { this->_M_impl._M_node._M_reverse(); }







      void
      sort();







      template<typename _StrictWeakOrdering>
        void
        sort(_StrictWeakOrdering);

    protected:






      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
        { _M_fill_initialize(static_cast<size_type>(__n), __x); }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   for (; __first != __last; ++__first)

     emplace_back(*__first);



 }



      void
      _M_fill_initialize(size_type __n, const value_type& __x)
      {
 for (; __n; --__n)
   push_back(__x);
      }



      void
      _M_default_initialize(size_type __n)
      {
 for (; __n; --__n)
   emplace_back();
      }


      void
      _M_default_append(size_type __n);
# 1653 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type);



      void
      _M_fill_assign(size_type __n, const value_type& __val);



      void
      _M_transfer(iterator __position, iterator __first, iterator __last)
      { __position._M_node->_M_transfer(__first._M_node, __last._M_node); }
# 1684 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
  _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
  __tmp->_M_hook(__position._M_node);
       }



      void
      _M_erase(iterator __position) noexcept
      {
        __position._M_node->_M_unhook();
        _Node* __n = static_cast<_Node*>(__position._M_node);

        _M_get_Node_allocator().destroy(__n);



        _M_put_node(__n);
      }


      void
      _M_check_equal_allocators(list& __x) noexcept
      {
 if (std::__alloc_neq<typename _Base::_Node_alloc_type>::
     _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator()))
   __builtin_abort();
      }
    };
# 1727 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    {
      typedef typename list<_Tp, _Alloc>::const_iterator const_iterator;
      const_iterator __end1 = __x.end();
      const_iterator __end2 = __y.end();

      const_iterator __i1 = __x.begin();
      const_iterator __i2 = __y.begin();
      while (__i1 != __end1 && __i2 != __end2 && *__i1 == *__i2)
 {
   ++__i1;
   ++__i2;
 }
      return __i1 == __end1 && __i2 == __end2;
    }
# 1756 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_list.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(list<_Tp, _Alloc>& __x, list<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 64 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/list" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/list.tcc" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/list.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() noexcept
    {
      typedef _List_node<_Tp> _Node;
      _Node* __cur = static_cast<_Node*>(_M_impl._M_node._M_next);
      while (__cur != &_M_impl._M_node)
 {
   _Node* __tmp = __cur;
   __cur = static_cast<_Node*>(__cur->_M_next);

   _M_get_Node_allocator().destroy(__tmp);



   _M_put_node(__tmp);
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename list<_Tp, _Alloc>::iterator
      list<_Tp, _Alloc>::
      emplace(const_iterator __position, _Args&&... __args)
      {
 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
 __tmp->_M_hook(__position._M_const_cast()._M_node);
 return iterator(__tmp);
      }


  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      _Node* __tmp = _M_create_node(__x);
      __tmp->_M_hook(__position._M_const_cast()._M_node);
      return iterator(__tmp);
    }


  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::
    insert(const_iterator __position, size_type __n, const value_type& __x)
    {
      if (__n)
 {
   list __tmp(__n, __x, get_allocator());
   iterator __it = __tmp.begin();
   splice(__position, __tmp);
   return __it;
 }
      return __position._M_const_cast();
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator, typename>
      typename list<_Tp, _Alloc>::iterator
      list<_Tp, _Alloc>::
      insert(const_iterator __position, _InputIterator __first,
      _InputIterator __last)
      {
 list __tmp(__first, __last, get_allocator());
 if (!__tmp.empty())
   {
     iterator __it = __tmp.begin();
     splice(__position, __tmp);
     return __it;
   }
 return __position._M_const_cast();
      }


  template<typename _Tp, typename _Alloc>
    typename list<_Tp, _Alloc>::iterator
    list<_Tp, _Alloc>::

    erase(const_iterator __position) noexcept



    {
      iterator __ret = iterator(__position._M_node->_M_next);
      _M_erase(__position._M_const_cast());
      return __ret;
    }


  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      size_type __i = 0;
      try
 {
   for (; __i < __n; ++__i)
     emplace_back();
 }
      catch(...)
 {
   for (; __i; --__i)
     pop_back();
   throw;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    resize(size_type __new_size)
    {
      iterator __i = begin();
      size_type __len = 0;
      for (; __i != end() && __len < __new_size; ++__i, ++__len)
        ;
      if (__len == __new_size)
        erase(__i, end());
      else
 _M_default_append(__new_size - __len);
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    resize(size_type __new_size, const value_type& __x)
    {
      iterator __i = begin();
      size_type __len = 0;
      for (; __i != end() && __len < __new_size; ++__i, ++__len)
        ;
      if (__len == __new_size)
        erase(__i, end());
      else
        insert(end(), __new_size - __len, __x);
    }
# 224 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/list.tcc" 3
  template<typename _Tp, typename _Alloc>
    list<_Tp, _Alloc>&
    list<_Tp, _Alloc>::
    operator=(const list& __x)
    {
      if (this != &__x)
 {
   iterator __first1 = begin();
   iterator __last1 = end();
   const_iterator __first2 = __x.begin();
   const_iterator __last2 = __x.end();
   for (; __first1 != __last1 && __first2 != __last2;
        ++__first1, ++__first2)
     *__first1 = *__first2;
   if (__first2 == __last2)
     erase(__first1, __last1);
   else
     insert(__last1, __first2, __last2);
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    _M_fill_assign(size_type __n, const value_type& __val)
    {
      iterator __i = begin();
      for (; __i != end() && __n > 0; ++__i, --__n)
        *__i = __val;
      if (__n > 0)
        insert(end(), __n, __val);
      else
        erase(__i, end());
    }

  template<typename _Tp, typename _Alloc>
    template <typename _InputIterator>
      void
      list<_Tp, _Alloc>::
      _M_assign_dispatch(_InputIterator __first2, _InputIterator __last2,
    __false_type)
      {
        iterator __first1 = begin();
        iterator __last1 = end();
        for (; __first1 != __last1 && __first2 != __last2;
      ++__first1, ++__first2)
          *__first1 = *__first2;
        if (__first2 == __last2)
          erase(__first1, __last1);
        else
          insert(__last1, __first2, __last2);
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    remove(const value_type& __value)
    {
      iterator __first = begin();
      iterator __last = end();
      iterator __extra = __last;
      while (__first != __last)
 {
   iterator __next = __first;
   ++__next;
   if (*__first == __value)
     {



       if (std::__addressof(*__first) != std::__addressof(__value))
  _M_erase(__first);
       else
  __extra = __first;
     }
   __first = __next;
 }
      if (__extra != __last)
 _M_erase(__extra);
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    unique()
    {
      iterator __first = begin();
      iterator __last = end();
      if (__first == __last)
 return;
      iterator __next = __first;
      while (++__next != __last)
 {
   if (*__first == *__next)
     _M_erase(__next);
   else
     __first = __next;
   __next = __first;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::

    merge(list&& __x)



    {


      if (this != &__x)
 {
   _M_check_equal_allocators(__x);

   iterator __first1 = begin();
   iterator __last1 = end();
   iterator __first2 = __x.begin();
   iterator __last2 = __x.end();
   while (__first1 != __last1 && __first2 != __last2)
     if (*__first2 < *__first1)
       {
  iterator __next = __first2;
  _M_transfer(__first1, __first2, ++__next);
  __first2 = __next;
       }
     else
       ++__first1;
   if (__first2 != __last2)
     _M_transfer(__last1, __first2, __last2);
 }
    }

  template<typename _Tp, typename _Alloc>
    template <typename _StrictWeakOrdering>
      void
      list<_Tp, _Alloc>::

      merge(list&& __x, _StrictWeakOrdering __comp)



      {


 if (this != &__x)
   {
     _M_check_equal_allocators(__x);

     iterator __first1 = begin();
     iterator __last1 = end();
     iterator __first2 = __x.begin();
     iterator __last2 = __x.end();
     while (__first1 != __last1 && __first2 != __last2)
       if (__comp(*__first2, *__first1))
  {
    iterator __next = __first2;
    _M_transfer(__first1, __first2, ++__next);
    __first2 = __next;
  }
       else
  ++__first1;
     if (__first2 != __last2)
       _M_transfer(__last1, __first2, __last2);
   }
      }

  template<typename _Tp, typename _Alloc>
    void
    list<_Tp, _Alloc>::
    sort()
    {

      if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node
   && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)
      {
        list __carry;
        list __tmp[64];
        list * __fill = &__tmp[0];
        list * __counter;

        do
   {
     __carry.splice(__carry.begin(), *this, begin());

     for(__counter = &__tmp[0];
  __counter != __fill && !__counter->empty();
  ++__counter)
       {
  __counter->merge(__carry);
  __carry.swap(*__counter);
       }
     __carry.swap(*__counter);
     if (__counter == __fill)
       ++__fill;
   }
 while ( !empty() );

        for (__counter = &__tmp[1]; __counter != __fill; ++__counter)
          __counter->merge(*(__counter - 1));
        swap( *(__fill - 1) );
      }
    }

  template<typename _Tp, typename _Alloc>
    template <typename _Predicate>
      void
      list<_Tp, _Alloc>::
      remove_if(_Predicate __pred)
      {
        iterator __first = begin();
        iterator __last = end();
        while (__first != __last)
   {
     iterator __next = __first;
     ++__next;
     if (__pred(*__first))
       _M_erase(__first);
     __first = __next;
   }
      }

  template<typename _Tp, typename _Alloc>
    template <typename _BinaryPredicate>
      void
      list<_Tp, _Alloc>::
      unique(_BinaryPredicate __binary_pred)
      {
        iterator __first = begin();
        iterator __last = end();
        if (__first == __last)
   return;
        iterator __next = __first;
        while (++__next != __last)
   {
     if (__binary_pred(*__first, *__next))
       _M_erase(__next);
     else
       __first = __next;
     __next = __first;
   }
      }

  template<typename _Tp, typename _Alloc>
    template <typename _StrictWeakOrdering>
      void
      list<_Tp, _Alloc>::
      sort(_StrictWeakOrdering __comp)
      {

 if (this->_M_impl._M_node._M_next != &this->_M_impl._M_node
     && this->_M_impl._M_node._M_next->_M_next != &this->_M_impl._M_node)
   {
     list __carry;
     list __tmp[64];
     list * __fill = &__tmp[0];
     list * __counter;

     do
       {
  __carry.splice(__carry.begin(), *this, begin());

  for(__counter = &__tmp[0];
      __counter != __fill && !__counter->empty();
      ++__counter)
    {
      __counter->merge(__carry, __comp);
      __carry.swap(*__counter);
    }
  __carry.swap(*__counter);
  if (__counter == __fill)
    ++__fill;
       }
     while ( !empty() );

     for (__counter = &__tmp[1]; __counter != __fill; ++__counter)
       __counter->merge(*(__counter - 1), __comp);
     swap(*(__fill - 1));
   }
      }


}
# 65 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/list" 2 3
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/basic_mempool.hpp" 2
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/map" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/map" 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tree.h" 1 3
# 65 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tree.h" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/alloc_traits.h" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/alloc_traits.h" 3



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 1 3
# 39 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc, typename _Tp>
    class __alloctr_rebind_helper
    {
      template<typename _Alloc2, typename _Tp2>
 static constexpr true_type
 _S_chk(typename _Alloc2::template rebind<_Tp2>::other*);

      template<typename, typename>
 static constexpr false_type
 _S_chk(...);

    public:
      using __type = decltype(_S_chk<_Alloc, _Tp>(nullptr));
    };

  template<typename _Alloc, typename _Tp,
    bool = __alloctr_rebind_helper<_Alloc, _Tp>::__type::value>
    struct __alloctr_rebind;

  template<typename _Alloc, typename _Tp>
    struct __alloctr_rebind<_Alloc, _Tp, true>
    {
      typedef typename _Alloc::template rebind<_Tp>::other __type;
    };

  template<template<typename, typename...> class _Alloc, typename _Tp,
    typename _Up, typename... _Args>
    struct __alloctr_rebind<_Alloc<_Up, _Args...>, _Tp, false>
    {
      typedef _Alloc<_Tp, _Args...> __type;
    };





  template<typename _Alloc>
    struct allocator_traits
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;
# 95 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
private: template<typename _Tp> static typename _Tp::pointer _S_pointer_helper(_Tp*); static value_type* _S_pointer_helper(...); typedef decltype(_S_pointer_helper((_Alloc*)0)) __pointer; public:






      typedef __pointer pointer;

private: template<typename _Tp> static typename _Tp::const_pointer _S_const_pointer_helper(_Tp*); static typename pointer_traits<pointer>::template rebind<const value_type> _S_const_pointer_helper(...); typedef decltype(_S_const_pointer_helper((_Alloc*)0)) __const_pointer; public:
# 113 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      typedef __const_pointer const_pointer;

private: template<typename _Tp> static typename _Tp::void_pointer _S_void_pointer_helper(_Tp*); static typename pointer_traits<pointer>::template rebind<void> _S_void_pointer_helper(...); typedef decltype(_S_void_pointer_helper((_Alloc*)0)) __void_pointer; public:
# 124 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      typedef __void_pointer void_pointer;

private: template<typename _Tp> static typename _Tp::const_void_pointer _S_const_void_pointer_helper(_Tp*); static typename pointer_traits<pointer>::template rebind<const void> _S_const_void_pointer_helper(...); typedef decltype(_S_const_void_pointer_helper((_Alloc*)0)) __const_void_pointer; public:
# 135 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      typedef __const_void_pointer const_void_pointer;

private: template<typename _Tp> static typename _Tp::difference_type _S_difference_type_helper(_Tp*); static typename pointer_traits<pointer>::difference_type _S_difference_type_helper(...); typedef decltype(_S_difference_type_helper((_Alloc*)0)) __difference_type; public:
# 146 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      typedef __difference_type difference_type;

private: template<typename _Tp> static typename _Tp::size_type _S_size_type_helper(_Tp*); static typename make_unsigned<difference_type>::type _S_size_type_helper(...); typedef decltype(_S_size_type_helper((_Alloc*)0)) __size_type; public:
# 157 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      typedef __size_type size_type;

private: template<typename _Tp> static typename _Tp::propagate_on_container_copy_assignment _S_propagate_on_container_copy_assignment_helper(_Tp*); static false_type _S_propagate_on_container_copy_assignment_helper(...); typedef decltype(_S_propagate_on_container_copy_assignment_helper((_Alloc*)0)) __propagate_on_container_copy_assignment; public:
# 168 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      typedef __propagate_on_container_copy_assignment
 propagate_on_container_copy_assignment;

private: template<typename _Tp> static typename _Tp::propagate_on_container_move_assignment _S_propagate_on_container_move_assignment_helper(_Tp*); static false_type _S_propagate_on_container_move_assignment_helper(...); typedef decltype(_S_propagate_on_container_move_assignment_helper((_Alloc*)0)) __propagate_on_container_move_assignment; public:
# 180 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      typedef __propagate_on_container_move_assignment
 propagate_on_container_move_assignment;

private: template<typename _Tp> static typename _Tp::propagate_on_container_swap _S_propagate_on_container_swap_helper(_Tp*); static false_type _S_propagate_on_container_swap_helper(...); typedef decltype(_S_propagate_on_container_swap_helper((_Alloc*)0)) __propagate_on_container_swap; public:
# 192 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      typedef __propagate_on_container_swap propagate_on_container_swap;



      template<typename _Tp>
 using rebind_alloc = typename __alloctr_rebind<_Alloc, _Tp>::__type;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 struct __allocate_helper
 {
   template<typename _Alloc3,
     typename = decltype(std::declval<_Alloc3*>()->allocate(
    std::declval<size_type>(),
    std::declval<const_void_pointer>()))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Alloc2>
 using __has_allocate = typename __allocate_helper<_Alloc2>::type;

      template<typename _Alloc2,
        typename = _Require<__has_allocate<_Alloc2>>>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint)
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2, typename _UnusedHint,
        typename = _Require<__not_<__has_allocate<_Alloc2>>>>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, _UnusedHint)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 { ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }

      template<typename _Tp>
 struct __destroy_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->destroy(
    std::declval<_Tp*>()))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp>
 using __has_destroy = typename __destroy_helper<_Tp>::type;

      template<typename _Tp>
 static _Require<__has_destroy<_Tp>>
 _S_destroy(_Alloc& __a, _Tp* __p)
 { __a.destroy(__p); }

      template<typename _Tp>
 static _Require<__not_<__has_destroy<_Tp>>>
 _S_destroy(_Alloc&, _Tp* __p)
 { __p->~_Tp(); }

      template<typename _Alloc2>
 struct __maxsize_helper
 {
   template<typename _Alloc3,
     typename = decltype(std::declval<_Alloc3*>()->max_size())>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc2>(0));
 };

      template<typename _Alloc2>
 using __has_max_size = typename __maxsize_helper<_Alloc2>::type;

      template<typename _Alloc2,
        typename = _Require<__has_max_size<_Alloc2>>>
 static size_type
 _S_max_size(_Alloc2& __a, int)
 { return __a.max_size(); }

      template<typename _Alloc2,
        typename = _Require<__not_<__has_max_size<_Alloc2>>>>
 static size_type
 _S_max_size(_Alloc2&, ...)
 { return __gnu_cxx::__numeric_traits<size_type>::__max; }

      template<typename _Alloc2>
 struct __select_helper
 {
   template<typename _Alloc3, typename
     = decltype(std::declval<_Alloc3*>()
  ->select_on_container_copy_construction())>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc2>(0));
 };

      template<typename _Alloc2>
 using __has_soccc = typename __select_helper<_Alloc2>::type;

      template<typename _Alloc2,
        typename = _Require<__has_soccc<_Alloc2>>>
 static _Alloc2
 _S_select(_Alloc2& __a, int)
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2,
        typename = _Require<__not_<__has_soccc<_Alloc2>>>>
 static _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:
# 355 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 370 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint); }
# 382 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      static void deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 396 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>
 static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
# 409 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      template <class _Tp>
 static void destroy(_Alloc& __a, _Tp* __p)
 { _S_destroy(__a, __p); }
# 421 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      static size_type max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }
# 432 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
    }

  template<typename _Alloc>
    inline _Alloc __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;
      __do_alloc_on_swap(__one, __two, __pocs());
    }

  template<typename _Alloc>
    class __is_copy_insertable_impl
    {
      typedef allocator_traits<_Alloc> _Traits;

      template<typename _Up, typename
        = decltype(_Traits::construct(std::declval<_Alloc&>(),
          std::declval<_Up*>(),
          std::declval<const _Up&>()))>
 static true_type
 _M_select(int);

      template<typename _Up>
 static false_type
 _M_select(...);

    public:
      typedef decltype(_M_select<typename _Alloc::value_type>(0)) type;
    };


  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_copy_insertable_impl<_Alloc>::type
    { };


  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };


}
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/alloc_traits.h" 2 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<typename _Alloc>
    struct __allocator_always_compares_equal : std::false_type { };

  template<typename _Tp>
    struct __allocator_always_compares_equal<std::allocator<_Tp>>
    : std::true_type { };

  template<typename, typename> struct array_allocator;

  template<typename _Tp, typename _Array>
    struct __allocator_always_compares_equal<array_allocator<_Tp, _Array>>
    : std::true_type { };

  template<typename> struct bitmap_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<bitmap_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct malloc_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<malloc_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct mt_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<mt_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct new_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<new_allocator<_Tp>>
    : std::true_type { };

  template<typename> struct pool_allocator;

  template<typename _Tp>
    struct __allocator_always_compares_equal<pool_allocator<_Tp>>
    : std::true_type { };






template<typename _Alloc>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      {
 _Base_type::construct(__a, std::addressof(*__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::addressof(*__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return __allocator_always_compares_equal<_Alloc>::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    static constexpr bool _S_nothrow_swap()
    {
      using std::swap;
      return !_S_propagate_on_swap()
        || noexcept(swap(std::declval<_Alloc&>(), std::declval<_Alloc&>()));
    }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 210 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/alloc_traits.h" 3
  };


}
# 66 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tree.h" 2 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/aligned_buffer.h" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/aligned_buffer.h" 3







namespace __gnu_cxx
{
  template<typename _Tp>
    struct __aligned_buffer
    : std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>
    {
      typename
 std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>::type
 _M_storage;

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
      }

      const void*
      _M_addr() const noexcept
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };

}
# 68 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tree.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{
# 90 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tree.h" 3
  enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;
    typedef const _Rb_tree_node_base* _Const_Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x) noexcept
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Const_Base_ptr
    _S_minimum(_Const_Base_ptr __x) noexcept
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x) noexcept
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }

    static _Const_Base_ptr
    _S_maximum(_Const_Base_ptr __x) noexcept
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;
# 147 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tree.h" 3
      __gnu_cxx::__aligned_buffer<_Val> _M_storage;

      _Val*
      _M_valptr()
      { return _M_storage._M_ptr(); }

      const _Val*
      _M_valptr() const
      { return _M_storage._M_ptr(); }

    };

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Link_type __x) noexcept
      : _M_node(__x) { }

      reference
      operator*() const noexcept
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Link_type> (_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
  };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_const_iterator() noexcept
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Link_type __x) noexcept
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it) noexcept
      : _M_node(__it._M_node) { }

      iterator
      _M_const_cast() const noexcept
      { return iterator(static_cast<typename iterator::_Link_type>
   (const_cast<typename iterator::_Base_ptr>(_M_node))); }

      reference
      operator*() const noexcept
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }

      pointer
      operator->() const noexcept
      { return static_cast<_Link_type>(_M_node)->_M_valptr(); }

      _Self&
      operator++() noexcept
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--() noexcept
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int) noexcept
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const noexcept
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const noexcept
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y) noexcept
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y) noexcept
    { return __x._M_node != __y._M_node; }

  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
                                _Rb_tree_node_base* __x,
                                _Rb_tree_node_base* __p,
                                _Rb_tree_node_base& __header) throw ();

  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header) throw ();


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Rb_tree_node<_Val> >::other _Node_allocator;

      typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;

    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef const _Rb_tree_node_base* _Const_Base_ptr;

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef _Rb_tree_node<_Val>* _Link_type;
      typedef const _Rb_tree_node<_Val>* _Const_Link_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator() noexcept
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }

      const _Node_allocator&
      _M_get_Node_allocator() const noexcept
      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }

      void
      _M_put_node(_Link_type __p) noexcept
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
# 413 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tree.h" 3
      template<typename... _Args>
        _Link_type
        _M_create_node(_Args&&... __args)
 {
   _Link_type __tmp = _M_get_node();
   try
     {
       ::new(__tmp) _Rb_tree_node<_Val>;
       _Alloc_traits::construct(_M_get_Node_allocator(),
           __tmp->_M_valptr(),
           std::forward<_Args>(__args)...);
     }
   catch(...)
     {
       _M_put_node(__tmp);
       throw;
     }
   return __tmp;
 }

      void
      _M_destroy_node(_Link_type __p) noexcept
      {
 _Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 __p->~_Rb_tree_node<_Val>();
 _M_put_node(__p);
      }


      _Link_type
      _M_clone_node(_Const_Link_type __x)
      {
 _Link_type __tmp = _M_create_node(*__x->_M_valptr());
 __tmp->_M_color = __x->_M_color;
 __tmp->_M_left = 0;
 __tmp->_M_right = 0;
 return __tmp;
      }

    protected:
      template<typename _Key_compare,
        bool _Is_pod_comparator = __is_pod(_Key_compare)>
        struct _Rb_tree_impl : public _Node_allocator
        {
   _Key_compare _M_key_compare;
   _Rb_tree_node_base _M_header;
   size_type _M_node_count;

   _Rb_tree_impl()
   : _Node_allocator(), _M_key_compare(), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

   _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
   : _Node_allocator(__a), _M_key_compare(__comp), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }


   _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
   : _Node_allocator(std::move(__a)), _M_key_compare(__comp),
     _M_header(), _M_node_count(0)
   { _M_initialize(); }


 private:
   void
   _M_initialize()
   {
     this->_M_header._M_color = _S_red;
     this->_M_header._M_parent = 0;
     this->_M_header._M_left = &this->_M_header;
     this->_M_header._M_right = &this->_M_header;
   }
 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root() noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Const_Base_ptr
      _M_root() const noexcept
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost() noexcept
      { return this->_M_impl._M_header._M_left; }

      _Const_Base_ptr
      _M_leftmost() const noexcept
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost() noexcept
      { return this->_M_impl._M_header._M_right; }

      _Const_Base_ptr
      _M_rightmost() const noexcept
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin() noexcept
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }

      _Const_Link_type
      _M_begin() const noexcept
      {
 return static_cast<_Const_Link_type>
   (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end() noexcept
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }

      _Const_Link_type
      _M_end() const noexcept
      { return reinterpret_cast<_Const_Link_type>(&this->_M_impl._M_header); }

      static const_reference
      _S_value(_Const_Link_type __x)
      { return *__x->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x) noexcept
      { return static_cast<_Link_type>(__x->_M_left); }

      static _Const_Link_type
      _S_left(_Const_Base_ptr __x) noexcept
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x) noexcept
      { return static_cast<_Link_type>(__x->_M_right); }

      static _Const_Link_type
      _S_right(_Const_Base_ptr __x) noexcept
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Base_ptr
      _S_minimum(_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Const_Base_ptr
      _S_minimum(_Const_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Base_ptr
      _S_maximum(_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_maximum(__x); }

      static _Const_Base_ptr
      _S_maximum(_Const_Base_ptr __x) noexcept
      { return _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type> iterator;
      typedef _Rb_tree_const_iterator<value_type> const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    private:
      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_unique_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_equal_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_unique_pos(const_iterator __pos,
        const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_equal_pos(const_iterator __pos,
       const key_type& __k);


      template<typename _Arg>
        iterator
        _M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v);

      iterator
      _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z);

      template<typename _Arg>
        iterator
        _M_insert_lower(_Base_ptr __y, _Arg&& __v);

      template<typename _Arg>
        iterator
        _M_insert_equal_lower(_Arg&& __x);

      iterator
      _M_insert_lower_node(_Base_ptr __p, _Link_type __z);

      iterator
      _M_insert_equal_lower_node(_Link_type __z);
# 640 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tree.h" 3
      _Link_type
      _M_copy(_Const_Link_type __x, _Link_type __p);

      void
      _M_erase(_Link_type __x);

      iterator
      _M_lower_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

      iterator
      _M_upper_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

    public:

      _Rb_tree() { }

      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl._M_key_compare,
         _Alloc_traits::_S_select_on_copy(__x._M_get_Node_allocator()))
      {
 if (__x._M_root() != 0)
   {
     _M_root() = _M_copy(__x._M_begin(), _M_end());
     _M_leftmost() = _S_minimum(_M_root());
     _M_rightmost() = _S_maximum(_M_root());
     _M_impl._M_node_count = __x._M_impl._M_node_count;
   }
      }


      _Rb_tree(const allocator_type& __a)
      : _M_impl(_Compare(), _Node_allocator(__a))
      { }

      _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)
      : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))
      {
 if (__x._M_root() != 0)
   {
     _M_root() = _M_copy(__x._M_begin(), _M_end());
     _M_leftmost() = _S_minimum(_M_root());
     _M_rightmost() = _S_maximum(_M_root());
     _M_impl._M_node_count = __x._M_impl._M_node_count;
   }
      }

      _Rb_tree(_Rb_tree&& __x)
      : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())
      {
 if (__x._M_root() != 0)
   _M_move_data(__x, std::true_type());
      }

      _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)
      : _Rb_tree(std::move(__x), _Node_allocator(__a))
      { }

      _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a);


      ~_Rb_tree() noexcept
      { _M_erase(_M_begin()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin() noexcept
      {
 return iterator(static_cast<_Link_type>
   (this->_M_impl._M_header._M_left));
      }

      const_iterator
      begin() const noexcept
      {
 return const_iterator(static_cast<_Const_Link_type>
         (this->_M_impl._M_header._M_left));
      }

      iterator
      end() noexcept
      { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }

      const_iterator
      end() const noexcept
      {
 return const_iterator(static_cast<_Const_Link_type>
         (&this->_M_impl._M_header));
      }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      bool
      empty() const noexcept
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const noexcept
      { return _M_impl._M_node_count; }

      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Node_allocator()); }

      void

      swap(_Rb_tree& __t) noexcept(_Alloc_traits::_S_nothrow_swap());






      template<typename _Arg>
        pair<iterator, bool>
        _M_insert_unique(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal(_Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_unique_(const_iterator __position, _Arg&& __x);

      template<typename _Arg>
        iterator
        _M_insert_equal_(const_iterator __position, _Arg&& __x);

      template<typename... _Args>
 pair<iterator, bool>
 _M_emplace_unique(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_equal(_Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);
# 832 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tree.h" 3
      template<typename _InputIterator>
        void
        _M_insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
        void
        _M_insert_equal(_InputIterator __first, _InputIterator __last);

    private:
      void
      _M_erase_aux(const_iterator __position);

      void
      _M_erase_aux(const_iterator __first, const_iterator __last);

    public:



      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      {
 const_iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result._M_const_cast();
      }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      {
 iterator __result = __position;
 ++__result;
 _M_erase_aux(__position);
 return __result;
      }
# 880 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tree.h" 3
      size_type
      erase(const key_type& __x);




      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      {
 _M_erase_aux(__first, __last);
 return __last._M_const_cast();
      }
# 902 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tree.h" 3
      void
      erase(const key_type* __first, const key_type* __last);

      void
      clear() noexcept
      {
        _M_erase(_M_begin());
        _M_leftmost() = _M_end();
        _M_root() = 0;
        _M_rightmost() = _M_end();
        _M_impl._M_node_count = 0;
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      lower_bound(const key_type& __k) const
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      iterator
      upper_bound(const key_type& __k)
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      upper_bound(const key_type& __k) const
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;


      bool
      __rb_verify() const;


      bool
      _M_move_assign(_Rb_tree&);

    private:

      void
      _M_move_data(_Rb_tree&, std::true_type);



      void
      _M_move_data(_Rb_tree&, std::false_type);

    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)
    : _M_impl(__x._M_impl._M_key_compare, std::move(__a))
    {
      using __eq = integral_constant<bool, _Alloc_traits::_S_always_equal()>;
      if (__x._M_root() != 0)
 _M_move_data(__x, __eq());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_data(_Rb_tree& __x, std::true_type)
    {
      _M_root() = __x._M_root();
      _M_leftmost() = __x._M_leftmost();
      _M_rightmost() = __x._M_rightmost();
      _M_root()->_M_parent = _M_end();

      __x._M_root() = 0;
      __x._M_leftmost() = __x._M_end();
      __x._M_rightmost() = __x._M_end();

      this->_M_impl._M_node_count = __x._M_impl._M_node_count;
      __x._M_impl._M_node_count = 0;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_data(_Rb_tree& __x, std::false_type)
    {
      if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
   _M_move_data(__x, std::true_type());
      else
 {
   _M_root() = _M_copy(__x._M_begin(), _M_end());
   _M_leftmost() = _S_minimum(_M_root());
   _M_rightmost() = _S_maximum(_M_root());
   _M_impl._M_node_count = __x._M_impl._M_node_count;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_move_assign(_Rb_tree& __x)
    {
      _M_impl._M_key_compare = __x._M_impl._M_key_compare;
      if (_Alloc_traits::_S_propagate_on_move_assign()
   || _Alloc_traits::_S_always_equal()
   || _M_get_Node_allocator() == __x._M_get_Node_allocator())
 {
   clear();
   if (__x._M_root() != 0)
     _M_move_data(__x, std::true_type());
   std::__alloc_on_move(_M_get_Node_allocator(),
          __x._M_get_Node_allocator());
   return true;
 }
      return false;
    }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree& __x)
    {
      if (this != &__x)
 {

   clear();

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       auto& __this_alloc = this->_M_get_Node_allocator();
       auto& __that_alloc = __x._M_get_Node_allocator();
       if (!_Alloc_traits::_S_always_equal()
    && __this_alloc != __that_alloc)
  {
    std::__alloc_on_copy(__this_alloc, __that_alloc);
  }
     }

   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root() != 0)
     {
       _M_root() = _M_copy(__x._M_begin(), _M_end());
       _M_leftmost() = _S_minimum(_M_root());
       _M_rightmost() = _S_maximum(_M_root());
       _M_impl._M_node_count = __x._M_impl._M_node_count;
     }
 }
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_(_Base_ptr __x, _Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_KeyOfValue()(__v),
            _S_key(__p)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_lower(_Base_ptr __p, _Arg&& __v)



    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Link_type __z = _M_create_node(std::forward<_Arg>(__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_lower(_Arg&& __v)



    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__y, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
    _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
    _M_copy(_Const_Link_type __x, _Link_type __p)
    {

      _Link_type __top = _M_clone_node(__x);
      __top->_M_parent = __p;

      try
 {
   if (__x->_M_right)
     __top->_M_right = _M_copy(_S_right(__x), __top);
   __p = __top;
   __x = _S_left(__x);

   while (__x != 0)
     {
       _Link_type __y = _M_clone_node(__x);
       __p->_M_left = __y;
       __y->_M_parent = __p;
       if (__x->_M_right)
  __y->_M_right = _M_copy(_S_right(__x), __y);
       __p = __y;
       __x = _S_left(__x);
     }
 }
      catch(...)
 {
   _M_erase(__top);
   throw;
 }
      return __top;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {

      while (__x != 0)
 {
   _M_erase(_S_right(__x));
   _Link_type __y = _S_left(__x);
   _M_destroy_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<iterator,
            iterator>(_M_lower_bound(__x, __y, __k),
        _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<iterator, iterator>(iterator(__y),
          iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      _Const_Link_type __x = _M_begin();
      _Const_Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Const_Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<const_iterator,
            const_iterator>(_M_lower_bound(__x, __y, __k),
       _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<const_iterator, const_iterator>(const_iterator(__y),
        const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)

    noexcept(_Alloc_traits::_S_nothrow_swap())

    {
      if (_M_root() == 0)
 {
   if (__t._M_root() != 0)
     {
       _M_root() = __t._M_root();
       _M_leftmost() = __t._M_leftmost();
       _M_rightmost() = __t._M_rightmost();
       _M_root()->_M_parent = _M_end();

       __t._M_root() = 0;
       __t._M_leftmost() = __t._M_end();
       __t._M_rightmost() = __t._M_end();
     }
 }
      else if (__t._M_root() == 0)
 {
   __t._M_root() = _M_root();
   __t._M_leftmost() = _M_leftmost();
   __t._M_rightmost() = _M_rightmost();
   __t._M_root()->_M_parent = __t._M_end();

   _M_root() = 0;
   _M_leftmost() = _M_end();
   _M_rightmost() = _M_end();
 }
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
 }

      std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);

      _Alloc_traits::_S_on_swap(_M_get_Node_allocator(),
    __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return _Res(__x, __y);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_equal_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _Res(__x, __y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique(_Arg&& __v)



    {
      typedef pair<iterator, bool> _Res;
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_unique_pos(_KeyOfValue()(__v));

      if (__res.second)
 return _Res(_M_insert_(__res.first, __res.second,
          std::forward<_Arg>(__v)),
      true);

      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal(_Arg&& __v)



    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_equal_pos(_KeyOfValue()(__v));
      return _M_insert_(__res.first, __res.second, std::forward<_Arg>(__v));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_unique_pos(const_iterator __position,
      const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else

 return _Res(__pos._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_unique_(const_iterator __position, _Arg&& __v)



    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));

      if (__res.second)
 return _M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v));
      return iterator(static_cast<_Link_type>(__res.first));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_equal_pos(__k);
 }
      else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_equal_pos(__k);
 }
      else
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _Res(0, 0);
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>

    template<typename _Arg>

    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::

    _M_insert_equal_(const_iterator __position, _Arg&& __v)



    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));

      if (__res.second)
 return _M_insert_(__res.first, __res.second,
     std::forward<_Arg>(__v));

      return _M_insert_equal_lower(std::forward<_Arg>(__v));
    }


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_S_key(__z),
            _S_key(__p)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_lower_node(_Base_ptr __p, _Link_type __z)
    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _S_key(__z)));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_equal_lower_node(_Link_type __z)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower_node(__y, __z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator, bool>
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_unique(_Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     typedef pair<iterator, bool> _Res;
     auto __res = _M_get_insert_unique_pos(_S_key(__z));
     if (__res.second)
       return _Res(_M_insert_node(__res.first, __res.second, __z), true);

     _M_destroy_node(__z);
     return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
   }
 catch(...)
   {
     _M_destroy_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_equal(_Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_equal_pos(_S_key(__z));
     return _M_insert_node(__res.first, __res.second, __z);
   }
 catch(...)
   {
     _M_destroy_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));

     if (__res.second)
       return _M_insert_node(__res.first, __res.second, __z);

     _M_destroy_node(__z);
     return iterator(static_cast<_Link_type>(__res.first));
   }
 catch(...)
   {
     _M_destroy_node(__z);
     throw;
   }
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
      _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)
      {
 _Link_type __z = _M_create_node(std::forward<_Args>(__args)...);

 try
   {
     auto __res = _M_get_insert_hint_equal_pos(__pos, _S_key(__z));

     if (__res.second)
       return _M_insert_node(__res.first, __res.second, __z);

     return _M_insert_equal_lower_node(__z);
   }
 catch(...)
   {
     _M_destroy_node(__z);
     throw;
   }
      }


  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_unique(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_equal(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (const_cast<_Base_ptr>(__position._M_node),
     this->_M_impl._M_header));
      _M_destroy_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   erase(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      erase(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
 erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  __attribute__ ((__pure__)) unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
                       const _Rb_tree_node_base* __root) throw ();

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
   _Const_Link_type __L = _S_left(__x);
   _Const_Link_type __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }


}
# 61 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/map" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 1 3
# 66 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 94 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      map()
      : _M_t() { }






      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 182 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      map(const map& __x)
      : _M_t(__x._M_t) { }
# 193 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      map(map&& __x)
      noexcept(is_nothrow_copy_constructible<_Compare>::value)
      : _M_t(std::move(__x._M_t)) { }
# 208 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      map(initializer_list<value_type> __l,
   const _Compare& __comp = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      explicit
      map(const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }


      map(const map& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      map(map&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      map(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last,
     const allocator_type& __a)
 : _M_t(_Compare(), _Pair_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 252 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_unique(__first, __last); }
# 269 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 292 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      map&
      operator=(const map& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 308 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      map&
      operator=(map&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_t._M_move_assign(__x._M_t))
   {


     clear();
     insert(std::__make_move_if_noexcept_iterator(__x.begin()),
     std::__make_move_if_noexcept_iterator(__x.end()));
     __x.clear();
   }
 return *this;
      }
# 334 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      map&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }






      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 490 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))

   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
         std::tuple<const key_type&>(__k),
         std::tuple<>());



 return (*__i).second;
      }


      mapped_type&
      operator[](key_type&& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
   __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
     std::forward_as_tuple(std::move(__k)),
     std::tuple<>());
 return (*__i).second;
      }
# 535 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 573 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
# 603 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_unique(__pos,
          std::forward<_Args>(__args)...);
 }
# 628 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
        std::pair<iterator, bool>
        insert(_Pair&& __x)
        { return _M_t._M_insert_unique(std::forward<_Pair>(__x)); }
# 649 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      void
      insert(std::initializer_list<value_type> __list)
      { insert(__list.begin(), __list.end()); }
# 677 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_unique_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_unique_(__position,
     std::forward<_Pair>(__x)); }
# 703 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_unique(__first, __last); }
# 724 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 760 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 780 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 812 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      void
      swap(map& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 858 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 873 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 885 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
# 900 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 915 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 954 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 973 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);
    };
# 998 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 1015 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 62 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/map" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 1 3
# 64 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 92 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
  template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<value_type>::other _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      multimap()
      : _M_t() { }






      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 180 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      multimap(const multimap& __x)
      : _M_t(__x._M_t) { }
# 191 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      multimap(multimap&& __x)
      noexcept(is_nothrow_copy_constructible<_Compare>::value)
      : _M_t(std::move(__x._M_t)) { }
# 205 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      multimap(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      explicit
      multimap(const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a)) { }


      multimap(const multimap& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }


      multimap(multimap&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }


      multimap(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Pair_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last,
   const allocator_type& __a)
 : _M_t(_Compare(), _Pair_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 248 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_equal(__first, __last); }
# 264 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 287 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      multimap&
      operator=(const multimap& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 303 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      multimap&
      operator=(multimap&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_t._M_move_assign(__x._M_t))
   {


     clear();
     insert(std::__make_move_if_noexcept_iterator(__x.begin()),
     std::__make_move_if_noexcept_iterator(__x.end()));
     __x.clear();
   }
 return *this;
      }
# 329 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      multimap&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin() noexcept
      { return _M_t.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() noexcept
      { return _M_t.end(); }






      const_iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() noexcept
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      const_iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      const_iterator
      cend() const noexcept
      { return _M_t.end(); }






      const_reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      const_reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }




      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 488 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_equal(std::forward<_Args>(__args)...); }
# 515 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_equal(__pos,
         std::forward<_Args>(__args)...);
 }
# 536 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
        iterator
        insert(_Pair&& __x)
        { return _M_t._M_insert_equal(std::forward<_Pair>(__x)); }
# 569 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      iterator

      insert(const_iterator __position, const value_type& __x)



      { return _M_t._M_insert_equal_(__position, __x); }


      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
        iterator
        insert(const_iterator __position, _Pair&& __x)
        { return _M_t._M_insert_equal_(__position,
           std::forward<_Pair>(__x)); }
# 596 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_equal(__first, __last); }
# 609 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 630 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }


      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(iterator __position)
      { return _M_t.erase(__position); }
# 666 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 687 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 722 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      void
      swap(multimap& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      { _M_t.swap(__x._M_t); }







      void
      clear() noexcept
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 768 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 783 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }






      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }
# 807 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 822 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 859 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 876 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);
  };
# 901 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 918 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
         multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 63 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/map" 2 3
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/basic_mempool.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/align.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/align.hpp"
namespace RAJA
{





inline __attribute__((always_inline))
void* align(size_t alignment, size_t size, void*& ptr, size_t& space)
{




  void* r = nullptr;
  if (size <= space) {
    char* p1 = static_cast<char*>(ptr);
    char* p2 = reinterpret_cast<char*>(
        reinterpret_cast<size_t>(p1 + (static_cast<ptrdiff_t>(alignment) - 1)) & -alignment);
    size_t d = static_cast<size_t>(p2 - p1);
    if (d <= space - size) {
      r = p2;
      ptr = r;
      space -= d;
    }
  }
  return r;





}

}
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/basic_mempool.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/mutex.hpp" 1
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/mutex.hpp"
namespace RAJA
{
# 65 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/mutex.hpp"
template <typename mutex_type>
class lock_guard
{
public:
  explicit lock_guard(mutex_type& m) : m_mutex(m) { m_mutex.lock(); }

  lock_guard(const lock_guard&) = delete;
  lock_guard(lock_guard&&) = delete;
  lock_guard& operator=(const lock_guard&) = delete;
  lock_guard& operator=(lock_guard&&) = delete;

  ~lock_guard() { m_mutex.unlock(); }

private:
  mutex_type& m_mutex;
};

}
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/basic_mempool.hpp" 2

namespace RAJA
{

namespace basic_mempool
{

namespace detail
{
# 54 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/basic_mempool.hpp"
class MemoryArena
{
public:
  using free_type = std::map<void*, void*>;
  using free_value_type = typename free_type::value_type;
  using used_type = std::map<void*, void*>;
  using used_value_type = typename used_type::value_type;

  MemoryArena(void* ptr, size_t size)
    : m_allocation{ ptr, static_cast<char*>(ptr)+size },
      m_free_space(),
      m_used_space()
  {
     m_free_space[ptr] = static_cast<char*>(ptr)+size ;
    if (m_allocation.begin == nullptr) {
      fprintf(stderr, "Attempt to create MemoryArena with no memory");
      std::abort();
    }
  }

  MemoryArena(MemoryArena const&) = delete;
  MemoryArena& operator=(MemoryArena const&) = delete;

  MemoryArena(MemoryArena&&) = default;
  MemoryArena& operator=(MemoryArena&&) = default;

  size_t capacity()
  {
    return static_cast<char*>(m_allocation.end) -
           static_cast<char*>(m_allocation.begin);
  }

  bool unused() { return m_used_space.empty(); }

  void* get_allocation() { return m_allocation.begin; }

  void* get(size_t nbytes, size_t alignment)
  {
    void* ptr_out = nullptr;
    if (capacity() >= nbytes) {
      free_type::iterator end = m_free_space.end();
      for (free_type::iterator iter = m_free_space.begin(); iter != end;
           ++iter) {

        void* adj_ptr = iter->first;
        size_t cap =
            static_cast<char*>(iter->second) - static_cast<char*>(adj_ptr);

        if (::RAJA::align(alignment, nbytes, adj_ptr, cap)) {

          ptr_out = adj_ptr;

          remove_free_chunk(iter,
                            adj_ptr,
                            static_cast<char*>(adj_ptr) + nbytes);

          add_used_chunk(adj_ptr, static_cast<char*>(adj_ptr) + nbytes);

          break;
        }
      }
    }
    return ptr_out;
  }

  bool give(void* ptr)
  {
    if (m_allocation.begin <= ptr && ptr < m_allocation.end) {

      used_type::iterator found = m_used_space.find(ptr);

      if (found != m_used_space.end()) {

        add_free_chunk(found->first, found->second);

        m_used_space.erase(found);

      } else {
        fprintf(stderr, "Invalid free %p", ptr);
        std::abort();
      }

      return true;
    } else {
      return false;
    }
  }

private:
  struct memory_chunk {
    void* begin;
    void* end;
  };

  void add_free_chunk(void* begin, void* end)
  {

    free_type::iterator invl = m_free_space.end();
    free_type::iterator next = m_free_space.lower_bound(begin);


    if (next != m_free_space.begin()) {

      free_type::iterator prev = next;
      --prev;
      if (prev->second == begin) {

        prev->second = end;


        if (next != invl) {
          ((next->first != begin) ? static_cast<void> (0) : __assert_fail ("next->first != begin", "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/basic_mempool.hpp", 165, __PRETTY_FUNCTION__));

          if (next->first == end) {

            prev->second = next->second;


            m_free_space.erase(next);
          }
        }
        return;
      }
    }

    if (next != invl) {
      ((next->first != begin) ? static_cast<void> (0) : __assert_fail ("next->first != begin", "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/basic_mempool.hpp", 180, __PRETTY_FUNCTION__));

      if (next->first == end) {

        m_free_space.insert(next, free_value_type{begin, next->second});
        m_free_space.erase(next);

        return;
      }
    }



    m_free_space.insert(next, free_value_type{begin, end});
  }

  void remove_free_chunk(free_type::iterator iter, void* begin, void* end)
  {

    void* ptr = iter->first;
    void* ptr_end = iter->second;


    if (ptr != begin) {


      iter->second = begin;

      if (end != ptr_end) {


        free_type::iterator next = iter;
        ++next;
        m_free_space.insert(next, free_value_type{end, ptr_end});
      }

    } else if (end != ptr_end) {


      free_type::iterator next = iter;
      ++next;
      m_free_space.insert(next, free_value_type{end, ptr_end});
      m_free_space.erase(iter);

    } else {


      m_free_space.erase(iter);
    }
  }

  void add_used_chunk(void* begin, void* end)
  {

    m_used_space.insert(used_value_type{begin, end});
  }

  memory_chunk m_allocation;
  free_type m_free_space;
  used_type m_used_space;
};

}
# 285 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/basic_mempool.hpp"
template <typename allocator_t>
class MemPool
{
public:
  using allocator_type = allocator_t;

  static inline MemPool<allocator_t>& getInstance()
  {
    static MemPool<allocator_t> pool{};
    return pool;
  }

  static const size_t default_default_arena_size = 32ull * 1024ull * 1024ull;

  MemPool()
      : m_arenas(), m_default_arena_size(default_default_arena_size), m_alloc()
  {
  }

  ~MemPool()
  {



  }


  void free_chunks()
  {




    while (!m_arenas.empty()) {
      void* allocation_ptr = m_arenas.front().get_allocation();
      m_alloc.free(allocation_ptr);
      m_arenas.pop_front();
    }
  }

  size_t arena_size()
  {




    return m_default_arena_size;
  }

  size_t arena_size(size_t new_size)
  {




    size_t prev_size = m_default_arena_size;
    m_default_arena_size = new_size;
    return prev_size;
  }

  template <typename T>
  T* malloc(size_t nTs, size_t alignment = alignof(T))
  {




    const size_t size = nTs * sizeof(T);
    void* ptr = nullptr;
    arena_container_type::iterator end = m_arenas.end();
    for (arena_container_type::iterator iter = m_arenas.begin(); iter != end;
         ++iter) {
      ptr = iter->get(size, alignment);
      if (ptr != nullptr) {
        break;
      }
    }

    if (ptr == nullptr) {
      const size_t alloc_size =
          std::max(size + alignment, m_default_arena_size);
      void* arena_ptr = m_alloc.malloc(alloc_size);
      if (arena_ptr != nullptr) {
        m_arenas.emplace_front(arena_ptr, alloc_size);
        ptr = m_arenas.front().get(size, alignment);
      }
    }

    return static_cast<T*>(ptr);
  }

  void free(const void* cptr)
  {




    void* ptr = const_cast<void*>(cptr);
    arena_container_type::iterator end = m_arenas.end();
    for (arena_container_type::iterator iter = m_arenas.begin(); iter != end;
         ++iter) {
      if (iter->give(ptr)) {
        ptr = nullptr;
        break;
      }
    }
    if (ptr != nullptr) {
      fprintf(stderr, "Unknown pointer %p", ptr);
    }
  }

private:
  using arena_container_type = std::list<detail::MemoryArena>;





  arena_container_type m_arenas;
  size_t m_default_arena_size;
  allocator_t m_alloc;
};


struct generic_allocator {


  void* malloc(size_t nbytes) { return std::malloc(nbytes); }


  bool free(void* ptr)
  {
    std::free(ptr);
    return true;
  }
};

}

}
# 33 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/camp_aliases.hpp" 1
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/camp_aliases.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/tuple.hpp" 1
# 20 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/tuple.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/iostream" 1 3
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/iostream" 3





namespace std __attribute__ ((__visibility__ ("default")))
{
# 60 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 21 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/tuple.hpp" 2



# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/map.hpp" 1
# 18 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/map.hpp"
namespace camp
{


namespace detail
{
  template <typename Key, typename Val>
  Val lookup(list<Key, Val>*);

  template <typename>
  nil lookup(...);

  template <typename Seq, typename = nil>
  struct lookup_table;

  template <typename... Keys, typename... Values>
  struct lookup_table<list<list<Keys, Values>...>> : list<Keys, Values>... {
  };
}

template <typename Seq, typename Key>
struct at_key_s {
  using type =
      decltype(detail::lookup<Key>(declptr<detail::lookup_table<Seq>>()));
};
# 51 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/map.hpp"
template <typename Map, typename Key>
using at_key = typename at_key_s<Map, Key>::type;


}
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/tuple.hpp" 2

namespace camp
{

template <typename... Rest>
struct tuple;

template <typename TagList, typename... Elements>
class tagged_tuple;

template <template <typename... Ts> class Tup>
using is_tuple = typename std::is_base_of<tuple<>, Tup<>>::type;

template <typename Tuple>
struct tuple_size;

template <camp::idx_t i, typename T>
struct tuple_element {
  using type = camp::at_v<typename T::TList, i>;
};

template <camp::idx_t i, typename T>
using tuple_element_t = typename tuple_element<i, T>::type;

template <typename T, typename Tuple>
using tuple_ebt_t =
    typename tuple_element<camp::at_key<typename Tuple::TMap, T>::value,
                           Tuple>::type;


namespace internal
{

  template <class T>
  struct unwrap_refwrapper {
    using type = T;
  };

  template <class T>
  struct unwrap_refwrapper<std::reference_wrapper<T>> {
    using type = T&;
  };

  template <class T>
  using special_decay_t =
      typename unwrap_refwrapper<typename std::decay<T>::type>::type;
}

template <camp::idx_t index, class Tuple>
__attribute__((host)) __attribute__((device)) constexpr auto get(const Tuple& t) noexcept
    -> tuple_element_t<index, Tuple> const&;
template <camp::idx_t index, class Tuple>
__attribute__((host)) __attribute__((device)) constexpr auto get(Tuple& t) noexcept
    -> tuple_element_t<index, Tuple>&;

template <typename T, class Tuple>
__attribute__((host)) __attribute__((device)) constexpr auto get(const Tuple& t) noexcept
    -> tuple_ebt_t<T, Tuple> const&;
template <typename T, class Tuple>
__attribute__((host)) __attribute__((device)) constexpr auto get(Tuple& t) noexcept
    -> tuple_ebt_t<T, Tuple>&;

namespace internal
{
  template <camp::idx_t index,
            typename Type,
            bool Empty = std::is_empty<Type>::value>
  struct tuple_storage {
    __attribute__((host)) __attribute__((device)) constexpr tuple_storage() : val(){};

#pragma nv_exec_check_disable
 template <typename T>
    __attribute__((host)) __attribute__((device)) constexpr tuple_storage(T&& v)



        : val(std::forward<T>(v))
    {
    }

    __attribute__((host)) __attribute__((device)) constexpr const Type& get_inner() const noexcept
    {
      return val;
    }

    __attribute__((host)) __attribute__((device)) constexpr Type& get_inner() noexcept { return val; }

  public:
    Type val;
  };
  template <camp::idx_t index, typename Type>
  struct tuple_storage<index, Type, true> : private Type {
    __attribute__((host)) __attribute__((device)) constexpr tuple_storage() : Type(){};

    static_assert(std::is_empty<Type>::value,
                  "this specialization should only ever be used for empty "
                  "types");

#pragma nv_exec_check_disable
 template <typename T>
    __attribute__((host)) __attribute__((device)) constexpr tuple_storage(T&& v) : Type(std::forward<T>(v))
    {
    }

    __attribute__((host)) __attribute__((device)) constexpr const Type& get_inner() const noexcept
    {
      return ((Type const*)this)[0];
    }

    __attribute__((host)) __attribute__((device)) constexpr Type& get_inner() noexcept
    {
      return ((Type*)this)[0];
    }
  };

  template <typename Indices, typename Typelist>
  struct tuple_helper;

  class expand_tag
  {
  };

  template <typename... Types, camp::idx_t... Indices>
  struct
      tuple_helper<camp::idx_seq<Indices...>, camp::list<Types...>>
      : public internal::tuple_storage<Indices, Types>... {

    tuple_helper& operator=(const tuple_helper& rhs) = default;
    constexpr tuple_helper() = default;
    constexpr tuple_helper(tuple_helper const&) = default;
    constexpr tuple_helper(tuple_helper&&) = default;

    template <typename... Args>
    __attribute__((host)) __attribute__((device)) constexpr tuple_helper(Args&&... args)
        : tuple_storage<Indices, Types>(std::forward<Args>(args))...
    {
    }

    template <typename T>
    __attribute__((host)) __attribute__((device)) constexpr explicit tuple_helper(expand_tag, T&& rhs)
        : tuple_helper(get<Indices>(rhs)...)
    {
    }

    template <typename T>
    __attribute__((host)) __attribute__((device)) constexpr explicit tuple_helper(expand_tag, const T& rhs)
        : tuple_helper(get<Indices>(rhs)...)
    {
    }

    template <typename RTuple>
    __attribute__((host)) __attribute__((device)) tuple_helper& operator=(const RTuple& rhs)
    {
      return (camp::sink((this->tuple_storage<Indices, Types>::get_inner() =
                              ::camp::get<Indices>(rhs))...),
              *this);
    }
  };

  template <typename Types, typename Indices>
  struct tag_map;
  template <typename... Types, camp::idx_t... Indices>
  struct tag_map<camp::list<Types...>, camp::idx_seq<Indices...>> {
    using type = camp::list<camp::list<Types, camp::num<Indices>>...>;
  };

  template <typename T, camp::idx_t I>
  using tpl_get_store = internal::tuple_storage<I, tuple_element_t<I, T>>;

}


template <typename... Elements>
struct tuple {
private:
  using Self = tuple;
  using Base = internal::tuple_helper<camp::make_idx_seq_t<sizeof...(Elements)>,
                                      camp::list<Elements...>>;

  template <typename... Ts>
  struct is_pack_this_tuple : false_type {
  };
  template <typename That>
  struct is_pack_this_tuple<That> : std::is_same<tuple, decay<That>> {
  };

public:
  using TList = camp::list<Elements...>;
  using TMap = typename internal::tag_map<
      camp::list<Elements...>,
      camp::make_idx_seq_t<sizeof...(Elements)>>::type;
  using type = tuple;

private:
  Base base;

  template <camp::idx_t index, class Tuple>
  __attribute__((host)) __attribute__((device)) constexpr friend auto get(const Tuple& t) noexcept
      -> tuple_element_t<index, Tuple> const&;
  template <camp::idx_t index, class Tuple>
  __attribute__((host)) __attribute__((device)) constexpr friend auto get(Tuple& t) noexcept
      -> tuple_element_t<index, Tuple>&;

  template <typename T, class Tuple>
  __attribute__((host)) __attribute__((device)) constexpr friend auto get(const Tuple& t) noexcept
      -> tuple_ebt_t<T, Tuple> const&;
  template <typename T, class Tuple>
  __attribute__((host)) __attribute__((device)) constexpr friend auto get(Tuple& t) noexcept
      -> tuple_ebt_t<T, Tuple>&;

public:

  __attribute__((host)) __attribute__((device)) constexpr explicit tuple(const Elements&... rest)
      : base{rest...}
  {
  }

  template <typename... Args,
            typename std::enable_if<
                !is_pack_this_tuple<Args...>::value>::type* = nullptr>
  __attribute__((host)) __attribute__((device)) constexpr explicit tuple(Args&&... rest)
      : base{std::forward<Args>(rest)...}
  {
  }

  template <typename... RTypes>
  __attribute__((host)) __attribute__((device)) constexpr explicit tuple(const tuple<RTypes...>& rhs)
      : base(internal::expand_tag{}, rhs)
  {
  }

  template <typename... RTypes>
  __attribute__((host)) __attribute__((device)) constexpr explicit tuple(tuple<RTypes...>&& rhs)
      : base(internal::expand_tag{}, rhs)
  {
  }

  template <typename... RTypes>
  __attribute__((host)) __attribute__((device)) constexpr Self& operator=(const tuple<RTypes...>& rhs)
  {
    base.operator=(rhs);
    return *this;
  }
};




template <typename TagList, typename... Elements>
class tagged_tuple : public tuple<Elements...>
{
  using Self = tagged_tuple;
  using Base = tuple<Elements...>;

public:
  using TList = camp::list<Elements...>;
  using TMap = typename internal::
      tag_map<TagList, camp::make_idx_seq_t<sizeof...(Elements)>>::type;
  using type = tagged_tuple;
  using Base::Base;

  constexpr tagged_tuple() = default;

  constexpr tagged_tuple(tagged_tuple const& o) = default;
  constexpr tagged_tuple(tagged_tuple&& o) = default;

  tagged_tuple& operator=(tagged_tuple const& rhs) = default;
  tagged_tuple& operator=(tagged_tuple&& rhs) = default;

  __attribute__((host)) __attribute__((device)) constexpr explicit tagged_tuple(const Base& rhs) : Base{rhs}
  {
  }

  template <typename... RTypes>
  __attribute__((host)) __attribute__((device)) constexpr explicit tagged_tuple(
      const tagged_tuple<RTypes...>& rhs)
      : Base(rhs)
  {
  }

  template <typename... RTypes>
  __attribute__((host)) __attribute__((device)) constexpr explicit tagged_tuple(
      tagged_tuple<RTypes...>&& rhs)
      : Base(rhs)
  {
  }

  using Base::operator=;
  template <typename... RTypes>
  __attribute__((host)) __attribute__((device)) constexpr Self& operator=(
      const tagged_tuple<RTypes...>& rhs)
  {
    Base::operator=(rhs);
    return *this;
  }
};

template <>
class tuple<>
{
public:
  using TList = camp::list<>;
  using TMap = TList;
  using type = tuple;
};

template <typename... Tags, typename... Args>
struct as_list_s<tagged_tuple<camp::list<Tags...>, Args...>> {
  using type = list<Args...>;
};


template <camp::idx_t index, class Tuple>
__attribute__((host)) __attribute__((device)) constexpr auto get(const Tuple& t) noexcept
    -> tuple_element_t<index, Tuple> const&
{
  using internal::tpl_get_store;
  static_assert(tuple_size<Tuple>::value > index, "index out of range");
  return static_cast<tpl_get_store<Tuple, index> const&>(t.base).get_inner();
}

template <camp::idx_t index, class Tuple>
__attribute__((host)) __attribute__((device)) constexpr auto get(Tuple& t) noexcept
    -> tuple_element_t<index, Tuple>&
{
  using internal::tpl_get_store;
  static_assert(tuple_size<Tuple>::value > index, "index out of range");
  return static_cast<tpl_get_store<Tuple, index>&>(t.base).get_inner();
}


template <typename T, class Tuple>
__attribute__((host)) __attribute__((device)) constexpr auto get(const Tuple& t) noexcept
    -> tuple_ebt_t<T, Tuple> const&
{
  using internal::tpl_get_store;
  using index_type = camp::at_key<typename Tuple::TMap, T>;
  static_assert(!std::is_same<camp::nil, index_type>::value,
                "invalid type index");

  return static_cast<tpl_get_store<Tuple, index_type::value>&>(t.base)
      .get_inner();
}

template <typename T, class Tuple>
__attribute__((host)) __attribute__((device)) constexpr auto get(Tuple& t) noexcept -> tuple_ebt_t<T, Tuple>&
{
  using internal::tpl_get_store;
  using index_type = camp::at_key<typename Tuple::TMap, T>;
  static_assert(!std::is_same<camp::nil, index_type>::value,
                "invalid type index");

  return static_cast<tpl_get_store<Tuple, index_type::value>&>(t.base)
      .get_inner();
}

template <typename... Args>
struct tuple_size<tuple<Args...>> : ::camp::num<sizeof...(Args)> {
};

template <typename L, typename... Args>
struct tuple_size<tagged_tuple<L, Args...>> : ::camp::num<sizeof...(Args)> {
};

template <typename T>
struct tuple_size<const T> : num<tuple_size<T>::value> {
};
template <typename T>
struct tuple_size<volatile T> : num<tuple_size<T>::value> {
};
template <typename T>
struct tuple_size<const volatile T> : num<tuple_size<T>::value> {
};

template <typename... Args>
__attribute__((host)) __attribute__((device)) constexpr auto make_tuple(Args&&... args)
    -> tuple<internal::special_decay_t<Args>...>
{
  return tuple<internal::special_decay_t<Args>...>{std::forward<Args>(args)...};
}

template <typename TagList, typename... Args>
__attribute__((host)) __attribute__((device)) constexpr auto make_tagged_tuple(Args&&... args)
    -> tagged_tuple<TagList, internal::special_decay_t<Args>...>
{
  return tagged_tuple<TagList, internal::special_decay_t<Args>...>{
      std::forward<Args>(args)...};
}

template <typename... Args>
__attribute__((host)) __attribute__((device)) constexpr auto forward_as_tuple(Args&&... args) noexcept
    -> tuple<Args&&...>
{
  return tuple<Args&&...>(std::forward<Args>(args)...);
}

template <class... Types>
__attribute__((host)) __attribute__((device)) constexpr tuple<Types&...> tie(Types&... args) noexcept
{
  return tuple<Types&...>{args...};
}

template <typename... Lelem,
          typename... Relem,
          camp::idx_t... Lidx,
          camp::idx_t... Ridx>
__attribute__((host)) __attribute__((device)) constexpr auto tuple_cat_pair(tuple<Lelem...> const& l,
                                               camp::idx_seq<Lidx...>,
                                               tuple<Relem...> const& r,
                                               camp::idx_seq<Ridx...>) noexcept
    -> tuple<camp::at_v<camp::list<Lelem...>, Lidx>...,
             camp::at_v<camp::list<Relem...>, Ridx>...>
{
  return ::camp::tuple<camp::at_v<camp::list<Lelem...>, Lidx>...,
                       camp::at_v<camp::list<Relem...>, Ridx>...>(
      ::camp::get<Lidx>(l)..., ::camp::get<Ridx>(r)...);
}

template <typename L, typename R>
__attribute__((host)) __attribute__((device)) constexpr auto tuple_cat_pair(L const& l, R const& r) noexcept
    -> decltype(tuple_cat_pair(l,
                               camp::idx_seq_from_t<L>{},
                               r,
                               camp::idx_seq_from_t<R>{}))
{
  return tuple_cat_pair(l,
                        camp::idx_seq_from_t<L>{},
                        r,
                        camp::idx_seq_from_t<R>{});
}

#pragma nv_exec_check_disable
template <typename Fn, camp::idx_t... Sequence, typename TupleLike>
__attribute__((host)) __attribute__((device)) constexpr auto invoke_with_order(TupleLike&& t,
                                                  Fn&& f,
                                                  camp::idx_seq<Sequence...>)
    -> decltype(f(::camp::get<Sequence>(t)...))
{
  return f(::camp::get<Sequence>(t)...);
}

#pragma nv_exec_check_disable
template <typename Fn, typename TupleLike>
__attribute__((host)) __attribute__((device)) constexpr auto invoke(TupleLike&& t, Fn&& f)
    -> decltype(invoke_with_order(
        std::forward<TupleLike>(t),
        std::forward<Fn>(f),
        camp::make_idx_seq_t<tuple_size<camp::decay<TupleLike>>::value>{}))
{
  return invoke_with_order(
      std::forward<TupleLike>(t),
      std::forward<Fn>(f),
      camp::make_idx_seq_t<tuple_size<camp::decay<TupleLike>>::value>{});
}

namespace detail
{
  template <class T, class Tuple, idx_t... I>
  constexpr T make_from_tuple_impl(Tuple&& t, idx_seq<I...>)
  {
    return T(::camp::get<I>(std::forward<Tuple>(t))...);
  }
}



template <class T, class Tuple>
constexpr T make_from_tuple(Tuple&& t)
{
  return detail::make_from_tuple_impl<T>(
      std::forward<Tuple>(t),
      make_idx_seq_t<tuple_size<type::ref::rem<Tuple>>::value>{});
}
}

namespace internal
{
template <class Tuple, camp::idx_t... Idxs>
void print_tuple(std::ostream& os, Tuple const& t, camp::idx_seq<Idxs...>)
{
  camp::sink((void*)&(os << (Idxs == 0 ? "" : ", ") << camp::get<Idxs>(t))...);
}
}

template <class... Args>
auto operator<<(std::ostream& os, camp::tuple<Args...> const& t)
    -> std::ostream&
{
  os << "(";
  internal::print_tuple(os, t, camp::make_idx_seq_t<sizeof...(Args)>{});
  return os << ")";
}
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/camp_aliases.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstring" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstring" 3
# 71 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstring" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;


  inline void*
  memchr(void* __s, int __c, size_t __n)
  { return __builtin_memchr(__s, __c, __n); }

  inline char*
  strchr(char* __s, int __n)
  { return __builtin_strchr(__s, __n); }

  inline char*
  strpbrk(char* __s1, const char* __s2)
  { return __builtin_strpbrk(__s1, __s2); }

  inline char*
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }



}
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource.hpp" 2
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/memory" 1 3
# 47 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/memory" 3
# 64 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/memory" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_construct.h" 1 3
# 63 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
# 90 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_construct.h" 3
  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 65 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/memory" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_uninitialized.h" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, ++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 105 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;




      typedef typename iterator_traits<_InputIterator>::reference _RefType1;
      typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;


      return std::__uninitialized_copy<__is_trivial(_ValueType1)
           && __is_trivial(_ValueType2)
           && __assignable>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 171 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;


      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { std::fill_n(__first, __n, __x); }
    };
# 231 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;


      std::__uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __first != __last; ++__first, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 (std::__make_move_if_noexcept_iterator(__first),
  std::__make_move_if_noexcept_iterator(__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill_n(__first, __n, __x); }
# 367 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }





  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static void
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill_n(__first, __n, _ValueType());
 }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_1<__is_trivial(_ValueType)
         && __assignable>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline void
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_n_1<__is_trivial(_ValueType)
           && __assignable>::
 __uninit_default_n(__first, __n);
    }





  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { std::__uninitialized_default_n(__first, __n); }


  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __n > 0; --__n, ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur);
   throw;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }
# 672 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }



}
# 66 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/memory" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tempbuf.h" 1 3
# 62 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tempbuf.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 83 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len) noexcept
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 110 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {



    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer __first, _Pointer __last,
       _ForwardIterator __seed)
        {
   if(__first == __last)
     return;

   _Pointer __cur = __first;
   try
     {
       std::_Construct(std::__addressof(*__first),
         std::move(*__seed));
       _Pointer __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       *__seed = std::move(*__prev);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer, _Pointer, _ForwardIterator) { }
    };
# 229 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_tempbuf.h" 3
  template<typename _Pointer, typename _ForwardIterator>
    inline void
    __uninitialized_construct_buf(_Pointer __first, _Pointer __last,
      _ForwardIterator __seed)
    {
      typedef typename std::iterator_traits<_Pointer>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __seed);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      try
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if (_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            __first);
 }
      catch(...)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }


}
# 67 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/memory" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_raw_storage_iter.h" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_raw_storage_iter.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{






  template <class _OutputIterator, class _Tp>
    class raw_storage_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _OutputIterator _M_iter;

    public:
      explicit
      raw_storage_iterator(_OutputIterator __x)
      : _M_iter(__x) {}

      raw_storage_iterator&
      operator*() { return *this; }

      raw_storage_iterator&
      operator=(const _Tp& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), __element);
 return *this;
      }

      raw_storage_iterator<_OutputIterator, _Tp>&
      operator++()
      {
 ++_M_iter;
 return *this;
      }

      raw_storage_iterator<_OutputIterator, _Tp>
      operator++(int)
      {
 raw_storage_iterator<_OutputIterator, _Tp> __tmp = *this;
 ++_M_iter;
 return __tmp;
      }
    };


}
# 68 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/memory" 2 3






# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/concurrence.h" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/concurrence.h" 3







namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  enum _Lock_policy { _S_single, _S_mutex, _S_atomic };



  static const _Lock_policy __default_lock_policy =



  _S_atomic;
# 67 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/concurrence.h" 3
  class __concurrence_lock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_lock_error"; }
  };

  class __concurrence_unlock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_unlock_error"; }
  };

  class __concurrence_broadcast_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_broadcast_error"; }
  };

  class __concurrence_wait_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_wait_error"; }
  };


  inline void
  __throw_concurrence_lock_error()
  { (throw (__concurrence_lock_error())); }

  inline void
  __throw_concurrence_unlock_error()
  { (throw (__concurrence_unlock_error())); }


  inline void
  __throw_concurrence_broadcast_error()
  { (throw (__concurrence_broadcast_error())); }

  inline void
  __throw_concurrence_wait_error()
  { (throw (__concurrence_wait_error())); }


  class __mutex
  {
  private:

    __gthread_mutex_t _M_mutex = { { 0, 0, 0, 0, 0, 0, 0, { 0, 0 } } };




    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex()
    {




    }
# 147 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_mutex_t* gthread_mutex(void)
      { return &_M_mutex; }
  };

  class __recursive_mutex
  {
  private:

    __gthread_recursive_mutex_t _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0, { 0, 0 } } };




    __recursive_mutex(const __recursive_mutex&);
    __recursive_mutex& operator=(const __recursive_mutex&);

  public:
    __recursive_mutex()
    {




    }
# 202 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_recursive_mutex_t* gthread_recursive_mutex(void)
    { return &_M_mutex; }
  };




  class __scoped_lock
  {
  public:
    typedef __mutex __mutex_type;

  private:
    __mutex_type& _M_device;

    __scoped_lock(const __scoped_lock&);
    __scoped_lock& operator=(const __scoped_lock&);

  public:
    explicit __scoped_lock(__mutex_type& __name) : _M_device(__name)
    { _M_device.lock(); }

    ~__scoped_lock() throw()
    { _M_device.unlock(); }
  };


  class __cond
  {
  private:

    __gthread_cond_t _M_cond = { { 0, 0, 0, 0, 0, (void *) 0, 0, 0 } };




    __cond(const __cond&);
    __cond& operator=(const __cond&);

  public:
    __cond()
    {




    }
# 280 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ext/concurrence.h" 3
    void broadcast()
    {

      if (__gthread_active_p())
 {
   if (__gthread_cond_broadcast(&_M_cond) != 0)
     __throw_concurrence_broadcast_error();
 }

    }

    void wait(__mutex *mutex)
    {

      {
   if (__gthread_cond_wait(&_M_cond, mutex->gthread_mutex()) != 0)
     __throw_concurrence_wait_error();
      }

    }

    void wait_recursive(__recursive_mutex *mutex)
    {

      {
   if (__gthread_cond_wait_recursive(&_M_cond,
         mutex->gthread_recursive_mutex())
       != 0)
     __throw_concurrence_wait_error();
      }

    }
  };



}
# 75 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/memory" 2 3






# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unique_ptr.h" 1 3
# 39 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unique_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 49 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unique_ptr.h" 3
  template<typename> class auto_ptr;



  template<typename _Tp>
    struct default_delete
    {

      constexpr default_delete() noexcept = default;






      template<typename _Up, typename = typename
        enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }


      void
      operator()(_Tp* __ptr) const
      {
 static_assert(!is_void<_Tp>::value,
        "can't delete pointer to incomplete type");
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete __ptr;
      }
    };




  template<typename _Tp>
    struct default_delete<_Tp[]>
    {
    private:
      template<typename _Up>
 using __remove_cv = typename remove_cv<_Up>::type;


      template<typename _Up>
 using __is_derived_Tp
   = __and_< is_base_of<_Tp, _Up>,
      __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;

    public:

      constexpr default_delete() noexcept = default;
# 109 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unique_ptr.h" 3
      template<typename _Up, typename = typename
        enable_if<!__is_derived_Tp<_Up>::value>::type>
        default_delete(const default_delete<_Up[]>&) noexcept { }


      void
      operator()(_Tp* __ptr) const
      {
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete [] __ptr;
      }

      template<typename _Up>
 typename enable_if<__is_derived_Tp<_Up>::value>::type
 operator()(_Up*) const = delete;
    };


  template <typename _Tp, typename _Dp = default_delete<_Tp> >
    class unique_ptr
    {

      class _Pointer
      {
 template<typename _Up>
   static typename _Up::pointer __test(typename _Up::pointer*);

 template<typename _Up>
   static _Tp* __test(...);

 typedef typename remove_reference<_Dp>::type _Del;

      public:
 typedef decltype(__test<_Del>(0)) type;
      };

      typedef std::tuple<typename _Pointer::type, _Dp> __tuple_type;
      __tuple_type _M_t;

    public:
      typedef typename _Pointer::type pointer;
      typedef _Tp element_type;
      typedef _Dp deleter_type;




      constexpr unique_ptr() noexcept
      : _M_t()
      { static_assert(!is_pointer<deleter_type>::value,
       "constructed with null function pointer deleter"); }







      explicit
      unique_ptr(pointer __p) noexcept
      : _M_t(__p, deleter_type())
      { static_assert(!is_pointer<deleter_type>::value,
       "constructed with null function pointer deleter"); }
# 181 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unique_ptr.h" 3
      unique_ptr(pointer __p,
   typename conditional<is_reference<deleter_type>::value,
     deleter_type, const deleter_type&>::type __d) noexcept
      : _M_t(__p, __d) { }
# 193 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unique_ptr.h" 3
      unique_ptr(pointer __p,
   typename remove_reference<deleter_type>::type&& __d) noexcept
      : _M_t(std::move(__p), std::move(__d))
      { static_assert(!std::is_reference<deleter_type>::value,
        "rvalue deleter bound to reference"); }


      constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }




      unique_ptr(unique_ptr&& __u) noexcept
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }







      template<typename _Up, typename _Ep, typename = _Require<
        is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
        __not_<is_array<_Up>>,
        typename conditional<is_reference<_Dp>::value,
        is_same<_Ep, _Dp>,
        is_convertible<_Ep, _Dp>>::type>>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }



      template<typename _Up, typename = _Require<
        is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
 unique_ptr(auto_ptr<_Up>&& __u) noexcept;



      ~unique_ptr() noexcept
      {
 auto& __ptr = std::get<0>(_M_t);
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }
# 248 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unique_ptr.h" 3
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
      {
 reset(__u.release());
 get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 return *this;
      }
# 263 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
 typename enable_if< __and_<
   is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
   __not_<is_array<_Up>>
   >::value,
   unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename add_lvalue_reference<element_type>::type
      operator*() const
      {
                                          ;
 return *get();
      }


      pointer
      operator->() const noexcept
      {
                                          ;
 return get();
      }


      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }


      deleter_type&
      get_deleter() noexcept
      { return std::get<1>(_M_t); }


      const deleter_type&
      get_deleter() const noexcept
      { return std::get<1>(_M_t); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      {
 pointer __p = get();
 std::get<0>(_M_t) = pointer();
 return __p;
      }







      void
      reset(pointer __p = pointer()) noexcept
      {
 using std::swap;
 swap(std::get<0>(_M_t), __p);
 if (__p != pointer())
   get_deleter()(__p);
      }


      void
      swap(unique_ptr& __u) noexcept
      {
 using std::swap;
 swap(_M_t, __u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;
  };





  template<typename _Tp, typename _Dp>
    class unique_ptr<_Tp[], _Dp>
    {

      class _Pointer
      {
 template<typename _Up>
   static typename _Up::pointer __test(typename _Up::pointer*);

 template<typename _Up>
   static _Tp* __test(...);

 typedef typename remove_reference<_Dp>::type _Del;

      public:
 typedef decltype(__test<_Del>(0)) type;
      };

      typedef std::tuple<typename _Pointer::type, _Dp> __tuple_type;
      __tuple_type _M_t;

      template<typename _Up>
 using __remove_cv = typename remove_cv<_Up>::type;


      template<typename _Up>
 using __is_derived_Tp
   = __and_< is_base_of<_Tp, _Up>,
      __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;

      template<typename _Up, typename _Ep,
        typename _Tp_pointer = typename _Pointer::type,
        typename _Up_pointer = typename unique_ptr<_Up, _Ep>::pointer>
 using __safe_conversion = __and_<
     is_convertible<_Up_pointer, _Tp_pointer>,
     is_array<_Up>,
     __or_<__not_<is_pointer<_Up_pointer>>,
    __not_<is_pointer<_Tp_pointer>>,
    __not_<__is_derived_Tp<typename remove_extent<_Up>::type>>
     >
   >;

    public:
      typedef typename _Pointer::type pointer;
      typedef _Tp element_type;
      typedef _Dp deleter_type;




      constexpr unique_ptr() noexcept
      : _M_t()
      { static_assert(!std::is_pointer<deleter_type>::value,
        "constructed with null function pointer deleter"); }







      explicit
      unique_ptr(pointer __p) noexcept
      : _M_t(__p, deleter_type())
      { static_assert(!is_pointer<deleter_type>::value,
        "constructed with null function pointer deleter"); }


      template<typename _Up, typename = _Require<is_pointer<pointer>,
        is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>
 explicit
 unique_ptr(_Up* __p) = delete;
# 444 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unique_ptr.h" 3
      unique_ptr(pointer __p,
   typename conditional<is_reference<deleter_type>::value,
       deleter_type, const deleter_type&>::type __d) noexcept
      : _M_t(__p, __d) { }
# 456 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unique_ptr.h" 3
      unique_ptr(pointer __p, typename
   remove_reference<deleter_type>::type&& __d) noexcept
      : _M_t(std::move(__p), std::move(__d))
      { static_assert(!is_reference<deleter_type>::value,
        "rvalue deleter bound to reference"); }


      unique_ptr(unique_ptr&& __u) noexcept
      : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) { }


      constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }

      template<typename _Up, typename _Ep,
        typename = _Require<__safe_conversion<_Up, _Ep>,
   typename conditional<is_reference<_Dp>::value,
          is_same<_Ep, _Dp>,
          is_convertible<_Ep, _Dp>>::type
        >>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }


      ~unique_ptr()
      {
 auto& __ptr = std::get<0>(_M_t);
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }
# 496 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unique_ptr.h" 3
      unique_ptr&
      operator=(unique_ptr&& __u) noexcept
      {
 reset(__u.release());
 get_deleter() = std::forward<deleter_type>(__u.get_deleter());
 return *this;
      }
# 511 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
 typename
 enable_if<__safe_conversion<_Up, _Ep>::value, unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
      {
                                          ;
 return get()[__i];
      }


      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }


      deleter_type&
      get_deleter() noexcept
      { return std::get<1>(_M_t); }


      const deleter_type&
      get_deleter() const noexcept
      { return std::get<1>(_M_t); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      {
 pointer __p = get();
 std::get<0>(_M_t) = pointer();
 return __p;
      }







      void
      reset(pointer __p = pointer()) noexcept
      {
 using std::swap;
 swap(std::get<0>(_M_t), __p);
 if (__p != nullptr)
   get_deleter()(__p);
      }


      template<typename _Up, typename = _Require<is_pointer<pointer>,
        is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>
 void reset(_Up*) = delete;


      void
      swap(unique_ptr& __u) noexcept
      {
 using std::swap;
 swap(_M_t, __u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;


      template<typename _Up, typename = _Require<is_pointer<pointer>,
        is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>
 unique_ptr(_Up*, typename
     conditional<is_reference<deleter_type>::value,
     deleter_type, const deleter_type&>::type) = delete;


      template<typename _Up, typename = _Require<is_pointer<pointer>,
        is_convertible<_Up*, pointer>, __is_derived_Tp<_Up>>>
 unique_ptr(_Up*, typename
     remove_reference<deleter_type>::type&&) = delete;
    };

  template<typename _Tp, typename _Dp>
    inline void
    swap(unique_ptr<_Tp, _Dp>& __x,
  unique_ptr<_Tp, _Dp>& __y) noexcept
    { __x.swap(__y); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() == __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return !__x; }

  template<typename _Tp, typename _Dp>
    inline bool
    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return !__x; }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return (bool)__x; }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return (bool)__x; }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    {
      typedef typename
 std::common_type<typename unique_ptr<_Tp, _Dp>::pointer,
                  typename unique_ptr<_Up, _Ep>::pointer>::type _CT;
      return std::less<_CT>()(__x.get(), __y.get());
    }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get()); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__y < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(nullptr < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(__x < nullptr); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    { return (__y < __x); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get()); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr); }

  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__x < __y); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(__x < nullptr); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(nullptr < __x); }


  template<typename _Tp, typename _Dp>
    struct hash<unique_ptr<_Tp, _Dp>>
    : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>
    {
      size_t
      operator()(const unique_ptr<_Tp, _Dp>& __u) const noexcept
      {
 typedef unique_ptr<_Tp, _Dp> _UP;
 return std::hash<typename _UP::pointer>()(__u.get());
      }
    };





  template<typename _Tp>
    struct _MakeUniq
    { typedef unique_ptr<_Tp> __single_object; };

  template<typename _Tp>
    struct _MakeUniq<_Tp[]>
    { typedef unique_ptr<_Tp[]> __array; };

  template<typename _Tp, size_t _Bound>
    struct _MakeUniq<_Tp[_Bound]>
    { struct __invalid_type { }; };


  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }


  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
    { return unique_ptr<_Tp>(new typename remove_extent<_Tp>::type[__num]()); }


  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__invalid_type
    make_unique(_Args&&...) = delete;





}
# 82 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/memory" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 1 3
# 52 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr_base.h" 1 3
# 54 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename> class auto_ptr;






  class bad_weak_ptr : public std::exception
  {
  public:
    virtual char const*
    what() const noexcept;

    virtual ~bad_weak_ptr() noexcept;
  };


  inline void
  __throw_bad_weak_ptr()
  { (throw (bad_weak_ptr())); }

  using __gnu_cxx::_Lock_policy;
  using __gnu_cxx::__default_lock_policy;
  using __gnu_cxx::_S_single;
  using __gnu_cxx::_S_mutex;
  using __gnu_cxx::_S_atomic;


  template<_Lock_policy _Lp>
    class _Mutex_base
    {
    protected:

      enum { _S_need_barriers = 0 };
    };

  template<>
    class _Mutex_base<_S_mutex>
    : public __gnu_cxx::__mutex
    {
    protected:



      enum { _S_need_barriers = 1 };
    };

  template<_Lock_policy _Lp = __default_lock_policy>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }

      virtual
      ~_Sp_counted_base() noexcept
      { }



      virtual void
      _M_dispose() noexcept = 0;


      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept = 0;

      void
      _M_add_ref_copy()
      { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }

      void
      _M_add_ref_lock();

      bool
      _M_add_ref_lock_nothrow();

      void
      _M_release() noexcept
      {

                                                              ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   {
                                                                 ;
     _M_dispose();




     if (_Mutex_base<_Lp>::_S_need_barriers)
       {
         __asm __volatile ("lwsync":::"memory");
         __asm __volatile ("lwsync":::"memory");
       }


                                                                   ;
     if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
             -1) == 1)
              {
                                                                      ;
         _M_destroy();
              }
   }
      }

      void
      _M_weak_add_ref() noexcept
      { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }

      void
      _M_weak_release() noexcept
      {

                                                               ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)
   {
                                                                  ;
     if (_Mutex_base<_Lp>::_S_need_barriers)
       {


         __asm __volatile ("lwsync":::"memory");
         __asm __volatile ("lwsync":::"memory");
       }
     _M_destroy();
   }
      }

      long
      _M_get_use_count() const noexcept
      {


        return __atomic_load_n(&_M_use_count, 0);
      }

    private:
      _Sp_counted_base(_Sp_counted_base const&) = delete;
      _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;

      _Atomic_word _M_use_count;
      _Atomic_word _M_weak_count;
    };

  template<>
    inline void
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock()
    {
      if (_M_use_count == 0)
 __throw_bad_weak_ptr();
      ++_M_use_count;
    }

  template<>
    inline void
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock()
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   __throw_bad_weak_ptr();
 }
    }

  template<>
    inline void
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock()
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     __throw_bad_weak_ptr();


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
    }

  template<>
    inline bool
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock_nothrow()
    {
      if (_M_use_count == 0)
 return false;
      ++_M_use_count;
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock_nothrow()
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   return false;
 }
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock_nothrow()
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     return false;


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
      return true;
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
        }
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_add_ref() noexcept
    { ++_M_weak_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_release() noexcept
    {
      if (--_M_weak_count == 0)
        _M_destroy();
    }

  template<>
    inline long
    _Sp_counted_base<_S_single>::_M_get_use_count() const noexcept
    { return _M_use_count; }



  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __shared_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __weak_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __enable_shared_from_this;

  template<typename _Tp>
    class shared_ptr;

  template<typename _Tp>
    class weak_ptr;

  template<typename _Tp>
    struct owner_less;

  template<typename _Tp>
    class enable_shared_from_this;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __weak_count;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __shared_count;



  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }

      _Sp_counted_ptr(const _Sp_counted_ptr&) = delete;
      _Sp_counted_ptr& operator=(const _Sp_counted_ptr&) = delete;

    private:
      _Ptr _M_ptr;
    };

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }

  template<int _Nm, typename _Tp,
    bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Sp_ebo_helper;


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
    };


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, false>
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh)
      { return __eboh._M_tp; }

    private:
      _Tp _M_tp;
    };


  template<typename _Ptr, typename _Deleter, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_deleter final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Deleter> _Del_base;
 typedef _Sp_ebo_helper<1, _Alloc> _Alloc_base;

      public:
 _Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 : _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 { }

 _Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 _Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }

 _Ptr _M_ptr;
      };

    public:

      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }


      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }

      virtual void
      _M_destroy() noexcept
      {
 typedef typename allocator_traits<_Alloc>::template
   rebind_traits<_Sp_counted_deleter> _Alloc_traits;
 typename _Alloc_traits::allocator_type __a(_M_impl._M_alloc());
 _Alloc_traits::destroy(__a, this);
 _Alloc_traits::deallocate(__a, this, 1);
      }

      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
      {

        return __ti == typeid(_Deleter) ? &_M_impl._M_del() : nullptr;



      }

    private:
      _Impl _M_impl;
    };



  struct _Sp_make_shared_tag { };

  template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Alloc> _A_base;

      public:
 explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }

 _Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }

 __gnu_cxx::__aligned_buffer<_Tp> _M_storage;
      };

    public:
      template<typename... _Args>
 _Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 : _M_impl(__a)
 {


   allocator_traits<_Alloc>::construct(__a, _M_ptr(),
       std::forward<_Args>(__args)...);
 }

      ~_Sp_counted_ptr_inplace() noexcept { }

      virtual void
      _M_dispose() noexcept
      {
 allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
      }


      virtual void
      _M_destroy() noexcept
      {
 typedef typename allocator_traits<_Alloc>::template
   rebind_traits<_Sp_counted_ptr_inplace> _Alloc_traits;
 typename _Alloc_traits::allocator_type __a(_M_impl._M_alloc());
 _Alloc_traits::destroy(__a, this);
 _Alloc_traits::deallocate(__a, this, 1);
      }


      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
      {

 if (__ti == typeid(_Sp_make_shared_tag))
   return const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());

 return nullptr;
      }

    private:
      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }

      _Impl _M_impl;
    };


  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
 __shared_count(_Ptr __p) : _M_pi(0)
 {
   try
     {
       _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
     }
   catch(...)
     {
       delete __p;
       throw;
     }
 }

      template<typename _Ptr, typename _Deleter>
 __shared_count(_Ptr __p, _Deleter __d)
 : __shared_count(__p, std::move(__d), allocator<void>())
 { }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
 __shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 {
   typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;
   typedef typename allocator_traits<_Alloc>::template
     rebind_traits<_Sp_cd_type> _Alloc_traits;
   typename _Alloc_traits::allocator_type __a2(__a);
   _Sp_cd_type* __mem = 0;
   try
     {
       __mem = _Alloc_traits::allocate(__a2, 1);
       _Alloc_traits::construct(__a2, __mem,
    __p, std::move(__d), std::move(__a));
       _M_pi = __mem;
     }
   catch(...)
     {
       __d(__p);
       if (__mem)
         _Alloc_traits::deallocate(__a2, __mem, 1);
       throw;
     }
 }

      template<typename _Tp, typename _Alloc, typename... _Args>
 __shared_count(_Sp_make_shared_tag, _Tp*, const _Alloc& __a,
         _Args&&... __args)
 : _M_pi(0)
 {
   typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
   typedef typename allocator_traits<_Alloc>::template
     rebind_traits<_Sp_cp_type> _Alloc_traits;
   typename _Alloc_traits::allocator_type __a2(__a);
   _Sp_cp_type* __mem = _Alloc_traits::allocate(__a2, 1);
   try
     {
       _Alloc_traits::construct(__a2, __mem, std::move(__a),
      std::forward<_Args>(__args)...);
       _M_pi = __mem;
     }
   catch(...)
     {
       _Alloc_traits::deallocate(__a2, __mem, 1);
       throw;
     }
 }



      template<typename _Tp>
        explicit
 __shared_count(std::auto_ptr<_Tp>&& __r);



      template<typename _Tp, typename _Del>
        explicit
 __shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 {
   using _Ptr = typename unique_ptr<_Tp, _Del>::pointer;
   using _Del2 = typename conditional<is_reference<_Del>::value,
       reference_wrapper<typename remove_reference<_Del>::type>,
       _Del>::type;
   using _Sp_cd_type
     = _Sp_counted_deleter<_Ptr, _Del2, allocator<void>, _Lp>;
   using _Alloc = allocator<_Sp_cd_type>;
   using _Alloc_traits = allocator_traits<_Alloc>;
   _Alloc __a;
   _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
   _Alloc_traits::construct(__a, __mem, __r.release(),
       __r.get_deleter());
   _M_pi = __mem;
 }


      explicit __shared_count(const __weak_count<_Lp>& __r);


      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != 0)
   _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != _M_pi)
   {
     if (__tmp != 0)
       __tmp->_M_add_ref_copy();
     if (_M_pi != 0)
       _M_pi->_M_release();
     _M_pi = __tmp;
   }
 return *this;
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_unique() const noexcept
      { return this->_M_get_use_count() == 1; }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_pi ? _M_pi->_M_get_deleter(__ti) : nullptr; }

      bool
      _M_less(const __shared_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __weak_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __shared_count& __a, const __shared_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __weak_count<_Lp>;

      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    class __weak_count
    {
    public:
      constexpr __weak_count() noexcept : _M_pi(0)
      { }

      __weak_count(const __shared_count<_Lp>& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != 0)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(const __weak_count<_Lp>& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != 0)
   _M_pi->_M_weak_add_ref();
      }

      ~__weak_count() noexcept
      {
 if (_M_pi != 0)
   _M_pi->_M_weak_release();
      }

      __weak_count<_Lp>&
      operator=(const __shared_count<_Lp>& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != 0)
   __tmp->_M_weak_add_ref();
 if (_M_pi != 0)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count<_Lp>&
      operator=(const __weak_count<_Lp>& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != 0)
   __tmp->_M_weak_add_ref();
 if (_M_pi != 0)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      void
      _M_swap(__weak_count<_Lp>& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_less(const __weak_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __shared_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __weak_count& __a, const __weak_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __shared_count<_Lp>;

      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
 _M_pi->_M_add_ref_lock();
      else
 __throw_bad_weak_ptr();
    }


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::
    __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
 if (!_M_pi->_M_add_ref_lock_nothrow())
   _M_pi = nullptr;
    }




  template<_Lock_policy _Lp, typename _Tp1, typename _Tp2>
    void
    __enable_shared_from_this_helper(const __shared_count<_Lp>&,
         const __enable_shared_from_this<_Tp1,
         _Lp>*, const _Tp2*) noexcept;


  template<typename _Tp1, typename _Tp2>
    void
    __enable_shared_from_this_helper(const __shared_count<>&,
         const enable_shared_from_this<_Tp1>*,
         const _Tp2*) noexcept;

  template<_Lock_policy _Lp>
    inline void
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
    {
    public:
      typedef _Tp element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
 explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 {

   static_assert( !is_void<_Tp1>::value, "incomplete type" );
   static_assert( sizeof(_Tp1) > 0, "incomplete type" );
   __enable_shared_from_this_helper(_M_refcount, __p, __p);
 }

      template<typename _Tp1, typename _Deleter>
 __shared_ptr(_Tp1* __p, _Deleter __d)
 : _M_ptr(__p), _M_refcount(__p, __d)
 {


   __enable_shared_from_this_helper(_M_refcount, __p, __p);
 }

      template<typename _Tp1, typename _Deleter, typename _Alloc>
 __shared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)
 : _M_ptr(__p), _M_refcount(__p, __d, std::move(__a))
 {


   __enable_shared_from_this_helper(_M_refcount, __p, __p);
 }

      template<typename _Deleter>
 __shared_ptr(nullptr_t __p, _Deleter __d)
 : _M_ptr(0), _M_refcount(__p, __d)
 { }

      template<typename _Deleter, typename _Alloc>
        __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : _M_ptr(0), _M_refcount(__p, __d, std::move(__a))
 { }

      template<typename _Tp1>
 __shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
 : _M_ptr(__p), _M_refcount(__r._M_refcount)
 { }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;

      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 __shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
 _M_refcount._M_swap(__r._M_refcount);
 __r._M_ptr = 0;
      }

      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 __shared_ptr(__shared_ptr<_Tp1, _Lp>&& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount()
 {
   _M_refcount._M_swap(__r._M_refcount);
   __r._M_ptr = 0;
 }

      template<typename _Tp1>
 explicit __shared_ptr(const __weak_ptr<_Tp1, _Lp>& __r)
 : _M_refcount(__r._M_refcount)
 {




   _M_ptr = __r._M_ptr;
 }


      template<typename _Tp1, typename _Del>
 __shared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)
 : _M_ptr(__r.get()), _M_refcount()
 {

   auto __raw = _S_raw_ptr(__r.get());
   _M_refcount = __shared_count<_Lp>(std::move(__r));
   __enable_shared_from_this_helper(_M_refcount, __raw, __raw);
 }



      template<typename _Tp1>
 __shared_ptr(std::auto_ptr<_Tp1>&& __r);



      constexpr __shared_ptr(nullptr_t) noexcept
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
 __shared_ptr&
 operator=(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }


      template<typename _Tp1>
 __shared_ptr&
 operator=(std::auto_ptr<_Tp1>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }


      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
      {
 __shared_ptr(std::move(__r)).swap(*this);
 return *this;
      }

      template<class _Tp1>
 __shared_ptr&
 operator=(__shared_ptr<_Tp1, _Lp>&& __r) noexcept
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      template<typename _Tp1, typename _Del>
 __shared_ptr&
 operator=(std::unique_ptr<_Tp1, _Del>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      void
      reset() noexcept
      { __shared_ptr().swap(*this); }

      template<typename _Tp1>
 void
 reset(_Tp1* __p)
 {

                                                   ;
   __shared_ptr(__p).swap(*this);
 }

      template<typename _Tp1, typename _Deleter>
 void
 reset(_Tp1* __p, _Deleter __d)
 { __shared_ptr(__p, __d).swap(*this); }

      template<typename _Tp1, typename _Deleter, typename _Alloc>
 void
        reset(_Tp1* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, __d, std::move(__a)).swap(*this); }


      typename std::add_lvalue_reference<_Tp>::type
      operator*() const noexcept
      {
                                   ;
 return *_M_ptr;
      }

      _Tp*
      operator->() const noexcept
      {
                                   ;
 return _M_ptr;
      }

      _Tp*
      get() const noexcept
      { return _M_ptr; }

      explicit operator bool() const
      { return _M_ptr == 0 ? false : true; }

      bool
      unique() const noexcept
      { return _M_refcount._M_unique(); }

      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
      {
 std::swap(_M_ptr, __other._M_ptr);
 _M_refcount._M_swap(__other._M_refcount);
      }

      template<typename _Tp1>
 bool
 owner_before(__shared_ptr<_Tp1, _Lp> const& __rhs) const
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const
 { return _M_refcount._M_less(__rhs._M_refcount); }


    protected:

      template<typename _Alloc, typename... _Args>
 __shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
       _Args&&... __args)
 : _M_ptr(), _M_refcount(__tag, (_Tp*)0, __a,
    std::forward<_Args>(__args)...)
 {


   void* __p = _M_refcount._M_get_deleter(typeid(__tag));
   _M_ptr = static_cast<_Tp*>(__p);
   __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
 }
# 1138 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr_base.h" 3
      template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,
        typename... _Args>
 friend __shared_ptr<_Tp1, _Lp1>
 __allocate_shared(const _Alloc& __a, _Args&&... __args);



      __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t)
      : _M_refcount(__r._M_refcount, std::nothrow)
      {
 _M_ptr = _M_refcount._M_get_use_count() ? __r._M_ptr : nullptr;
      }

      friend class __weak_ptr<_Tp, _Lp>;

    private:
      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_refcount._M_get_deleter(__ti); }

      template<typename _Tp1>
 static _Tp1*
 _S_raw_ptr(_Tp1* __ptr)
 { return __ptr; }

      template<typename _Tp1>
 static auto
 _S_raw_ptr(_Tp1 __ptr) -> decltype(std::__addressof(*__ptr))
 { return std::__addressof(*__ptr); }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;

      template<typename _Del, typename _Tp1, _Lock_policy _Lp1>
 friend _Del* get_deleter(const __shared_ptr<_Tp1, _Lp1>&) noexcept;

      _Tp* _M_ptr;
      __shared_count<_Lp> _M_refcount;
    };



  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() == __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !__a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !__a; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return (bool)__a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return (bool)__a; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp1, _Lp>& __a,
       const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    {
      typedef typename std::common_type<_Tp1*, _Tp2*>::type _CT;
      return std::less<_CT>()(__a.get(), __b.get());
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return std::less<_Tp*>()(__a.get(), nullptr); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return std::less<_Tp*>()(nullptr, __a.get()); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp1, _Lp>& __a,
       const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return (__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return std::less<_Tp*>()(nullptr, __a.get()); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return std::less<_Tp*>()(__a.get(), nullptr); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__a < __b); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(nullptr < __a); }

  template<typename _Sp>
    struct _Sp_less : public binary_function<_Sp, _Sp, bool>
    {
      bool
      operator()(const _Sp& __lhs, const _Sp& __rhs) const noexcept
      {
 typedef typename _Sp::element_type element_type;
 return std::less<element_type*>()(__lhs.get(), __rhs.get());
      }
    };

  template<typename _Tp, _Lock_policy _Lp>
    struct less<__shared_ptr<_Tp, _Lp>>
    : public _Sp_less<__shared_ptr<_Tp, _Lp>>
    { };


  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__shared_ptr<_Tp, _Lp>& __a, __shared_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }
# 1308 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr_base.h" 3
  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    static_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    { return __shared_ptr<_Tp, _Lp>(__r, static_cast<_Tp*>(__r.get())); }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    const_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    { return __shared_ptr<_Tp, _Lp>(__r, const_cast<_Tp*>(__r.get())); }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    dynamic_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      if (_Tp* __p = dynamic_cast<_Tp*>(__r.get()))
 return __shared_ptr<_Tp, _Lp>(__r, __p);
      return __shared_ptr<_Tp, _Lp>();
    }


  template<typename _Tp, _Lock_policy _Lp>
    class __weak_ptr
    {
    public:
      typedef _Tp element_type;

      constexpr __weak_ptr() noexcept
      : _M_ptr(0), _M_refcount()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;
      __weak_ptr& operator=(const __weak_ptr&) noexcept = default;
      ~__weak_ptr() = default;
# 1366 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr_base.h" 3
      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 __weak_ptr(const __weak_ptr<_Tp1, _Lp>& __r) noexcept
 : _M_refcount(__r._M_refcount)
        { _M_ptr = __r.lock().get(); }

      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 __weak_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      template<typename _Tp1>
 __weak_ptr&
 operator=(const __weak_ptr<_Tp1, _Lp>& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = __r._M_refcount;
   return *this;
 }

      template<typename _Tp1>
 __weak_ptr&
 operator=(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }

      __shared_ptr<_Tp, _Lp>
      lock() const noexcept
      { return __shared_ptr<element_type, _Lp>(*this, std::nothrow); }

      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      bool
      expired() const noexcept
      { return _M_refcount._M_get_use_count() == 0; }

      template<typename _Tp1>
 bool
 owner_before(const __shared_ptr<_Tp1, _Lp>& __rhs) const
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(const __weak_ptr<_Tp1, _Lp>& __rhs) const
 { return _M_refcount._M_less(__rhs._M_refcount); }

      void
      reset() noexcept
      { __weak_ptr().swap(*this); }

      void
      swap(__weak_ptr& __s) noexcept
      {
 std::swap(_M_ptr, __s._M_ptr);
 _M_refcount._M_swap(__s._M_refcount);
      }

    private:

      void
      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
      {
 _M_ptr = __ptr;
 _M_refcount = __refcount;
      }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;
      friend class __enable_shared_from_this<_Tp, _Lp>;
      friend class enable_shared_from_this<_Tp>;

      _Tp* _M_ptr;
      __weak_count<_Lp> _M_refcount;
    };


  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }

  template<typename _Tp, typename _Tp1>
    struct _Sp_owner_less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __lhs, const _Tp& __rhs) const
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp& __lhs, const _Tp1& __rhs) const
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp1& __lhs, const _Tp& __rhs) const
      { return __lhs.owner_before(__rhs); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__shared_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__shared_ptr<_Tp, _Lp>, __weak_ptr<_Tp, _Lp>>
    { };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__weak_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__weak_ptr<_Tp, _Lp>, __shared_ptr<_Tp, _Lp>>
    { };


  template<typename _Tp, _Lock_policy _Lp>
    class __enable_shared_from_this
    {
    protected:
      constexpr __enable_shared_from_this() noexcept { }

      __enable_shared_from_this(const __enable_shared_from_this&) noexcept { }

      __enable_shared_from_this&
      operator=(const __enable_shared_from_this&) noexcept
      { return *this; }

      ~__enable_shared_from_this() { }

    public:
      __shared_ptr<_Tp, _Lp>
      shared_from_this()
      { return __shared_ptr<_Tp, _Lp>(this->_M_weak_this); }

      __shared_ptr<const _Tp, _Lp>
      shared_from_this() const
      { return __shared_ptr<const _Tp, _Lp>(this->_M_weak_this); }

    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }

      template<typename _Tp1>
 friend void
 __enable_shared_from_this_helper(const __shared_count<_Lp>& __pn,
      const __enable_shared_from_this* __pe,
      const _Tp1* __px) noexcept
 {
   if (__pe != 0)
     __pe->_M_weak_assign(const_cast<_Tp1*>(__px), __pn);
 }

      mutable __weak_ptr<_Tp, _Lp> _M_weak_this;
    };


  template<typename _Tp, _Lock_policy _Lp, typename _Alloc, typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return __shared_ptr<_Tp, _Lp>(_Sp_make_shared_tag(), __a,
        std::forward<_Args>(__args)...);
    }

  template<typename _Tp, _Lock_policy _Lp, typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __make_shared(_Args&&... __args)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::__allocate_shared<_Tp, _Lp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp, _Lock_policy _Lp>
    struct hash<__shared_ptr<_Tp, _Lp>>
    : public __hash_base<size_t, __shared_ptr<_Tp, _Lp>>
    {
      size_t
      operator()(const __shared_ptr<_Tp, _Lp>& __s) const noexcept
      { return std::hash<_Tp*>()(__s.get()); }
    };


}
# 53 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{
# 64 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 3
  template<typename _Ch, typename _Tr, typename _Tp, _Lock_policy _Lp>
    inline std::basic_ostream<_Ch, _Tr>&
    operator<<(std::basic_ostream<_Ch, _Tr>& __os,
        const __shared_ptr<_Tp, _Lp>& __p)
    {
      __os << __p.get();
      return __os;
    }


  template<typename _Del, typename _Tp, _Lock_policy _Lp>
    inline _Del*
    get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept
    {

      return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));



    }
# 92 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 3
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
    {
    public:




      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;







      template<typename _Tp1>
 explicit shared_ptr(_Tp1* __p)
        : __shared_ptr<_Tp>(__p) { }
# 128 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 3
      template<typename _Tp1, typename _Deleter>
 shared_ptr(_Tp1* __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, __d) { }
# 145 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 3
      template<typename _Deleter>
 shared_ptr(nullptr_t __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, __d) { }
# 164 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 3
      template<typename _Tp1, typename _Deleter, typename _Alloc>
 shared_ptr(_Tp1* __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }
# 183 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 3
      template<typename _Deleter, typename _Alloc>
 shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, __d, std::move(__a)) { }
# 205 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 3
      template<typename _Tp1>
 shared_ptr(const shared_ptr<_Tp1>& __r, _Tp* __p) noexcept
 : __shared_ptr<_Tp>(__r, __p) { }
# 216 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 3
      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 shared_ptr(const shared_ptr<_Tp1>& __r) noexcept
        : __shared_ptr<_Tp>(__r) { }






      shared_ptr(shared_ptr&& __r) noexcept
      : __shared_ptr<_Tp>(std::move(__r)) { }






      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 shared_ptr(shared_ptr<_Tp1>&& __r) noexcept
 : __shared_ptr<_Tp>(std::move(__r)) { }
# 247 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 3
      template<typename _Tp1>
 explicit shared_ptr(const weak_ptr<_Tp1>& __r)
 : __shared_ptr<_Tp>(__r) { }


      template<typename _Tp1>
 shared_ptr(std::auto_ptr<_Tp1>&& __r);


      template<typename _Tp1, typename _Del>
 shared_ptr(std::unique_ptr<_Tp1, _Del>&& __r)
 : __shared_ptr<_Tp>(std::move(__r)) { }






      constexpr shared_ptr(nullptr_t __p) noexcept
      : __shared_ptr<_Tp>(__p) { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;

      template<typename _Tp1>
 shared_ptr&
 operator=(const shared_ptr<_Tp1>& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(__r);
   return *this;
 }


      template<typename _Tp1>
 shared_ptr&
 operator=(std::auto_ptr<_Tp1>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }


      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
 this->__shared_ptr<_Tp>::operator=(std::move(__r));
 return *this;
      }

      template<class _Tp1>
 shared_ptr&
 operator=(shared_ptr<_Tp1>&& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      template<typename _Tp1, typename _Del>
 shared_ptr&
 operator=(std::unique_ptr<_Tp1, _Del>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

    private:

      template<typename _Alloc, typename... _Args>
 shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
     _Args&&... __args)
 : __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
 { }

      template<typename _Tp1, typename _Alloc, typename... _Args>
 friend shared_ptr<_Tp1>
 allocate_shared(const _Alloc& __a, _Args&&... __args);


      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t)
      : __shared_ptr<_Tp>(__r, std::nothrow) { }

      friend class weak_ptr<_Tp>;
    };


  template<typename _Tp1, typename _Tp2>
    inline bool
    operator==(const shared_ptr<_Tp1>& __a,
        const shared_ptr<_Tp2>& __b) noexcept
    { return __a.get() == __b.get(); }

  template<typename _Tp>
    inline bool
    operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !__a; }

  template<typename _Tp>
    inline bool
    operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !__a; }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator!=(const shared_ptr<_Tp1>& __a,
        const shared_ptr<_Tp2>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp>
    inline bool
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return (bool)__a; }

  template<typename _Tp>
    inline bool
    operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return (bool)__a; }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator<(const shared_ptr<_Tp1>& __a,
       const shared_ptr<_Tp2>& __b) noexcept
    {
      typedef typename std::common_type<_Tp1*, _Tp2*>::type _CT;
      return std::less<_CT>()(__a.get(), __b.get());
    }

  template<typename _Tp>
    inline bool
    operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return std::less<_Tp*>()(__a.get(), nullptr); }

  template<typename _Tp>
    inline bool
    operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return std::less<_Tp*>()(nullptr, __a.get()); }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator<=(const shared_ptr<_Tp1>& __a,
        const shared_ptr<_Tp2>& __b) noexcept
    { return !(__b < __a); }

  template<typename _Tp>
    inline bool
    operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp>
    inline bool
    operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator>(const shared_ptr<_Tp1>& __a,
       const shared_ptr<_Tp2>& __b) noexcept
    { return (__b < __a); }

  template<typename _Tp>
    inline bool
    operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return std::less<_Tp*>()(nullptr, __a.get()); }

  template<typename _Tp>
    inline bool
    operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return std::less<_Tp*>()(__a.get(), nullptr); }

  template<typename _Tp1, typename _Tp2>
    inline bool
    operator>=(const shared_ptr<_Tp1>& __a,
        const shared_ptr<_Tp2>& __b) noexcept
    { return !(__a < __b); }

  template<typename _Tp>
    inline bool
    operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp>
    inline bool
    operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp>
    struct less<shared_ptr<_Tp>> : public _Sp_less<shared_ptr<_Tp>>
    { };


  template<typename _Tp>
    inline void
    swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }


  template<typename _Tp, typename _Tp1>
    inline shared_ptr<_Tp>
    static_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept
    { return shared_ptr<_Tp>(__r, static_cast<_Tp*>(__r.get())); }

  template<typename _Tp, typename _Tp1>
    inline shared_ptr<_Tp>
    const_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept
    { return shared_ptr<_Tp>(__r, const_cast<_Tp*>(__r.get())); }

  template<typename _Tp, typename _Tp1>
    inline shared_ptr<_Tp>
    dynamic_pointer_cast(const shared_ptr<_Tp1>& __r) noexcept
    {
      if (_Tp* __p = dynamic_cast<_Tp*>(__r.get()))
 return shared_ptr<_Tp>(__r, __p);
      return shared_ptr<_Tp>();
    }







  template<typename _Tp>
    class weak_ptr : public __weak_ptr<_Tp>
    {
    public:
      constexpr weak_ptr() noexcept
      : __weak_ptr<_Tp>() { }

      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 weak_ptr(const weak_ptr<_Tp1>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      template<typename _Tp1, typename = typename
        std::enable_if<std::is_convertible<_Tp1*, _Tp*>::value>::type>
 weak_ptr(const shared_ptr<_Tp1>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      template<typename _Tp1>
 weak_ptr&
 operator=(const weak_ptr<_Tp1>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      template<typename _Tp1>
 weak_ptr&
 operator=(const shared_ptr<_Tp1>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      shared_ptr<_Tp>
      lock() const noexcept
      { return shared_ptr<_Tp>(*this, std::nothrow); }
    };


  template<typename _Tp>
    inline void
    swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }



  template<typename _Tp>
    struct owner_less;


  template<typename _Tp>
    struct owner_less<shared_ptr<_Tp>>
    : public _Sp_owner_less<shared_ptr<_Tp>, weak_ptr<_Tp>>
    { };


  template<typename _Tp>
    struct owner_less<weak_ptr<_Tp>>
    : public _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp>>
    { };




  template<typename _Tp>
    class enable_shared_from_this
    {
    protected:
      constexpr enable_shared_from_this() noexcept { }

      enable_shared_from_this(const enable_shared_from_this&) noexcept { }

      enable_shared_from_this&
      operator=(const enable_shared_from_this&) noexcept
      { return *this; }

      ~enable_shared_from_this() { }

    public:
      shared_ptr<_Tp>
      shared_from_this()
      { return shared_ptr<_Tp>(this->_M_weak_this); }

      shared_ptr<const _Tp>
      shared_from_this() const
      { return shared_ptr<const _Tp>(this->_M_weak_this); }

    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }

      template<typename _Tp1>
 friend void
 __enable_shared_from_this_helper(const __shared_count<>& __pn,
      const enable_shared_from_this* __pe,
      const _Tp1* __px) noexcept
 {
   if (__pe != 0)
     __pe->_M_weak_assign(const_cast<_Tp1*>(__px), __pn);
 }

      mutable weak_ptr<_Tp> _M_weak_this;
    };
# 583 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 3
  template<typename _Tp, typename _Alloc, typename... _Args>
    inline shared_ptr<_Tp>
    allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return shared_ptr<_Tp>(_Sp_make_shared_tag(), __a,
        std::forward<_Args>(__args)...);
    }
# 598 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/shared_ptr.h" 3
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp>
    struct hash<shared_ptr<_Tp>>
    : public __hash_base<size_t, shared_ptr<_Tp>>
    {
      size_t
      operator()(const shared_ptr<_Tp>& __s) const noexcept
      { return std::hash<_Tp*>()(__s.get()); }
    };




}
# 83 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/memory" 2 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 1 3
# 36 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 47 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 3
  template<typename _Tp1>
    struct auto_ptr_ref
    {
      _Tp1* _M_ptr;

      explicit
      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }
    } __attribute__ ((__deprecated__));
# 86 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 3
  template<typename _Tp>
    class auto_ptr
    {
    private:
      _Tp* _M_ptr;

    public:

      typedef _Tp element_type;







      explicit
      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }
# 112 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }
# 124 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }
# 135 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 3
      auto_ptr&
      operator=(auto_ptr& __a) throw()
      {
 reset(__a.release());
 return *this;
      }
# 152 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr&
        operator=(auto_ptr<_Tp1>& __a) throw()
        {
   reset(__a.release());
   return *this;
 }
# 170 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 3
      ~auto_ptr() { delete _M_ptr; }
# 180 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 3
      element_type&
      operator*() const throw()
      {
                                   ;
 return *_M_ptr;
      }







      element_type*
      operator->() const throw()
      {
                                   ;
 return _M_ptr;
      }
# 210 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 3
      element_type*
      get() const throw() { return _M_ptr; }
# 224 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 3
      element_type*
      release() throw()
      {
 element_type* __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 239 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 3
      void
      reset(element_type* __p = 0) throw()
      {
 if (__p != _M_ptr)
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 260 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr_ref<element_type> __ref) throw()
      : _M_ptr(__ref._M_ptr) { }

      auto_ptr&
      operator=(auto_ptr_ref<element_type> __ref) throw()
      {
 if (__ref._M_ptr != this->get())
   {
     delete _M_ptr;
     _M_ptr = __ref._M_ptr;
   }
 return *this;
      }

      template<typename _Tp1>
        operator auto_ptr_ref<_Tp1>() throw()
        { return auto_ptr_ref<_Tp1>(this->release()); }

      template<typename _Tp1>
        operator auto_ptr<_Tp1>() throw()
        { return auto_ptr<_Tp1>(this->release()); }
    } __attribute__ ((__deprecated__));



  template<>
    class auto_ptr<void>
    {
    public:
      typedef void element_type;
    } __attribute__ ((__deprecated__));


  template<_Lock_policy _Lp>
  template<typename _Tp>
    inline
    __shared_count<_Lp>::__shared_count(std::auto_ptr<_Tp>&& __r)
    : _M_pi(new _Sp_counted_ptr<_Tp*, _Lp>(__r.get()))
    { __r.release(); }

  template<typename _Tp, _Lock_policy _Lp>
  template<typename _Tp1>
    inline
    __shared_ptr<_Tp, _Lp>::__shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : _M_ptr(__r.get()), _M_refcount()
    {

      static_assert( sizeof(_Tp1) > 0, "incomplete type" );
      _Tp1* __tmp = __r.get();
      _M_refcount = __shared_count<_Lp>(std::move(__r));
      __enable_shared_from_this_helper(_M_refcount, __tmp, __tmp);
    }

  template<typename _Tp>
  template<typename _Tp1>
    inline
    shared_ptr<_Tp>::shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : __shared_ptr<_Tp>(std::move(__r)) { }

  template<typename _Tp, typename _Dp>
  template<typename _Up, typename>
    inline
    unique_ptr<_Tp, _Dp>::unique_ptr(auto_ptr<_Up>&& __u) noexcept
    : _M_t(__u.release(), deleter_type()) { }



}
# 85 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/memory" 2 3
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource.hpp" 2
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/mutex" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/mutex" 3






# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/chrono" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/chrono" 3





# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ratio" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ratio" 3
# 43 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ratio" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ratio" 3
  template<intmax_t _Pn>
    struct __static_sign
    : integral_constant<intmax_t, (_Pn < 0) ? -1 : 1>
    { };

  template<intmax_t _Pn>
    struct __static_abs
    : integral_constant<intmax_t, _Pn * __static_sign<_Pn>::value>
    { };

  template<intmax_t _Pn, intmax_t _Qn>
    struct __static_gcd
    : __static_gcd<_Qn, (_Pn % _Qn)>
    { };

  template<intmax_t _Pn>
    struct __static_gcd<_Pn, 0>
    : integral_constant<intmax_t, __static_abs<_Pn>::value>
    { };

  template<intmax_t _Qn>
    struct __static_gcd<0, _Qn>
    : integral_constant<intmax_t, __static_abs<_Qn>::value>
    { };







  template<intmax_t _Pn, intmax_t _Qn>
    struct __safe_multiply
    {
    private:
      static const uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);

      static const uintmax_t __a0 = __static_abs<_Pn>::value % __c;
      static const uintmax_t __a1 = __static_abs<_Pn>::value / __c;
      static const uintmax_t __b0 = __static_abs<_Qn>::value % __c;
      static const uintmax_t __b1 = __static_abs<_Qn>::value / __c;

      static_assert(__a1 == 0 || __b1 == 0,
      "overflow in multiplication");
      static_assert(__a0 * __b1 + __b0 * __a1 < (__c >> 1),
      "overflow in multiplication");
      static_assert(__b0 * __a0 <= 9223372036854775807L,
      "overflow in multiplication");
      static_assert((__a0 * __b1 + __b0 * __a1) * __c
      <= 9223372036854775807L - __b0 * __a0,
      "overflow in multiplication");

    public:
      static const intmax_t value = _Pn * _Qn;
    };



  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_less
    : integral_constant<bool, (__hi1 < __hi2
          || (__hi1 == __hi2 && __lo1 < __lo2))>
    { };

  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_add
    {
      static constexpr uintmax_t __lo = __lo1 + __lo2;
      static constexpr uintmax_t __hi = (__hi1 + __hi2 +
      (__lo1 + __lo2 < __lo1));
    };


  template<uintmax_t __hi1, uintmax_t __lo1, uintmax_t __hi2, uintmax_t __lo2>
    struct __big_sub
    {
      static_assert(!__big_less<__hi1, __lo1, __hi2, __lo2>::value,
      "Internal library error");
      static constexpr uintmax_t __lo = __lo1 - __lo2;
      static constexpr uintmax_t __hi = (__hi1 - __hi2 -
      (__lo1 < __lo2));
    };


  template<uintmax_t __x, uintmax_t __y>
    struct __big_mul
    {
    private:
      static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);
      static constexpr uintmax_t __x0 = __x % __c;
      static constexpr uintmax_t __x1 = __x / __c;
      static constexpr uintmax_t __y0 = __y % __c;
      static constexpr uintmax_t __y1 = __y / __c;
      static constexpr uintmax_t __x0y0 = __x0 * __y0;
      static constexpr uintmax_t __x0y1 = __x0 * __y1;
      static constexpr uintmax_t __x1y0 = __x1 * __y0;
      static constexpr uintmax_t __x1y1 = __x1 * __y1;
      static constexpr uintmax_t __mix = __x0y1 + __x1y0;
      static constexpr uintmax_t __mix_lo = __mix * __c;
      static constexpr uintmax_t __mix_hi
      = __mix / __c + ((__mix < __x0y1) ? __c : 0);
      typedef __big_add<__mix_hi, __mix_lo, __x1y1, __x0y0> _Res;
    public:
      static constexpr uintmax_t __hi = _Res::__hi;
      static constexpr uintmax_t __lo = _Res::__lo;
    };



  template<uintmax_t __n1, uintmax_t __n0, uintmax_t __d>
    struct __big_div_impl
    {
    private:
      static_assert(__d >= (uintmax_t(1) << (sizeof(intmax_t) * 8 - 1)),
      "Internal library error");
      static_assert(__n1 < __d, "Internal library error");
      static constexpr uintmax_t __c = uintmax_t(1) << (sizeof(intmax_t) * 4);
      static constexpr uintmax_t __d1 = __d / __c;
      static constexpr uintmax_t __d0 = __d % __c;

      static constexpr uintmax_t __q1x = __n1 / __d1;
      static constexpr uintmax_t __r1x = __n1 % __d1;
      static constexpr uintmax_t __m = __q1x * __d0;
      static constexpr uintmax_t __r1y = __r1x * __c + __n0 / __c;
      static constexpr uintmax_t __r1z = __r1y + __d;
      static constexpr uintmax_t __r1
      = ((__r1y < __m) ? ((__r1z >= __d) && (__r1z < __m))
  ? (__r1z + __d) : __r1z : __r1y) - __m;
      static constexpr uintmax_t __q1
      = __q1x - ((__r1y < __m)
   ? ((__r1z >= __d) && (__r1z < __m)) ? 2 : 1 : 0);
      static constexpr uintmax_t __q0x = __r1 / __d1;
      static constexpr uintmax_t __r0x = __r1 % __d1;
      static constexpr uintmax_t __n = __q0x * __d0;
      static constexpr uintmax_t __r0y = __r0x * __c + __n0 % __c;
      static constexpr uintmax_t __r0z = __r0y + __d;
      static constexpr uintmax_t __r0
      = ((__r0y < __n) ? ((__r0z >= __d) && (__r0z < __n))
  ? (__r0z + __d) : __r0z : __r0y) - __n;
      static constexpr uintmax_t __q0
      = __q0x - ((__r0y < __n) ? ((__r0z >= __d)
      && (__r0z < __n)) ? 2 : 1 : 0);

    public:
      static constexpr uintmax_t __quot = __q1 * __c + __q0;
      static constexpr uintmax_t __rem = __r0;

    private:
      typedef __big_mul<__quot, __d> _Prod;
      typedef __big_add<_Prod::__hi, _Prod::__lo, 0, __rem> _Sum;
      static_assert(_Sum::__hi == __n1 && _Sum::__lo == __n0,
      "Internal library error");
  };

  template<uintmax_t __n1, uintmax_t __n0, uintmax_t __d>
    struct __big_div
    {
    private:
      static_assert(__d != 0, "Internal library error");
      static_assert(sizeof (uintmax_t) == sizeof (unsigned long long),
      "This library calls __builtin_clzll on uintmax_t, which "
      "is unsafe on your platform. Please complain to "
      "http://gcc.gnu.org/bugzilla/");
      static constexpr int __shift = __builtin_clzll(__d);
      static constexpr int __coshift_ = sizeof(uintmax_t) * 8 - __shift;
      static constexpr int __coshift = (__shift != 0) ? __coshift_ : 0;
      static constexpr uintmax_t __c1 = uintmax_t(1) << __shift;
      static constexpr uintmax_t __c2 = uintmax_t(1) << __coshift;
      static constexpr uintmax_t __new_d = __d * __c1;
      static constexpr uintmax_t __new_n0 = __n0 * __c1;
      static constexpr uintmax_t __n1_shifted = (__n1 % __d) * __c1;
      static constexpr uintmax_t __n0_top = (__shift != 0) ? (__n0 / __c2) : 0;
      static constexpr uintmax_t __new_n1 = __n1_shifted + __n0_top;
      typedef __big_div_impl<__new_n1, __new_n0, __new_d> _Res;

    public:
      static constexpr uintmax_t __quot_hi = __n1 / __d;
      static constexpr uintmax_t __quot_lo = _Res::__quot;
      static constexpr uintmax_t __rem = _Res::__rem / __c1;

    private:
      typedef __big_mul<__quot_lo, __d> _P0;
      typedef __big_mul<__quot_hi, __d> _P1;
      typedef __big_add<_P0::__hi, _P0::__lo, _P1::__lo, __rem> _Sum;

      static_assert(_P1::__hi == 0, "Internal library error");
      static_assert(_Sum::__hi >= _P0::__hi, "Internal library error");

      static_assert(_Sum::__hi == __n1 && _Sum::__lo == __n0,
      "Internal library error");
      static_assert(__rem < __d, "Internal library error");
    };
# 262 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ratio" 3
  template<intmax_t _Num, intmax_t _Den = 1>
    struct ratio
    {
      static_assert(_Den != 0, "denominator cannot be zero");
      static_assert(_Num >= -9223372036854775807L && _Den >= -9223372036854775807L,
      "out of range");


      static constexpr intmax_t num =
        _Num * __static_sign<_Den>::value / __static_gcd<_Num, _Den>::value;

      static constexpr intmax_t den =
        __static_abs<_Den>::value / __static_gcd<_Num, _Den>::value;

      typedef ratio<num, den> type;
    };

  template<intmax_t _Num, intmax_t _Den>
    constexpr intmax_t ratio<_Num, _Den>::num;

  template<intmax_t _Num, intmax_t _Den>
    constexpr intmax_t ratio<_Num, _Den>::den;

  template<typename _R1, typename _R2>
    struct __ratio_multiply
    {
    private:
      static const intmax_t __gcd1 =
        __static_gcd<_R1::num, _R2::den>::value;
      static const intmax_t __gcd2 =
        __static_gcd<_R2::num, _R1::den>::value;

    public:
      typedef ratio<
        __safe_multiply<(_R1::num / __gcd1),
                        (_R2::num / __gcd2)>::value,
        __safe_multiply<(_R1::den / __gcd2),
                        (_R2::den / __gcd1)>::value> type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_multiply<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_multiply<_R1, _R2>::den;


  template<typename _R1, typename _R2>
    using ratio_multiply = typename __ratio_multiply<_R1, _R2>::type;

  template<typename _R1, typename _R2>
    struct __ratio_divide
    {
      static_assert(_R2::num != 0, "division by 0");

      typedef typename __ratio_multiply<
        _R1,
        ratio<_R2::den, _R2::num>>::type type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_divide<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_divide<_R1, _R2>::den;


  template<typename _R1, typename _R2>
    using ratio_divide = typename __ratio_divide<_R1, _R2>::type;


  template<typename _R1, typename _R2>
    struct ratio_equal
    : integral_constant<bool, _R1::num == _R2::num && _R1::den == _R2::den>
    { };


  template<typename _R1, typename _R2>
    struct ratio_not_equal
    : integral_constant<bool, !ratio_equal<_R1, _R2>::value>
    { };


  template<typename _R1, typename _R2,
           typename _Left = __big_mul<_R1::num,_R2::den>,
           typename _Right = __big_mul<_R2::num,_R1::den> >
    struct __ratio_less_impl_1
    : integral_constant<bool, __big_less<_Left::__hi, _Left::__lo,
           _Right::__hi, _Right::__lo>::value>
    { };

  template<typename _R1, typename _R2,
    bool = (_R1::num == 0 || _R2::num == 0
     || (__static_sign<_R1::num>::value
         != __static_sign<_R2::num>::value)),
    bool = (__static_sign<_R1::num>::value == -1
     && __static_sign<_R2::num>::value == -1)>
    struct __ratio_less_impl
    : __ratio_less_impl_1<_R1, _R2>::type
    { };

  template<typename _R1, typename _R2>
    struct __ratio_less_impl<_R1, _R2, true, false>
    : integral_constant<bool, _R1::num < _R2::num>
    { };

  template<typename _R1, typename _R2>
    struct __ratio_less_impl<_R1, _R2, false, true>
    : __ratio_less_impl_1<ratio<-_R2::num, _R2::den>,
           ratio<-_R1::num, _R1::den> >::type
    { };


  template<typename _R1, typename _R2>
    struct ratio_less
    : __ratio_less_impl<_R1, _R2>::type
    { };


  template<typename _R1, typename _R2>
    struct ratio_less_equal
    : integral_constant<bool, !ratio_less<_R2, _R1>::value>
    { };


  template<typename _R1, typename _R2>
    struct ratio_greater
    : integral_constant<bool, ratio_less<_R2, _R1>::value>
    { };


  template<typename _R1, typename _R2>
    struct ratio_greater_equal
    : integral_constant<bool, !ratio_less<_R1, _R2>::value>
    { };

  template<typename _R1, typename _R2,
      bool = (_R1::num >= 0),
      bool = (_R2::num >= 0),
      bool = ratio_less<ratio<__static_abs<_R1::num>::value, _R1::den>,
        ratio<__static_abs<_R2::num>::value, _R2::den> >::value>
    struct __ratio_add_impl
    {
    private:
      typedef typename __ratio_add_impl<
        ratio<-_R1::num, _R1::den>,
        ratio<-_R2::num, _R2::den> >::type __t;
    public:
      typedef ratio<-__t::num, __t::den> type;
    };


  template<typename _R1, typename _R2, bool __b>
    struct __ratio_add_impl<_R1, _R2, true, true, __b>
    {
    private:
      static constexpr uintmax_t __g = __static_gcd<_R1::den, _R2::den>::value;
      static constexpr uintmax_t __d2 = _R2::den / __g;
      typedef __big_mul<_R1::den, __d2> __d;
      typedef __big_mul<_R1::num, _R2::den / __g> __x;
      typedef __big_mul<_R2::num, _R1::den / __g> __y;
      typedef __big_add<__x::__hi, __x::__lo, __y::__hi, __y::__lo> __n;
      static_assert(__n::__hi >= __x::__hi, "Internal library error");
      typedef __big_div<__n::__hi, __n::__lo, __g> __ng;
      static constexpr uintmax_t __g2 = __static_gcd<__ng::__rem, __g>::value;
      typedef __big_div<__n::__hi, __n::__lo, __g2> __n_final;
      static_assert(__n_final::__rem == 0, "Internal library error");
      static_assert(__n_final::__quot_hi == 0 &&
        __n_final::__quot_lo <= 9223372036854775807L, "overflow in addition");
      typedef __big_mul<_R1::den / __g2, __d2> __d_final;
      static_assert(__d_final::__hi == 0 &&
        __d_final::__lo <= 9223372036854775807L, "overflow in addition");
    public:
      typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;
    };

  template<typename _R1, typename _R2>
    struct __ratio_add_impl<_R1, _R2, false, true, true>
    : __ratio_add_impl<_R2, _R1>
    { };


  template<typename _R1, typename _R2>
    struct __ratio_add_impl<_R1, _R2, true, false, false>
    {
    private:
      static constexpr uintmax_t __g = __static_gcd<_R1::den, _R2::den>::value;
      static constexpr uintmax_t __d2 = _R2::den / __g;
      typedef __big_mul<_R1::den, __d2> __d;
      typedef __big_mul<_R1::num, _R2::den / __g> __x;
      typedef __big_mul<-_R2::num, _R1::den / __g> __y;
      typedef __big_sub<__x::__hi, __x::__lo, __y::__hi, __y::__lo> __n;
      typedef __big_div<__n::__hi, __n::__lo, __g> __ng;
      static constexpr uintmax_t __g2 = __static_gcd<__ng::__rem, __g>::value;
      typedef __big_div<__n::__hi, __n::__lo, __g2> __n_final;
      static_assert(__n_final::__rem == 0, "Internal library error");
      static_assert(__n_final::__quot_hi == 0 &&
        __n_final::__quot_lo <= 9223372036854775807L, "overflow in addition");
      typedef __big_mul<_R1::den / __g2, __d2> __d_final;
      static_assert(__d_final::__hi == 0 &&
        __d_final::__lo <= 9223372036854775807L, "overflow in addition");
    public:
      typedef ratio<__n_final::__quot_lo, __d_final::__lo> type;
    };

  template<typename _R1, typename _R2>
    struct __ratio_add
    {
      typedef typename __ratio_add_impl<_R1, _R2>::type type;
      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_add<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_add<_R1, _R2>::den;


  template<typename _R1, typename _R2>
    using ratio_add = typename __ratio_add<_R1, _R2>::type;

  template<typename _R1, typename _R2>
    struct __ratio_subtract
    {
      typedef typename __ratio_add<
        _R1,
        ratio<-_R2::num, _R2::den>>::type type;

      static constexpr intmax_t num = type::num;
      static constexpr intmax_t den = type::den;
    };

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_subtract<_R1, _R2>::num;

  template<typename _R1, typename _R2>
    constexpr intmax_t __ratio_subtract<_R1, _R2>::den;


  template<typename _R1, typename _R2>
    using ratio_subtract = typename __ratio_subtract<_R1, _R2>::type;


  typedef ratio<1, 1000000000000000000> atto;
  typedef ratio<1, 1000000000000000> femto;
  typedef ratio<1, 1000000000000> pico;
  typedef ratio<1, 1000000000> nano;
  typedef ratio<1, 1000000> micro;
  typedef ratio<1, 1000> milli;
  typedef ratio<1, 100> centi;
  typedef ratio<1, 10> deci;
  typedef ratio< 10, 1> deca;
  typedef ratio< 100, 1> hecto;
  typedef ratio< 1000, 1> kilo;
  typedef ratio< 1000000, 1> mega;
  typedef ratio< 1000000000, 1> giga;
  typedef ratio< 1000000000000, 1> tera;
  typedef ratio< 1000000000000000, 1> peta;
  typedef ratio< 1000000000000000000, 1> exa;



}
# 39 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/chrono" 2 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/limits" 1 3
# 41 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/limits" 3
# 147 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 191 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;


    static constexpr bool is_integer = false;




    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;
# 277 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/limits" 3
    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 303 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() noexcept { return _Tp(); }


      static constexpr _Tp
      max() noexcept { return _Tp(); }




      static constexpr _Tp
      lowest() noexcept { return _Tp(); }




      static constexpr _Tp
      epsilon() noexcept { return _Tp(); }


      static constexpr _Tp
      round_error() noexcept { return _Tp(); }


      static constexpr _Tp
      infinity() noexcept { return _Tp(); }



      static constexpr _Tp
      quiet_NaN() noexcept { return _Tp(); }



      static constexpr _Tp
      signaling_NaN() noexcept { return _Tp(); }




      static constexpr _Tp
      denorm_min() noexcept { return _Tp(); }
    };


  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };






  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() noexcept { return false; }

      static constexpr bool
      max() noexcept { return true; }


      static constexpr bool
      lowest() noexcept { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() noexcept { return false; }

      static constexpr bool
      round_error() noexcept { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() noexcept { return false; }

      static constexpr bool
      quiet_NaN() noexcept { return false; }

      static constexpr bool
      signaling_NaN() noexcept { return false; }

      static constexpr bool
      denorm_min() noexcept { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() noexcept { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static constexpr char
      max() noexcept { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() noexcept { return 0; }

      static constexpr char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() noexcept { return char(); }

      static constexpr char
      quiet_NaN() noexcept { return char(); }

      static constexpr char
      signaling_NaN() noexcept { return char(); }

      static constexpr char
      denorm_min() noexcept { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() noexcept { return -127 - 1; }

      static constexpr signed char
      max() noexcept { return 127; }


      static constexpr signed char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() noexcept { return 0; }

      static constexpr signed char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() noexcept
      { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() noexcept
      { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() noexcept { return 0; }

      static constexpr unsigned char
      max() noexcept { return 127 * 2U + 1; }


      static constexpr unsigned char
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() noexcept { return 0; }

      static constexpr unsigned char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() noexcept { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static constexpr wchar_t
      max() noexcept { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() noexcept { return 0; }

      static constexpr wchar_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() noexcept { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() noexcept { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() noexcept { return (((char16_t)(-1) < 0) ? -(((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0) - 1 : (char16_t)0); }

      static constexpr char16_t
      max() noexcept { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }

      static constexpr char16_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() noexcept { return 0; }

      static constexpr char16_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() noexcept { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      denorm_min() noexcept { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() noexcept { return (((char32_t)(-1) < 0) ? -(((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0) - 1 : (char32_t)0); }

      static constexpr char32_t
      max() noexcept { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }

      static constexpr char32_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() noexcept { return 0; }

      static constexpr char32_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() noexcept { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      denorm_min() noexcept { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() noexcept { return -32767 - 1; }

      static constexpr short
      max() noexcept { return 32767; }


      static constexpr short
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() noexcept { return 0; }

      static constexpr short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() noexcept { return short(); }

      static constexpr short
      quiet_NaN() noexcept { return short(); }

      static constexpr short
      signaling_NaN() noexcept { return short(); }

      static constexpr short
      denorm_min() noexcept { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() noexcept { return 0; }

      static constexpr unsigned short
      max() noexcept { return 32767 * 2U + 1; }


      static constexpr unsigned short
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() noexcept { return 0; }

      static constexpr unsigned short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() noexcept { return -2147483647 - 1; }

      static constexpr int
      max() noexcept { return 2147483647; }


      static constexpr int
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() noexcept { return 0; }

      static constexpr int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() noexcept { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      denorm_min() noexcept { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() noexcept { return 0; }

      static constexpr unsigned int
      max() noexcept { return 2147483647 * 2U + 1; }


      static constexpr unsigned int
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() noexcept { return 0; }

      static constexpr unsigned int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() noexcept { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() noexcept { return -9223372036854775807L - 1; }

      static constexpr long
      max() noexcept { return 9223372036854775807L; }


      static constexpr long
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() noexcept { return 0; }

      static constexpr long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() noexcept { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      denorm_min() noexcept { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() noexcept { return 0; }

      static constexpr unsigned long
      max() noexcept { return 9223372036854775807L * 2UL + 1; }


      static constexpr unsigned long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() noexcept { return -9223372036854775807LL - 1; }

      static constexpr long long
      max() noexcept { return 9223372036854775807LL; }


      static constexpr long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() noexcept { return 0; }

      static constexpr long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() noexcept
      { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() noexcept { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() noexcept { return 0; }

      static constexpr unsigned long long
      max() noexcept { return 9223372036854775807LL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 1552 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/limits" 3
  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() noexcept { return 1.17549435e-38F; }

      static constexpr float
      max() noexcept { return 3.40282347e+38F; }


      static constexpr float
      lowest() noexcept { return -3.40282347e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() noexcept { return 1.19209290e-7F; }

      static constexpr float
      round_error() noexcept { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() noexcept { return __builtin_huge_valf(); }

      static constexpr float
      quiet_NaN() noexcept { return __builtin_nanf(""); }

      static constexpr float
      signaling_NaN() noexcept { return __builtin_nansf(""); }

      static constexpr float
      denorm_min() noexcept { return 1.40129846e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() noexcept { return 2.2250738585072014e-308; }

      static constexpr double
      max() noexcept { return 1.7976931348623157e+308; }


      static constexpr double
      lowest() noexcept { return -1.7976931348623157e+308; }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() noexcept { return 2.2204460492503131e-16; }

      static constexpr double
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() noexcept { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() noexcept { return __builtin_nan(""); }

      static constexpr double
      signaling_NaN() noexcept { return __builtin_nans(""); }

      static constexpr double
      denorm_min() noexcept { return 4.9406564584124654e-324; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() noexcept { return 2.00416836000897277799610805135016e-292L; }

      static constexpr long double
      max() noexcept { return 1.79769313486231580793728971405301e+308L; }


      static constexpr long double
      lowest() noexcept { return -1.79769313486231580793728971405301e+308L; }


      static constexpr int digits = 106;
      static constexpr int digits10 = 31;

      static constexpr int max_digits10
  = (2 + (106) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() noexcept { return 4.94065645841246544176568792868221e-324L; }

      static constexpr long double
      round_error() noexcept { return 0.5L; }

      static constexpr int min_exponent = (-968);
      static constexpr int min_exponent10 = (-291);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() noexcept { return __builtin_huge_vall(); }

      static constexpr long double
      quiet_NaN() noexcept { return __builtin_nanl(""); }

      static constexpr long double
      signaling_NaN() noexcept { return __builtin_nansl(""); }

      static constexpr long double
      denorm_min() noexcept { return 4.94065645841246544176568792868221e-324L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };






}
# 41 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/chrono" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ctime" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ctime" 3
# 58 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/ctime" 3
namespace std
{
  using ::clock_t;
  using ::time_t;
  using ::tm;

  using ::clock;
  using ::difftime;
  using ::mktime;
  using ::time;
  using ::asctime;
  using ::ctime;
  using ::gmtime;
  using ::localtime;
  using ::strftime;
}
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/chrono" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/parse_numbers.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/parse_numbers.h" 3





namespace std __attribute__ ((__visibility__ ("default")))
{


namespace __parse_int {

  template<unsigned _Base, char _Dig>
    struct _Digit;

  template<unsigned _Base>
    struct _Digit<_Base, '0'>
    {
      static constexpr bool valid{true};
      static constexpr unsigned value{0};
    };

  template<unsigned _Base>
    struct _Digit<_Base, '1'>
    {
      static constexpr bool valid{true};
      static constexpr unsigned value{1};
    };

  template<unsigned _Base>
    struct _Digit<_Base, '2'>
    {
      static_assert(_Base > 2, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{2};
    };

  template<unsigned _Base>
    struct _Digit<_Base, '3'>
    {
      static_assert(_Base > 3, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{3};
    };

  template<unsigned _Base>
    struct _Digit<_Base, '4'>
    {
      static_assert(_Base > 4, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{4};
    };

  template<unsigned _Base>
    struct _Digit<_Base, '5'>
    {
      static_assert(_Base > 5, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{5};
    };

  template<unsigned _Base>
    struct _Digit<_Base, '6'>
    {
      static_assert(_Base > 6, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{6};
    };

  template<unsigned _Base>
    struct _Digit<_Base, '7'>
    {
      static_assert(_Base > 7, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{7};
    };

  template<unsigned _Base>
    struct _Digit<_Base, '8'>
    {
      static_assert(_Base > 8, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{8};
    };

  template<unsigned _Base>
    struct _Digit<_Base, '9'>
    {
      static_assert(_Base > 9, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{9};
    };

  template<unsigned _Base>
    struct _Digit<_Base, 'a'>
    {
      static_assert(_Base > 0xa, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{0xa};
    };

  template<unsigned _Base>
    struct _Digit<_Base, 'A'>
    {
      static_assert(_Base > 0xa, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{0xa};
    };

  template<unsigned _Base>
    struct _Digit<_Base, 'b'>
    {
      static_assert(_Base > 0xb, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{0xb};
    };

  template<unsigned _Base>
    struct _Digit<_Base, 'B'>
    {
      static_assert(_Base > 0xb, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{0xb};
    };

  template<unsigned _Base>
    struct _Digit<_Base, 'c'>
    {
      static_assert(_Base > 0xc, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{0xc};
    };

  template<unsigned _Base>
    struct _Digit<_Base, 'C'>
    {
      static_assert(_Base > 0xc, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{0xc};
    };

  template<unsigned _Base>
    struct _Digit<_Base, 'd'>
    {
      static_assert(_Base > 0xd, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{0xd};
    };

  template<unsigned _Base>
    struct _Digit<_Base, 'D'>
    {
      static_assert(_Base > 0xd, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{0xd};
    };

  template<unsigned _Base>
    struct _Digit<_Base, 'e'>
    {
      static_assert(_Base > 0xe, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{0xe};
    };

  template<unsigned _Base>
    struct _Digit<_Base, 'E'>
    {
      static_assert(_Base > 0xe, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{0xe};
    };

  template<unsigned _Base>
    struct _Digit<_Base, 'f'>
    {
      static_assert(_Base > 0xf, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{0xf};
    };

  template<unsigned _Base>
    struct _Digit<_Base, 'F'>
    {
      static_assert(_Base > 0xf, "invalid digit");
      static constexpr bool valid{true};
      static constexpr unsigned value{0xf};
    };


  template<unsigned _Base>
    struct _Digit<_Base, '\''>
    {
      static constexpr bool valid{false};
      static constexpr unsigned value{0};
    };




  template<unsigned _Base, char _Dig, char... _Digs>
    struct _Digits_help
    {
      static constexpr unsigned
 value{_Digit<_Base, _Dig>::valid ?
       1U + _Digits_help<_Base, _Digs...>::value :
       _Digits_help<_Base, _Digs...>::value};
    };

  template<unsigned _Base, char _Dig>
    struct _Digits_help<_Base, _Dig>
    {
      static constexpr unsigned value{_Digit<_Base, _Dig>::valid ? 1U : 0U};
    };

  template<unsigned _Base, char... _Digs>
    struct _Digits
    {
      static constexpr unsigned value{_Digits_help<_Base, _Digs...>::value};
    };

  template<unsigned _Base>
    struct _Digits<_Base>
    {
      static constexpr unsigned value{0U};
    };



  template<unsigned _Base, char _Dig, char... _Digs>
    struct _Power_help
    {
      static constexpr unsigned
 value{_Digit<_Base, _Dig>::valid ?
       _Base * _Power_help<_Base, _Digs...>::value :
       _Power_help<_Base, _Digs...>::value};
    };

  template<unsigned _Base, char _Dig>
    struct _Power_help<_Base, _Dig>
    {
      static constexpr unsigned value{_Digit<_Base, _Dig>::valid ? 1U : 0U};
    };

  template<unsigned _Base, char... _Digs>
    struct _Power
    {
      static constexpr unsigned value{_Power_help<_Base, _Digs...>::value};
    };

  template<unsigned _Base>
    struct _Power<_Base>
    {
      static constexpr unsigned value{0U};
    };



  template<unsigned _Base, unsigned _Pow, char _Dig, char... _Digs>
    struct _Number_help
    {
      static constexpr unsigned
 value{_Digit<_Base, _Dig>::valid ?
       _Pow * _Digit<_Base, _Dig>::value
       + _Number_help<_Base, _Pow / _Base, _Digs...>::value :
       _Number_help<_Base, _Pow, _Digs...>::value};
    };

  template<unsigned _Base, unsigned _Pow, char _Dig>
    struct _Number_help<_Base, _Pow, _Dig>
    {

      static constexpr unsigned
 value{_Digit<_Base, _Dig>::valid ? _Digit<_Base, _Dig>::value : 0U};
    };

  template<unsigned _Base, char... _Digs>
    struct _Number
    {
      static constexpr unsigned
 value{_Number_help<_Base, _Power<_Base, _Digs...>::value,
      _Digs...>::value};
    };

  template<unsigned _Base>
    struct _Number<_Base>
    {
      static constexpr unsigned value{0U};
    };




  template<char... _Digs>
    struct _Parse_int;

  template<char... _Digs>
    struct _Parse_int<'0', 'b', _Digs...>
    {
      static constexpr unsigned long long
 value{_Number<2U, _Digs...>::value};
    };

  template<char... _Digs>
    struct _Parse_int<'0', 'B', _Digs...>
    {
      static constexpr unsigned long long
 value{_Number<2U, _Digs...>::value};
    };

  template<char... _Digs>
    struct _Parse_int<'0', 'x', _Digs...>
    {
      static constexpr unsigned long long
 value{_Number<16U, _Digs...>::value};
    };

  template<char... _Digs>
    struct _Parse_int<'0', 'X', _Digs...>
    {
      static constexpr unsigned long long
 value{_Number<16U, _Digs...>::value};
    };

  template<char... _Digs>
    struct _Parse_int<'0', _Digs...>
    {
      static constexpr unsigned long long
 value{_Number<8U, _Digs...>::value};
    };

  template<char... _Digs>
    struct _Parse_int
    {
      static constexpr unsigned long long
 value{_Number<10U, _Digs...>::value};
    };

}


namespace __select_int {

  template<unsigned long long _Val, typename... _Ints>
    struct _Select_int_base;

  template<unsigned long long _Val, typename _IntType, typename... _Ints>
    struct _Select_int_base<_Val, _IntType, _Ints...>
    : integral_constant
      <
 typename conditional
 <
   _Val <= static_cast<unsigned long long>
      (std::numeric_limits<_IntType>::max()),
   _IntType,
   typename _Select_int_base<_Val, _Ints...>::value_type
 >::type,
 _Val
      >
    { };

  template<unsigned long long _Val>
    struct _Select_int_base<_Val> : integral_constant<unsigned long long, _Val>
    { };

  template<char... _Digs>
    struct _Select_int
    : _Select_int_base<
 __parse_int::_Parse_int<_Digs...>::value,
 unsigned char,
 unsigned short,
 unsigned int,
 unsigned long,
 unsigned long long
      >
    { };

}


}
# 43 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/chrono" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/chrono" 3
  namespace chrono
  {


    template<typename _Rep, typename _Period = ratio<1>>
      struct duration;

    template<typename _Clock, typename _Dur = typename _Clock::duration>
      struct time_point;


  }





  template<typename _CT, typename _Period1, typename _Period2>
    struct __duration_common_type_wrapper
    {
    private:
      typedef __static_gcd<_Period1::num, _Period2::num> __gcd_num;
      typedef __static_gcd<_Period1::den, _Period2::den> __gcd_den;
      typedef typename _CT::type __cr;
      typedef ratio<__gcd_num::value,
        (_Period1::den / __gcd_den::value) * _Period2::den> __r;
    public:
      typedef __success_type<chrono::duration<__cr, __r>> type;
    };

  template<typename _Period1, typename _Period2>
    struct __duration_common_type_wrapper<__failure_type, _Period1, _Period2>
    { typedef __failure_type type; };

  template<typename _Rep1, typename _Period1, typename _Rep2, typename _Period2>
    struct common_type<chrono::duration<_Rep1, _Period1>,
             chrono::duration<_Rep2, _Period2>>
    : public __duration_common_type_wrapper<typename __member_type_wrapper<
             common_type<_Rep1, _Rep2>>::type, _Period1, _Period2>::type
    { };



  template<typename _CT, typename _Clock>
    struct __timepoint_common_type_wrapper
    {
      typedef __success_type<chrono::time_point<_Clock, typename _CT::type>>
        type;
    };

  template<typename _Clock>
    struct __timepoint_common_type_wrapper<__failure_type, _Clock>
    { typedef __failure_type type; };

  template<typename _Clock, typename _Duration1, typename _Duration2>
    struct common_type<chrono::time_point<_Clock, _Duration1>,
             chrono::time_point<_Clock, _Duration2>>
    : public __timepoint_common_type_wrapper<typename __member_type_wrapper<
             common_type<_Duration1, _Duration2>>::type, _Clock>::type
    { };



  namespace chrono
  {



    template<typename _ToDur, typename _CF, typename _CR,
      bool _NumIsOne = false, bool _DenIsOne = false>
      struct __duration_cast_impl
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(static_cast<_CR>(__d.count())
       * static_cast<_CR>(_CF::num)
       / static_cast<_CR>(_CF::den)));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, true, true>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(__d.count()));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, true, false>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(
       static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
   }
      };

    template<typename _ToDur, typename _CF, typename _CR>
      struct __duration_cast_impl<_ToDur, _CF, _CR, false, true>
      {
 template<typename _Rep, typename _Period>
   static constexpr _ToDur
   __cast(const duration<_Rep, _Period>& __d)
   {
     typedef typename _ToDur::rep __to_rep;
     return _ToDur(static_cast<__to_rep>(
       static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
   }
      };

    template<typename _Tp>
      struct __is_duration
      : std::false_type
      { };

    template<typename _Rep, typename _Period>
      struct __is_duration<duration<_Rep, _Period>>
      : std::true_type
      { };


    template<typename _ToDur, typename _Rep, typename _Period>
      constexpr typename enable_if<__is_duration<_ToDur>::value,
       _ToDur>::type
      duration_cast(const duration<_Rep, _Period>& __d)
      {
 typedef typename _ToDur::period __to_period;
 typedef typename _ToDur::rep __to_rep;
 typedef ratio_divide<_Period, __to_period> __cf;
 typedef typename common_type<__to_rep, _Rep, intmax_t>::type
          __cr;
 typedef __duration_cast_impl<_ToDur, __cf, __cr,
          __cf::num == 1, __cf::den == 1> __dc;
 return __dc::__cast(__d);
      }


    template<typename _Rep>
      struct treat_as_floating_point
      : is_floating_point<_Rep>
      { };


    template<typename _Rep>
      struct duration_values
      {
 static constexpr _Rep
 zero()
 { return _Rep(0); }

 static constexpr _Rep
 max()
 { return numeric_limits<_Rep>::max(); }

 static constexpr _Rep
 min()
 { return numeric_limits<_Rep>::lowest(); }
      };

    template<typename _Tp>
      struct __is_ratio
      : std::false_type
      { };

    template<intmax_t _Num, intmax_t _Den>
      struct __is_ratio<ratio<_Num, _Den>>
      : std::true_type
      { };


    template<typename _Rep, typename _Period>
      struct duration
      {
 typedef _Rep rep;
 typedef _Period period;

 static_assert(!__is_duration<_Rep>::value, "rep cannot be a duration");
 static_assert(__is_ratio<_Period>::value,
        "period must be a specialization of ratio");
 static_assert(_Period::num > 0, "period must be positive");


 constexpr duration() = default;




 duration(const duration&) = default;

 template<typename _Rep2, typename = typename
        enable_if<is_convertible<_Rep2, rep>::value
    && (treat_as_floating_point<rep>::value
        || !treat_as_floating_point<_Rep2>::value)>::type>
   constexpr explicit duration(const _Rep2& __rep)
   : __r(static_cast<rep>(__rep)) { }

 template<typename _Rep2, typename _Period2, typename = typename
        enable_if<treat_as_floating_point<rep>::value
    || (ratio_divide<_Period2, period>::den == 1
        && !treat_as_floating_point<_Rep2>::value)>::type>
   constexpr duration(const duration<_Rep2, _Period2>& __d)
   : __r(duration_cast<duration>(__d).count()) { }

 ~duration() = default;
 duration& operator=(const duration&) = default;


 constexpr rep
 count() const
 { return __r; }


 constexpr duration
 operator+() const
 { return *this; }

 constexpr duration
 operator-() const
 { return duration(-__r); }

 duration&
 operator++()
 {
   ++__r;
   return *this;
 }

 duration
 operator++(int)
 { return duration(__r++); }

 duration&
 operator--()
 {
   --__r;
   return *this;
 }

 duration
 operator--(int)
 { return duration(__r--); }

 duration&
 operator+=(const duration& __d)
 {
   __r += __d.count();
   return *this;
 }

 duration&
 operator-=(const duration& __d)
 {
   __r -= __d.count();
   return *this;
 }

 duration&
 operator*=(const rep& __rhs)
 {
   __r *= __rhs;
   return *this;
 }

 duration&
 operator/=(const rep& __rhs)
 {
   __r /= __rhs;
   return *this;
 }


 template<typename _Rep2 = rep>
   typename enable_if<!treat_as_floating_point<_Rep2>::value,
        duration&>::type
   operator%=(const rep& __rhs)
   {
     __r %= __rhs;
     return *this;
   }

 template<typename _Rep2 = rep>
   typename enable_if<!treat_as_floating_point<_Rep2>::value,
        duration&>::type
   operator%=(const duration& __d)
   {
     __r %= __d.count();
     return *this;
   }


 static constexpr duration
 zero()
 { return duration(duration_values<rep>::zero()); }

 static constexpr duration
 min()
 { return duration(duration_values<rep>::min()); }

 static constexpr duration
 max()
 { return duration(duration_values<rep>::max()); }

      private:
 rep __r;
      };

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator+(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() + __cd(__rhs).count());
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator-(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() - __cd(__rhs).count());
      }

    template<typename _Rep1, typename _Rep2, bool =
      is_convertible<_Rep2,
       typename common_type<_Rep1, _Rep2>::type>::value>
      struct __common_rep_type { };

    template<typename _Rep1, typename _Rep2>
      struct __common_rep_type<_Rep1, _Rep2, true>
      { typedef typename common_type<_Rep1, _Rep2>::type type; };

    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr
      duration<typename __common_rep_type<_Rep1, _Rep2>::type, _Period>
      operator*(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() * __s);
      }

    template<typename _Rep1, typename _Rep2, typename _Period>
      constexpr
      duration<typename __common_rep_type<_Rep2, _Rep1>::type, _Period>
      operator*(const _Rep1& __s, const duration<_Rep2, _Period>& __d)
      { return __d * __s; }

    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr duration<typename __common_rep_type<_Rep1, typename
 enable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>
      operator/(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() / __s);
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<_Rep1, _Rep2>::type
      operator/(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__lhs).count() / __cd(__rhs).count();
      }


    template<typename _Rep1, typename _Period, typename _Rep2>
      constexpr duration<typename __common_rep_type<_Rep1, typename
 enable_if<!__is_duration<_Rep2>::value, _Rep2>::type>::type, _Period>
      operator%(const duration<_Rep1, _Period>& __d, const _Rep2& __s)
      {
 typedef duration<typename common_type<_Rep1, _Rep2>::type, _Period>
   __cd;
 return __cd(__cd(__d).count() % __s);
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr typename common_type<duration<_Rep1, _Period1>,
         duration<_Rep2, _Period2>>::type
      operator%(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __cd;
 return __cd(__cd(__lhs).count() % __cd(__rhs).count());
      }


    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator==(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __ct;
 return __ct(__lhs).count() == __ct(__rhs).count();
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator<(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<__dur1,__dur2>::type __ct;
 return __ct(__lhs).count() < __ct(__rhs).count();
      }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator!=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__lhs == __rhs); }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator<=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__rhs < __lhs); }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator>(const duration<_Rep1, _Period1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      { return __rhs < __lhs; }

    template<typename _Rep1, typename _Period1,
      typename _Rep2, typename _Period2>
      constexpr bool
      operator>=(const duration<_Rep1, _Period1>& __lhs,
   const duration<_Rep2, _Period2>& __rhs)
      { return !(__lhs < __rhs); }


    typedef duration<int64_t, nano> nanoseconds;


    typedef duration<int64_t, micro> microseconds;


    typedef duration<int64_t, milli> milliseconds;


    typedef duration<int64_t> seconds;


    typedef duration<int64_t, ratio< 60>> minutes;


    typedef duration<int64_t, ratio<3600>> hours;


    template<typename _Clock, typename _Dur>
      struct time_point
      {
 typedef _Clock clock;
 typedef _Dur duration;
 typedef typename duration::rep rep;
 typedef typename duration::period period;

 constexpr time_point() : __d(duration::zero())
 { }

 constexpr explicit time_point(const duration& __dur)
 : __d(__dur)
 { }


 template<typename _Dur2>
   constexpr time_point(const time_point<clock, _Dur2>& __t)
   : __d(__t.time_since_epoch())
   { }


 constexpr duration
 time_since_epoch() const
 { return __d; }


 time_point&
 operator+=(const duration& __dur)
 {
   __d += __dur;
   return *this;
 }

 time_point&
 operator-=(const duration& __dur)
 {
   __d -= __dur;
   return *this;
 }


 static constexpr time_point
 min()
 { return time_point(duration::min()); }

 static constexpr time_point
 max()
 { return time_point(duration::max()); }

      private:
 duration __d;
      };


    template<typename _ToDur, typename _Clock, typename _Dur>
      constexpr typename enable_if<__is_duration<_ToDur>::value,
       time_point<_Clock, _ToDur>>::type
      time_point_cast(const time_point<_Clock, _Dur>& __t)
      {
 typedef time_point<_Clock, _ToDur> __time_point;
 return __time_point(duration_cast<_ToDur>(__t.time_since_epoch()));
      }

    template<typename _Clock, typename _Dur1,
      typename _Rep2, typename _Period2>
      constexpr time_point<_Clock,
 typename common_type<_Dur1, duration<_Rep2, _Period2>>::type>
      operator+(const time_point<_Clock, _Dur1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<_Dur1,__dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__lhs.time_since_epoch() + __rhs);
      }

    template<typename _Rep1, typename _Period1,
      typename _Clock, typename _Dur2>
      constexpr time_point<_Clock,
 typename common_type<duration<_Rep1, _Period1>, _Dur2>::type>
      operator+(const duration<_Rep1, _Period1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      {
 typedef duration<_Rep1, _Period1> __dur1;
 typedef typename common_type<__dur1,_Dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__rhs.time_since_epoch() + __lhs);
      }

    template<typename _Clock, typename _Dur1,
      typename _Rep2, typename _Period2>
      constexpr time_point<_Clock,
 typename common_type<_Dur1, duration<_Rep2, _Period2>>::type>
      operator-(const time_point<_Clock, _Dur1>& __lhs,
  const duration<_Rep2, _Period2>& __rhs)
      {
 typedef duration<_Rep2, _Period2> __dur2;
 typedef typename common_type<_Dur1,__dur2>::type __ct;
 typedef time_point<_Clock, __ct> __time_point;
 return __time_point(__lhs.time_since_epoch() -__rhs);
      }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr typename common_type<_Dur1, _Dur2>::type
      operator-(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() - __rhs.time_since_epoch(); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator==(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() == __rhs.time_since_epoch(); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator!=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__lhs == __rhs); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator<(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __lhs.time_since_epoch() < __rhs.time_since_epoch(); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator<=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__rhs < __lhs); }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator>(const time_point<_Clock, _Dur1>& __lhs,
  const time_point<_Clock, _Dur2>& __rhs)
      { return __rhs < __lhs; }

    template<typename _Clock, typename _Dur1, typename _Dur2>
      constexpr bool
      operator>=(const time_point<_Clock, _Dur1>& __lhs,
   const time_point<_Clock, _Dur2>& __rhs)
      { return !(__lhs < __rhs); }
# 709 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/chrono" 3
    inline namespace _V2 {






    struct system_clock
    {
      typedef chrono::nanoseconds duration;
      typedef duration::rep rep;
      typedef duration::period period;
      typedef chrono::time_point<system_clock, duration> time_point;

      static_assert(system_clock::duration::min()
      < system_clock::duration::zero(),
      "a clock's minimum duration cannot be less than its epoch");

      static constexpr bool is_steady = false;

      static time_point
      now() noexcept;


      static std::time_t
      to_time_t(const time_point& __t) noexcept
      {
 return std::time_t(duration_cast<chrono::seconds>
      (__t.time_since_epoch()).count());
      }

      static time_point
      from_time_t(std::time_t __t) noexcept
      {
 typedef chrono::time_point<system_clock, seconds> __from;
 return time_point_cast<system_clock::duration>
        (__from(chrono::seconds(__t)));
      }
    };







    struct steady_clock
    {
      typedef chrono::nanoseconds duration;
      typedef duration::rep rep;
      typedef duration::period period;
      typedef chrono::time_point<steady_clock, duration> time_point;

      static constexpr bool is_steady = true;

      static time_point
      now() noexcept;
    };
# 776 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/chrono" 3
    using high_resolution_clock = system_clock;

    }


  }





  inline namespace literals
  {
  inline namespace chrono_literals
  {

    namespace __select_type
    {

      using namespace __parse_int;

      template<unsigned long long _Val, typename _Dur>
 struct _Select_type
 : conditional<
     _Val <= static_cast<unsigned long long>
        (numeric_limits<typename _Dur::rep>::max()),
     _Dur, void>
 {
   static constexpr typename _Select_type::type
     value{static_cast<typename _Select_type::type>(_Val)};
 };

      template<unsigned long long _Val, typename _Dur>
 constexpr typename _Select_type<_Val, _Dur>::type
 _Select_type<_Val, _Dur>::value;

    }

    constexpr chrono::duration<long double, ratio<3600,1>>
    operator""h(long double __hours)
    { return chrono::duration<long double, ratio<3600,1>>{__hours}; }

    template <char... _Digits>
      constexpr typename
      __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,
        chrono::hours>::type
      operator""h()
      {
 return __select_type::_Select_type<
     __select_int::_Select_int<_Digits...>::value,
     chrono::hours>::value;
      }

    constexpr chrono::duration<long double, ratio<60,1>>
    operator""min(long double __mins)
    { return chrono::duration<long double, ratio<60,1>>{__mins}; }

    template <char... _Digits>
      constexpr typename
      __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,
        chrono::minutes>::type
      operator""min()
      {
 return __select_type::_Select_type<
     __select_int::_Select_int<_Digits...>::value,
     chrono::minutes>::value;
      }

    constexpr chrono::duration<long double>
    operator""s(long double __secs)
    { return chrono::duration<long double>{__secs}; }

    template <char... _Digits>
      constexpr typename
      __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,
        chrono::seconds>::type
      operator""s()
      {
 return __select_type::_Select_type<
     __select_int::_Select_int<_Digits...>::value,
     chrono::seconds>::value;
      }

    constexpr chrono::duration<long double, milli>
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr typename
      __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,
        chrono::milliseconds>::type
      operator""ms()
      {
 return __select_type::_Select_type<
     __select_int::_Select_int<_Digits...>::value,
     chrono::milliseconds>::value;
      }

    constexpr chrono::duration<long double, micro>
    operator""us(long double __usecs)
    { return chrono::duration<long double, micro>{__usecs}; }

    template <char... _Digits>
      constexpr typename
      __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,
        chrono::microseconds>::type
      operator""us()
      {
 return __select_type::_Select_type<
     __select_int::_Select_int<_Digits...>::value,
     chrono::microseconds>::value;
      }

    constexpr chrono::duration<long double, nano>
    operator""ns(long double __nsecs)
    { return chrono::duration<long double, nano>{__nsecs}; }

    template <char... _Digits>
      constexpr typename
      __select_type::_Select_type<__select_int::_Select_int<_Digits...>::value,
        chrono::nanoseconds>::type
      operator""ns()
      {
 return __select_type::_Select_type<
     __select_int::_Select_int<_Digits...>::value,
     chrono::nanoseconds>::value;
      }

  }
  }

  namespace chrono
  {


  using namespace literals::chrono_literals;


  }




}
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/mutex" 2 3



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/system_error" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/system_error" 3






# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/error_constants.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/error_constants.h" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cerrno" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cerrno" 3

# 1 "/usr/include/errno.h" 1 3 4
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cerrno" 2 3
# 35 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/error_constants.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  enum class errc
    {
      address_family_not_supported = 97,
      address_in_use = 98,
      address_not_available = 99,
      already_connected = 106,
      argument_list_too_long = 7,
      argument_out_of_domain = 33,
      bad_address = 14,
      bad_file_descriptor = 9,


      bad_message = 74,


      broken_pipe = 32,
      connection_aborted = 103,
      connection_already_in_progress = 114,
      connection_refused = 111,
      connection_reset = 104,
      cross_device_link = 18,
      destination_address_required = 89,
      device_or_resource_busy = 16,
      directory_not_empty = 39,
      executable_format_error = 8,
      file_exists = 17,
      file_too_large = 27,
      filename_too_long = 36,
      function_not_supported = 38,
      host_unreachable = 113,


      identifier_removed = 43,


      illegal_byte_sequence = 84,
      inappropriate_io_control_operation = 25,
      interrupted = 4,
      invalid_argument = 22,
      invalid_seek = 29,
      io_error = 5,
      is_a_directory = 21,
      message_size = 90,
      network_down = 100,
      network_reset = 102,
      network_unreachable = 101,
      no_buffer_space = 105,
      no_child_process = 10,


      no_link = 67,


      no_lock_available = 37,


      no_message_available = 61,


      no_message = 42,
      no_protocol_option = 92,
      no_space_on_device = 28,


      no_stream_resources = 63,


      no_such_device_or_address = 6,
      no_such_device = 19,
      no_such_file_or_directory = 2,
      no_such_process = 3,
      not_a_directory = 20,
      not_a_socket = 88,


      not_a_stream = 60,


      not_connected = 107,
      not_enough_memory = 12,


      not_supported = 95,



      operation_canceled = 125,


      operation_in_progress = 115,
      operation_not_permitted = 1,
      operation_not_supported = 95,
      operation_would_block = 11,


      owner_dead = 130,


      permission_denied = 13,


      protocol_error = 71,


      protocol_not_supported = 93,
      read_only_file_system = 30,
      resource_deadlock_would_occur = 35,
      resource_unavailable_try_again = 11,
      result_out_of_range = 34,


      state_not_recoverable = 131,



      stream_timeout = 62,



      text_file_busy = 26,


      timed_out = 110,
      too_many_files_open_in_system = 23,
      too_many_files_open = 24,
      too_many_links = 31,
      too_many_symbolic_link_levels = 40,


      value_too_large = 75,


      wrong_protocol_type = 91
    };


}
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/system_error" 2 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  class error_code;
  class error_condition;
  class error_category;
  class system_error;


  template<typename _Tp>
    struct is_error_code_enum : public false_type { };


  template<typename _Tp>
    struct is_error_condition_enum : public false_type { };

  template<>
    struct is_error_condition_enum<errc>
    : public true_type { };



  class error_category
  {
  public:



    constexpr error_category() noexcept = default;


    virtual ~error_category();

    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;

    virtual const char*
    name() const noexcept = 0;

    virtual string
    message(int) const = 0;

    virtual error_condition
    default_error_condition(int __i) const noexcept;

    virtual bool
    equivalent(int __i, const error_condition& __cond) const noexcept;

    virtual bool
    equivalent(const error_code& __code, int __i) const noexcept;

    bool
    operator<(const error_category& __other) const noexcept
    { return less<const error_category*>()(this, &__other); }

    bool
    operator==(const error_category& __other) const noexcept
    { return this == &__other; }

    bool
    operator!=(const error_category& __other) const noexcept
    { return this != &__other; }
  };


  __attribute__ ((__const__)) const error_category& system_category() noexcept;
  __attribute__ ((__const__)) const error_category& generic_category() noexcept;

  error_code make_error_code(errc) noexcept;

  template<typename _Tp>
    struct hash;



  struct error_code
  {
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorCodeEnum, typename = typename
      enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type>
      error_code(_ErrorCodeEnum __e) noexcept
      { *this = make_error_code(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }

    void
    clear() noexcept
    { assign(0, system_category()); }


    template<typename _ErrorCodeEnum>
      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,
    error_code&>::type
      operator=(_ErrorCodeEnum __e) noexcept
      { return *this = make_error_code(__e); }

    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    error_condition
    default_error_condition() const noexcept;

    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0 ? true : false; }


  private:
    friend class hash<error_code>;

    int _M_value;
    const error_category* _M_cat;
  };


  inline error_code
  make_error_code(errc __e) noexcept
  { return error_code(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
    { return (__os << __e.category().name() << ':' << __e.value()); }

  error_condition make_error_condition(errc) noexcept;



  struct error_condition
  {
    error_condition() noexcept
    : _M_value(0), _M_cat(&generic_category()) { }

    error_condition(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorConditionEnum, typename = typename
  enable_if<is_error_condition_enum<_ErrorConditionEnum>::value>::type>
      error_condition(_ErrorConditionEnum __e) noexcept
      { *this = make_error_condition(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }


    template<typename _ErrorConditionEnum>
      typename enable_if<is_error_condition_enum
    <_ErrorConditionEnum>::value, error_condition&>::type
      operator=(_ErrorConditionEnum __e) noexcept
      { return *this = make_error_condition(__e); }

    void
    clear() noexcept
    { assign(0, generic_category()); }


    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0 ? true : false; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };


  inline error_condition
  make_error_condition(errc __e) noexcept
  { return error_condition(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_condition& __lhs,
     const error_condition& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }


  inline bool
  operator==(const error_code& __lhs, const error_code& __rhs) noexcept
  { return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value()); }

  inline bool
  operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
  {
    return (__lhs.category().equivalent(__lhs.value(), __rhs)
     || __rhs.category().equivalent(__lhs, __rhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
  {
    return (__rhs.category().equivalent(__rhs.value(), __lhs)
     || __lhs.category().equivalent(__rhs, __lhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  {
    return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value());
  }

  inline bool
  operator!=(const error_code& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }







  class system_error : public std::runtime_error
  {
  private:
    error_code _M_code;

  public:
    system_error(error_code __ec = error_code())
    : runtime_error(__ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + ": " + __ec.message()), _M_code(__ec) { }
# 335 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/system_error" 3
    system_error(int __v, const error_category& __ecat)
    : runtime_error(error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    system_error(int __v, const error_category& __ecat, const string& __what)
    : runtime_error(__what + ": " + error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    virtual ~system_error() noexcept;

    const error_code&
    code() const noexcept { return _M_code; }
  };


}





namespace std __attribute__ ((__visibility__ ("default")))
{




  template<>
    struct hash<error_code>
    : public __hash_base<size_t, error_code>
    {
      size_t
      operator()(const error_code& __e) const noexcept
      {
 const size_t __tmp = std::_Hash_impl::hash(__e._M_value);
 return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);
      }
    };


}
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/mutex" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{




  class __mutex_base
  {
  protected:
    typedef __gthread_mutex_t __native_type;


    __native_type _M_mutex = { { 0, 0, 0, 0, 0, 0, 0, { 0, 0 } } };

    constexpr __mutex_base() noexcept = default;
# 78 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/mutex" 3
    __mutex_base(const __mutex_base&) = delete;
    __mutex_base& operator=(const __mutex_base&) = delete;
  };


  class __recursive_mutex_base
  {
  protected:
    typedef __gthread_recursive_mutex_t __native_type;

    __recursive_mutex_base(const __recursive_mutex_base&) = delete;
    __recursive_mutex_base& operator=(const __recursive_mutex_base&) = delete;


    __native_type _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0, { 0, 0 } } };

    __recursive_mutex_base() = default;
# 107 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/mutex" 3
  };
# 118 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/mutex" 3
  class mutex : private __mutex_base
  {
  public:
    typedef __native_type* native_handle_type;


    constexpr

    mutex() noexcept = default;
    ~mutex() = default;

    mutex(const mutex&) = delete;
    mutex& operator=(const mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    bool
    try_lock() noexcept
    {

      return !__gthread_mutex_trylock(&_M_mutex);
    }

    void
    unlock()
    {

      __gthread_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle()
    { return &_M_mutex; }
  };


  class recursive_mutex : private __recursive_mutex_base
  {
  public:
    typedef __native_type* native_handle_type;

    recursive_mutex() = default;
    ~recursive_mutex() = default;

    recursive_mutex(const recursive_mutex&) = delete;
    recursive_mutex& operator=(const recursive_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_recursive_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    bool
    try_lock() noexcept
    {

      return !__gthread_recursive_mutex_trylock(&_M_mutex);
    }

    void
    unlock()
    {

      __gthread_recursive_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle()
    { return &_M_mutex; }
  };


  template<typename _Derived>
    class __timed_mutex_impl
    {
    protected:
      typedef chrono::high_resolution_clock __clock_t;

      template<typename _Rep, typename _Period>
 bool
 _M_try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
 {
   using chrono::steady_clock;
   auto __rt = chrono::duration_cast<steady_clock::duration>(__rtime);
   if (ratio_greater<steady_clock::period, _Period>())
     ++__rt;
   return _M_try_lock_until(steady_clock::now() + __rt);
 }

      template<typename _Duration>
 bool
 _M_try_lock_until(const chrono::time_point<__clock_t,
         _Duration>& __atime)
 {
   auto __s = chrono::time_point_cast<chrono::seconds>(__atime);
   auto __ns = chrono::duration_cast<chrono::nanoseconds>(__atime - __s);

   __gthread_time_t __ts = {
     static_cast<std::time_t>(__s.time_since_epoch().count()),
     static_cast<long>(__ns.count())
   };

   auto __mutex = static_cast<_Derived*>(this)->native_handle();
   return !__gthread_mutex_timedlock(__mutex, &__ts);
 }

      template<typename _Clock, typename _Duration>
 bool
 _M_try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
 {
   auto __rtime = __atime - _Clock::now();
   return _M_try_lock_until(__clock_t::now() + __rtime);
 }
    };


  class timed_mutex
  : private __mutex_base, public __timed_mutex_impl<timed_mutex>
  {
  public:
    typedef __native_type* native_handle_type;

    timed_mutex() = default;
    ~timed_mutex() = default;

    timed_mutex(const timed_mutex&) = delete;
    timed_mutex& operator=(const timed_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    bool
    try_lock() noexcept
    {

      return !__gthread_mutex_trylock(&_M_mutex);
    }

    template <class _Rep, class _Period>
      bool
      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
      { return _M_try_lock_for(__rtime); }

    template <class _Clock, class _Duration>
      bool
      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
      { return _M_try_lock_until(__atime); }

    void
    unlock()
    {

      __gthread_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle()
    { return &_M_mutex; }
  };


  class recursive_timed_mutex
  : private __recursive_mutex_base,
    public __timed_mutex_impl<recursive_timed_mutex>
  {
  public:
    typedef __native_type* native_handle_type;

    recursive_timed_mutex() = default;
    ~recursive_timed_mutex() = default;

    recursive_timed_mutex(const recursive_timed_mutex&) = delete;
    recursive_timed_mutex& operator=(const recursive_timed_mutex&) = delete;

    void
    lock()
    {
      int __e = __gthread_recursive_mutex_lock(&_M_mutex);


      if (__e)
 __throw_system_error(__e);
    }

    bool
    try_lock() noexcept
    {

      return !__gthread_recursive_mutex_trylock(&_M_mutex);
    }

    template <class _Rep, class _Period>
      bool
      try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
      { return _M_try_lock_for(__rtime); }

    template <class _Clock, class _Duration>
      bool
      try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
      { return _M_try_lock_until(__atime); }

    void
    unlock()
    {

      __gthread_recursive_mutex_unlock(&_M_mutex);
    }

    native_handle_type
    native_handle()
    { return &_M_mutex; }
  };




  struct defer_lock_t { };


  struct try_to_lock_t { };



  struct adopt_lock_t { };

  constexpr defer_lock_t defer_lock { };
  constexpr try_to_lock_t try_to_lock { };
  constexpr adopt_lock_t adopt_lock { };




  template<typename _Mutex>
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { }

      ~lock_guard()
      { _M_device.unlock(); }

      lock_guard(const lock_guard&) = delete;
      lock_guard& operator=(const lock_guard&) = delete;

    private:
      mutex_type& _M_device;
    };


  template<typename _Mutex>
    class unique_lock
    {
    public:
      typedef _Mutex mutex_type;

      unique_lock() noexcept
      : _M_device(0), _M_owns(false)
      { }

      explicit unique_lock(mutex_type& __m)
      : _M_device(&__m), _M_owns(false)
      {
 lock();
 _M_owns = true;
      }

      unique_lock(mutex_type& __m, defer_lock_t) noexcept
      : _M_device(&__m), _M_owns(false)
      { }

      unique_lock(mutex_type& __m, try_to_lock_t)
      : _M_device(&__m), _M_owns(_M_device->try_lock())
      { }

      unique_lock(mutex_type& __m, adopt_lock_t)
      : _M_device(&__m), _M_owns(true)
      {

      }

      template<typename _Clock, typename _Duration>
 unique_lock(mutex_type& __m,
      const chrono::time_point<_Clock, _Duration>& __atime)
 : _M_device(&__m), _M_owns(_M_device->try_lock_until(__atime))
 { }

      template<typename _Rep, typename _Period>
 unique_lock(mutex_type& __m,
      const chrono::duration<_Rep, _Period>& __rtime)
 : _M_device(&__m), _M_owns(_M_device->try_lock_for(__rtime))
 { }

      ~unique_lock()
      {
 if (_M_owns)
   unlock();
      }

      unique_lock(const unique_lock&) = delete;
      unique_lock& operator=(const unique_lock&) = delete;

      unique_lock(unique_lock&& __u) noexcept
      : _M_device(__u._M_device), _M_owns(__u._M_owns)
      {
 __u._M_device = 0;
 __u._M_owns = false;
      }

      unique_lock& operator=(unique_lock&& __u) noexcept
      {
 if(_M_owns)
   unlock();

 unique_lock(std::move(__u)).swap(*this);

 __u._M_device = 0;
 __u._M_owns = false;

 return *this;
      }

      void
      lock()
      {
 if (!_M_device)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_owns)
   __throw_system_error(int(errc::resource_deadlock_would_occur));
 else
   {
     _M_device->lock();
     _M_owns = true;
   }
      }

      bool
      try_lock()
      {
 if (!_M_device)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_owns)
   __throw_system_error(int(errc::resource_deadlock_would_occur));
 else
   {
     _M_owns = _M_device->try_lock();
     return _M_owns;
   }
      }

      template<typename _Clock, typename _Duration>
 bool
 try_lock_until(const chrono::time_point<_Clock, _Duration>& __atime)
 {
   if (!_M_device)
     __throw_system_error(int(errc::operation_not_permitted));
   else if (_M_owns)
     __throw_system_error(int(errc::resource_deadlock_would_occur));
   else
     {
       _M_owns = _M_device->try_lock_until(__atime);
       return _M_owns;
     }
 }

      template<typename _Rep, typename _Period>
 bool
 try_lock_for(const chrono::duration<_Rep, _Period>& __rtime)
 {
   if (!_M_device)
     __throw_system_error(int(errc::operation_not_permitted));
   else if (_M_owns)
     __throw_system_error(int(errc::resource_deadlock_would_occur));
   else
     {
       _M_owns = _M_device->try_lock_for(__rtime);
       return _M_owns;
     }
  }

      void
      unlock()
      {
 if (!_M_owns)
   __throw_system_error(int(errc::operation_not_permitted));
 else if (_M_device)
   {
     _M_device->unlock();
     _M_owns = false;
   }
      }

      void
      swap(unique_lock& __u) noexcept
      {
 std::swap(_M_device, __u._M_device);
 std::swap(_M_owns, __u._M_owns);
      }

      mutex_type*
      release() noexcept
      {
 mutex_type* __ret = _M_device;
 _M_device = 0;
 _M_owns = false;
 return __ret;
      }

      bool
      owns_lock() const noexcept
      { return _M_owns; }

      explicit operator bool() const noexcept
      { return owns_lock(); }

      mutex_type*
      mutex() const noexcept
      { return _M_device; }

    private:
      mutex_type* _M_device;
      bool _M_owns;
    };


  template<typename _Mutex>
    inline void
    swap(unique_lock<_Mutex>& __x, unique_lock<_Mutex>& __y) noexcept
    { __x.swap(__y); }

  template<int _Idx>
    struct __unlock_impl
    {
      template<typename... _Lock>
 static void
 __do_unlock(tuple<_Lock&...>& __locks)
 {
   std::get<_Idx>(__locks).unlock();
   __unlock_impl<_Idx - 1>::__do_unlock(__locks);
 }
    };

  template<>
    struct __unlock_impl<-1>
    {
      template<typename... _Lock>
 static void
 __do_unlock(tuple<_Lock&...>&)
 { }
    };

  template<typename _Lock>
    unique_lock<_Lock>
    __try_to_lock(_Lock& __l)
    { return unique_lock<_Lock>(__l, try_to_lock); }

  template<int _Idx, bool _Continue = true>
    struct __try_lock_impl
    {
      template<typename... _Lock>
 static void
 __do_try_lock(tuple<_Lock&...>& __locks, int& __idx)
 {
          __idx = _Idx;
          auto __lock = __try_to_lock(std::get<_Idx>(__locks));
          if (__lock.owns_lock())
            {
              __try_lock_impl<_Idx + 1, _Idx + 2 < sizeof...(_Lock)>::
                __do_try_lock(__locks, __idx);
              if (__idx == -1)
                __lock.release();
            }
 }
    };

  template<int _Idx>
    struct __try_lock_impl<_Idx, false>
    {
      template<typename... _Lock>
 static void
 __do_try_lock(tuple<_Lock&...>& __locks, int& __idx)
 {
          __idx = _Idx;
          auto __lock = __try_to_lock(std::get<_Idx>(__locks));
          if (__lock.owns_lock())
            {
              __idx = -1;
              __lock.release();
            }
 }
    };
# 645 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/mutex" 3
  template<typename _Lock1, typename _Lock2, typename... _Lock3>
    int
    try_lock(_Lock1& __l1, _Lock2& __l2, _Lock3&... __l3)
    {
      int __idx;
      auto __locks = std::tie(__l1, __l2, __l3...);
      __try_lock_impl<0>::__do_try_lock(__locks, __idx);
      return __idx;
    }
# 666 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/mutex" 3
  template<typename _L1, typename _L2, typename ..._L3>
    void
    lock(_L1& __l1, _L2& __l2, _L3&... __l3)
    {
      while (true)
        {
          unique_lock<_L1> __first(__l1);
          int __idx;
          auto __locks = std::tie(__l2, __l3...);
          __try_lock_impl<0, sizeof...(_L3)>::__do_try_lock(__locks, __idx);
          if (__idx == -1)
            {
              __first.release();
              return;
            }
        }
    }



  struct once_flag
  {
  private:
    typedef __gthread_once_t __native_type;
    __native_type _M_once = 0;

  public:

    constexpr once_flag() noexcept = default;


    once_flag(const once_flag&) = delete;

    once_flag& operator=(const once_flag&) = delete;

    template<typename _Callable, typename... _Args>
      friend void
      call_once(once_flag& __once, _Callable&& __f, _Args&&... __args);
  };


  extern __thread void* __once_callable;
  extern __thread void (*__once_call)();

  template<typename _Callable>
    inline void
    __once_call_impl()
    {
      (*(_Callable*)__once_callable)();
    }
# 726 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/mutex" 3
  extern "C" void __once_proxy(void);


  template<typename _Callable, typename... _Args>
    void
    call_once(once_flag& __once, _Callable&& __f, _Args&&... __args)
    {

      auto __bound_functor = std::__bind_simple(std::forward<_Callable>(__f),
          std::forward<_Args>(__args)...);
      __once_callable = &__bound_functor;
      __once_call = &__once_call_impl<decltype(__bound_functor)>;
# 746 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/mutex" 3
      int __e = __gthread_once(&__once._M_once, &__once_proxy);






      if (__e)
 __throw_system_error(__e);
    }




}
# 17 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource.hpp" 2



# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource/event.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource/event.hpp"
namespace camp
{
namespace resources
{
  inline namespace v1
  {

    class Event
    {
    public:
      Event() {}
      template <typename T>
      explicit Event(T &&value)
      {
        m_value.reset(new EventModel<T>(value));
      }

      bool check() const { return m_value->check(); }
      void wait() const { m_value->wait(); }

      template <typename T>
      T *try_get()
      {
        auto result = dynamic_cast<EventModel<T> *>(m_value.get());
        return result->get();
      }
      template <typename T>
      T get()
      {
        auto result = dynamic_cast<EventModel<T> *>(m_value.get());
        if (result == nullptr) {
          throw std::runtime_error("Incompatible Event type get cast.");
        }
        return *result->get();
      }

    private:
      class EventInterface
      {
      public:
        virtual ~EventInterface() {}
        virtual bool check() const = 0;
        virtual void wait() const = 0;
      };

      template <typename T>
      class EventModel : public EventInterface
      {
      public:
        EventModel(T const &modelVal) : m_modelVal(modelVal) {}
        bool check() const override { return m_modelVal.check(); }
        void wait() const override { m_modelVal.wait(); }
        T *get() { return &m_modelVal; }

      private:
        T m_modelVal;
      };

      std::shared_ptr<EventInterface> m_value;
    };

  }
}
}
# 21 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource/host.hpp" 1
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource/host.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource/platform.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource/platform.hpp"
namespace camp
{
namespace resources
{
  inline namespace v1
  {

    enum class Platform {
      undefined = 0,
      host = 1,
      cuda = 2,
      omp_target = 4,
      hip = 8,
      sycl = 16
    };

  }
}
}
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource/host.hpp" 2

namespace camp
{
namespace resources
{
  inline namespace v1
  {

    class HostEvent
    {
    public:
      HostEvent() {}
      bool check() const { return true; }
      void wait() const {}
    };

    class Host
    {
    public:
      Host(int = -1) {}


      Platform get_platform() { return Platform::host; }
      static Host &get_default()
      {
        static Host h;
        return h;
      }
      HostEvent get_event() { return HostEvent(); }
      Event get_event_erased()
      {
        Event e{HostEvent()};
        return e;
      }
      void wait() {}
      void wait_for(Event *e) { e->wait(); }


      template <typename T>
      T *allocate(size_t n)
      {
        return (T *)malloc(sizeof(T) * n);
      }
      void *calloc(size_t size)
      {
        void *p = allocate<char>(size);
        this->memset(p, 0, size);
        return p;
      }
      void deallocate(void *p) { free(p); }
      void memcpy(void *dst, const void *src, size_t size) { std::memcpy(dst, src, size); }
      void memset(void *p, int val, size_t size) { std::memset(p, val, size); }
    };

  }
}
}
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource.hpp" 2


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource/cuda.hpp" 1
# 21 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource/cuda.hpp"
namespace camp
{
namespace resources
{
  inline namespace v1
  {

    namespace
    {
      struct device_guard {
        device_guard(int device)
        {
          cudaGetDevice(&prev_device);
          cudaSetDevice(device);
        }

        ~device_guard() { cudaSetDevice(prev_device); }

      int prev_device;
    };

    }

    class CudaEvent
    {
    public:
      CudaEvent(cudaStream_t stream)
      {
        cudaEventCreateWithFlags(&m_event, 0x02);
        cudaEventRecord(m_event, stream);
      }
      bool check() const { return (cudaEventQuery(m_event) == cudaSuccess); }
      void wait() const { cudaEventSynchronize(m_event); }
      cudaEvent_t getCudaEvent_t() const { return m_event; }

    private:
      cudaEvent_t m_event;
    };

    class Cuda
    {
      static cudaStream_t get_a_stream(int num)
      {
        static cudaStream_t streams[16] = {};
        static int previous = 0;

        static std::once_flag m_onceFlag;
        static std::mutex m_mtx;

        std::call_once(m_onceFlag, [] {
          if (streams[0] == nullptr) {
            for (auto &s : streams) {
              cudaStreamCreate(&s);
            }
          }
        });

        if (num < 0) {
          m_mtx.lock();
          previous = (previous + 1) % 16;
          m_mtx.unlock();
          return streams[previous];
        }

        return streams[num % 16];
      }

    private:
      Cuda(cudaStream_t s, int dev=0) : stream(s), device(dev) {}
    public:
      Cuda(int group = -1, int dev=0) : stream(get_a_stream(group)), device(dev) {}


      Platform get_platform() { return Platform::cuda; }
      static Cuda &get_default()
      {
        static Cuda c( [] {
          cudaStream_t s;



          cudaStreamCreate(&s);

          return s;
        }());
        return c;
      }

      CudaEvent get_event()
      {
        auto d{device_guard(device)};
        return CudaEvent(get_stream());
      }

      Event get_event_erased()
      {
        auto d{device_guard(device)};
        return Event{CudaEvent(get_stream())};
      }

      void wait()
      {
        auto d{device_guard(device)};
        cudaStreamSynchronize(stream);
      }

      void wait_for(Event *e)
      {
        auto *cuda_event = e->try_get<CudaEvent>();
        if (cuda_event) {
          auto d{device_guard(device)};
          cudaStreamWaitEvent(get_stream(), cuda_event->getCudaEvent_t(), 0);
        } else {
          e->wait();
        }
      }


      template <typename T>
      T *allocate(size_t size)
      {
        T *ret = nullptr;
        if (size > 0) {
          auto d{device_guard(device)};
          cudaMallocManaged(&ret, sizeof(T) * size);
        }
        return ret;
      }
      void *calloc(size_t size)
      {
        void *p = allocate<char>(size);
        this->memset(p, 0, size);
        return p;
      }
      void deallocate(void *p)
      {
        auto d{device_guard(device)};
        cudaFree(p);
      }
      void memcpy(void *dst, const void *src, size_t size)
      {
        if (size > 0) {
          auto d{device_guard(device)};
          cudaMemcpyAsync(dst, src, size, cudaMemcpyDefault, stream);
        }
      }
      void memset(void *p, int val, size_t size)
      {
        if (size > 0) {
          auto d{device_guard(device)};
          cudaMemsetAsync(p, val, size, stream);
        }
      }

      cudaStream_t get_stream() { return stream; }
      int get_device() { return device; }

    private:
      cudaStream_t stream;
      int device;
    };

  }
}
}
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource.hpp" 2
# 36 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource.hpp"
namespace camp
{
namespace resources
{
  inline namespace v1
  {

    class Resource
    {
    public:
      Resource(Resource &&) = default;
      Resource(Resource const &) = default;
      Resource &operator=(Resource &&) = default;
      Resource &operator=(Resource const &) = default;
      template <typename T,
                typename = typename std::enable_if<
                    !std::is_same<typename std::decay<T>::type,
                                  Resource>::value>::type>
      Resource(T &&value)
      {
        m_value.reset(new ContextModel<type::ref::rem<T>>(forward<T>(value)));
      }
      template <typename T>
      T *try_get()
      {
        auto result = dynamic_cast<ContextModel<T> *>(m_value.get());
        return result ? result->get() : nullptr;
      }
      template <typename T>
      T get()
      {
        auto result = dynamic_cast<ContextModel<T> *>(m_value.get());
        if (result == nullptr) {
          throw std::runtime_error("Incompatible Resource type get cast.");
        }
        return *result->get();
      }
      Platform get_platform() { return m_value->get_platform(); }
      template <typename T>
      T *allocate(size_t size)
      {
        return (T *)m_value->calloc(size * sizeof(T));
      }
      void *calloc(size_t size) { return m_value->calloc(size); }
      void deallocate(void *p) { m_value->deallocate(p); }
      void memcpy(void *dst, const void *src, size_t size)
      {
        m_value->memcpy(dst, src, size);
      }
      void memset(void *p, int val, size_t size)
      {
        m_value->memset(p, val, size);
      }
      Event get_event() { return m_value->get_event(); }
      void wait_for(Event *e) { m_value->wait_for(e); }

    private:
      class ContextInterface
      {
      public:
        virtual ~ContextInterface() {}
        virtual Platform get_platform() = 0;
        virtual void *calloc(size_t size) = 0;
        virtual void deallocate(void *p) = 0;
        virtual void memcpy(void *dst, const void *src, size_t size) = 0;
        virtual void memset(void *p, int val, size_t size) = 0;
        virtual Event get_event() = 0;
        virtual void wait_for(Event *e) = 0;
      };

      template <typename T>
      class ContextModel : public ContextInterface
      {
      public:
        ContextModel(T const &modelVal) : m_modelVal(modelVal) {}
        Platform get_platform() override { return m_modelVal.get_platform(); }
        void *calloc(size_t size) override { return m_modelVal.calloc(size); }
        void deallocate(void *p) override { m_modelVal.deallocate(p); }
        void memcpy(void *dst, const void *src, size_t size) override
        {
          m_modelVal.memcpy(dst, src, size);
        }
        void memset(void *p, int val, size_t size) override
        {
          m_modelVal.memset(p, val, size);
        }
        Event get_event() override { return m_modelVal.get_event_erased(); }
        void wait_for(Event *e) override { m_modelVal.wait_for(e); }
        T *get() { return &m_modelVal; }

      private:
        T m_modelVal;
      };

      std::shared_ptr<ContextInterface> m_value;
    };

    template <Platform p>
    struct resource_from_platform;
    template <>
    struct resource_from_platform<Platform::host> {
      using type = ::camp::resources::Host;
    };

    template <>
    struct resource_from_platform<Platform::cuda> {
      using type = ::camp::resources::Cuda;
    };
# 158 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/resource.hpp"
  template<typename Res>
  struct EventProxy {
    EventProxy(EventProxy &&) = default;
    EventProxy(EventProxy const &) = delete;
    EventProxy &operator=(EventProxy &&) = default;
    EventProxy &operator=(EventProxy const &) = delete;

    EventProxy(Res* r) :
      resource_{r}
    {}

    Event get() const {
      return resource_->get_event_erased();
    }

    operator Event() const {
      return resource_->get_event_erased();
    }

    Res* resource_;
  };

  }
}
}
# 33 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/camp_aliases.hpp" 2

namespace RAJA
{

using ::camp::at_v;

using ::camp::list;

using ::camp::idx_t;

using ::camp::make_tuple;

using ::camp::tuple;

using ::camp::resources::Platform;


template < camp::idx_t I, typename Tuple >
struct tuple_element;


template < camp::idx_t I, typename ... Ts >
struct tuple_element<I, tuple<Ts...>>
  : camp::tuple_element<I, tuple<Ts...>>
{ };


template < camp::idx_t I, typename Tuple >
using tuple_element_t = typename tuple_element<I, Tuple>::type;




template < camp::idx_t I, typename ... Ts >


__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) auto get(tuple<Ts...> & t)
  -> decltype(camp::get<I>(t))
{ return camp::get<I>( t ); }
template < camp::idx_t I, typename ... Ts >


__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) auto get(tuple<Ts...> const& t)
  -> decltype(camp::get<I>(t))
{ return camp::get<I>( t ); }
template < camp::idx_t I, typename ... Ts >


__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) auto get(tuple<Ts...> && t)
  -> decltype(camp::get<I>(std::move(t)))
{ return camp::get<I>(std::move(t)); }
template < camp::idx_t I, typename ... Ts >


__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) auto get(tuple<Ts...> const&& t)
  -> decltype(camp::get<I>(std::move(t)))
{ return camp::get<I>(std::move(t)); }

}
# 34 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/types.hpp" 1
# 33 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/types.hpp"
namespace RAJA
{





enum IndexOwnership { Unowned, Owned };




using Index_type = std::ptrdiff_t;





const int UndefinedValue = -9999999;





template <Index_type... Sizes>
struct SizeList {
};
# 72 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/types.hpp"
using Real_type = double;
# 109 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/types.hpp"
using TDRAReal_ptr = Real_type* __attribute__((aligned(RAJA::DATA_ALIGN)));

using const_TDRAReal_ptr = const TDRAReal_ptr;
# 661 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/types.hpp"
using Real_ptr = Real_type*;
using const_Real_ptr = const Real_type*;






using UnalignedReal_ptr = Real_type*;
using const_UnalignedReal_ptr = const Real_type*;
# 713 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/types.hpp"
}
# 36 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/plugins.hpp" 1
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/plugins.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PluginContext.hpp" 1
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PluginContext.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/PolicyBase.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/PolicyBase.hpp"
namespace RAJA
{

enum class Policy {
  undefined,
  sequential,
  loop,
  simd,
  openmp,
  target_openmp,
  cuda,
  hip,
  tbb
};

enum class Pattern {
  undefined,
  forall,
  region,
  reduce,
  taskgraph,
  synchronize,
  workgroup,
  workgroup_exec,
  workgroup_order,
  workgroup_storage
};

enum class Launch { undefined, sync, async };

struct PolicyBase {
};

template <Policy Policy_,
          Pattern Pattern_,
          Launch Launch_,
          Platform Platform_,
          typename... Traits>
struct PolicyBaseT : PolicyBase {
  static constexpr Policy policy = Policy_;
  static constexpr Pattern pattern = Pattern_;
  static constexpr Launch launch = Launch_;
  static constexpr Platform platform = Platform_;
};

template <typename PolicyType>
struct policy_of {
  static constexpr Policy value = PolicyType::policy;
};

template <typename PolicyType>
struct pattern_of {
  static constexpr Pattern value = PolicyType::pattern;
};

template <typename PolicyType>
struct launch_of {
  static constexpr Launch value = PolicyType::launch;
};

template <typename PolicyType>
struct platform_of {
  static constexpr Platform value = PolicyType::platform;
};

template <typename PolicyType, RAJA::Policy P_>
struct policy_is : camp::num<policy_of<camp::decay<PolicyType>>::value == P_> {
};

template <typename PolicyType, RAJA::Policy ... Ps_>
struct policy_any_of : camp::num<camp::concepts::any_of<policy_is<PolicyType, Ps_>...>::value> {
};

template <typename PolicyType, RAJA::Pattern P_>
struct pattern_is
    : camp::num<pattern_of<camp::decay<PolicyType>>::value == P_> {
};

template <typename PolicyType, RAJA::Launch L_>
struct launch_is : camp::num<launch_of<camp::decay<PolicyType>>::value == L_> {
};

template <typename PolicyType, RAJA::Platform P_>
struct platform_is
    : camp::num<platform_of<camp::decay<PolicyType>>::value == P_> {
};

template <typename Inner>
struct wrapper {
  using inner = Inner;
};

namespace reduce
{

struct ordered {
};

}


template <Policy Pol, Pattern Pat, typename... Args>
using make_policy_pattern_t =
    PolicyBaseT<Pol, Pat, Launch::undefined, Platform::undefined, Args...>;

template <Policy Policy_,
          Pattern Pattern_,
          Launch Launch_,
          Platform Platform_,
          typename... Args>
using make_policy_pattern_launch_platform_t =
    PolicyBaseT<Policy_, Pattern_, Launch_, Platform_, Args...>;

template <Policy Policy_,
          Pattern Pattern_,
          Launch Launch_,
          typename... Args>
using make_policy_pattern_launch_t =
    PolicyBaseT<Policy_, Pattern_, Launch_, Platform::undefined, Args...>;

template <Policy Policy_,
          Pattern Pattern_,
          Platform Platform_,
          typename... Args>
using make_policy_pattern_platform_t =
    PolicyBaseT<Policy_, Pattern_, Launch::undefined, Platform_, Args...>;

namespace concepts
{

template <typename Pol>
struct ExecutionPolicy
    : decltype(___valid_expr___(::RAJA::concepts::has_type<::RAJA::Policy>( camp::decay<decltype(Pol::policy)>()), ::RAJA::concepts::has_type<::RAJA::Pattern>( camp::decay<decltype(Pol::pattern)>()), ::RAJA::concepts::has_type<::RAJA::Launch>( camp::decay<decltype(Pol::launch)>()), ::RAJA::concepts::has_type<::RAJA::Platform>( camp::decay<decltype(Pol::platform)>()))) {







};

}

namespace type_traits
{

template <typename Pol>
struct is_sequential_policy : RAJA::policy_is<Pol, RAJA::Policy::sequential> {
};
template <typename Pol>
struct is_loop_policy : RAJA::policy_is<Pol, RAJA::Policy::loop> {
};
template <typename Pol>
struct is_simd_policy : RAJA::policy_is<Pol, RAJA::Policy::simd> {
};
template <typename Pol>
struct is_openmp_policy : RAJA::policy_is<Pol, RAJA::Policy::openmp> {
};
template <typename Pol>
struct is_tbb_policy : RAJA::policy_is<Pol, RAJA::Policy::tbb> {
};
template <typename Pol>
struct is_target_openmp_policy
    : RAJA::policy_is<Pol, RAJA::Policy::target_openmp> {
};
template <typename Pol>
struct is_cuda_policy : RAJA::policy_is<Pol, RAJA::Policy::cuda> {
};
template <typename Pol>
struct is_hip_policy : RAJA::policy_is<Pol, RAJA::Policy::hip> {
};

template <typename Pol>
struct is_device_exec_policy
    : RAJA::policy_any_of<Pol, RAJA::Policy::cuda, RAJA::Policy::hip> {
};

template <typename... Args> struct is_execution_policy : camp::concepts::requires_<RAJA::concepts::ExecutionPolicy, Args...> { };


}

}
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PluginContext.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/get_platform.hpp" 1




# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/foldl.hpp" 1
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/foldl.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/camp.hpp" 1
# 21 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/camp.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/make_unique.hpp" 1
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/make_unique.hpp"
namespace camp {

template <typename T, typename... Args>
constexpr
inline
std::unique_ptr<T> make_unique(Args&&... args)
{
    return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}

}
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/camp.hpp" 2






# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/detail/test.hpp" 1
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/detail/test.hpp"
namespace camp
{



namespace test
{
  template <typename T1, typename T2>
  struct AssertSame {
    static_assert(is_same<T1, T2>::value,
                  "is_same assertion failed <see below for more information>");
    static bool constexpr value = is_same<T1, T2>::value;
  };
# 38 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/detail/test.hpp"
  template <typename Assertion, idx_t i>
  struct AssertValue {
    static_assert(Assertion::value == i,
                  "value assertion failed <see below for more information>");
    static bool const value = Assertion::value == i;
  };




}



}
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/camp/include/camp/camp.hpp" 2

namespace camp
{

template <typename Seq>
struct flatten;




template <typename Seq, typename T>
struct append;
template <typename... Elements, typename T>
struct append<list<Elements...>, T> {
  using type = list<Elements..., T>;
};

template <typename Seq, typename T>
struct prepend;
template <typename... Elements, typename T>
struct prepend<list<Elements...>, T> {
  using type = list<Elements..., T>;
};

template <typename Seq, typename T>
struct extend;
template <typename... Elements, typename... NewElements>
struct extend<list<Elements...>, list<NewElements...>> {
  using type = list<Elements..., NewElements...>;
};

namespace detail
{
  template <typename CurSeq, size_t N, typename... Rest>
  struct flatten_impl;
  template <typename CurSeq>
  struct flatten_impl<CurSeq, 0> {
    using type = CurSeq;
  };
  template <typename... CurSeqElements,
            size_t N,
            typename First,
            typename... Rest>
  struct flatten_impl<list<CurSeqElements...>, N, First, Rest...> {
    using type = typename flatten_impl<list<CurSeqElements..., First>,
                                       N - 1,
                                       Rest...>::type;
  };
  template <typename... CurSeqElements,
            size_t N,
            typename... FirstInnerElements,
            typename... Rest>
  struct flatten_impl<list<CurSeqElements...>,
                      N,
                      list<FirstInnerElements...>,
                      Rest...> {
    using first_inner_flat =
        typename flatten_impl<list<>,
                              sizeof...(FirstInnerElements),
                              FirstInnerElements...>::type;
    using cur_and_first =
        typename extend<list<CurSeqElements...>, first_inner_flat>::type;
    using type = typename flatten_impl<cur_and_first, N - 1, Rest...>::type;
  };
}

template <typename... Elements>
struct flatten<list<Elements...>>
    : detail::flatten_impl<list<>, sizeof...(Elements), Elements...> {
};

template <typename... Seqs>
struct join;
template <typename Seq1, typename Seq2, typename... Rest>
struct join<Seq1, Seq2, Rest...> {
      using type = typename join<typename extend<Seq1, Seq2>::type, Rest...>::type;
};
template <typename Seq1>
struct join<Seq1> {
      using type = Seq1;
};
template <>
struct join<> {
  using type = list<>;
};

template <template <typename...> class Op, typename T>
struct transform;
template <template <typename...> class Op, typename... Elements>
struct transform<Op, list<Elements...>> {
  using type = list<typename Op<Elements>::type...>;
};

namespace detail
{
  template <template <typename...> class Op, typename Current, typename... Rest>
  struct accumulate_impl;
  template <template <typename...> class Op,
            typename Current,
            typename First,
            typename... Rest>
  struct accumulate_impl<Op, Current, First, Rest...> {
    using current = typename Op<Current, First>::type;
    using type = typename accumulate_impl<Op, current, Rest...>::type;
  };
  template <template <typename...> class Op, typename Current>
  struct accumulate_impl<Op, Current> {
    using type = Current;
  };
}

template <template <typename...> class Op, typename Initial, typename Seq>
struct accumulate;
template <template <typename...> class Op,
          typename Initial,
          typename... Elements>
struct accumulate<Op, Initial, list<Elements...>> {
  using type = typename detail::accumulate_impl<Op, Initial, Elements...>::type;
};


namespace detail
{
  template<class, class>
  struct product_impl{};
  template<class... Xs, class... Ys>
    struct product_impl<list<Xs...>, list<Ys...>> {
      using type = list<list<Xs..., Ys>...>;
    };
  template<class, class>
  struct product{};
  template<class... Seqs, class... vals>
    struct product<list<Seqs...>, list<vals...>> {
      using type = typename join<typename product_impl<Seqs, list<vals...>>::type...>::type;
    };
}
template<class ... Seqs>
using cartesian_product = typename accumulate<detail::product, list<list<>>, list<Seqs...>>::type;

template <typename Lambda, typename... Rest> struct accumulate_l { using type = typename accumulate<Lambda::template expr, Rest...>::type; };




template <typename T, typename L>
struct index_of;
template <typename T, typename... Elements>
struct index_of<T, list<Elements...>> {
  template <typename Seq, typename Item>
  using inc_until =
      if_<typename std::is_same<T, Item>::type,
          if_c<size<Seq>::value == 1,
               typename prepend<Seq, num<first<Seq>::value>>::type,
               Seq>,
          list<num<first<Seq>::value + 1>>>;
  using indices =
      typename accumulate<inc_until, list<num<0>>, list<Elements...>>::type;
  using type =
      typename if_c<size<indices>::value == 2, first<indices>, camp::nil>::type;
};

template <template <typename...> class Op, typename Seq>
struct filter;

template <template <typename...> class Op, typename... Elements>
struct filter<Op, list<Elements...>> {
  template <typename Seq, typename T>
  using append_if =
      if_<typename Op<T>::type, typename append<Seq, T>::type, Seq>;
  using type = typename accumulate<append_if, list<>, list<Elements...>>::type;
};

template <typename Lambda, typename... Rest> struct filter_l { using type = typename filter<Lambda::template expr, Rest...>::type; };



template <typename T, T... Args>
struct size<int_seq<T, Args...>> {
  constexpr static idx_t value{sizeof...(Args)};
  using type = num<sizeof...(Args)>;
};

}
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/foldl.hpp" 2




namespace RAJA
{




namespace detail
{

template <typename Op, typename... Rest>
struct foldl_impl;

template <typename Op, typename Arg1>
struct foldl_impl<Op, Arg1> {
  using Ret = Arg1;
};

template <typename Op, typename Arg1, typename Arg2>
struct foldl_impl<Op, Arg1, Arg2> {
  using Ret = typename std::result_of<Op(Arg1, Arg2)>::type;
};

template <typename Op,
          typename Arg1,
          typename Arg2,
          typename Arg3,
          typename... Rest>
struct foldl_impl<Op, Arg1, Arg2, Arg3, Rest...> {
  using Ret = typename foldl_impl<
      Op,
      typename std::result_of<Op(typename std::result_of<Op(Arg1, Arg2)>::type,
                                 Arg3)>::type,
      Rest...>::Ret;
};

}

template <typename Op, typename Arg1>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) constexpr auto foldl(
    Op&& ,
    Arg1&& arg) -> typename detail::foldl_impl<Op, Arg1>::Ret
{
  return camp::forward<Arg1>(arg);
}

template <typename Op, typename Arg1, typename Arg2>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) constexpr auto foldl(Op&& operation,
                                                  Arg1&& arg1,
                                                  Arg2&& arg2) ->
    typename detail::foldl_impl<Op, Arg1, Arg2>::Ret
{
  return camp::forward<Op>(operation)(camp::forward<Arg1>(arg1),
                                      camp::forward<Arg2>(arg2));
}

template <typename Op,
          typename Arg1,
          typename Arg2,
          typename Arg3,
          typename... Rest>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) constexpr auto foldl(Op&& operation,
                                                  Arg1&& arg1,
                                                  Arg2&& arg2,
                                                  Arg3&& arg3,
                                                  Rest&&... rest) ->
    typename detail::foldl_impl<Op, Arg1, Arg2, Arg3, Rest...>::Ret
{
  return foldl(camp::forward<Op>(operation),
               camp::forward<Op>(operation)(
                   camp::forward<Op>(operation)(camp::forward<Arg1>(arg1),
                                                camp::forward<Arg2>(arg2)),
                   camp::forward<Arg3>(arg3)),
               camp::forward<Rest>(rest)...);
}



template <typename Result, typename... Args>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) constexpr Result sum(Args... args)
{
  return foldl(RAJA::operators::plus<Result>(), args...);
}

template <typename Result, typename... Args>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) constexpr Result product(Args... args)
{
  return foldl(RAJA::operators::multiplies<Result>(), args...);
}

template <typename Result, typename... Args>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) constexpr Result max(Args... args)
{
  return foldl(RAJA::operators::maximum<Result>(), args...);
}

template <typename Result, typename... Args>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) constexpr Result min(Args... args)
{
  return foldl(RAJA::operators::minimum<Result>(), args...);
}


}
# 6 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/get_platform.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal.hpp" 1
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal/LoopData.hpp" 1
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal/LoopData.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSet.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSet.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/ListSegment.hpp" 1
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/ListSegment.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Span.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Span.hpp"
namespace RAJA
{
# 58 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Span.hpp"
template <typename IterType, typename IndexType>
struct Span {
  using element_type = typename std::iterator_traits<IterType>::value_type;
  using value_type = camp::decay<element_type>;
  using size_type = IndexType;
  using difference_type = std::ptrdiff_t;
  using reference = element_type&;
  using const_reference = const element_type&;
  using iterator = IterType;
  using const_iterator = IterType;

  static_assert(type_traits::is_integral<IndexType>::value,
                "IndexType must model Integral");
  static_assert(type_traits::is_random_access_iterator<IterType>::value,
                "IterType must model RandomAccessIterator");

  __attribute__((host)) __attribute__((device)) Span(iterator begin, iterator end)
      : m_begin{begin}, m_end{end}
  {
  }

  __attribute__((host)) __attribute__((device)) Span(iterator begin, size_type size)
      : m_begin{begin}, m_end{begin + size}
  {
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) iterator begin() const { return m_begin; }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) iterator end() const { return m_end; }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) const_iterator cbegin() const { return m_begin; }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) const_iterator cend() const { return m_end; }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) reference front() const { return *begin(); }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) reference back() const { return *(end()-1); }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) reference operator[](size_type i) const { return data()[i]; }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) iterator data() const { return m_begin; }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) size_type size() const
  {
    return static_cast<size_type>(m_end - m_begin);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool empty() const
  {
    return size() == static_cast<size_type>(0);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) Span first(size_type count) const
  {
    return slice(0, count);
  }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) Span last(size_type count) const
  {
    return slice(size() - count, count);
  }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) Span subspan(size_type begin,
                                            size_type length) const
  {
    return slice(begin, length);
  }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) Span slice(size_type begin,
                                          size_type length) const
  {
    auto start = m_begin + begin;
    auto end = start + length > m_end ? m_end : start + length;
    return Span(start, end);
  }

private:
  iterator m_begin;
  iterator m_end;
};
# 150 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Span.hpp"
template <typename IterType, typename IndexType>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) Span<IterType, IndexType> make_span(
    IterType begin,
    IndexType size)
{
  return Span<IterType, IndexType>(begin, size);
}

}
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/ListSegment.hpp" 2



# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/raja_cudaerrchk.hpp" 1
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/raja_cudaerrchk.hpp"
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h" 1
# 59 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
typedef uint32_t cuuint32_t;
typedef uint64_t cuuint64_t;
# 232 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
extern "C" {
# 242 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
typedef unsigned long long CUdeviceptr;






typedef int CUdevice;
typedef struct CUctx_st *CUcontext;
typedef struct CUmod_st *CUmodule;
typedef struct CUfunc_st *CUfunction;
typedef struct CUarray_st *CUarray;
typedef struct CUmipmappedArray_st *CUmipmappedArray;
typedef struct CUtexref_st *CUtexref;
typedef struct CUsurfref_st *CUsurfref;
typedef struct CUevent_st *CUevent;
typedef struct CUstream_st *CUstream;
typedef struct CUgraphicsResource_st *CUgraphicsResource;
typedef unsigned long long CUtexObject;
typedef unsigned long long CUsurfObject;

typedef struct CUuuid_st {
    char bytes[16];
} CUuuid;
# 278 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
typedef struct CUipcEventHandle_st {
    char reserved[64];
} CUipcEventHandle;




typedef struct CUipcMemHandle_st {
    char reserved[64];
} CUipcMemHandle;




typedef enum CUipcMem_flags_enum {
    CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 0x1
} CUipcMem_flags;






typedef enum CUmemAttach_flags_enum {
    CU_MEM_ATTACH_GLOBAL = 0x1,
    CU_MEM_ATTACH_HOST = 0x2,
    CU_MEM_ATTACH_SINGLE = 0x4
} CUmemAttach_flags;




typedef enum CUctx_flags_enum {
    CU_CTX_SCHED_AUTO = 0x00,
    CU_CTX_SCHED_SPIN = 0x01,
    CU_CTX_SCHED_YIELD = 0x02,
    CU_CTX_SCHED_BLOCKING_SYNC = 0x04,
    CU_CTX_BLOCKING_SYNC = 0x04,


    CU_CTX_SCHED_MASK = 0x07,
    CU_CTX_MAP_HOST = 0x08,
    CU_CTX_LMEM_RESIZE_TO_MAX = 0x10,
    CU_CTX_FLAGS_MASK = 0x1f
} CUctx_flags;




typedef enum CUstream_flags_enum {
    CU_STREAM_DEFAULT = 0x0,
    CU_STREAM_NON_BLOCKING = 0x1
} CUstream_flags;
# 355 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
typedef enum CUevent_flags_enum {
    CU_EVENT_DEFAULT = 0x0,
    CU_EVENT_BLOCKING_SYNC = 0x1,
    CU_EVENT_DISABLE_TIMING = 0x2,
    CU_EVENT_INTERPROCESS = 0x4
} CUevent_flags;





typedef enum CUstreamWaitValue_flags_enum {
    CU_STREAM_WAIT_VALUE_GEQ = 0x0,


    CU_STREAM_WAIT_VALUE_EQ = 0x1,
    CU_STREAM_WAIT_VALUE_AND = 0x2,
    CU_STREAM_WAIT_VALUE_NOR = 0x3,


    CU_STREAM_WAIT_VALUE_FLUSH = 1<<30
# 384 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
} CUstreamWaitValue_flags;




typedef enum CUstreamWriteValue_flags_enum {
    CU_STREAM_WRITE_VALUE_DEFAULT = 0x0,
    CU_STREAM_WRITE_VALUE_NO_MEMORY_BARRIER = 0x1





} CUstreamWriteValue_flags;




typedef enum CUstreamBatchMemOpType_enum {
    CU_STREAM_MEM_OP_WAIT_VALUE_32 = 1,
    CU_STREAM_MEM_OP_WRITE_VALUE_32 = 2,
    CU_STREAM_MEM_OP_WAIT_VALUE_64 = 4,
    CU_STREAM_MEM_OP_WRITE_VALUE_64 = 5,
    CU_STREAM_MEM_OP_FLUSH_REMOTE_WRITES = 3

} CUstreamBatchMemOpType;




typedef union CUstreamBatchMemOpParams_union {
    CUstreamBatchMemOpType operation;
    struct CUstreamMemOpWaitValueParams_st {
        CUstreamBatchMemOpType operation;
        CUdeviceptr address;
        union {
            cuuint32_t value;
            cuuint64_t value64;
        };
        unsigned int flags;
        CUdeviceptr alias;
    } waitValue;
    struct CUstreamMemOpWriteValueParams_st {
        CUstreamBatchMemOpType operation;
        CUdeviceptr address;
        union {
            cuuint32_t value;
            cuuint64_t value64;
        };
        unsigned int flags;
        CUdeviceptr alias;
    } writeValue;
    struct CUstreamMemOpFlushRemoteWritesParams_st {
        CUstreamBatchMemOpType operation;
        unsigned int flags;
    } flushRemoteWrites;
    cuuint64_t pad[6];
} CUstreamBatchMemOpParams;





typedef enum CUoccupancy_flags_enum {
    CU_OCCUPANCY_DEFAULT = 0x0,
    CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE = 0x1
} CUoccupancy_flags;




typedef enum CUarray_format_enum {
    CU_AD_FORMAT_UNSIGNED_INT8 = 0x01,
    CU_AD_FORMAT_UNSIGNED_INT16 = 0x02,
    CU_AD_FORMAT_UNSIGNED_INT32 = 0x03,
    CU_AD_FORMAT_SIGNED_INT8 = 0x08,
    CU_AD_FORMAT_SIGNED_INT16 = 0x09,
    CU_AD_FORMAT_SIGNED_INT32 = 0x0a,
    CU_AD_FORMAT_HALF = 0x10,
    CU_AD_FORMAT_FLOAT = 0x20
} CUarray_format;




typedef enum CUaddress_mode_enum {
    CU_TR_ADDRESS_MODE_WRAP = 0,
    CU_TR_ADDRESS_MODE_CLAMP = 1,
    CU_TR_ADDRESS_MODE_MIRROR = 2,
    CU_TR_ADDRESS_MODE_BORDER = 3
} CUaddress_mode;




typedef enum CUfilter_mode_enum {
    CU_TR_FILTER_MODE_POINT = 0,
    CU_TR_FILTER_MODE_LINEAR = 1
} CUfilter_mode;




typedef enum CUdevice_attribute_enum {
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y = 3,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z = 4,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X = 5,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y = 6,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z = 7,
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK = 8,
    CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,
    CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9,
    CU_DEVICE_ATTRIBUTE_WARP_SIZE = 10,
    CU_DEVICE_ATTRIBUTE_MAX_PITCH = 11,
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK = 12,
    CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,
    CU_DEVICE_ATTRIBUTE_CLOCK_RATE = 13,
    CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT = 14,
    CU_DEVICE_ATTRIBUTE_GPU_OVERLAP = 15,
    CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 16,
    CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT = 17,
    CU_DEVICE_ATTRIBUTE_INTEGRATED = 18,
    CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY = 19,
    CU_DEVICE_ATTRIBUTE_COMPUTE_MODE = 20,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH = 21,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH = 22,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT = 23,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH = 24,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT = 25,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH = 26,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH = 27,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT = 28,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS = 29,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT = 28,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES = 29,
    CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT = 30,
    CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS = 31,
    CU_DEVICE_ATTRIBUTE_ECC_ENABLED = 32,
    CU_DEVICE_ATTRIBUTE_PCI_BUS_ID = 33,
    CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID = 34,
    CU_DEVICE_ATTRIBUTE_TCC_DRIVER = 35,
    CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE = 36,
    CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH = 37,
    CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE = 38,
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR = 39,
    CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT = 40,
    CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING = 41,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH = 42,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS = 43,
    CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER = 44,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH = 45,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT = 46,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE = 47,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE = 48,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE = 49,
    CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID = 50,
    CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT = 51,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH = 52,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH = 53,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS = 54,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH = 55,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH = 56,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT = 57,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH = 58,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT = 59,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH = 60,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH = 61,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS = 62,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH = 63,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT = 64,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS = 65,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH = 66,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH = 67,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS = 68,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH = 69,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH = 70,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT = 71,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH = 72,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH = 73,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT = 74,
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR = 75,
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR = 76,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH = 77,
    CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED = 78,
    CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED = 79,
    CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED = 80,
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR = 81,
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR = 82,
    CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY = 83,
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD = 84,
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID = 85,
    CU_DEVICE_ATTRIBUTE_HOST_NATIVE_ATOMIC_SUPPORTED = 86,
    CU_DEVICE_ATTRIBUTE_SINGLE_TO_DOUBLE_PRECISION_PERF_RATIO = 87,
    CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS = 88,
    CU_DEVICE_ATTRIBUTE_CONCURRENT_MANAGED_ACCESS = 89,
    CU_DEVICE_ATTRIBUTE_COMPUTE_PREEMPTION_SUPPORTED = 90,
    CU_DEVICE_ATTRIBUTE_CAN_USE_HOST_POINTER_FOR_REGISTERED_MEM = 91,
    CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_MEM_OPS = 92,
    CU_DEVICE_ATTRIBUTE_CAN_USE_64_BIT_STREAM_MEM_OPS = 93,
    CU_DEVICE_ATTRIBUTE_CAN_USE_STREAM_WAIT_VALUE_NOR = 94,
    CU_DEVICE_ATTRIBUTE_COOPERATIVE_LAUNCH = 95,
    CU_DEVICE_ATTRIBUTE_COOPERATIVE_MULTI_DEVICE_LAUNCH = 96,
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK_OPTIN = 97,
    CU_DEVICE_ATTRIBUTE_CAN_FLUSH_REMOTE_WRITES = 98,
    CU_DEVICE_ATTRIBUTE_HOST_REGISTER_SUPPORTED = 99,
    CU_DEVICE_ATTRIBUTE_PAGEABLE_MEMORY_ACCESS_USES_HOST_PAGE_TABLES = 100,
    CU_DEVICE_ATTRIBUTE_DIRECT_MANAGED_MEM_ACCESS_FROM_HOST = 101,
    CU_DEVICE_ATTRIBUTE_MAX
} CUdevice_attribute;




typedef struct CUdevprop_st {
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int sharedMemPerBlock;
    int totalConstantMemory;
    int SIMDWidth;
    int memPitch;
    int regsPerBlock;
    int clockRate;
    int textureAlign;
} CUdevprop;




typedef enum CUpointer_attribute_enum {
    CU_POINTER_ATTRIBUTE_CONTEXT = 1,
    CU_POINTER_ATTRIBUTE_MEMORY_TYPE = 2,
    CU_POINTER_ATTRIBUTE_DEVICE_POINTER = 3,
    CU_POINTER_ATTRIBUTE_HOST_POINTER = 4,
    CU_POINTER_ATTRIBUTE_P2P_TOKENS = 5,
    CU_POINTER_ATTRIBUTE_SYNC_MEMOPS = 6,
    CU_POINTER_ATTRIBUTE_BUFFER_ID = 7,
    CU_POINTER_ATTRIBUTE_IS_MANAGED = 8,
    CU_POINTER_ATTRIBUTE_DEVICE_ORDINAL = 9
} CUpointer_attribute;




typedef enum CUfunction_attribute_enum {





    CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0,






    CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1,





    CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES = 2,




    CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES = 3,




    CU_FUNC_ATTRIBUTE_NUM_REGS = 4,
# 669 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CU_FUNC_ATTRIBUTE_PTX_VERSION = 5,
# 678 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CU_FUNC_ATTRIBUTE_BINARY_VERSION = 6,





    CU_FUNC_ATTRIBUTE_CACHE_MODE_CA = 7,







    CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES = 8,
# 701 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT = 9,

    CU_FUNC_ATTRIBUTE_MAX
} CUfunction_attribute;




typedef enum CUfunc_cache_enum {
    CU_FUNC_CACHE_PREFER_NONE = 0x00,
    CU_FUNC_CACHE_PREFER_SHARED = 0x01,
    CU_FUNC_CACHE_PREFER_L1 = 0x02,
    CU_FUNC_CACHE_PREFER_EQUAL = 0x03
} CUfunc_cache;




typedef enum CUsharedconfig_enum {
    CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE = 0x00,
    CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE = 0x01,
    CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE = 0x02
} CUsharedconfig;




typedef enum CUshared_carveout_enum {
    CU_SHAREDMEM_CARVEOUT_DEFAULT = -1,
    CU_SHAREDMEM_CARVEOUT_MAX_SHARED = 100,
    CU_SHAREDMEM_CARVEOUT_MAX_L1 = 0
} CUshared_carveout;




typedef enum CUmemorytype_enum {
    CU_MEMORYTYPE_HOST = 0x01,
    CU_MEMORYTYPE_DEVICE = 0x02,
    CU_MEMORYTYPE_ARRAY = 0x03,
    CU_MEMORYTYPE_UNIFIED = 0x04
} CUmemorytype;




typedef enum CUcomputemode_enum {
    CU_COMPUTEMODE_DEFAULT = 0,
    CU_COMPUTEMODE_PROHIBITED = 2,
    CU_COMPUTEMODE_EXCLUSIVE_PROCESS = 3
} CUcomputemode;




typedef enum CUmem_advise_enum {
    CU_MEM_ADVISE_SET_READ_MOSTLY = 1,
    CU_MEM_ADVISE_UNSET_READ_MOSTLY = 2,
    CU_MEM_ADVISE_SET_PREFERRED_LOCATION = 3,
    CU_MEM_ADVISE_UNSET_PREFERRED_LOCATION = 4,
    CU_MEM_ADVISE_SET_ACCESSED_BY = 5,
    CU_MEM_ADVISE_UNSET_ACCESSED_BY = 6
} CUmem_advise;

typedef enum CUmem_range_attribute_enum {
    CU_MEM_RANGE_ATTRIBUTE_READ_MOSTLY = 1,
    CU_MEM_RANGE_ATTRIBUTE_PREFERRED_LOCATION = 2,
    CU_MEM_RANGE_ATTRIBUTE_ACCESSED_BY = 3,
    CU_MEM_RANGE_ATTRIBUTE_LAST_PREFETCH_LOCATION = 4
} CUmem_range_attribute;




typedef enum CUjit_option_enum
{





    CU_JIT_MAX_REGISTERS = 0,
# 797 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CU_JIT_THREADS_PER_BLOCK,







    CU_JIT_WALL_TIME,
# 814 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CU_JIT_INFO_LOG_BUFFER,
# 823 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,
# 832 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CU_JIT_ERROR_LOG_BUFFER,
# 841 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,







    CU_JIT_OPTIMIZATION_LEVEL,







    CU_JIT_TARGET_FROM_CUCONTEXT,







    CU_JIT_TARGET,
# 874 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CU_JIT_FALLBACK_STRATEGY,







    CU_JIT_GENERATE_DEBUG_INFO,






    CU_JIT_LOG_VERBOSE,






    CU_JIT_GENERATE_LINE_INFO,







    CU_JIT_CACHE_MODE,




    CU_JIT_NEW_SM3X_OPT,
    CU_JIT_FAST_COMPILE,

    CU_JIT_NUM_OPTIONS

} CUjit_option;




typedef enum CUjit_target_enum
{
    CU_TARGET_COMPUTE_20 = 20,
    CU_TARGET_COMPUTE_21 = 21,
    CU_TARGET_COMPUTE_30 = 30,
    CU_TARGET_COMPUTE_32 = 32,
    CU_TARGET_COMPUTE_35 = 35,
    CU_TARGET_COMPUTE_37 = 37,
    CU_TARGET_COMPUTE_50 = 50,
    CU_TARGET_COMPUTE_52 = 52,
    CU_TARGET_COMPUTE_53 = 53,
    CU_TARGET_COMPUTE_60 = 60,
    CU_TARGET_COMPUTE_61 = 61,
    CU_TARGET_COMPUTE_62 = 62,
    CU_TARGET_COMPUTE_70 = 70,
    CU_TARGET_COMPUTE_73 = 73,
    CU_TARGET_COMPUTE_75 = 75
} CUjit_target;




typedef enum CUjit_fallback_enum
{
    CU_PREFER_PTX = 0,

    CU_PREFER_BINARY

} CUjit_fallback;




typedef enum CUjit_cacheMode_enum
{
    CU_JIT_CACHE_OPTION_NONE = 0,
    CU_JIT_CACHE_OPTION_CG,
    CU_JIT_CACHE_OPTION_CA
} CUjit_cacheMode;




typedef enum CUjitInputType_enum
{




    CU_JIT_INPUT_CUBIN = 0,





    CU_JIT_INPUT_PTX,





    CU_JIT_INPUT_FATBINARY,





    CU_JIT_INPUT_OBJECT,





    CU_JIT_INPUT_LIBRARY,

    CU_JIT_NUM_INPUT_TYPES
} CUjitInputType;


typedef struct CUlinkState_st *CUlinkState;





typedef enum CUgraphicsRegisterFlags_enum {
    CU_GRAPHICS_REGISTER_FLAGS_NONE = 0x00,
    CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY = 0x01,
    CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD = 0x02,
    CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST = 0x04,
    CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 0x08
} CUgraphicsRegisterFlags;




typedef enum CUgraphicsMapResourceFlags_enum {
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE = 0x00,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY = 0x01,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 0x02
} CUgraphicsMapResourceFlags;




typedef enum CUarray_cubemap_face_enum {
    CU_CUBEMAP_FACE_POSITIVE_X = 0x00,
    CU_CUBEMAP_FACE_NEGATIVE_X = 0x01,
    CU_CUBEMAP_FACE_POSITIVE_Y = 0x02,
    CU_CUBEMAP_FACE_NEGATIVE_Y = 0x03,
    CU_CUBEMAP_FACE_POSITIVE_Z = 0x04,
    CU_CUBEMAP_FACE_NEGATIVE_Z = 0x05
} CUarray_cubemap_face;




typedef enum CUlimit_enum {
    CU_LIMIT_STACK_SIZE = 0x00,
    CU_LIMIT_PRINTF_FIFO_SIZE = 0x01,
    CU_LIMIT_MALLOC_HEAP_SIZE = 0x02,
    CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH = 0x03,
    CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT = 0x04,
    CU_LIMIT_MAX
} CUlimit;




typedef enum CUresourcetype_enum {
    CU_RESOURCE_TYPE_ARRAY = 0x00,
    CU_RESOURCE_TYPE_MIPMAPPED_ARRAY = 0x01,
    CU_RESOURCE_TYPE_LINEAR = 0x02,
    CU_RESOURCE_TYPE_PITCH2D = 0x03
} CUresourcetype;




typedef enum cudaError_enum {





    CUDA_SUCCESS = 0,





    CUDA_ERROR_INVALID_VALUE = 1,





    CUDA_ERROR_OUT_OF_MEMORY = 2,





    CUDA_ERROR_NOT_INITIALIZED = 3,




    CUDA_ERROR_DEINITIALIZED = 4,






    CUDA_ERROR_PROFILER_DISABLED = 5,







    CUDA_ERROR_PROFILER_NOT_INITIALIZED = 6,






    CUDA_ERROR_PROFILER_ALREADY_STARTED = 7,






    CUDA_ERROR_PROFILER_ALREADY_STOPPED = 8,





    CUDA_ERROR_NO_DEVICE = 100,





    CUDA_ERROR_INVALID_DEVICE = 101,






    CUDA_ERROR_INVALID_IMAGE = 200,
# 1145 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CUDA_ERROR_INVALID_CONTEXT = 201,
# 1154 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CUDA_ERROR_CONTEXT_ALREADY_CURRENT = 202,




    CUDA_ERROR_MAP_FAILED = 205,




    CUDA_ERROR_UNMAP_FAILED = 206,





    CUDA_ERROR_ARRAY_IS_MAPPED = 207,




    CUDA_ERROR_ALREADY_MAPPED = 208,







    CUDA_ERROR_NO_BINARY_FOR_GPU = 209,




    CUDA_ERROR_ALREADY_ACQUIRED = 210,




    CUDA_ERROR_NOT_MAPPED = 211,





    CUDA_ERROR_NOT_MAPPED_AS_ARRAY = 212,





    CUDA_ERROR_NOT_MAPPED_AS_POINTER = 213,





    CUDA_ERROR_ECC_UNCORRECTABLE = 214,





    CUDA_ERROR_UNSUPPORTED_LIMIT = 215,






    CUDA_ERROR_CONTEXT_ALREADY_IN_USE = 216,





    CUDA_ERROR_PEER_ACCESS_UNSUPPORTED = 217,




    CUDA_ERROR_INVALID_PTX = 218,




    CUDA_ERROR_INVALID_GRAPHICS_CONTEXT = 219,





    CUDA_ERROR_NVLINK_UNCORRECTABLE = 220,




    CUDA_ERROR_JIT_COMPILER_NOT_FOUND = 221,




    CUDA_ERROR_INVALID_SOURCE = 300,




    CUDA_ERROR_FILE_NOT_FOUND = 301,




    CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND = 302,




    CUDA_ERROR_SHARED_OBJECT_INIT_FAILED = 303,




    CUDA_ERROR_OPERATING_SYSTEM = 304,





    CUDA_ERROR_INVALID_HANDLE = 400,





    CUDA_ERROR_NOT_FOUND = 500,







    CUDA_ERROR_NOT_READY = 600,
# 1305 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CUDA_ERROR_ILLEGAL_ADDRESS = 700,
# 1316 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES = 701,
# 1326 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CUDA_ERROR_LAUNCH_TIMEOUT = 702,





    CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING = 703,






    CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED = 704,






    CUDA_ERROR_PEER_ACCESS_NOT_ENABLED = 705,





    CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = 708,






    CUDA_ERROR_CONTEXT_IS_DESTROYED = 709,







    CUDA_ERROR_ASSERT = 710,






    CUDA_ERROR_TOO_MANY_PEERS = 711,





    CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED = 712,





    CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED = 713,
# 1395 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CUDA_ERROR_HARDWARE_STACK_ERROR = 714,







    CUDA_ERROR_ILLEGAL_INSTRUCTION = 715,
# 1412 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CUDA_ERROR_MISALIGNED_ADDRESS = 716,
# 1423 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CUDA_ERROR_INVALID_ADDRESS_SPACE = 717,







    CUDA_ERROR_INVALID_PC = 718,
# 1441 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CUDA_ERROR_LAUNCH_FAILED = 719,
# 1450 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
    CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE = 720,




    CUDA_ERROR_NOT_PERMITTED = 800,





    CUDA_ERROR_NOT_SUPPORTED = 801,




    CUDA_ERROR_UNKNOWN = 999
} CUresult;




typedef enum CUdevice_P2PAttribute_enum {
    CU_DEVICE_P2P_ATTRIBUTE_PERFORMANCE_RANK = 0x01,
    CU_DEVICE_P2P_ATTRIBUTE_ACCESS_SUPPORTED = 0x02,
    CU_DEVICE_P2P_ATTRIBUTE_NATIVE_ATOMIC_SUPPORTED = 0x03,
    CU_DEVICE_P2P_ATTRIBUTE_ARRAY_ACCESS_ACCESS_SUPPORTED = 0x04
} CUdevice_P2PAttribute;
# 1491 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
typedef void ( *CUstreamCallback)(CUstream hStream, CUresult status, void *userData);







typedef size_t ( *CUoccupancyB2DSize)(int blockSize);
# 1554 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
typedef struct CUDA_MEMCPY2D_st {
    size_t srcXInBytes;
    size_t srcY;

    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    size_t srcPitch;

    size_t dstXInBytes;
    size_t dstY;

    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    size_t dstPitch;

    size_t WidthInBytes;
    size_t Height;
} CUDA_MEMCPY2D;




typedef struct CUDA_MEMCPY3D_st {
    size_t srcXInBytes;
    size_t srcY;
    size_t srcZ;
    size_t srcLOD;
    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    void *reserved0;
    size_t srcPitch;
    size_t srcHeight;

    size_t dstXInBytes;
    size_t dstY;
    size_t dstZ;
    size_t dstLOD;
    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    void *reserved1;
    size_t dstPitch;
    size_t dstHeight;

    size_t WidthInBytes;
    size_t Height;
    size_t Depth;
} CUDA_MEMCPY3D;




typedef struct CUDA_MEMCPY3D_PEER_st {
    size_t srcXInBytes;
    size_t srcY;
    size_t srcZ;
    size_t srcLOD;
    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    CUcontext srcContext;
    size_t srcPitch;
    size_t srcHeight;

    size_t dstXInBytes;
    size_t dstY;
    size_t dstZ;
    size_t dstLOD;
    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    CUcontext dstContext;
    size_t dstPitch;
    size_t dstHeight;

    size_t WidthInBytes;
    size_t Height;
    size_t Depth;
} CUDA_MEMCPY3D_PEER;




typedef struct CUDA_ARRAY_DESCRIPTOR_st
{
    size_t Width;
    size_t Height;

    CUarray_format Format;
    unsigned int NumChannels;
} CUDA_ARRAY_DESCRIPTOR;




typedef struct CUDA_ARRAY3D_DESCRIPTOR_st
{
    size_t Width;
    size_t Height;
    size_t Depth;

    CUarray_format Format;
    unsigned int NumChannels;
    unsigned int Flags;
} CUDA_ARRAY3D_DESCRIPTOR;
# 1676 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
typedef struct CUDA_RESOURCE_DESC_st
{
    CUresourcetype resType;

    union {
        struct {
            CUarray hArray;
        } array;
        struct {
            CUmipmappedArray hMipmappedArray;
        } mipmap;
        struct {
            CUdeviceptr devPtr;
            CUarray_format format;
            unsigned int numChannels;
            size_t sizeInBytes;
        } linear;
        struct {
            CUdeviceptr devPtr;
            CUarray_format format;
            unsigned int numChannels;
            size_t width;
            size_t height;
            size_t pitchInBytes;
        } pitch2D;
        struct {
            int reserved[32];
        } reserved;
    } res;

    unsigned int flags;
} CUDA_RESOURCE_DESC;




typedef struct CUDA_TEXTURE_DESC_st {
    CUaddress_mode addressMode[3];
    CUfilter_mode filterMode;
    unsigned int flags;
    unsigned int maxAnisotropy;
    CUfilter_mode mipmapFilterMode;
    float mipmapLevelBias;
    float minMipmapLevelClamp;
    float maxMipmapLevelClamp;
    float borderColor[4];
    int reserved[12];
} CUDA_TEXTURE_DESC;




typedef enum CUresourceViewFormat_enum
{
    CU_RES_VIEW_FORMAT_NONE = 0x00,
    CU_RES_VIEW_FORMAT_UINT_1X8 = 0x01,
    CU_RES_VIEW_FORMAT_UINT_2X8 = 0x02,
    CU_RES_VIEW_FORMAT_UINT_4X8 = 0x03,
    CU_RES_VIEW_FORMAT_SINT_1X8 = 0x04,
    CU_RES_VIEW_FORMAT_SINT_2X8 = 0x05,
    CU_RES_VIEW_FORMAT_SINT_4X8 = 0x06,
    CU_RES_VIEW_FORMAT_UINT_1X16 = 0x07,
    CU_RES_VIEW_FORMAT_UINT_2X16 = 0x08,
    CU_RES_VIEW_FORMAT_UINT_4X16 = 0x09,
    CU_RES_VIEW_FORMAT_SINT_1X16 = 0x0a,
    CU_RES_VIEW_FORMAT_SINT_2X16 = 0x0b,
    CU_RES_VIEW_FORMAT_SINT_4X16 = 0x0c,
    CU_RES_VIEW_FORMAT_UINT_1X32 = 0x0d,
    CU_RES_VIEW_FORMAT_UINT_2X32 = 0x0e,
    CU_RES_VIEW_FORMAT_UINT_4X32 = 0x0f,
    CU_RES_VIEW_FORMAT_SINT_1X32 = 0x10,
    CU_RES_VIEW_FORMAT_SINT_2X32 = 0x11,
    CU_RES_VIEW_FORMAT_SINT_4X32 = 0x12,
    CU_RES_VIEW_FORMAT_FLOAT_1X16 = 0x13,
    CU_RES_VIEW_FORMAT_FLOAT_2X16 = 0x14,
    CU_RES_VIEW_FORMAT_FLOAT_4X16 = 0x15,
    CU_RES_VIEW_FORMAT_FLOAT_1X32 = 0x16,
    CU_RES_VIEW_FORMAT_FLOAT_2X32 = 0x17,
    CU_RES_VIEW_FORMAT_FLOAT_4X32 = 0x18,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC1 = 0x19,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC2 = 0x1a,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC3 = 0x1b,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC4 = 0x1c,
    CU_RES_VIEW_FORMAT_SIGNED_BC4 = 0x1d,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC5 = 0x1e,
    CU_RES_VIEW_FORMAT_SIGNED_BC5 = 0x1f,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC6H = 0x20,
    CU_RES_VIEW_FORMAT_SIGNED_BC6H = 0x21,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC7 = 0x22
} CUresourceViewFormat;




typedef struct CUDA_RESOURCE_VIEW_DESC_st
{
    CUresourceViewFormat format;
    size_t width;
    size_t height;
    size_t depth;
    unsigned int firstMipmapLevel;
    unsigned int lastMipmapLevel;
    unsigned int firstLayer;
    unsigned int lastLayer;
    unsigned int reserved[16];
} CUDA_RESOURCE_VIEW_DESC;




typedef struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st {
    unsigned long long p2pToken;
    unsigned int vaSpaceToken;
} CUDA_POINTER_ATTRIBUTE_P2P_TOKENS;
# 1798 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
typedef struct CUDA_LAUNCH_PARAMS_st {
    CUfunction function;
    unsigned int gridDimX;
    unsigned int gridDimY;
    unsigned int gridDimZ;
    unsigned int blockDimX;
    unsigned int blockDimY;
    unsigned int blockDimZ;
    unsigned int sharedMemBytes;
    CUstream hStream;
    void **kernelParams;
} CUDA_LAUNCH_PARAMS;
# 1972 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuGetErrorString(CUresult error, const char **pStr);
# 1993 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuGetErrorName(CUresult error, const char **pStr);
# 2025 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuInit(unsigned int Flags);
# 2059 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDriverGetVersion(int *driverVersion);
# 2100 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDeviceGet(CUdevice *device, int ordinal);
# 2127 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDeviceGetCount(int *count);
# 2156 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDeviceGetName(char *name, int len, CUdevice dev);
# 2184 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDeviceGetUuid(CUuuid *uuid, CUdevice dev);
# 2214 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDeviceTotalMem_v2(size_t *bytes, CUdevice dev);
# 2419 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDeviceGetAttribute(int *pi, CUdevice_attribute attrib, CUdevice dev);
# 2497 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuDeviceGetProperties(CUdevprop *prop, CUdevice dev);
# 2531 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuDeviceComputeCapability(int *major, int *minor, CUdevice dev);
# 2599 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDevicePrimaryCtxRetain(CUcontext *pctx, CUdevice dev);
# 2633 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDevicePrimaryCtxRelease(CUdevice dev);
# 2697 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDevicePrimaryCtxSetFlags(CUdevice dev, unsigned int flags);
# 2723 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDevicePrimaryCtxGetState(CUdevice dev, unsigned int *flags, int *active);
# 2761 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDevicePrimaryCtxReset(CUdevice dev);
# 2867 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxCreate_v2(CUcontext *pctx, unsigned int flags, CUdevice dev);
# 2907 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxDestroy_v2(CUcontext ctx);
# 2943 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxPushCurrent_v2(CUcontext ctx);
# 2977 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxPopCurrent_v2(CUcontext *pctx);
# 3007 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxSetCurrent(CUcontext ctx);
# 3030 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxGetCurrent(CUcontext *pctx);
# 3061 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxGetDevice(CUdevice *device);
# 3090 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxGetFlags(unsigned int *flags);
# 3121 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxSynchronize(void);
# 3206 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxSetLimit(CUlimit limit, size_t value);
# 3246 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxGetLimit(size_t *pvalue, CUlimit limit);
# 3290 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxGetCacheConfig(CUfunc_cache *pconfig);
# 3341 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxSetCacheConfig(CUfunc_cache config);
# 3384 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxGetSharedMemConfig(CUsharedconfig *pConfig);
# 3437 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxSetSharedMemConfig(CUsharedconfig config);
# 3475 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxGetApiVersion(CUcontext ctx, unsigned int *version);
# 3515 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxGetStreamPriorityRange(int *leastPriority, int *greatestPriority);
# 3570 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuCtxAttach(CUcontext *pctx, unsigned int flags);
# 3606 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuCtxDetach(CUcontext ctx);
# 3661 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuModuleLoad(CUmodule *module, const char *fname);
# 3698 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuModuleLoadData(CUmodule *module, const void *image);
# 3741 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuModuleLoadDataEx(CUmodule *module, const void *image, unsigned int numOptions, CUjit_option *options, void **optionValues);
# 3783 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuModuleLoadFatBinary(CUmodule *module, const void *fatCubin);
# 3808 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuModuleUnload(CUmodule hmod);
# 3838 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuModuleGetFunction(CUfunction *hfunc, CUmodule hmod, const char *name);
# 3874 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuModuleGetGlobal_v2(CUdeviceptr *dptr, size_t *bytes, CUmodule hmod, const char *name);
# 3909 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuModuleGetTexRef(CUtexref *pTexRef, CUmodule hmod, const char *name);
# 3941 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuModuleGetSurfRef(CUsurfref *pSurfRef, CUmodule hmod, const char *name);
# 3983 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult
cuLinkCreate_v2(unsigned int numOptions, CUjit_option *options, void **optionValues, CUlinkState *stateOut);
# 4020 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult
cuLinkAddData_v2(CUlinkState state, CUjitInputType type, void *data, size_t size, const char *name,
    unsigned int numOptions, CUjit_option *options, void **optionValues);
# 4059 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult
cuLinkAddFile_v2(CUlinkState state, CUjitInputType type, const char *path,
    unsigned int numOptions, CUjit_option *options, void **optionValues);
# 4086 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult
cuLinkComplete(CUlinkState state, void **cubinOut, size_t *sizeOut);
# 4100 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult
cuLinkDestroy(CUlinkState state);
# 4150 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemGetInfo_v2(size_t *free, size_t *total);
# 4184 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemAlloc_v2(CUdeviceptr *dptr, size_t bytesize);
# 4246 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemAllocPitch_v2(CUdeviceptr *dptr, size_t *pPitch, size_t WidthInBytes, size_t Height, unsigned int ElementSizeBytes);
# 4276 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemFree_v2(CUdeviceptr dptr);
# 4310 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemGetAddressRange_v2(CUdeviceptr *pbase, size_t *psize, CUdeviceptr dptr);
# 4357 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemAllocHost_v2(void **pp, size_t bytesize);
# 4388 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemFreeHost(void *p);
# 4470 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemHostAlloc(void **pp, size_t bytesize, unsigned int Flags);
# 4524 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemHostGetDevicePointer_v2(CUdeviceptr *pdptr, void *p, unsigned int Flags);
# 4552 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemHostGetFlags(unsigned int *pFlags, void *p);
# 4664 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemAllocManaged(CUdeviceptr *dptr, size_t bytesize, unsigned int flags);
# 4697 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDeviceGetByPCIBusId(CUdevice *dev, const char *pciBusId);
# 4729 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDeviceGetPCIBusId(char *pciBusId, int len, CUdevice dev);
# 4773 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuIpcGetEventHandle(CUipcEventHandle *pHandle, CUevent event);
# 4812 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuIpcOpenEventHandle(CUevent *phEvent, CUipcEventHandle handle);
# 4851 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuIpcGetMemHandle(CUipcMemHandle *pHandle, CUdeviceptr dptr);
# 4904 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuIpcOpenMemHandle(CUdeviceptr *pdptr, CUipcMemHandle handle, unsigned int Flags);
# 4937 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuIpcCloseMemHandle(CUdeviceptr dptr);
# 5023 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemHostRegister_v2(void *p, size_t bytesize, unsigned int Flags);
# 5049 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemHostUnregister(void *p);
# 5088 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount);
# 5118 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyPeer(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount);
# 5156 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyHtoD_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount);
# 5191 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyDtoH_v2(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount);
# 5227 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyDtoD_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount);
# 5263 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyDtoA_v2(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount);
# 5301 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyAtoD_v2(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 5337 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyHtoA_v2(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount);
# 5373 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyAtoH_v2(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 5413 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyAtoA_v2(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 5577 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpy2D_v2(const CUDA_MEMCPY2D *pCopy);
# 5739 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D *pCopy);
# 5908 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpy3D_v2(const CUDA_MEMCPY3D *pCopy);
# 5934 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpy3DPeer(const CUDA_MEMCPY3D_PEER *pCopy);
# 5977 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyAsync(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream);
# 6009 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyPeerAsync(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream);
# 6050 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyHtoDAsync_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount, CUstream hStream);
# 6089 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyDtoHAsync_v2(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
# 6129 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyDtoDAsync_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
# 6169 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyHtoAAsync_v2(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount, CUstream hStream);
# 6209 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpyAtoHAsync_v2(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream);
# 6377 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D *pCopy, CUstream hStream);
# 6550 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D *pCopy, CUstream hStream);
# 6578 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemcpy3DPeerAsync(const CUDA_MEMCPY3D_PEER *pCopy, CUstream hStream);
# 6615 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemsetD8_v2(CUdeviceptr dstDevice, unsigned char uc, size_t N);
# 6650 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemsetD16_v2(CUdeviceptr dstDevice, unsigned short us, size_t N);
# 6685 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemsetD32_v2(CUdeviceptr dstDevice, unsigned int ui, size_t N);
# 6725 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemsetD2D8_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height);
# 6766 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemsetD2D16_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height);
# 6807 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemsetD2D32_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height);
# 6844 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemsetD8Async(CUdeviceptr dstDevice, unsigned char uc, size_t N, CUstream hStream);
# 6881 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemsetD16Async(CUdeviceptr dstDevice, unsigned short us, size_t N, CUstream hStream);
# 6917 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemsetD32Async(CUdeviceptr dstDevice, unsigned int ui, size_t N, CUstream hStream);
# 6959 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemsetD2D8Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height, CUstream hStream);
# 7002 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemsetD2D16Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height, CUstream hStream);
# 7045 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemsetD2D32Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height, CUstream hStream);
# 7149 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuArrayCreate_v2(CUarray *pHandle, const CUDA_ARRAY_DESCRIPTOR *pAllocateArray);
# 7183 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR *pArrayDescriptor, CUarray hArray);
# 7215 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuArrayDestroy(CUarray hArray);
# 7396 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuArray3DCreate_v2(CUarray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pAllocateArray);
# 7433 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR *pArrayDescriptor, CUarray hArray);
# 7578 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMipmappedArrayCreate(CUmipmappedArray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pMipmappedArrayDesc, unsigned int numMipmapLevels);
# 7608 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMipmappedArrayGetLevel(CUarray *pLevelArray, CUmipmappedArray hMipmappedArray, unsigned int level);
# 7632 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMipmappedArrayDestroy(CUmipmappedArray hMipmappedArray);
# 7884 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuPointerGetAttribute(void *data, CUpointer_attribute attribute, CUdeviceptr ptr);
# 7954 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemPrefetchAsync(CUdeviceptr devPtr, size_t count, CUdevice dstDevice, CUstream hStream);
# 8068 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemAdvise(CUdeviceptr devPtr, size_t count, CUmem_advise advice, CUdevice device);
# 8126 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemRangeGetAttribute(void *data, size_t dataSize, CUmem_range_attribute attribute, CUdeviceptr devPtr, size_t count);
# 8166 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuMemRangeGetAttributes(void **data, size_t *dataSizes, CUmem_range_attribute *attributes, size_t numAttributes, CUdeviceptr devPtr, size_t count);
# 8210 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuPointerSetAttribute(const void *value, CUpointer_attribute attribute, CUdeviceptr ptr);
# 8255 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuPointerGetAttributes(unsigned int numAttributes, CUpointer_attribute *attributes, void **data, CUdeviceptr ptr);
# 8305 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamCreate(CUstream *phStream, unsigned int Flags);
# 8354 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamCreateWithPriority(CUstream *phStream, unsigned int flags, int priority);
# 8385 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamGetPriority(CUstream hStream, int *priority);
# 8413 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamGetFlags(CUstream hStream, unsigned int *flags);
# 8459 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamGetCtx(CUstream hStream, CUcontext *pctx);
# 8492 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamWaitEvent(CUstream hStream, CUevent hEvent, unsigned int Flags);
# 8559 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamAddCallback(CUstream hStream, CUstreamCallback callback, void *userData, unsigned int flags);
# 8649 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamAttachMemAsync(CUstream hStream, CUdeviceptr dptr, size_t length, unsigned int flags);
# 8681 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamQuery(CUstream hStream);
# 8709 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamSynchronize(CUstream hStream);
# 8739 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamDestroy_v2(CUstream hStream);
# 8796 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuEventCreate(CUevent *phEvent, unsigned int Flags);
# 8837 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuEventRecord(CUevent hEvent, CUstream hStream);
# 8869 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuEventQuery(CUevent hEvent);
# 8900 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuEventSynchronize(CUevent hEvent);
# 8930 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuEventDestroy_v2(CUevent hEvent);
# 8975 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuEventElapsedTime(float *pMilliseconds, CUevent hStart, CUevent hEnd);
# 9060 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamWaitValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned int flags);
# 9095 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamWaitValue64(CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned int flags);
# 9130 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamWriteValue32(CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned int flags);
# 9164 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamWriteValue64(CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned int flags);
# 9199 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuStreamBatchMemOp(CUstream stream, unsigned int count, CUstreamBatchMemOpParams *paramArray, unsigned int flags);
# 9273 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuFuncGetAttribute(int *pi, CUfunction_attribute attrib, CUfunction hfunc);
# 9321 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuFuncSetAttribute(CUfunction hfunc, CUfunction_attribute attrib, int value);
# 9366 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuFuncSetCacheConfig(CUfunction hfunc, CUfunc_cache config);
# 9419 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuFuncSetSharedMemConfig(CUfunction hfunc, CUsharedconfig config);
# 9534 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuLaunchKernel(CUfunction f,
                                unsigned int gridDimX,
                                unsigned int gridDimY,
                                unsigned int gridDimZ,
                                unsigned int blockDimX,
                                unsigned int blockDimY,
                                unsigned int blockDimZ,
                                unsigned int sharedMemBytes,
                                CUstream hStream,
                                void **kernelParams,
                                void **extra);
# 9623 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuLaunchCooperativeKernel(CUfunction f,
                                unsigned int gridDimX,
                                unsigned int gridDimY,
                                unsigned int gridDimZ,
                                unsigned int blockDimX,
                                unsigned int blockDimY,
                                unsigned int blockDimZ,
                                unsigned int sharedMemBytes,
                                CUstream hStream,
                                void **kernelParams);
# 9767 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuLaunchCooperativeKernelMultiDevice(CUDA_LAUNCH_PARAMS *launchParamsList, unsigned int numDevices, unsigned int flags);
# 9819 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z);
# 9853 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuFuncSetSharedSize(CUfunction hfunc, unsigned int bytes);
# 9885 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuParamSetSize(CUfunction hfunc, unsigned int numbytes);
# 9918 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuParamSeti(CUfunction hfunc, int offset, unsigned int value);
# 9951 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuParamSetf(CUfunction hfunc, int offset, float value);
# 9986 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuParamSetv(CUfunction hfunc, int offset, void *ptr, unsigned int numbytes);
# 10023 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuLaunch(CUfunction f);
# 10062 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuLaunchGrid(CUfunction f, int grid_width, int grid_height);
# 10109 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream);
# 10134 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuParamSetTexRef(CUfunction hfunc, int texunit, CUtexref hTexRef);
# 10174 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize);
# 10216 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize, unsigned int flags);
# 10268 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuOccupancyMaxPotentialBlockSize(int *minGridSize, int *blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit);
# 10314 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuOccupancyMaxPotentialBlockSizeWithFlags(int *minGridSize, int *blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit, unsigned int flags);
# 10358 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefSetArray(CUtexref hTexRef, CUarray hArray, unsigned int Flags);
# 10386 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefSetMipmappedArray(CUtexref hTexRef, CUmipmappedArray hMipmappedArray, unsigned int Flags);
# 10431 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefSetAddress_v2(size_t *ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, size_t bytes);
# 10484 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefSetAddress2D_v3(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR *desc, CUdeviceptr dptr, size_t Pitch);
# 10518 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefSetFormat(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents);
# 10562 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefSetAddressMode(CUtexref hTexRef, int dim, CUaddress_mode am);
# 10596 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefSetFilterMode(CUtexref hTexRef, CUfilter_mode fm);
# 10630 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefSetMipmapFilterMode(CUtexref hTexRef, CUfilter_mode fm);
# 10657 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefSetMipmapLevelBias(CUtexref hTexRef, float bias);
# 10686 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefSetMipmapLevelClamp(CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp);
# 10714 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefSetMaxAnisotropy(CUtexref hTexRef, unsigned int maxAniso);
# 10748 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefSetBorderColor(CUtexref hTexRef, float *pBorderColor);
# 10787 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefSetFlags(CUtexref hTexRef, unsigned int Flags);
# 10813 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefGetAddress_v2(CUdeviceptr *pdptr, CUtexref hTexRef);
# 10839 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefGetArray(CUarray *phArray, CUtexref hTexRef);
# 10864 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefGetMipmappedArray(CUmipmappedArray *phMipmappedArray, CUtexref hTexRef);
# 10890 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefGetAddressMode(CUaddress_mode *pam, CUtexref hTexRef, int dim);
# 10914 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefGetFilterMode(CUfilter_mode *pfm, CUtexref hTexRef);
# 10940 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefGetFormat(CUarray_format *pFormat, int *pNumChannels, CUtexref hTexRef);
# 10964 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefGetMipmapFilterMode(CUfilter_mode *pfm, CUtexref hTexRef);
# 10988 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefGetMipmapLevelBias(float *pbias, CUtexref hTexRef);
# 11013 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefGetMipmapLevelClamp(float *pminMipmapLevelClamp, float *pmaxMipmapLevelClamp, CUtexref hTexRef);
# 11037 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefGetMaxAnisotropy(int *pmaxAniso, CUtexref hTexRef);
# 11064 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefGetBorderColor(float *pBorderColor, CUtexref hTexRef);
# 11087 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexRefGetFlags(unsigned int *pFlags, CUtexref hTexRef);
# 11126 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuTexRefCreate(CUtexref *pTexRef);
# 11146 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
__attribute__((deprecated)) CUresult cuTexRefDestroy(CUtexref hTexRef);
# 11188 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuSurfRefSetArray(CUsurfref hSurfRef, CUarray hArray, unsigned int Flags);
# 11209 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuSurfRefGetArray(CUarray *phArray, CUsurfref hSurfRef);
# 11433 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexObjectCreate(CUtexObject *pTexObject, const CUDA_RESOURCE_DESC *pResDesc, const CUDA_TEXTURE_DESC *pTexDesc, const CUDA_RESOURCE_VIEW_DESC *pResViewDesc);
# 11453 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexObjectDestroy(CUtexObject texObject);
# 11474 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUtexObject texObject);
# 11495 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexObjectGetTextureDesc(CUDA_TEXTURE_DESC *pTexDesc, CUtexObject texObject);
# 11517 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuTexObjectGetResourceViewDesc(CUDA_RESOURCE_VIEW_DESC *pResViewDesc, CUtexObject texObject);
# 11560 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuSurfObjectCreate(CUsurfObject *pSurfObject, const CUDA_RESOURCE_DESC *pResDesc);
# 11580 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuSurfObjectDestroy(CUsurfObject surfObject);
# 11601 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuSurfObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUsurfObject surfObject);
# 11646 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDeviceCanAccessPeer(int *canAccessPeer, CUdevice dev, CUdevice peerDev);
# 11697 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxEnablePeerAccess(CUcontext peerContext, unsigned int Flags);
# 11724 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuCtxDisablePeerAccess(CUcontext peerContext);
# 11768 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuDeviceGetP2PAttribute(int* value, CUdevice_P2PAttribute attrib, CUdevice srcDevice, CUdevice dstDevice);
# 11814 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuGraphicsUnregisterResource(CUgraphicsResource resource);
# 11854 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuGraphicsSubResourceGetMappedArray(CUarray *pArray, CUgraphicsResource resource, unsigned int arrayIndex, unsigned int mipLevel);
# 11887 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuGraphicsResourceGetMappedMipmappedArray(CUmipmappedArray *pMipmappedArray, CUgraphicsResource resource);
# 11924 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr *pDevPtr, size_t *pSize, CUgraphicsResource resource);
# 11966 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuGraphicsResourceSetMapFlags_v2(CUgraphicsResource resource, unsigned int flags);
# 12006 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuGraphicsMapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream);
# 12043 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
CUresult cuGraphicsUnmapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream);



CUresult cuGetExportTable(const void **ppExportTable, const CUuuid *pExportTableId);
# 12374 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda.h"
}
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/raja_cudaerrchk.hpp" 2




namespace RAJA
{
# 51 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/raja_cudaerrchk.hpp"
inline void cudaAssert(cudaError_t code,
                       const char *file,
                       int line,
                       bool abort = true)
{
  if (code != cudaSuccess) {
    fprintf(
        stderr, "CUDAassert: %s %s %d\n", cudaGetErrorString(code), file, line);
    if (abort) RAJA_ABORT_OR_THROW("CUDAassert");
  }
}

}
# 36 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/ListSegment.hpp" 2
# 46 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/ListSegment.hpp"
namespace RAJA
{
# 62 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/ListSegment.hpp"
template <typename T>
class TypedListSegment
{
# 74 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/ListSegment.hpp"
  static constexpr bool Has_GPU = true;





  struct TrivialCopy {
  };

  struct BlockCopy {
  };


  using GPU_memory = std::integral_constant<bool, true>;

  using CPU_memory = std::integral_constant<bool, false>;


  void deallocate(GPU_memory) {

    { ::RAJA::cudaAssert((cudaFree(m_data)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/ListSegment.hpp", 94); };



  }


  void allocate(GPU_memory)
  {

    { ::RAJA::cudaAssert((cudaMallocManaged((void**)&m_data, m_size * sizeof(value_type), 0x01)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/ListSegment.hpp", 106); };







  }


  void deallocate(CPU_memory) { delete[] m_data; }


  void allocate(CPU_memory) { m_data = new T[m_size]; }



  template <typename Container>
  void copy(Container&& src, BlockCopy)
  {
    { ::RAJA::cudaAssert((cudaMemcpy( m_data, &(*src.begin()), m_size * sizeof(T), cudaMemcpyDefault)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/ListSegment.hpp", 126); };

  }
# 139 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/ListSegment.hpp"
  template <typename Container>
  void copy(Container&& source, TrivialCopy)
  {
    auto dest = m_data;
    auto src = source.begin();
    auto const end = source.end();
    while (src != end) {
      *dest = *src;
      ++dest;
      ++src;
    }
  }


  template <bool GPU, typename Container>
  void allocate_and_copy(Container&& src)
  {
    allocate(std::integral_constant<bool, GPU>());
    static constexpr bool use_gpu =
        GPU && std::is_pointer<decltype(src.begin())>::value &&
        std::is_same<type_traits::IterableValue<Container>, value_type>::value;
    using TagType =
        typename std::conditional<use_gpu, BlockCopy, TrivialCopy>::type;
    copy(src, TagType());
  }

public:

  using value_type = T;


  using iterator = T*;


  using IndexType = RAJA::Index_type;


  TypedListSegment() = delete;
# 198 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/ListSegment.hpp"
  TypedListSegment(const value_type* values,
                   Index_type length,
                   camp::resources::Resource& resource,
                   IndexOwnership owned = Owned)
    : m_resource(resource), m_use_resource(true)
  {
    initIndexData(m_use_resource,
                  values, length, owned);
  }







  template <typename Container>
  TypedListSegment(const Container& container,
                   camp::resources::Resource& resource)
    : m_resource(resource), m_use_resource(true),
      m_owned(Unowned), m_data(nullptr), m_size(container.size())
  {

    if (m_size > 0) {

      camp::resources::Resource host_res{camp::resources::Host()};

      value_type* tmp = host_res.allocate<value_type>(m_size);

      auto dest = tmp;
      auto src = container.begin();
      auto const end = container.end();
      while (src != end) {
        *dest = *src;
        ++dest;
        ++src;
      }

      m_data = m_resource.allocate<value_type>(m_size);
      m_resource.memcpy(m_data, tmp, sizeof(value_type) * m_size);
      m_owned = Owned;

      host_res.deallocate(tmp);

    }
  }
# 265 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/ListSegment.hpp"
  [[deprecated("In next RAJA release, TypedListSegment ctor will require a camp Resource object")]]
  TypedListSegment(const value_type* values,
                   Index_type length,
                   IndexOwnership owned = Owned)
    : m_resource(camp::resources::Resource{camp::resources::Host()}),
      m_use_resource(false),
      m_owned(Unowned), m_data(nullptr), m_size(0)
  {
    initIndexData(m_use_resource,
                  values, length, owned);
  }







  template <typename Container>
  [[deprecated("In next RAJA release, TypedListSegment ctor will require a camp Resource object")]]
  explicit TypedListSegment(const Container& container)
    : m_resource(camp::resources::Resource{camp::resources::Host()}),
      m_use_resource(false),
      m_owned(Unowned), m_data(nullptr), m_size(container.size())
  {
    if (m_size > 0) {
      allocate_and_copy<Has_GPU>(container);
      m_owned = Owned;
    }
  }




  TypedListSegment(const TypedListSegment& other)
    : m_resource(other.m_resource), m_use_resource(other.m_use_resource),
      m_owned(Unowned), m_data(nullptr), m_size(0)
  {
    bool from_copy_ctor = true;
    initIndexData(other.m_use_resource,
                  other.m_data, other.m_size, other.m_owned, from_copy_ctor);
  }




  TypedListSegment(TypedListSegment&& rhs)
    : m_resource(rhs.m_resource), m_use_resource(rhs.m_use_resource),
      m_owned(rhs.m_owned), m_data(rhs.m_data), m_size(rhs.m_size)
  {

    rhs.m_owned = Unowned;
  }




  ~TypedListSegment()
  {
    if (m_data != nullptr && m_owned == Owned) {

      if (m_use_resource) {
        m_resource.deallocate(m_data);
      } else {
        deallocate(std::integral_constant<bool, Has_GPU>());
      }

    }
  }





  __attribute__((host)) __attribute__((device)) void swap(TypedListSegment& other)
  {
    camp::safe_swap(m_resource, other.m_resource);
    camp::safe_swap(m_use_resource, other.m_use_resource);
    camp::safe_swap(m_data, other.m_data);
    camp::safe_swap(m_size, other.m_size);
    camp::safe_swap(m_owned, other.m_owned);
  }


  __attribute__((host)) __attribute__((device)) iterator end() const { return m_data + m_size; }


  __attribute__((host)) __attribute__((device)) iterator begin() const { return m_data; }


  __attribute__((host)) __attribute__((device)) Index_type size() const { return m_size; }


  __attribute__((host)) __attribute__((device)) IndexOwnership getIndexOwnership() const { return m_owned; }



  __attribute__((host)) __attribute__((device)) bool indicesEqual(const value_type* container,
                                     Index_type len) const
  {
    if (container == m_data) return len == m_size;
    if (len != m_size || container == nullptr || m_data == nullptr)
      return false;
    for (Index_type i = 0; i < m_size; ++i)
      if (m_data[i] != container[i]) return false;
    return true;
  }




  __attribute__((host)) __attribute__((device)) bool operator==(const TypedListSegment& other) const
  {
    return (indicesEqual(other.m_data, other.m_size));
  }




  __attribute__((host)) __attribute__((device)) bool operator!=(const TypedListSegment& other) const
  {
    return (!(*this == other));
  }

private:




  void initIndexData(bool use_resource,
                     const value_type* container,
                     Index_type len,
                     IndexOwnership container_own,
                     bool from_copy_ctor = false)
  {


    if (len <= 0 || container == nullptr) {
      m_data = nullptr;
      m_size = 0;
      m_owned = Unowned;
      return;
    }


    m_size = len;
    m_owned = container_own;
    if (m_owned == Owned) {

      if (use_resource) {

        if ( from_copy_ctor ) {

          m_data = m_resource.allocate<value_type>(m_size);
          m_resource.memcpy(m_data, container, sizeof(value_type) * m_size);

        } else {

          camp::resources::Resource host_res{camp::resources::Host()};

          value_type* tmp = host_res.allocate<value_type>(m_size);

          for (Index_type i = 0; i < m_size; ++i) {
            tmp[i] = container[i];
          }

          m_data = m_resource.allocate<value_type>(m_size);
          m_resource.memcpy(m_data, tmp, sizeof(value_type) * m_size);

          host_res.deallocate(tmp);

        }

      } else {
        allocate_and_copy<Has_GPU>(RAJA::make_span(container, len));
      }

      return;
    }



    m_data = const_cast<value_type*>(container);
  }



  camp::resources::Resource m_resource;


  bool m_use_resource;


  IndexOwnership m_owned;


  value_type* m_data;


  Index_type m_size;
};


using ListSegment = TypedListSegment<Index_type>;

}

namespace std
{




template <typename T>
inline __attribute__((always_inline)) void swap(RAJA::TypedListSegment<T>& a,
                      RAJA::TypedListSegment<T>& b)
{
  a.swap(b);
}
}
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSet.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/RangeSegment.hpp" 1
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/RangeSegment.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/Iterators.hpp" 1
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/Iterators.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexValue.hpp" 1
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexValue.hpp"
namespace RAJA
{

struct IndexValueBase {
};
# 46 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexValue.hpp"
template <typename TYPE, typename VALUE = RAJA::Index_type>
struct IndexValue : public IndexValueBase {

  using value_type = VALUE;


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) constexpr IndexValue() : value(0) {}





  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) constexpr explicit IndexValue(value_type v)
      : value(v)
  {
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) value_type &operator*() { return value; }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) const value_type &operator*() const
  {
    return value;
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE operator++(int)
  {
    TYPE self(value);
    value++;
    return self;
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE &operator++()
  {
    value++;
    return static_cast<TYPE &>(*this);
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE operator--(int)
  {
    TYPE self(value);
    value--;
    return self;
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE &operator--()
  {
    value--;
    return static_cast<TYPE &>(*this);
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE operator+(value_type a) const
  {
    return TYPE(value + a);
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE operator+(TYPE a) const
  {
    return TYPE(value + a.value);
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE operator-(value_type a) const
  {
    return TYPE(value - a);
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE operator-(TYPE a) const
  {
    return TYPE(value - a.value);
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE operator*(value_type a) const
  {
    return TYPE(value * a);
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE operator*(TYPE a) const
  {
    return TYPE(value * a.value);
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE operator/(value_type a) const
  {
    return TYPE(value / a);
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE operator/(TYPE a) const
  {
    return TYPE(value / a.value);
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE operator%(value_type a) const
  {
    return TYPE(value % a);
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE operator%(TYPE a) const
  {
    return TYPE(value % a.value);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE &operator+=(value_type x)
  {
    value += x;
    return static_cast<TYPE &>(*this);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE &operator+=(TYPE x)
  {
    value += x.value;
    return static_cast<TYPE &>(*this);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE &operator-=(value_type x)
  {
    value -= x;
    return static_cast<TYPE &>(*this);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE &operator-=(TYPE x)
  {
    value -= x.value;
    return static_cast<TYPE &>(*this);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE &operator*=(value_type x)
  {
    value *= x;
    return static_cast<TYPE &>(*this);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE &operator*=(TYPE x)
  {
    value *= x.value;
    return static_cast<TYPE &>(*this);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE &operator/=(value_type x)
  {
    value /= x;
    return static_cast<TYPE &>(*this);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TYPE &operator/=(TYPE x)
  {
    value /= x.value;
    return static_cast<TYPE &>(*this);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator<(value_type x) const
  {
    return (value < x);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator<(TYPE x) const
  {
    return (value < x.value);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator<=(value_type x) const
  {
    return (value <= x);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator<=(TYPE x) const
  {
    return (value <= x.value);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator>(value_type x) const
  {
    return (value > x);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator>(TYPE x) const
  {
    return (value > x.value);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator>=(value_type x) const
  {
    return (value >= x);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator>=(TYPE x) const
  {
    return (value >= x.value);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator==(value_type x) const
  {
    return (value == x);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator==(TYPE x) const
  {
    return (value == x.value);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator!=(value_type x) const
  {
    return (value != x);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator!=(TYPE x) const
  {
    return (value != x.value);
  }



  static std::string getName();

protected:
  value_type value;
};

namespace internal
{

template <typename TO, typename FROM>
constexpr __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TO convertIndex_helper(FROM const val)
{
  return TO(val);
}
template <typename TO, typename FROM>
constexpr __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TO
convertIndex_helper(typename FROM::IndexValueType const val)
{
  return static_cast<TO>(*val);
}


}






template <typename TO, typename FROM>
constexpr __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TO convertIndex(FROM const val)
{
  return internal::convertIndex_helper<TO, FROM>(val);
}







template <typename FROM>
constexpr __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
    typename std::enable_if<std::is_base_of<IndexValueBase, FROM>::value,
                            typename FROM::value_type>::type
    stripIndexType(FROM const val)
{
  return *val;
}



template <typename FROM>
constexpr __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
    typename std::enable_if<!std::is_base_of<IndexValueBase, FROM>::value,
                            FROM>::type
    stripIndexType(FROM const val)
{
  return val;
}

namespace internal{
template<typename FROM, typename Enable = void>
struct StripIndexTypeT {};

template<typename FROM>
struct StripIndexTypeT<FROM, typename std::enable_if<std::is_base_of<IndexValueBase, FROM>::value>::type>
{
    using type = typename FROM::value_type;
};

template<typename FROM>
struct StripIndexTypeT<FROM, typename std::enable_if<!std::is_base_of<IndexValueBase, FROM>::value>::type>
{
    using type = FROM;
};
}







template<typename FROM>
using strip_index_type_t = typename internal::StripIndexTypeT<FROM>::type;







template<typename FROM>
using make_signed_t = typename std::conditional <
                                  std::is_floating_point<FROM>::value,
                                    std::common_type<FROM>,
                                    std::make_signed<FROM>
                               >::type::type;

}
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/Iterators.hpp" 2



namespace RAJA
{
namespace Iterators
{
# 103 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/Iterators.hpp"
template <typename Type = Index_type,
          typename DifferenceType = Type,
          typename PointerType = Type*>
class numeric_iterator
{
public:
  using value_type = Type;
  using stripped_value_type = strip_index_type_t<Type>;
  using difference_type = DifferenceType;
  using pointer = PointerType;
  using reference = value_type&;
  using iterator_category = std::random_access_iterator_tag;

  __attribute__((host)) __attribute__((device)) constexpr numeric_iterator() {}
  __attribute__((host)) __attribute__((device)) constexpr numeric_iterator(const numeric_iterator& rhs)
      : val(rhs.val)
  {
  }
  __attribute__((host)) __attribute__((device)) constexpr numeric_iterator(numeric_iterator&& rhs)
      : val(rhs.val)
  {
  }
  __attribute__((host)) __attribute__((device)) numeric_iterator& operator=(const numeric_iterator& rhs)
  {
    val = rhs.val;
    return *this;
  }
  __attribute__((host)) __attribute__((device)) numeric_iterator& operator=(numeric_iterator&& rhs)
  {
    val = rhs.val;
    return *this;
  }
  __attribute__((host)) __attribute__((device)) constexpr numeric_iterator(const stripped_value_type& rhs)
      : val(rhs)
  {
  }

  __attribute__((host)) __attribute__((device)) inline DifferenceType get_stride() const { return 1; }

  __attribute__((host)) __attribute__((device)) inline bool operator==(const numeric_iterator& rhs) const
  {
    return val == rhs.val;
  }
  __attribute__((host)) __attribute__((device)) inline bool operator!=(const numeric_iterator& rhs) const
  {
    return val != rhs.val;
  }
  __attribute__((host)) __attribute__((device)) inline bool operator>(const numeric_iterator& rhs) const
  {
    return val > rhs.val;
  }
  __attribute__((host)) __attribute__((device)) inline bool operator<(const numeric_iterator& rhs) const
  {
    return val < rhs.val;
  }
  __attribute__((host)) __attribute__((device)) inline bool operator>=(const numeric_iterator& rhs) const
  {
    return val >= rhs.val;
  }
  __attribute__((host)) __attribute__((device)) inline bool operator<=(const numeric_iterator& rhs) const
  {
    return val <= rhs.val;
  }

  __attribute__((host)) __attribute__((device)) inline numeric_iterator& operator++()
  {
    ++val;
    return *this;
  }
  __attribute__((host)) __attribute__((device)) inline numeric_iterator& operator--()
  {
    --val;
    return *this;
  }
  __attribute__((host)) __attribute__((device)) inline numeric_iterator operator++(int)
  {
    numeric_iterator tmp(*this);
    ++val;
    return tmp;
  }
  __attribute__((host)) __attribute__((device)) inline numeric_iterator operator--(int)
  {
    numeric_iterator tmp(*this);
    --val;
    return tmp;
  }

  __attribute__((host)) __attribute__((device)) inline numeric_iterator& operator+=(
      const difference_type& rhs)
  {



    val += rhs;
    return *this;
  }
  __attribute__((host)) __attribute__((device)) inline numeric_iterator& operator-=(
      const difference_type& rhs)
  {



    val -= rhs;
    return *this;
  }
  __attribute__((host)) __attribute__((device)) inline numeric_iterator& operator+=(
      const numeric_iterator& rhs)
  {
    val += rhs.val;
    return *this;
  }
  __attribute__((host)) __attribute__((device)) inline numeric_iterator& operator-=(
      const numeric_iterator& rhs)
  {
    val -= rhs.val;
    return *this;
  }

  __attribute__((host)) __attribute__((device)) inline stripped_value_type operator+(
      const numeric_iterator& rhs) const
  {
    return val + rhs.val;
  }
  __attribute__((host)) __attribute__((device)) inline stripped_value_type operator-(
      const numeric_iterator& rhs) const
  {
    return val - rhs.val;
  }
  __attribute__((host)) __attribute__((device)) inline numeric_iterator operator+(
      const difference_type& rhs) const
  {



    return numeric_iterator(val + rhs);
  }
  __attribute__((host)) __attribute__((device)) inline numeric_iterator operator-(
      const difference_type& rhs) const
  {



    return numeric_iterator(val - rhs);
  }
  __attribute__((host)) __attribute__((device)) friend constexpr numeric_iterator operator+(
      difference_type lhs,
      const numeric_iterator& rhs)
  {





    return numeric_iterator(lhs + rhs.val);

  }
  __attribute__((host)) __attribute__((device)) friend constexpr numeric_iterator operator-(
      difference_type lhs,
      const numeric_iterator& rhs)
  {





    return numeric_iterator(lhs - rhs.val);

  }

  __attribute__((host)) __attribute__((device)) inline value_type operator*() const
  {
    return value_type(val);
  }
  __attribute__((host)) __attribute__((device)) inline value_type operator->() const
  {
    return value_type(val);
  }
  __attribute__((host)) __attribute__((device)) constexpr value_type operator[](difference_type rhs) const
  {
    return value_type(val + rhs);
  }

private:
  stripped_value_type val = 0;
};

template <typename Type = Index_type,
          typename DifferenceType = Type,
          typename PointerType = Type*>
class strided_numeric_iterator
{
public:
  using value_type = Type;
  using stripped_value_type = strip_index_type_t<Type>;
  using difference_type = DifferenceType;
  using pointer = DifferenceType*;
  using reference = DifferenceType&;
  using iterator_category = std::random_access_iterator_tag;

  __attribute__((host)) __attribute__((device)) constexpr strided_numeric_iterator() {}
  __attribute__((host)) __attribute__((device)) constexpr strided_numeric_iterator(
      const strided_numeric_iterator& rhs)
      : val(rhs.val), stride(rhs.stride)
  {
  }
  __attribute__((host)) __attribute__((device)) constexpr strided_numeric_iterator(strided_numeric_iterator&& rhs)
      : val(rhs.val), stride(rhs.stride)
  {
  }
  __attribute__((host)) __attribute__((device)) strided_numeric_iterator& operator=(
      const strided_numeric_iterator& rhs)
  {
    val = rhs.val;
    stride = rhs.stride;
    return *this;
  }
  __attribute__((host)) __attribute__((device)) strided_numeric_iterator& operator=(
      strided_numeric_iterator&& rhs)
  {
    val = rhs.val;
    stride = rhs.stride;
    return *this;
  }

  __attribute__((host)) __attribute__((device)) constexpr strided_numeric_iterator(
      stripped_value_type rhs,
      DifferenceType stride_ = DifferenceType(1))
      : val(rhs), stride(stride_)
  {
  }

  __attribute__((host)) __attribute__((device)) inline DifferenceType get_stride() const { return stride; }

  __attribute__((host)) __attribute__((device)) inline strided_numeric_iterator& operator++()
  {
    val += stride;
    return *this;
  }
  __attribute__((host)) __attribute__((device)) inline strided_numeric_iterator& operator--()
  {
    val -= stride;
    return *this;
  }

  __attribute__((host)) __attribute__((device)) inline strided_numeric_iterator& operator+=(
      const difference_type& rhs)
  {



    val += rhs * stride;
    return *this;
  }
  __attribute__((host)) __attribute__((device)) inline strided_numeric_iterator& operator-=(
      const difference_type& rhs)
  {



    val -= rhs * stride;
    return *this;
  }

  __attribute__((host)) __attribute__((device)) inline difference_type operator+(
      const strided_numeric_iterator& rhs) const
  {
    return (static_cast<difference_type>(val) +
            (static_cast<difference_type>(rhs.val))) /
           stride;
  }
  __attribute__((host)) __attribute__((device)) inline difference_type operator-(
      const strided_numeric_iterator& rhs) const
  {
    difference_type diff = (static_cast<difference_type>(val) -
                            (static_cast<difference_type>(rhs.val)));

    return (diff % stride != difference_type{0})
               ? (difference_type{1} + diff / stride)
               : diff / stride;
  }
  __attribute__((host)) __attribute__((device)) inline strided_numeric_iterator operator+(
      const difference_type& rhs) const
  {



    return strided_numeric_iterator(val + rhs * stride, stride);
  }
  __attribute__((host)) __attribute__((device)) inline strided_numeric_iterator operator-(
      const difference_type& rhs) const
  {



    return strided_numeric_iterator(val - rhs * stride, stride);
  }



  __attribute__((host)) __attribute__((device)) inline bool operator!=(
      const strided_numeric_iterator& rhs) const
  {
    return (val - rhs.val) / stride;
  }
  __attribute__((host)) __attribute__((device)) inline bool operator==(
      const strided_numeric_iterator& rhs) const
  {
    return !((val - rhs.val) / stride);
  }

  __attribute__((host)) __attribute__((device)) inline bool operator>(
      const strided_numeric_iterator& rhs) const
  {
    return val * stride > rhs.val * stride;
  }
  __attribute__((host)) __attribute__((device)) inline bool operator<(
      const strided_numeric_iterator& rhs) const
  {
    return val * stride < rhs.val * stride;
  }
  __attribute__((host)) __attribute__((device)) inline bool operator>=(
      const strided_numeric_iterator& rhs) const
  {
    return val * stride >= rhs.val * stride;
  }
  __attribute__((host)) __attribute__((device)) inline bool operator<=(
      const strided_numeric_iterator& rhs) const
  {
    return val * stride <= rhs.val * stride;
  }


  __attribute__((host)) __attribute__((device)) inline value_type operator*() const
  {
    return value_type(val);
  }
  __attribute__((host)) __attribute__((device)) inline value_type operator->() const
  {
    return value_type(val);
  }
  __attribute__((host)) __attribute__((device)) constexpr value_type operator[](difference_type rhs) const
  {
    return value_type(val + rhs * stride);
  }

private:
  stripped_value_type val = 0;
  DifferenceType stride = 1;
};


}

}
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/RangeSegment.hpp" 2





namespace RAJA
{
# 73 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/RangeSegment.hpp"
template <typename StorageT, typename DiffT = make_signed_t<strip_index_type_t<StorageT>>>
struct TypedRangeSegment {

  static_assert(std::is_signed<DiffT>::value, "TypedRangeSegment DiffT requires signed type.");
  static_assert(!std::is_floating_point<StorageT>::value, "TypedRangeStrideSegment Type must be non floating point.");


  using iterator = Iterators::numeric_iterator<StorageT, DiffT>;




  using value_type = StorageT;

  using IndexType = DiffT;






  using StripStorageT = strip_index_type_t<StorageT>;
  __attribute__((host)) __attribute__((device)) constexpr TypedRangeSegment(StripStorageT begin, StripStorageT end)
      : m_begin(iterator(begin)),
        m_end(begin > end ? m_begin : iterator(end))
  {
  }


  __attribute__((host)) __attribute__((device)) TypedRangeSegment() = delete;


  __attribute__((host)) __attribute__((device)) constexpr TypedRangeSegment(TypedRangeSegment&& o)
      : m_begin(std::move(o.m_begin)), m_end(std::move(o.m_end))
  {
  }


  __attribute__((host)) __attribute__((device)) constexpr TypedRangeSegment(TypedRangeSegment const& o)
      : m_begin(o.m_begin), m_end(o.m_end)
  {
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TypedRangeSegment& operator=(
      TypedRangeSegment const& o)
  {
    m_begin = o.m_begin;
    m_end = o.m_end;
    return *this;
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) ~TypedRangeSegment() {}





  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) void swap(TypedRangeSegment& other)
  {
    camp::safe_swap(m_begin, other.m_begin);
    camp::safe_swap(m_end, other.m_end);
  }





  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) iterator begin() const { return m_begin; }





  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) iterator end() const { return m_end; }





  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) DiffT size() const { return m_end - m_begin; }






  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) TypedRangeSegment slice(StorageT begin,
                                                       DiffT length) const
  {
    StorageT start = m_begin[0] + begin;
    StorageT end = start + length > m_end[0] ? m_end[0] : start + length;

    return TypedRangeSegment{stripIndexType(start), stripIndexType(end)};
  }






  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator==(TypedRangeSegment const& o) const
  {

    return m_begin == o.m_begin && m_end == o.m_end;
  }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) bool operator!=(TypedRangeSegment const& o) const
  {
    return !(operator==(o));
  }

private:

  iterator m_begin;


  iterator m_end;
};
# 255 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/RangeSegment.hpp"
template <typename StorageT, typename DiffT = make_signed_t<strip_index_type_t<StorageT>>>
struct TypedRangeStrideSegment {

  static_assert(std::is_signed<DiffT>::value, "TypedRangeStrideSegment DiffT requires signed type.");
  static_assert(!std::is_floating_point<StorageT>::value, "TypedRangeStrideSegment Type must be non floating point.");


  using iterator = Iterators::strided_numeric_iterator<StorageT, DiffT>;





  using value_type = StorageT;

  using IndexType = DiffT;






  using StripStorageT = strip_index_type_t<StorageT>;
  __attribute__((host)) __attribute__((device)) TypedRangeStrideSegment(StripStorageT begin,
                                           StripStorageT end,
                                           DiffT stride)
      : m_begin(iterator(begin, stride)),
        m_end(iterator(end, stride)),


        m_size((end - begin + stride - (stride > 0 ? 1 : -1)) / stride)




  {


    if (stride < 0 && end > begin) {
      m_end = m_begin;
    } else if (stride > 0 && end < begin) {
      m_end = m_begin;
    }


    m_size = m_size < DiffT{0} ? DiffT{0} : m_size;
  }


  __attribute__((host)) __attribute__((device)) TypedRangeStrideSegment() = delete;


  __attribute__((host)) __attribute__((device)) TypedRangeStrideSegment(TypedRangeStrideSegment&& o)
      : m_begin(std::move(o.m_begin)),
        m_end(std::move(o.m_end)),
        m_size(std::move(o.m_size))
  {
  }


  __attribute__((host)) __attribute__((device)) TypedRangeStrideSegment(TypedRangeStrideSegment const& o)
      : m_begin(o.m_begin), m_end(o.m_end), m_size(o.m_size)
  {
  }


  __attribute__((host)) __attribute__((device)) TypedRangeStrideSegment& operator=(
      TypedRangeStrideSegment const& o)
  {
    m_begin = o.m_begin;
    m_end = o.m_end;
    m_size = o.m_size;
    return *this;
  }


  __attribute__((host)) __attribute__((device)) ~TypedRangeStrideSegment() {}





  __attribute__((host)) __attribute__((device)) void swap(TypedRangeStrideSegment& other)
  {
    camp::safe_swap(m_begin, other.m_begin);
    camp::safe_swap(m_end, other.m_end);
    camp::safe_swap(m_size, other.m_size);
  }





  __attribute__((host)) __attribute__((device)) iterator begin() const { return m_begin; }





  __attribute__((host)) __attribute__((device)) iterator end() const { return m_end; }
# 363 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/RangeSegment.hpp"
  __attribute__((host)) __attribute__((device)) DiffT size() const { return m_size; }






  __attribute__((host)) __attribute__((device)) TypedRangeStrideSegment slice(StorageT begin,
                                                 DiffT length) const
  {
    StorageT stride = m_begin.get_stride();
    StorageT start = m_begin[0] + begin * stride;
    StorageT end = start + stride * length;

    if (stride > 0) {
      end = end > m_end[0] ? m_end[0] : end;
    } else {
      end = end < m_end[0] ? m_end[0] : end;
    }

    return TypedRangeStrideSegment{stripIndexType(start),
                                   stripIndexType(end),
                                   m_begin.get_stride()};

  }






  __attribute__((host)) __attribute__((device)) bool operator==(TypedRangeStrideSegment const& o) const
  {

    return m_begin == o.m_begin && m_end == o.m_end && m_size == o.m_size;
  }

private:

  iterator m_begin;


  iterator m_end;


  DiffT m_size;
};


using RangeSegment = TypedRangeSegment<Index_type>;


using RangeStrideSegment = TypedRangeStrideSegment<Index_type>;

namespace detail
{

template <typename T, typename... Rest>
struct common_type
    : std::common_type<T, typename std::common_type<Rest...>::type> {
};

template <typename T>
struct common_type<T> {
  using type = T;
};

template <typename... Ts>
using common_type_t = typename common_type<Ts...>::type;

}
# 444 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/RangeSegment.hpp"
template <typename BeginT,
          typename EndT,
          typename Common = detail::common_type_t<BeginT, EndT>>
__attribute__((host)) __attribute__((device)) TypedRangeSegment<Common> make_range(BeginT&& begin,
                                                      EndT&& end)
{
  return {begin, end};
}
# 463 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/RangeSegment.hpp"
template <typename BeginT,
          typename EndT,
          typename StrideT,
          typename Common = detail::common_type_t<BeginT, EndT>>
__attribute__((host)) __attribute__((device)) TypedRangeStrideSegment<Common> make_strided_range(
    BeginT&& begin,
    EndT&& end,
    StrideT&& stride)
{
  static_assert(std::is_signed<StrideT>::value, "make_strided_segment : stride must be signed.");
  static_assert(std::is_same<make_signed_t<EndT>, StrideT>::value, "make_stride_segment : stride and end must be of similar types.");
  return {begin, end, stride};
}

namespace concepts
{

template <typename T, typename U>
struct RangeConstructible
    : decltype(___valid_expr___(camp::val<RAJA::detail::common_type_t<T, U>>())) {
};

template <typename T, typename U, typename V>
struct RangeStrideConstructible
    : decltype(___valid_expr___(camp::val<RAJA::detail::common_type_t<T, U, V>>())) {
};

}

namespace type_traits
{

template <typename... Args> struct is_range_constructible : camp::concepts::requires_<RAJA::concepts::RangeConstructible, Args...> { };


template <typename... Args> struct is_range_stride_constructible : camp::concepts::requires_<RAJA::concepts::RangeStrideConstructible, Args...> { };


}

}

namespace std
{


template <typename T>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) void swap(RAJA::TypedRangeSegment<T>& a,
                                       RAJA::TypedRangeSegment<T>& b)
{
  a.swap(b);
}


template <typename T>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) void swap(RAJA::TypedRangeStrideSegment<T>& a,
                                       RAJA::TypedRangeStrideSegment<T>& b)
{
  a.swap(b);
}

}
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSet.hpp" 2


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/RAJAVec.hpp" 1
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/RAJAVec.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/MemUtils_CPU.hpp" 1
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/MemUtils_CPU.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 3
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/MemUtils_CPU.hpp" 2
# 36 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/MemUtils_CPU.hpp"
namespace RAJA
{




inline void* allocate_aligned(size_t alignment, size_t size)
{


  void* ret = nullptr;
  int err = posix_memalign(&ret, alignment, size);
  return err ? nullptr : ret;
# 64 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/MemUtils_CPU.hpp"
}





template <typename T>
inline T* allocate_aligned_type(size_t alignment, size_t size)
{
  return reinterpret_cast<T*>(allocate_aligned(alignment, size));
}





inline void free_aligned(void* ptr)
{

  free(ptr);
# 93 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/MemUtils_CPU.hpp"
}




struct FreeAligned
{
  void operator()(void* ptr)
  {
    free_aligned(ptr);
  }
};





template < typename T, typename index_type >
struct FreeAlignedType : FreeAligned
{
  index_type size = 0;

  void operator()(T* ptr)
  {
    for ( index_type i = size; i > 0; --i ) {
      ptr[i-1].~T();
    }
    FreeAligned::operator()(ptr);
  }
};

}
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/RAJAVec.hpp" 2

namespace RAJA
{
# 51 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/RAJAVec.hpp"
template <typename T, typename Allocator = std::allocator<T> >
class RAJAVec
{
  using allocator_traits_type = std::allocator_traits<Allocator>;
  using propagate_on_container_copy_assignment =
      typename allocator_traits_type::propagate_on_container_copy_assignment;
  using propagate_on_container_move_assignment =
      typename allocator_traits_type::propagate_on_container_move_assignment;
  using propagate_on_container_swap =
      typename allocator_traits_type::propagate_on_container_swap;
public:
  using value_type = T;
  using allocator_type = Allocator;
  using size_type = std::size_t;
  using difference_type = std::ptrdiff_t;
  using reference = value_type&;
  using const_reference = const value_type&;
  using pointer = typename allocator_traits_type::pointer;
  using const_pointer = typename allocator_traits_type::const_pointer;
  using iterator = value_type*;
  using const_iterator = const value_type*;




  explicit RAJAVec(size_type init_cap = 0,
                   const allocator_type& a = allocator_type())
      : m_data(nullptr), m_allocator(a), m_capacity(0), m_size(0)
  {
    reserve(init_cap);
  }




  RAJAVec(const RAJAVec& other)
      : m_data(nullptr),
        m_allocator(allocator_traits_type::select_on_container_copy_construction(other.m_allocator)),
        m_capacity(0),
        m_size(0)
  {
    reserve(other.size());
    copy_construct_items_back(other.size(), other.data());
  }




  RAJAVec(RAJAVec&& other)
      : m_data(other.m_data),
        m_allocator(std::move(other.m_allocator)),
        m_capacity(other.m_capacity),
        m_size(other.m_size)
  {
    other.m_data = nullptr;
    other.m_capacity = 0;
    other.m_size = 0;
  }




  RAJAVec& operator=(const RAJAVec& rhs)
  {
    if (&rhs != this) {
      copy_assign_private(rhs, propagate_on_container_copy_assignment{});
    }
    return *this;
  }




  RAJAVec& operator=(RAJAVec&& rhs)
  {
    if (&rhs != this) {
      move_assign_private(std::move(rhs), propagate_on_container_move_assignment{});
    }
    return *this;
  }




  ~RAJAVec()
  {
    clear();
    shrink_to_fit();
  }




  void swap(RAJAVec& other)
  {
    swap_private(other, propagate_on_container_swap{});
  }




        pointer data() { return m_data; }

  const_pointer data() const { return m_data; }




        iterator end() { return m_data + m_size; }

  const_iterator end() const { return m_data + m_size; }

  const_iterator cend() const { return m_data + m_size; }




        iterator begin() { return m_data; }

  const_iterator begin() const { return m_data; }

  const_iterator cbegin() const { return m_data; }




  bool empty() const { return (m_size == 0); }




  size_type size() const { return m_size; }




  size_type capacity() const { return m_capacity; }




  allocator_type get_allocator() const { return m_allocator; }




  void reserve(size_type target_capacity) { grow_cap(target_capacity); }




  void shrink_to_fit()
  {
    shrink_cap(m_size);
  }




  void clear()
  {
    destroy_items_after(0);
  }






  inline __attribute__((always_inline))
  void resize(size_type new_size)
  {
    if (new_size >= size()) {
      reserve(new_size);
      construct_items_back(new_size);
    } else {
      destroy_items_after(new_size);
    }
  }






  inline __attribute__((always_inline))
  void resize(size_type new_size, const_reference new_value)
  {
    if (new_size >= size()) {
      reserve(new_size);
      construct_items_back(new_size, new_value);
    } else {
      destroy_items_after(new_size);
    }
  }




        reference operator[](difference_type i) { return m_data[i]; }

  const_reference operator[](difference_type i) const { return m_data[i]; }




        reference front() { return m_data[0]; }

  const_reference front() const { return m_data[0]; }




        reference back() { return m_data[m_size-1]; }

  const_reference back() const { return m_data[m_size-1]; }





  void push_front(const_reference item) { emplace_front_private(item); }

  void push_front( value_type&& item) { emplace_front_private(std::move(item)); }

  template < typename ... Os >
  void emplace_front(Os&&... os) { emplace_front_private(std::forward<Os>(os)...); }




  void push_back(const_reference item) { emplace_back_private(item); }

  void push_back( value_type&& item) { emplace_back_private(std::move(item)); }

  template < typename ... Os >
  void emplace_back(Os&&... os) { emplace_back_private(std::forward<Os>(os)...); }




  void pop_back()
  {
    destroy_items_after(m_size-1);
  }

private:
  pointer m_data;
  allocator_type m_allocator;
  size_type m_capacity;
  size_type m_size;





  void copy_assign_private(RAJAVec const& rhs, std::true_type)
  {
    if (m_allocator != rhs.m_allocator) {
      clear();
      shrink_to_fit();
      m_allocator = rhs.m_allocator;
    }

    copy_assign_private(rhs, std::false_type{});
  }





  void copy_assign_private(RAJAVec const& rhs, std::false_type)
  {
    reserve(rhs.size());
    if (size() < rhs.size()) {
      copy_assign_items(0, size(), rhs.data());
      copy_construct_items_back(rhs.size(), rhs.data());
    } else {
      copy_assign_items(0, rhs.size(), rhs.data());
      destroy_items_after(size());
    }
  }





  void move_assign_private(RAJAVec&& rhs, std::true_type)
  {
    clear();
    shrink_to_fit();

    m_data = rhs.m_data;
    m_allocator = std::move(rhs.m_allocator);
    m_capacity = rhs.m_capacity;
    m_size = rhs.m_size;

    rhs.m_data = nullptr;
    rhs.m_capacity = 0;
    rhs.m_size = 0;
  }





  void move_assign_private(RAJAVec&& rhs, std::false_type)
  {
    if (m_allocator == rhs.m_allocator) {
      clear();
      shrink_to_fit();

      m_data = rhs.m_data;
      m_capacity = rhs.m_capacity;
      m_size = rhs.m_size;

      rhs.m_data = nullptr;
      rhs.m_capacity = 0;
      rhs.m_size = 0;
    } else {
      reserve(rhs.size());
      if (size() < rhs.size()) {
        move_assign_items(0, size(), rhs.data());
        move_construct_items_back(rhs.size(), rhs.data());
      } else {
        move_assign_items(0, rhs.size(), rhs.data());
        destroy_items_after(size());
      }
    }
  }




  void swap_private(RAJAVec& other, std::true_type)
  {
    using std::swap;
    swap(m_data, other.m_data);
    swap(m_allocator, other.m_allocator);
    swap(m_capacity, other.m_capacity);
    swap(m_size, other.m_size);
  }




  void swap_private(RAJAVec& other, std::false_type)
  {
    using std::swap;
    swap(m_data, other.m_data);
    swap(m_capacity, other.m_capacity);
    swap(m_size, other.m_size);
  }




  void copy_assign_items(size_type first, size_type last, const_pointer o_data)
  {
    for (size_type i = first; i < last; ++i) {
      m_data[i] = o_data[i];
    }
  }




  void move_assign_items(size_type first, size_type last, pointer o_data)
  {
    for (size_type i = first; i < last; ++i) {
      m_data[i] = std::move(o_data[i]);
    }
  }




  template < typename ... Os >
  void construct_items_back(size_type new_size, Os&&... os)
  {
    for (; m_size < new_size; ++m_size) {
      allocator_traits_type::construct(m_allocator, m_data+m_size, std::forward<Os>(os)...);
    }
  }




  void copy_construct_items_back(size_type new_size, const_pointer o_data)
  {
    for (; m_size < new_size; ++m_size) {
      allocator_traits_type::construct(m_allocator, m_data+m_size, o_data[m_size]);
    }
  }




  void move_construct_items_back(size_type new_size, pointer o_data)
  {
    for (; m_size < new_size; ++m_size) {
      allocator_traits_type::construct(m_allocator, m_data+m_size, std::move(o_data[m_size]));
    }
  }




  void destroy_items_after(size_type new_end)
  {
    for (; m_size > new_end; --m_size) {
      allocator_traits_type::destroy(m_allocator, m_data+m_size-1);
    }
  }




  template < typename ... Os >
  void emplace_front_private(Os&&... os)
  {
    reserve(m_size + 1);

    if (m_size > 0) {
      size_type i = m_size;
      allocator_traits_type::construct(m_allocator, m_data+i, std::move(m_data[i - 1]));
      for (--i; i > 0; --i) {
        m_data[i] = std::move(m_data[i - 1]);
      }
      allocator_traits_type::destroy(m_allocator, m_data);
    }
    allocator_traits_type::construct(m_allocator, m_data, std::forward<Os>(os)...);
    m_size++;
  }




  template < typename ... Os >
  void emplace_back_private(Os&&... os)
  {
    reserve(m_size + 1);
    allocator_traits_type::construct(m_allocator, m_data+m_size, std::forward<Os>(os)...);
    m_size++;
  }






  static constexpr const size_type s_init_cap = 8;
  static constexpr const double s_grow_fac = 1.5;




  size_type get_next_cap(size_type target_size)
  {
    size_type next_cap = s_init_cap;
    if (m_capacity != 0) {
      next_cap = static_cast<size_type>(m_capacity * s_grow_fac);
    }
    return std::max(target_size, next_cap);
  }




  void grow_cap(size_type target_size)
  {
    if (m_capacity < target_size) {
      change_cap(get_next_cap(target_size));
    }
  }




  void shrink_cap(size_type target_size)
  {
    if (m_capacity > target_size) {
      change_cap(std::max(m_size, target_size));
    }
  }





  void change_cap(size_type next_cap)
  {
    pointer tdata = nullptr;
    if (next_cap != 0) {
      tdata = allocator_traits_type::allocate(m_allocator, next_cap);
    }

    if (m_data) {
      for (size_type i = 0; i < m_size; ++i) {
        allocator_traits_type::construct(m_allocator, tdata+i, std::move(m_data[i]));
        allocator_traits_type::destroy(m_allocator, m_data+i);
      }
      allocator_traits_type::deallocate(m_allocator, m_data, m_capacity);
    }

    m_data = tdata;
    m_capacity = next_cap;
  }
};

}
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSet.hpp" 2






namespace RAJA
{

enum PushEnd { PUSH_FRONT, PUSH_BACK };
enum PushCopy { PUSH_COPY, PUSH_NOCOPY };

template <typename... TALL>
class TypedIndexSet;

namespace policy
{
namespace indexset
{
# 55 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSet.hpp"
template <typename SEG_ITER_POLICY_T, typename SEG_EXEC_POLICY_T = void>
struct ExecPolicy
    : public RAJA::make_policy_pattern_t<SEG_EXEC_POLICY_T::policy,
                                         RAJA::Pattern::forall> {
  using seg_it = SEG_ITER_POLICY_T;
  using seg_exec = SEG_EXEC_POLICY_T;
};

}
}

using policy::indexset::ExecPolicy;
# 77 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSet.hpp"
template <typename T0, typename... TREST>
class TypedIndexSet<T0, TREST...> : public TypedIndexSet<TREST...>
{
  using PARENT = TypedIndexSet<TREST...>;
  static const int T0_TypeId = sizeof...(TREST);

public:

  using value_type = typename T0::value_type;


  static_assert(std::is_same<value_type, typename PARENT::value_type>::value ||
                    T0_TypeId == 0,
                "All segments must have the same value_type");




  inline __attribute__((always_inline)) TypedIndexSet() : PARENT() {}





  inline __attribute__((always_inline))
  TypedIndexSet(TypedIndexSet<T0, TREST...> const &c)
      : PARENT((PARENT const &)c)
  {
    size_t num = c.data.size();
    data.resize(num);
    for (size_t i = 0; i < num; ++i) {
      data[i] = c.data[i];
    }

    owner.resize(num, 0);
  }


  TypedIndexSet<T0, TREST...> &operator=(const TypedIndexSet<T0, TREST...> &rhs)
  {
    if (&rhs != this) {
      TypedIndexSet<T0, TREST...> copy(rhs);
      this->swap(copy);
    }
    return *this;
  }


  inline __attribute__((always_inline)) ~TypedIndexSet()
  {
    size_t num_seg = data.size();
    for (size_t i = 0; i < num_seg; ++i) {

      if (owner[i]) {
        delete data[i];
      }
    }
  }


  void swap(TypedIndexSet<T0, TREST...> &other)
  {

    PARENT::swap((PARENT &)other);

    using std::swap;
    swap(data, other.data);
    swap(owner, other.owner);
  }






  template <typename P0, typename... PREST>
  inline __attribute__((always_inline)) bool compareSegmentById(
      size_t segid,
      const TypedIndexSet<P0, PREST...> &other) const
  {

    if (getSegmentTypes()[segid] != T0_TypeId) {

      return PARENT::compareSegmentById(segid, other);
    }


    if (!other.template checkSegmentType<T0>(segid)) {
      return false;
    }


    Index_type offset = getSegmentOffsets()[segid];
    return *data[offset] == other.template getSegment<T0>(segid);
  }


  template <typename P0>
  inline __attribute__((always_inline)) bool checkSegmentType(size_t segid) const
  {
    if (getSegmentTypes()[segid] == T0_TypeId) {
      return std::is_same<T0, P0>::value;
    }
    return PARENT::template checkSegmentType<P0>(segid);
  }



  template <typename P0>
  inline __attribute__((always_inline)) P0 &getSegment(size_t segid)
  {
    if (getSegmentTypes()[segid] == T0_TypeId) {
      Index_type offset = getSegmentOffsets()[segid];
      return *reinterpret_cast<P0 const *>(data[offset]);
    }
    return PARENT::template getSegment<P0>(segid);
  }


  template <typename P0>
  inline __attribute__((always_inline)) P0 const &getSegment(size_t segid) const
  {
    if (getSegmentTypes()[segid] == T0_TypeId) {
      Index_type offset = getSegmentOffsets()[segid];
      return *reinterpret_cast<P0 const *>(data[offset]);
    }
    return PARENT::template getSegment<P0>(segid);
  }


  inline __attribute__((always_inline))
  constexpr size_t getNumTypes() const { return 1 + PARENT::getNumTypes(); }
# 232 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSet.hpp"
private:
  template <typename... CALL>
  inline __attribute__((always_inline)) void push_into(TypedIndexSet<CALL...> &c,
                             PushEnd pend = PUSH_BACK,
                             PushCopy pcopy = PUSH_COPY)
  {
    Index_type num = getNumSegments();

    if (pend == PUSH_BACK) {
      for (Index_type i = 0; i < num; ++i) {
        segment_push_into(i, c, pend, pcopy);
      }
    } else {
      for (Index_type i = num-1; i > -1; --i) {
        segment_push_into(i, c, pend, pcopy);
      }
    }
  }


  static constexpr int value_for(PushEnd end, PushCopy copy)
  {
    return (end == PUSH_BACK) << 1 | (copy == PUSH_COPY);
  }

public:
  template <typename... CALL>
  inline __attribute__((always_inline)) void segment_push_into(size_t segid,
                                     TypedIndexSet<CALL...> &c,
                                     PushEnd pend = PUSH_BACK,
                                     PushCopy pcopy = PUSH_COPY)
  {
    if (getSegmentTypes()[segid] != T0_TypeId) {
      PARENT::segment_push_into(segid, c, pend, pcopy);
      return;
    }
    Index_type offset = getSegmentOffsets()[segid];
    switch (value_for(pend, pcopy)) {
      case value_for(PUSH_BACK, PUSH_COPY):
        c.push_back(*data[offset]);
        break;
      case value_for(PUSH_BACK, PUSH_NOCOPY):
        c.push_back_nocopy(data[offset]);
        break;
      case value_for(PUSH_FRONT, PUSH_COPY):
        c.push_front(*data[offset]);
        break;
      case value_for(PUSH_FRONT, PUSH_NOCOPY):
        c.push_front_nocopy(data[offset]);
        break;
    }
  }



  template <typename Tnew>
  inline __attribute__((always_inline)) void push_back_nocopy(Tnew *val)
  {
    push_internal(val, PUSH_BACK, PUSH_NOCOPY);
  }


  template <typename Tnew>
  inline __attribute__((always_inline)) void push_front_nocopy(Tnew *val)
  {
    push_internal(val, PUSH_FRONT, PUSH_NOCOPY);
  }


  template <typename Tnew>
  inline __attribute__((always_inline)) void push_back(Tnew const &val)
  {
    push_internal(new Tnew(val), PUSH_BACK, PUSH_COPY);
  }


  template <typename Tnew>
  inline __attribute__((always_inline)) void push_front(Tnew const &val)
  {
    push_internal(new Tnew(val), PUSH_FRONT, PUSH_COPY);
  }


  inline __attribute__((always_inline)) size_t getLength() const
  {
    size_t total = PARENT::getLength();
    size_t num = data.size();
    for (size_t i = 0; i < num; ++i) {
      total += data[i]->size();
    }
    return total;
  }


  inline __attribute__((always_inline)) constexpr size_t getNumSegments() const
  {
    return data.size() + PARENT::getNumSegments();
  }
# 340 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSet.hpp"
#pragma nv_exec_check_disable
 template <typename BODY, typename... ARGS>
  __attribute__((host)) __attribute__((device)) void segmentCall(size_t segid,
                                    BODY &&body,
                                    ARGS &&... args) const
  {
    if (getSegmentTypes()[segid] != T0_TypeId) {
      PARENT::segmentCall(segid,
                          std::forward<BODY>(body),
                          std::forward<ARGS>(args)...);
      return;
    }
    Index_type offset = getSegmentOffsets()[segid];
    body(*data[offset], std::forward<ARGS>(args)...);
  }

protected:

  template <typename Tnew>
  inline __attribute__((always_inline)) void push_internal(Tnew *val,
                                 PushEnd pend = PUSH_BACK,
                                 PushCopy pcopy = PUSH_COPY)
  {
    static_assert(sizeof...(TREST) > 0, "Invalid type for this TypedIndexSet");
    PARENT::push_internal(val, pend, pcopy);
  }


  inline __attribute__((always_inline)) void push_internal(T0 *val,
                                 PushEnd pend = PUSH_BACK,
                                 PushCopy pcopy = PUSH_COPY)
  {
    data.push_back(val);
    owner.push_back(pcopy == PUSH_COPY);


    if (pend == PUSH_BACK) {

      getSegmentTypes().push_back(T0_TypeId);


      getSegmentOffsets().push_back(data.size() - 1);


      size_t icount = val->size();
      getSegmentIcounts().push_back(getTotalLength());
      increaseTotalLength(icount);
    } else {

      getSegmentTypes().push_front(T0_TypeId);


      getSegmentOffsets().push_front(data.size() - 1);


      getSegmentIcounts().push_front(0);
      size_t icount = val->size();
      for (size_t i = 1; i < getSegmentIcounts().size(); ++i) {
        getSegmentIcounts()[i] += icount;
      }
      increaseTotalLength(icount);
    }
  }


  inline __attribute__((always_inline)) Index_type &getTotalLength() { return PARENT::getTotalLength(); }


  inline __attribute__((always_inline)) void setTotalLength(int n) { return PARENT::setTotalLength(n); }


  inline __attribute__((always_inline)) void increaseTotalLength(int n)
  {
    return PARENT::increaseTotalLength(n);
  }

public:
  using iterator = Iterators::numeric_iterator<Index_type>;


  iterator end() const { return iterator(getNumSegments()); }


  iterator begin() const { return iterator(0); }


  Index_type size() const { return getNumSegments(); }
# 436 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSet.hpp"
  TypedIndexSet<T0, TREST...> createSlice(int begin, int end)
  {
    TypedIndexSet<T0, TREST...> retVal;

    int minSeg = RAJA::operators::maximum<int>{}(0, begin);
    int maxSeg = RAJA::operators::minimum<int>{}(end, getNumSegments());
    for (int i = minSeg; i < maxSeg; ++i) {
      segment_push_into(i, retVal, PUSH_BACK, PUSH_NOCOPY);
    }
    return retVal;
  }
# 455 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSet.hpp"
  TypedIndexSet<T0, TREST...> createSlice(const int *segIds, int len)
  {
    TypedIndexSet<T0, TREST...> retVal;

    int numSeg = getNumSegments();
    for (int i = 0; i < len; ++i) {
      if (segIds[i] >= 0 && segIds[i] < numSeg) {
        segment_push_into(segIds[i], retVal, PUSH_BACK, PUSH_NOCOPY);
      }
    }
    return retVal;
  }
# 478 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSet.hpp"
  template <typename T>
  TypedIndexSet<T0, TREST...> createSlice(const T &segIds)
  {
    TypedIndexSet<T0, TREST...> retVal;
    int numSeg = getNumSegments();
    for (auto &seg : segIds) {
      if (seg >= 0 && seg < numSeg) {
        segment_push_into(seg, retVal, PUSH_BACK, PUSH_NOCOPY);
      }
    }
    return retVal;
  }


  void setSegmentInterval(size_t interval_id, int begin, int end)
  {
    m_seg_interval_begin[interval_id] = begin;
    m_seg_interval_end[interval_id] = end;
  }


  int getSegmentIntervalBegin(size_t interval_id) const
  {
    return m_seg_interval_begin[interval_id];
  }


  int getSegmentIntervalEnd(size_t interval_id) const
  {
    return m_seg_interval_end[interval_id];
  }

protected:

  inline __attribute__((always_inline)) RAJA::RAJAVec<Index_type> &getSegmentTypes()
  {
    return PARENT::getSegmentTypes();
  }


  inline __attribute__((always_inline)) RAJA::RAJAVec<Index_type> const &getSegmentTypes() const
  {
    return PARENT::getSegmentTypes();
  }


  inline __attribute__((always_inline)) RAJA::RAJAVec<Index_type> &getSegmentOffsets()
  {
    return PARENT::getSegmentOffsets();
  }


  inline __attribute__((always_inline)) RAJA::RAJAVec<Index_type> const &getSegmentOffsets() const
  {
    return PARENT::getSegmentOffsets();
  }


  inline __attribute__((always_inline)) RAJA::RAJAVec<Index_type> &getSegmentIcounts()
  {
    return PARENT::getSegmentIcounts();
  }


  inline __attribute__((always_inline)) RAJA::RAJAVec<Index_type> const &getSegmentIcounts() const
  {
    return PARENT::getSegmentIcounts();
  }

public:






  template <typename P0, typename... PREST>
  inline __attribute__((always_inline)) bool operator==(const TypedIndexSet<P0, PREST...> &other) const
  {
    size_t num_seg = getNumSegments();
    if (num_seg != other.getNumSegments()) return false;

    for (size_t segid = 0; segid < num_seg; ++segid) {
      if (!compareSegmentById(segid, other)) {
        return false;
      }
    }
    return true;
  }


  template <typename P0, typename... PREST>
  inline __attribute__((always_inline)) bool operator!=(const TypedIndexSet<P0, PREST...> &other) const
  {
    return (!(*this == other));
  }

private:

  RAJA::RAJAVec<T0 *> data;


  RAJA::RAJAVec<Index_type> owner;


  RAJA::RAJAVec<Index_type> m_seg_interval_begin;


  RAJA::RAJAVec<Index_type> m_seg_interval_end;
};


template <>
class TypedIndexSet<>
{
public:

  using value_type = RAJA::Index_type;


  inline __attribute__((always_inline)) TypedIndexSet() : m_len(0) {}


  inline __attribute__((always_inline))
  ~TypedIndexSet() {}


  inline __attribute__((always_inline))
  TypedIndexSet(TypedIndexSet const &c)
  {
    segment_types = c.segment_types;
    segment_offsets = c.segment_offsets;
    segment_icounts = c.segment_icounts;
    m_len = c.m_len;
  }


  void swap(TypedIndexSet &other)
  {
    using std::swap;
    swap(segment_types, other.segment_types);
    swap(segment_offsets, other.segment_offsets);
    swap(segment_icounts, other.segment_icounts);
    swap(m_len, other.m_len);
  }

protected:
  inline __attribute__((always_inline)) static size_t getNumTypes() { return 0; }

  template <typename T>
  inline __attribute__((always_inline)) constexpr bool isValidSegmentType(T const &) const
  {

    return false;
  }

  inline __attribute__((always_inline)) static int getNumSegments() { return 0; }

  inline __attribute__((always_inline)) static size_t getLength() { return 0; }

  template <typename BODY, typename... ARGS>
  inline __attribute__((always_inline)) void segmentCall(size_t, BODY, ARGS...) const
  {
  }

  inline __attribute__((always_inline)) RAJA::RAJAVec<Index_type> &getSegmentTypes()
  {
    return segment_types;
  }

  inline __attribute__((always_inline)) RAJA::RAJAVec<Index_type> const &getSegmentTypes() const
  {
    return segment_types;
  }

  inline __attribute__((always_inline)) RAJA::RAJAVec<Index_type> &getSegmentOffsets()
  {
    return segment_offsets;
  }

  inline __attribute__((always_inline)) RAJA::RAJAVec<Index_type> const &getSegmentOffsets() const
  {
    return segment_offsets;
  }

  inline __attribute__((always_inline)) RAJA::RAJAVec<Index_type> &getSegmentIcounts()
  {
    return segment_icounts;
  }

  inline __attribute__((always_inline)) RAJA::RAJAVec<Index_type> const &getSegmentIcounts() const
  {
    return segment_icounts;
  }

  inline __attribute__((always_inline)) Index_type &getTotalLength() { return m_len; }

  inline __attribute__((always_inline)) void setTotalLength(int n) { m_len = n; }

  inline __attribute__((always_inline)) void increaseTotalLength(int n) { m_len += n; }

  template <typename P0, typename... PREST>
  inline __attribute__((always_inline)) bool compareSegmentById(size_t,
                                      const TypedIndexSet<P0, PREST...> &) const
  {
    return false;
  }

  template <typename P0>
  inline __attribute__((always_inline)) bool checkSegmentType(size_t) const
  {
    return false;
  }

  template <typename P0>
  inline __attribute__((always_inline)) P0 &getSegment(size_t)
  {
    return *((P0 *)(this - this));
  }

  template <typename P0>
  inline __attribute__((always_inline)) P0 const &getSegment(size_t) const
  {
    return *((P0 *)(this - this));
  }

  template <typename... CALL>
  inline __attribute__((always_inline)) void push_into(TypedIndexSet<CALL...> &, PushEnd, PushCopy) const
  {
  }

  template <typename... CALL>
  inline __attribute__((always_inline)) void segment_push_into(size_t,
                                     TypedIndexSet<CALL...> &,
                                     PushEnd,
                                     PushCopy) const
  {
  }

  template <typename Tnew>
  inline __attribute__((always_inline)) void push(Tnew const &, PushEnd, PushCopy)
  {
  }

public:
  using iterator = Iterators::numeric_iterator<Index_type>;

  inline __attribute__((always_inline)) int getStartingIcount(int segid)
  {
    return segment_icounts[segid];
  }

  inline __attribute__((always_inline)) int getStartingIcount(int segid) const
  {
    return segment_icounts[segid];
  }


  iterator end() const { return iterator(getNumSegments()); }


  iterator begin() const { return iterator(0); }


  Index_type size() const { return getNumSegments(); }

private:

  RAJA::RAJAVec<Index_type> segment_types;



  RAJA::RAJAVec<Index_type> segment_offsets;


  RAJA::RAJAVec<Index_type> segment_icounts;


  Index_type m_len;
};


namespace type_traits
{

template <typename T>
struct is_index_set
    : ::RAJA::type_traits::SpecializationOf<RAJA::TypedIndexSet, typename std::decay<T>::type> {
};

template <typename T>
struct is_indexset_policy
    : ::RAJA::type_traits::SpecializationOf<RAJA::ExecPolicy, typename std::decay<T>::type> {
};
}

}
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal/LoopData.hpp" 2





# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/privatizer.hpp" 1
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/privatizer.hpp"
namespace RAJA
{

namespace internal
{







template <typename T>
class has_privatizer
{
private:
  template <typename C>
  static auto Test(void*)
      -> decltype(camp::val<typename C::privatizer>(), camp::true_type{});

  template <typename>
  static camp::false_type Test(...);

public:
  static bool const value = decltype(Test<T>(0))::value;
};


static_assert(!has_privatizer<int>::value, "if this fires, abandon all hope");

struct GenericWrapperBase {
};

template <typename T>
struct Privatizer {
  using value_type = camp::decay<T>;
  using reference_type = value_type&;
  value_type priv;
  static_assert(!has_privatizer<T>::value,
                "Privatizer selected inappropriately, this is almost certainly "
                "a bug");
  static_assert(!std::is_base_of<GenericWrapperBase, T>::value,
                "Privatizer selected inappropriately, this is almost certainly "
                "a bug");

#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device)) Privatizer(const T& o) : priv{o} {}

#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device)) reference_type get_priv() { return priv; }
};
# 84 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/privatizer.hpp"
template <typename T,
          typename std::enable_if<!has_privatizer<T>::value>::type* = nullptr>
__attribute__((host)) __attribute__((device)) auto thread_privatize(const T& item) -> Privatizer<T>
{
  return Privatizer<T>{item};
}

#pragma nv_exec_check_disable
template <typename T,
          typename std::enable_if<has_privatizer<T>::value>::type* = nullptr>
__attribute__((host)) __attribute__((device)) auto thread_privatize(const T& item) -> typename T::privatizer
{
  return typename T::privatizer{item};
}

}

}
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal/LoopData.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal/StatementList.hpp" 1
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal/StatementList.hpp"
namespace RAJA
{
namespace internal
{



template <typename Policy, typename Types>
struct StatementExecutor;




template <typename... Stmts>
using StatementList = camp::list<Stmts...>;


template <camp::idx_t idx, camp::idx_t N, typename StmtList, typename Types>
struct StatementListExecutor;


template <camp::idx_t statement_index,
          camp::idx_t num_statements,
          typename StmtList, typename Types>
struct StatementListExecutor {

  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &&data)
  {


    using statement = camp::at_v<StmtList, statement_index>;


    StatementExecutor<statement, Types>::exec(std::forward<Data>(data));


    StatementListExecutor<statement_index + 1, num_statements, StmtList, Types>::exec(
        std::forward<Data>(data));
  }
};






template <camp::idx_t num_statements, typename StmtList, typename Types>
struct StatementListExecutor<num_statements, num_statements, StmtList, Types> {

  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &&)
  {
  }
};


template <typename StmtList, typename Types, typename Data>
inline __attribute__((always_inline)) void execute_statement_list(Data &&data)
{
  StatementListExecutor<0, camp::size<StmtList>::value, StmtList, Types>::exec(
      std::forward<Data>(data));
}



}
}
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal/LoopData.hpp" 2




namespace RAJA
{
namespace internal
{





  struct ForList {
  };
  struct ForBase {
  };
  struct CollapseBase {
  };
  template <camp::idx_t ArgumentId, typename Policy>
  struct ForTraitBase : public ForBase {
    constexpr static camp::idx_t index_val = ArgumentId;
    using index = camp::num<ArgumentId>;
    using index_type = camp::nil;
    using policy_type = Policy;
    using type = ForTraitBase;
  };




template <typename Iterator>
struct iterable_difftype_getter {
  using type = typename std::iterator_traits<
      typename Iterator::iterator>::difference_type;
};

template <typename Segments>
using difftype_list_from_segments =
    typename camp::transform<iterable_difftype_getter, Segments>::type;


template <typename Segments>
using difftype_tuple_from_segments =
    typename camp::apply_l<camp::lambda<camp::tuple>,
                           difftype_list_from_segments<Segments>>::type;


template <typename Iterator>
struct iterable_value_type_getter {
  using type =
      typename std::iterator_traits<typename Iterator::iterator>::value_type;
};

template <typename Segments>
using value_type_list_from_segments =
    typename camp::transform<iterable_value_type_getter, Segments>::type;


template <typename Segments>
using index_tuple_from_segments =
    typename camp::apply_l<camp::lambda<camp::tuple>,
                           value_type_list_from_segments<Segments>>::type;




template <typename SegmentTuple,
          typename ParamTuple,
          typename... Bodies>
struct LoopData {

  using Self = LoopData<SegmentTuple, ParamTuple, Bodies...>;

  using offset_tuple_t =
      difftype_tuple_from_segments<typename SegmentTuple::TList>;

  using index_tuple_t = index_tuple_from_segments<typename SegmentTuple::TList>;


  using segment_tuple_t = SegmentTuple;
  SegmentTuple segment_tuple;

  using param_tuple_t = ParamTuple;
  ParamTuple param_tuple;

  using BodiesTuple = camp::tuple<Bodies...>;
  const BodiesTuple bodies;
  offset_tuple_t offset_tuple;

  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr
  LoopData(SegmentTuple const &s, ParamTuple const &p, Bodies const &... b)
      : segment_tuple(s), param_tuple(p), bodies(b...)
  {

  }
  constexpr LoopData(LoopData const &) = default;
  constexpr LoopData(LoopData &&) = default;

  template <camp::idx_t Idx, typename IndexT>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) void assign_offset(IndexT const &i)
  {
    camp::get<Idx>(offset_tuple) = i;
  }

  template <typename ParamId, typename IndexT>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) void assign_param(IndexT const &i)
  {
    using param_t = camp::at_v<typename param_tuple_t::TList, ParamId::param_idx>;
    camp::get<ParamId::param_idx>(param_tuple) = param_t(i);
  }

  template <typename ParamId>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
  auto get_param() ->
    camp::at_v<typename param_tuple_t::TList, ParamId::param_idx>
  {
    return camp::get<ParamId::param_idx>(param_tuple);
  }


};




template <camp::idx_t ArgumentId, typename Data>
using segment_diff_type =
    typename std::iterator_traits<
        typename camp::at_v<typename Data::segment_tuple_t::TList,
                            ArgumentId>::iterator>::difference_type;




template <camp::idx_t ArgumentId, typename Data>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) auto segment_length(Data const &data) ->
  segment_diff_type<ArgumentId, Data>
{
  return camp::get<ArgumentId>(data.segment_tuple).end() -
         camp::get<ArgumentId>(data.segment_tuple).begin();
}




template <typename Data, typename Types, typename... EnclosedStmts>
struct GenericWrapper : GenericWrapperBase {
  using data_t = camp::decay<Data>;

  data_t &data;

  inline __attribute__((always_inline))
  constexpr explicit GenericWrapper(data_t &d) : data{d} {}

  inline __attribute__((always_inline))
  void exec() { execute_statement_list<camp::list<EnclosedStmts...>, Types>(data); }
};





template <typename T>
struct NestedPrivatizer {
  using data_t = typename T::data_t;
  using value_type = camp::decay<T>;
  using reference_type = value_type &;

  data_t privatized_data;
  value_type privatized_wrapper;

  inline __attribute__((always_inline))
  constexpr NestedPrivatizer(const T &o)
      : privatized_data{o.data}, privatized_wrapper(privatized_data)
  {
  }

  inline __attribute__((always_inline))
  reference_type get_priv() { return privatized_wrapper; }
};



}
}
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal/LoopTypes.hpp" 1
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal/LoopTypes.hpp"
namespace RAJA
{
namespace internal
{

namespace detail
{


template <typename T, camp::idx_t>
struct SeqToType
{
  using type = T;
};

template <typename T, typename SEQ>
struct ListOfNHelper;

template <typename T, camp::idx_t ... SEQ>
struct ListOfNHelper<T, camp::idx_seq<SEQ...> >
{
  using type = camp::list<typename SeqToType<T, SEQ>::type...>;
};
}







template <typename T, camp::idx_t N>
using list_of_n = typename detail::ListOfNHelper<T, camp::make_idx_seq_t<N>>::type;


template <typename SegmentTypes,
          typename OffsetTypes>
struct LoopTypes;

template <typename ... SegmentTypes,
          typename ... OffsetTypes>
struct LoopTypes<camp::list<SegmentTypes...>, camp::list<OffsetTypes...>> {

  using Self = LoopTypes<camp::list<SegmentTypes...>, camp::list<OffsetTypes...>>;

  static constexpr size_t s_num_segments = sizeof...(SegmentTypes);



  static_assert(s_num_segments == sizeof...(OffsetTypes),
      "Number of segments and offsets must match");

  using segment_types_t = camp::list<SegmentTypes...>;
  using offset_types_t = camp::list<OffsetTypes...>;
};


template<typename Data>
using makeInitialLoopTypes =
    LoopTypes<list_of_n<void, camp::tuple_size<typename Data::segment_tuple_t>::value>,
              list_of_n<void, camp::tuple_size<typename Data::segment_tuple_t>::value>>;


template<typename Types, camp::idx_t Segment, typename T, typename Seq>
struct SetSegmentTypeHelper;

template<typename Types,
         camp::idx_t Segment,
         typename T,
         camp::idx_t ... SEQ>
struct SetSegmentTypeHelper<Types, Segment, T, camp::idx_seq<SEQ...>>
{
    using segment_list = typename Types::segment_types_t;
    using offset_list = typename Types::offset_types_t;

    static_assert(std::is_same<camp::at_v<segment_list, Segment>, void>::value,
        "Segment was already assigned: Probably looping over same segment in loop nest");

    using type = LoopTypes<
        camp::list<typename std::conditional<SEQ == Segment, T, camp::at_v<segment_list, SEQ>>::type...>,
        camp::list<typename std::conditional<SEQ == Segment, T, camp::at_v<segment_list, SEQ>>::type...>>;

};


template<typename Types, camp::idx_t Segment, typename T>
using setSegmentType =
    typename SetSegmentTypeHelper<Types, Segment, T, camp::make_idx_seq_t<Types::s_num_segments>>::type;

template<typename Types, camp::idx_t Segment, typename Data>
using setSegmentTypeFromData =
    setSegmentType<Types, Segment, camp::at_v<typename camp::decay<Data>::index_tuple_t::TList, Segment>>;


}
}
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal/Statement.hpp" 1
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal/Statement.hpp"
namespace RAJA
{
namespace internal
{



template <typename ExecPolicy, typename... EnclosedStmts>
struct Statement {
  static_assert(std::is_same<ExecPolicy, camp::nil>::value || sizeof...(EnclosedStmts) > 0,
      "Executable statement with no enclosed statements, this is almost certainly a bug");
  Statement() = delete;

  using enclosed_statements_t = StatementList<EnclosedStmts...>;
  using execution_policy_t = ExecPolicy;
};




template <typename Policy, typename Types>
struct StatementExecutor;



}
}
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/internal.hpp" 2
# 7 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/get_platform.hpp" 2

namespace RAJA
{

namespace policy {
namespace multi {
template <typename Selector, typename... Policies>
class MultiPolicy;

}
}

namespace detail
{

struct max_platform {
  __attribute__((host)) __attribute__((device))
  inline __attribute__((always_inline))
  constexpr RAJA::Platform operator()(const RAJA::Platform& l,
                                      const RAJA::Platform& r) const
  {
    return (l > r) ? l : r;
  }
};





template <typename T, typename = void>
struct get_platform {

  static constexpr Platform value = Platform::undefined;
};






template <typename... Policies>
struct get_platform_from_list {
  static constexpr Platform value =
      foldl(max_platform(), get_platform<Policies>::value...);
};




template <>
struct get_platform_from_list<> {
  static constexpr Platform value = Platform::undefined;
};
# 68 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/get_platform.hpp"
template <typename T>
struct get_platform<T,
                    typename std::
                        enable_if<std::is_base_of<RAJA::PolicyBase, T>::value
                                  && !RAJA::type_traits::is_indexset_policy<T>::
                                         value>::type> {

  static constexpr Platform value = T::platform;
};







template <typename SEG, typename EXEC>
struct get_platform<RAJA::ExecPolicy<SEG, EXEC>>
    : public get_platform_from_list<SEG, EXEC> {
};


template <typename T>
struct get_statement_platform {
  static constexpr Platform value =
      get_platform_from_list<typename T::execution_policy_t,
                             typename T::enclosed_statements_t>::value;
};
# 104 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/get_platform.hpp"
template <typename... Stmts>
struct get_platform<RAJA::internal::StatementList<Stmts...>> {
  static constexpr Platform value =
      foldl(max_platform(), get_statement_platform<Stmts>::value...);
};




template <>
struct get_platform<RAJA::internal::StatementList<>> {
  static constexpr Platform value = Platform::undefined;
};





template <typename SELECTOR, typename... POLICIES>
struct get_platform<RAJA::policy::multi::MultiPolicy<SELECTOR, POLICIES...>> {
  static constexpr Platform value = Platform::undefined;
};

}
}
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PluginContext.hpp" 2

namespace RAJA {
namespace util {

class KokkosPluginLoader;

struct PluginContext {
  public:
    PluginContext(const Platform p) :
      platform(p) {}

    Platform platform;

  private:
    mutable uint64_t kID;

    friend class KokkosPluginLoader;
};

template<typename Policy>
PluginContext make_context()
{
  return PluginContext{detail::get_platform<Policy>::value};
}

}
}
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/plugins.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PluginOptions.hpp" 1
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PluginOptions.hpp"
namespace RAJA {
namespace util {

struct PluginOptions
{
    PluginOptions(const std::string& newstr) : str(newstr) {};

    std::string str;
};

inline PluginOptions make_options(const std::string& newstr)
{
    return PluginOptions{newstr};
}

}
}
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/plugins.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PluginStrategy.hpp" 1
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PluginStrategy.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Registry.hpp" 1
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Registry.hpp"
namespace RAJA {
namespace util {

  template <typename T>
  class RegistryEntry {
    std::string Name, Desc;
    std::shared_ptr<T> object;

  public:
    RegistryEntry(const std::string& N, const std::string& D,
        std::shared_ptr<T> (*C)())
        : Name(N), Desc(D), object(C()) {}

    const std::string& getName() const { return Name; }
    const std::string& getDesc() const { return Desc; }
    std::shared_ptr<T> get() const { return object; }
  };




  template <typename T>
  class Registry {
  public:
    using type = T;
    using entry = RegistryEntry<T>;

    class node;
    class iterator;

  private:
    Registry() = delete;

    friend class node;
    static node *Head, *Tail;

  public:


    class node {
      friend class iterator;
      friend Registry<T>;

      node *Next;
      const entry& Val;

    public:
      node(const entry &V) : Next(nullptr), Val(V) {}
    };
# 70 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Registry.hpp"
    static void add_node(node *N);



    class iterator {
      const node *Cur;

    public:
      explicit iterator(const node *N) : Cur(N) {}

      bool operator==(const iterator &That) const { return Cur == That.Cur; }
      bool operator!=(const iterator &That) const { return Cur != That.Cur; }
      iterator &operator++() { Cur = Cur->Next; return *this; }
      const entry &operator*() const { return Cur->Val; }
      const entry *operator->() const { return &Cur->Val; }
    };



    static iterator begin();
    static iterator end() { return iterator(nullptr); }


    template <typename V>
    class add {
      entry Entry;
      node Node;

      static std::shared_ptr<T> CtorFn() { return std::make_shared<V>(); }

    public:
      add(const std::string& Name, const std::string& Desc)
          : Entry(Name, Desc, CtorFn), Node(Entry) {
        add_node(&Node);
      }
    };
  };

}
}
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PluginStrategy.hpp" 2

namespace RAJA {
namespace util {

class PluginStrategy
{
  public:
    PluginStrategy();

    virtual ~PluginStrategy() = default;

    virtual void init(const PluginOptions& p);

    virtual void preCapture(const PluginContext& p);

    virtual void postCapture(const PluginContext& p);

    virtual void preLaunch(const PluginContext& p);

    virtual void postLaunch(const PluginContext& p);

    virtual void finalize();
};

using PluginRegistry = Registry<PluginStrategy>;

}
}
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/plugins.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/RuntimePluginLoader.hpp" 1
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/RuntimePluginLoader.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/vector" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/vector" 3





# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 1 3
# 66 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }

 _Vector_impl(_Tp_alloc_type const& __a) noexcept
 : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }


 _Vector_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a)),
   _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }


 void _M_swap_data(_Vector_impl& __x) noexcept
 {
   std::swap(_M_start, __x._M_start);
   std::swap(_M_finish, __x._M_finish);
   std::swap(_M_end_of_storage, __x._M_end_of_storage);
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a) noexcept
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }


      _Vector_base(_Tp_alloc_type&& __a) noexcept
      : _M_impl(std::move(__a)) { }

      _Vector_base(_Vector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_swap_data(__x._M_impl); }

      _Vector_base(_Vector_base&& __x, const allocator_type& __a)
      : _M_impl(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_impl._M_swap_data(__x._M_impl);
 else
   {
     size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
     _M_create_storage(__n);
   }
      }


      ~_Vector_base() noexcept
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 return __n != 0 ? _Tr::allocate(_M_impl, __n) : 0;
      }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 if (__p)
   _Tr::deallocate(_M_impl, __p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
    };
# 213 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;



      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:






      vector()

      noexcept(is_nothrow_default_constructible<_Alloc>::value)

      : _Base() { }





      explicit
      vector(const allocator_type& __a) noexcept
      : _Base(__a) { }
# 276 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_default_initialize(__n); }
# 289 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 318 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 335 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      vector(vector&& __x) noexcept
      : _Base(std::move(__x)) { }


      vector(const vector& __x, const allocator_type& __a)
      : _Base(__x.size(), __a)
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }


      vector(vector&& __rv, const allocator_type& __m)
      noexcept(_Alloc_traits::_S_always_equal())
      : _Base(std::move(__rv), __m)
      {
 if (__rv.get_allocator() != __m)
   {
     this->_M_impl._M_finish =
       std::__uninitialized_move_a(__rv.begin(), __rv.end(),
       this->_M_impl._M_start,
       _M_get_Tp_allocator());
     __rv.clear();
   }
      }
# 373 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 399 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        { _M_initialize_dispatch(__first, __last, __false_type()); }
# 423 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      ~vector() noexcept
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 435 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 447 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
        constexpr bool __move_storage =
          _Alloc_traits::_S_propagate_on_move_assign()
          || _Alloc_traits::_S_always_equal();
        _M_move_assign(std::move(__x),
                       integral_constant<bool, __move_storage>());
 return *this;
      }
# 469 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->assign(__l.begin(), __l.end());
 return *this;
      }
# 487 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 504 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        void
        assign(_InputIterator __first, _InputIterator __last)
        { _M_assign_dispatch(__first, __last, __false_type()); }
# 532 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      void
      assign(initializer_list<value_type> __l)
      { this->assign(__l.begin(), __l.end()); }



      using _Base::get_allocator;







      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end() noexcept
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }




      size_type
      size() const noexcept
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
# 672 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 692 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 724 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }






      size_type
      capacity() const noexcept
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const noexcept
      { return begin() == end(); }
# 763 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 778 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      reference
      operator[](size_type __n) noexcept
      { return *(this->_M_impl._M_start + __n); }
# 793 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const noexcept
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


       __n, this->size());
      }

    public:
# 821 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 839 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front() noexcept
      { return *begin(); }





      const_reference
      front() const noexcept
      { return *begin(); }





      reference
      back() noexcept
      { return *(end() - 1); }





      const_reference
      back() const noexcept
      { return *(end() - 1); }
# 886 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      _Tp*



      data() noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }


      const _Tp*



      data() const noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }
# 912 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
                              __x);
     ++this->_M_impl._M_finish;
   }
 else

   _M_emplace_back_aux(__x);



      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>
        void
        emplace_back(_Args&&... __args);
# 948 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      void
      pop_back() noexcept
      {
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      }
# 968 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      template<typename... _Args>
        iterator
        emplace(const_iterator __position, _Args&&... __args);
# 983 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1013 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return emplace(__position, std::move(__x)); }
# 1030 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, initializer_list<value_type> __l)
      { return this->insert(__position, __l.begin(), __l.end()); }
# 1050 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(begin() + __offset, __n, __x);
 return begin() + __offset;
      }
# 1092 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        iterator
        insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
        {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(begin() + __offset,
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1144 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      iterator

      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
# 1171 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last)
      {
 const auto __beg = begin();
 const auto __cbeg = cbegin();
 return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
      }
# 1193 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      void
      swap(vector& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      {
 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
                           __x._M_get_Tp_allocator());
      }







      void
      clear() noexcept
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }
# 1245 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)

     emplace_back(*__first);



 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
          _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }



      void
      _M_default_initialize(size_type __n)
      {
 std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
      _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }
# 1323 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1363 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_default_append(size_type __n);

      bool
      _M_shrink_to_fit();







      template<typename... _Args>
        void
        _M_insert_aux(iterator __position, _Args&&... __args);

      template<typename... _Args>
        void
        _M_emplace_back_aux(_Args&&... __args);



      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos) noexcept
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }

      iterator
      _M_erase(iterator __position);

      iterator
      _M_erase(iterator __first, iterator __last);


    private:



      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
      {
 vector __tmp(get_allocator());
 this->_M_impl._M_swap_data(__tmp._M_impl);
 this->_M_impl._M_swap_data(__x._M_impl);
 std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }



      void
      _M_move_assign(vector&& __x, std::false_type)
      {
 if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
   _M_move_assign(std::move(__x), std::true_type());
 else
   {


     this->assign(std::__make_move_if_noexcept_iterator(__x.begin()),
    std::__make_move_if_noexcept_iterator(__x.end()));
     __x.clear();
   }
      }



      template<typename _Up>
 _Up*
 _M_data_ptr(_Up* __ptr) const
 { return __ptr; }

      template<typename _Ptr>
 typename std::pointer_traits<_Ptr>::element_type*
 _M_data_ptr(_Ptr __ptr) const
 { return empty() ? nullptr : std::__addressof(*__ptr); }






    };
# 1509 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1526 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 65 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/vector" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_bvector.h" 1 3
# 63 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() noexcept : _M_p(0), _M_mask(0) { }

    operator bool() const noexcept
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x) noexcept
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x) noexcept
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip() noexcept
    { *_M_p ^= _M_mask; }
  };


  inline void
  swap(_Bit_reference __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(_Bit_reference __x, bool& __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(bool& __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }


  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    _Bit_iterator
    _M_const_cast() const
    { return _Bit_iterator(_M_p, _M_offset); }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename _Alloc::template rebind<_Bit_type>::other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type* _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }


 _Bvector_impl(_Bit_alloc_type&& __a)
 : _Bit_alloc_type(std::move(__a)), _M_start(), _M_finish(),
   _M_end_of_storage(0)
 { }

      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator() noexcept
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const noexcept
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }


      _Bvector_base(_Bvector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Bit_allocator()))
      {
 this->_M_impl._M_start = __x._M_impl._M_start;
 this->_M_impl._M_finish = __x._M_impl._M_finish;
 this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 __x._M_impl._M_start = _Bit_iterator();
 __x._M_impl._M_finish = _Bit_iterator();
 __x._M_impl._M_end_of_storage = 0;
      }


      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_type*
      _M_allocate(size_t __n)
      { return _M_impl.allocate(_S_nword(__n)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   _M_impl.deallocate(_M_impl._M_start._M_p,
        _M_impl._M_end_of_storage - _M_impl._M_start._M_p);
      }

      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };


}




namespace std __attribute__ ((__visibility__ ("default")))
{
# 525 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;


    template<typename> friend struct hash;


  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_S_nword;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()
    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }


    explicit
    vector(size_type __n, const allocator_type& __a = allocator_type())
    : vector(__n, false, __a)
    { }

    vector(size_type __n, const bool& __value,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_of_storage,
  __value ? ~0 : 0);
    }
# 591 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_bvector.h" 3
    vector(const vector& __x)
    : _Base(__x._M_get_Bit_allocator())
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }


    vector(vector&& __x) noexcept
    : _Base(std::move(__x)) { }

    vector(initializer_list<bool> __l,
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize_range(__l.begin(), __l.end(),
     random_access_iterator_tag());
    }



    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      { _M_initialize_dispatch(__first, __last, __false_type()); }
# 629 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_bvector.h" 3
    ~vector() noexcept { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }


    vector&
    operator=(vector&& __x)
    {


      this->clear();
      this->swap(__x);
      return *this;
    }

    vector&
    operator=(initializer_list<bool> __l)
    {
      this->assign (__l.begin(), __l.end());
      return *this;
    }






    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }


    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      void
      assign(_InputIterator __first, _InputIterator __last)
      { _M_assign_dispatch(__first, __last, __false_type()); }
# 690 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_bvector.h" 3
    void
    assign(initializer_list<bool> __l)
    { this->assign(__l.begin(), __l.end()); }


    iterator
    begin() noexcept
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const noexcept
    { return this->_M_impl._M_start; }

    iterator
    end() noexcept
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const noexcept
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin() noexcept
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const noexcept
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend() noexcept
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const noexcept
    { return const_reverse_iterator(begin()); }


    const_iterator
    cbegin() const noexcept
    { return this->_M_impl._M_start; }

    const_iterator
    cend() const noexcept
    { return this->_M_impl._M_finish; }

    const_reverse_iterator
    crbegin() const noexcept
    { return const_reverse_iterator(end()); }

    const_reverse_iterator
    crend() const noexcept
    { return const_reverse_iterator(begin()); }


    size_type
    size() const noexcept
    { return size_type(end() - begin()); }

    size_type
    max_size() const noexcept
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize = _M_get_Bit_allocator().max_size();
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const noexcept
    { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)
         - begin()); }

    bool
    empty() const noexcept
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
 __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)"),


     __n, this->size());
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n)
    {
      if (__n > max_size())
 __throw_length_error(("vector::reserve"));
      if (capacity() < __n)
 _M_reallocate(__n);
    }

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() noexcept { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x)
    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);



      std::__alloc_swap<typename _Base::_Bit_alloc_type>::
 _S_do_it(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y) noexcept
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator

    insert(const_iterator __position, const bool& __x = bool())



    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position._M_const_cast(), __x);
      return begin() + __n;
    }


    template<typename _InputIterator,
      typename = std::_RequireInputIter<_InputIterator>>
      iterator
      insert(const_iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 difference_type __offset = __position - cbegin();
 _M_insert_dispatch(__position._M_const_cast(),
      __first, __last, __false_type());
 return begin() + __offset;
      }
# 908 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_bvector.h" 3
    iterator
    insert(const_iterator __position, size_type __n, const bool& __x)
    {
      difference_type __offset = __position - cbegin();
      _M_fill_insert(__position._M_const_cast(), __n, __x);
      return begin() + __offset;
    }







    iterator
    insert(const_iterator __p, initializer_list<bool> __l)
    { return this->insert(__p, __l.begin(), __l.end()); }


    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator

    erase(const_iterator __position)



    { return _M_erase(__position._M_const_cast()); }

    iterator

    erase(const_iterator __first, const_iterator __last)



    { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }


    void
    shrink_to_fit()
    { _M_shrink_to_fit(); }


    void
    flip() noexcept
    {
      for (_Bit_type * __p = this->_M_impl._M_start._M_p;
    __p != this->_M_impl._M_end_of_storage; ++__p)
        *__p = ~*__p;
    }

    void
    clear() noexcept
    { _M_erase_at_end(begin()); }


    template<typename... _Args>
      void
      emplace_back(_Args&&... __args)
      { push_back(bool(__args...)); }

    template<typename... _Args>
      iterator
      emplace(const_iterator __pos, _Args&&... __args)
      { return insert(__pos, bool(__args...)); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }

    void
    _M_reallocate(size_type __n);


    bool
    _M_shrink_to_fit();






    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }

    iterator
    _M_erase(iterator __pos);

    iterator
    _M_erase(iterator __first, iterator __last);
  };


}





namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>&) const noexcept;
    };


}
# 66 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/vector" 2 3



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/vector.tcc" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_start),
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_emplace_back_aux(std::forward<_Args>(__args)...);
      }


  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {

   const auto __pos = begin() + (__position - cbegin());
   if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
     {
       _Tp __x_copy = __x;
       _M_insert_aux(__pos, std::move(__x_copy));
     }
   else
     _M_insert_aux(__pos, __x);



 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       if (!_Alloc_traits::_S_always_equal()
           && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
         {

    this->clear();
    _M_deallocate(this->_M_impl._M_start,
    this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start);
    this->_M_impl._M_start = nullptr;
    this->_M_impl._M_finish = nullptr;
    this->_M_impl._M_end_of_storage = nullptr;
  }
       std::__alloc_on_copy(_M_get_Tp_allocator(),
       __x._M_get_Tp_allocator());
     }

   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp._M_impl._M_swap_data(this->_M_impl);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
     __n - size(), __val,
     _M_get_Tp_allocator());
   this->_M_impl._M_finish += __n - size();
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      typename vector<_Tp, _Alloc>::iterator
      vector<_Tp, _Alloc>::
      emplace(const_iterator __position, _Args&&... __args)
      {
 const size_type __n = __position - begin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
     && __position == end())
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(begin() + (__position - cbegin()),
   std::forward<_Args>(__args)...);
 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Args&&... __args)






    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
              std::move(*(this->_M_impl._M_finish - 1)));

   ++this->_M_impl._M_finish;



   std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1);





   *__position = _Tp(std::forward<_Args>(__args)...);

 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   try
     {




       _Alloc_traits::construct(this->_M_impl,
                         __new_start + __elems_before,

           std::forward<_Args>(__args)...);



       __new_finish = 0;

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (this->_M_impl._M_start, __position.base(),
   __new_start, _M_get_Tp_allocator());

       ++__new_finish;

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (__position.base(), this->_M_impl._M_finish,
   __new_finish, _M_get_Tp_allocator());
     }
          catch(...)
     {
       if (!__new_finish)
  _Alloc_traits::destroy(this->_M_impl,
                         __new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
       throw;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_emplace_back_aux(_Args&&... __args)
      {
 const size_type __len =
   _M_check_len(size_type(1), "vector::_M_emplace_back_aux");
 pointer __new_start(this->_M_allocate(__len));
 pointer __new_finish(__new_start);
 try
   {
     _Alloc_traits::construct(this->_M_impl, __new_start + size(),
         std::forward<_Args>(__args)...);
     __new_finish = 0;

     __new_finish
       = std::__uninitialized_move_if_noexcept_a
       (this->_M_impl._M_start, this->_M_impl._M_finish,
        __new_start, _M_get_Tp_allocator());

     ++__new_finish;
   }
 catch(...)
   {
     if (!__new_finish)
       _Alloc_traits::destroy(this->_M_impl, __new_start + size());
     else
       std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
     _M_deallocate(__new_start, __len);
     throw;
   }
 std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator());
 _M_deallocate(this->_M_impl._M_start,
        this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start);
 this->_M_impl._M_start = __new_start;
 this->_M_impl._M_finish = __new_finish;
 this->_M_impl._M_end_of_storage = __new_start + __len;
      }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish);

    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n - __elems_after;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = 0;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, __position.base(),
       __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__position.base(), this->_M_impl._M_finish,
       __new_finish, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       std::__uninitialized_default_n_a(this->_M_impl._M_finish,
            __n, _M_get_Tp_allocator());
       this->_M_impl._M_finish += __n;
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       const size_type __old_size = this->size();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {
    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, this->_M_impl._M_finish,
       __new_start, _M_get_Tp_allocator());
    std::__uninitialized_default_n_a(__new_finish, __n,
         _M_get_Tp_allocator());
    __new_finish += __n;
  }
       catch(...)
  {
    std::_Destroy(__new_start, __new_finish,
    _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
    bool
    vector<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() == size())
 return false;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish);

      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (this->_M_impl._M_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), this->_M_impl._M_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }



  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),
      iterator(__q, 0));
      this->_M_deallocate();
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_type * __q = this->_M_allocate(__len);
  iterator __i = _M_copy_aligned(begin(), __position,
            iterator(__q, 0));
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = iterator(__q, 0);
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }


  template<typename _Alloc>
    bool
    vector<bool, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() - size() < int(_S_word_bit))
 return false;
      try
 {
   _M_reallocate(size());
   return true;
 }
      catch(...)
 { return false; }
    }



}



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const noexcept
    {
      size_t __hash = 0;
      using std::_S_word_bit;
      using std::_Bit_type;

      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}
# 70 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/vector" 2 3
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/RuntimePluginLoader.hpp" 2




namespace RAJA {
namespace util {

  class RuntimePluginLoader : public RAJA::util::PluginStrategy
  {
    using Parent = RAJA::util::PluginStrategy;

  public:
    RuntimePluginLoader();

    void init(const RAJA::util::PluginOptions& p) override;

    void preCapture(const RAJA::util::PluginContext& p) override;

    void postCapture(const RAJA::util::PluginContext& p) override;

    void preLaunch(const RAJA::util::PluginContext& p) override;

    void postLaunch(const RAJA::util::PluginContext& p) override;

    void finalize() override;

  private:

    void initPlugin(const std::string &path);

    void initDirectory(const std::string &path);

    std::vector<std::unique_ptr<Parent>> plugins;

  };

  void linkRuntimePluginLoader();

}
}
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/plugins.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/KokkosPluginLoader.hpp" 1
# 17 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/KokkosPluginLoader.hpp"
namespace RAJA {
namespace util {

  class KokkosPluginLoader : public ::RAJA::util::PluginStrategy
  {
  public:
    using Parent = ::RAJA::util::PluginStrategy;
    typedef void (*init_function)(const int, const uint64_t, const uint32_t, void*);
    typedef void (*pre_function)(const char*, const uint32_t, uint64_t*);
    typedef void (*post_function)(uint64_t);
    typedef void (*finalize_function)();

    KokkosPluginLoader();

    void preLaunch(const RAJA::util::PluginContext& p) override;

    void postLaunch(const RAJA::util::PluginContext& p) override;

    void finalize() override;

  private:
    void initPlugin(const std::string &path);

    void initDirectory(const std::string &path);

    std::vector<init_function> init_functions;
    std::vector<pre_function> pre_functions;
    std::vector<post_function> post_functions;
    std::vector<finalize_function> finalize_functions;

  };

  void linkKokkosPluginLoader();

}
}
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/plugins.hpp" 2

namespace RAJA {
namespace util {

template <typename T>
inline __attribute__((always_inline)) auto trigger_updates_before(T&& item)
  -> typename std::remove_reference<T>::type
{
  return item;
}

inline __attribute__((always_inline))
void
callPreCapturePlugins(const PluginContext& p)
{
  for (auto plugin = PluginRegistry::begin();
      plugin != PluginRegistry::end();
      ++plugin)
  {
    (*plugin).get()->preCapture(p);
  }
}

inline __attribute__((always_inline))
void
callPostCapturePlugins(const PluginContext& p)
{
  for (auto plugin = PluginRegistry::begin();
      plugin != PluginRegistry::end();
      ++plugin)
  {
    (*plugin).get()->postCapture(p);
  }
}

inline __attribute__((always_inline))
void
callPreLaunchPlugins(const PluginContext& p)
{
  for (auto plugin = PluginRegistry::begin();
      plugin != PluginRegistry::end();
      ++plugin)
  {
    (*plugin).get()->preLaunch(p);
  }
}

inline __attribute__((always_inline))
void
callPostLaunchPlugins(const PluginContext& p)
{
  for (auto plugin = PluginRegistry::begin();
      plugin != PluginRegistry::end();
      ++plugin)
  {
    (*plugin).get()->postLaunch(p);
  }
}

inline __attribute__((always_inline))
void
callInitPlugins(const PluginOptions p)
{
  for (auto plugin = PluginRegistry::begin();
      plugin != PluginRegistry::end();
      ++plugin)
  {
    (*plugin).get()->init(p);
  }
}

inline __attribute__((always_inline))
void
init_plugins(const std::string& path)
{
  callInitPlugins(make_options(path));
}

inline __attribute__((always_inline))
void
init_plugins()
{
  callInitPlugins(make_options(""));
}

inline __attribute__((always_inline))
void
finalize_plugins()
{
  for (auto plugin = PluginRegistry::begin();
    plugin != PluginRegistry::end();
    ++plugin)
  {
    (*plugin).get()->finalize();
  }
}

}
}
# 37 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2







# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp" 1
# 64 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/MultiPolicy.hpp" 1
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/MultiPolicy.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/resource.hpp" 1
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/resource.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/policy.hpp" 1
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/policy.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/reduce.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/reduce.hpp"
namespace RAJA
{
# 79 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/reduce.hpp"
template <typename REDUCE_POLICY_T, typename T>
class ReduceMin;
# 105 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/reduce.hpp"
template <typename REDUCE_POLICY_T, typename T, typename IndexType = Index_type>
class ReduceMinLoc;
# 130 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/reduce.hpp"
template <typename REDUCE_POLICY_T, typename T>
class ReduceMax;
# 156 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/reduce.hpp"
template <typename REDUCE_POLICY_T, typename T, typename IndexType = Index_type>
class ReduceMaxLoc;
# 181 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/reduce.hpp"
template <typename REDUCE_POLICY_T, typename T>
class ReduceSum;
# 206 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/reduce.hpp"
template <typename REDUCE_POLICY_T, typename T>
class ReduceBitOr;
# 232 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/reduce.hpp"
template <typename REDUCE_POLICY_T, typename T>
class ReduceBitAnd;
}
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/policy.hpp" 2






namespace RAJA
{




using cuda_dim_t = dim3;


using cuda_dim_member_t = camp::decay<decltype(std::declval<cuda_dim_t>().x)>;
# 58 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/policy.hpp"
namespace detail
{
template <bool Async>
struct get_launch {
  static constexpr RAJA::Launch value = RAJA::Launch::async;
};

template <>
struct get_launch<false> {
  static constexpr RAJA::Launch value = RAJA::Launch::sync;
};
}

namespace policy
{
namespace cuda
{

template <size_t BLOCK_SIZE, bool Async = false>
struct cuda_exec : public RAJA::make_policy_pattern_launch_platform_t<
                       RAJA::Policy::cuda,
                       RAJA::Pattern::forall,
                       detail::get_launch<Async>::value,
                       RAJA::Platform::cuda> {
};
# 93 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/policy.hpp"
template <size_t BLOCK_SIZE, bool Async = false>
struct cuda_work : public RAJA::make_policy_pattern_launch_platform_t<
                       RAJA::Policy::cuda,
                       RAJA::Pattern::workgroup_exec,
                       detail::get_launch<Async>::value,
                       RAJA::Platform::cuda> {
};

struct unordered_cuda_loop_y_block_iter_x_threadblock_average
    : public RAJA::make_policy_pattern_platform_t<
                       RAJA::Policy::cuda,
                       RAJA::Pattern::workgroup_order,
                       RAJA::Platform::cuda> {
};
# 116 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/policy.hpp"
template <bool maybe_atomic>
struct cuda_reduce_base
    : public RAJA::
          make_policy_pattern_launch_platform_t<RAJA::Policy::cuda,
                                                RAJA::Pattern::reduce,
                                                detail::get_launch<false>::value,
                                                RAJA::Platform::cuda> {
};

using cuda_reduce = cuda_reduce_base<false>;

using cuda_reduce_atomic = cuda_reduce_base<true>;




struct cuda_block_reduce{};



struct cuda_warp_reduce{};





struct cuda_warp_direct{};




struct cuda_warp_loop{};
# 157 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/policy.hpp"
template<typename Mask>
struct cuda_warp_masked_direct {};







template<typename Mask>
struct cuda_warp_masked_loop {};


template<typename Mask>
struct cuda_thread_masked_direct {};

template<typename Mask>
struct cuda_thread_masked_loop {};







constexpr const RAJA::Index_type WARP_SIZE = 32;
constexpr const RAJA::Index_type MAX_BLOCK_SIZE = 1024;
constexpr const RAJA::Index_type MAX_WARPS = MAX_BLOCK_SIZE / WARP_SIZE;
static_assert(WARP_SIZE >= MAX_WARPS,
              "RAJA Assumption Broken: WARP_SIZE < MAX_WARPS");
static_assert(MAX_BLOCK_SIZE % WARP_SIZE == 0,
              "RAJA Assumption Broken: MAX_BLOCK_SIZE not "
              "a multiple of WARP_SIZE");

struct cuda_synchronize : make_policy_pattern_launch_t<Policy::cuda,
                                                       Pattern::synchronize,
                                                       Launch::sync> {
};

}
}

using policy::cuda::cuda_exec;

template <size_t BLOCK_SIZE>
using cuda_exec_async = policy::cuda::cuda_exec<BLOCK_SIZE, true>;

using policy::cuda::cuda_work;

template <size_t BLOCK_SIZE>
using cuda_work_async = policy::cuda::cuda_work<BLOCK_SIZE, true>;

using policy::cuda::unordered_cuda_loop_y_block_iter_x_threadblock_average;

using policy::cuda::cuda_reduce_base;
using policy::cuda::cuda_reduce;
using policy::cuda::cuda_reduce_atomic;

using policy::cuda::cuda_block_reduce;
using policy::cuda::cuda_warp_reduce;

using policy::cuda::cuda_warp_direct;
using policy::cuda::cuda_warp_loop;

using policy::cuda::cuda_warp_masked_direct;
using policy::cuda::cuda_warp_masked_loop;

using policy::cuda::cuda_thread_masked_direct;
using policy::cuda::cuda_thread_masked_loop;

using policy::cuda::cuda_synchronize;
# 239 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/policy.hpp"
template<int dim>
struct cuda_thread_xyz_direct{};

using cuda_thread_x_direct = cuda_thread_xyz_direct<0>;
using cuda_thread_y_direct = cuda_thread_xyz_direct<1>;
using cuda_thread_z_direct = cuda_thread_xyz_direct<2>;






template<int dim, int min_threads>
struct cuda_thread_xyz_loop{};

using cuda_thread_x_loop = cuda_thread_xyz_loop<0, 1>;
using cuda_thread_y_loop = cuda_thread_xyz_loop<1, 1>;
using cuda_thread_z_loop = cuda_thread_xyz_loop<2, 1>;






template<int dim>
struct cuda_block_xyz_direct{};

using cuda_block_x_direct = cuda_block_xyz_direct<0>;
using cuda_block_y_direct = cuda_block_xyz_direct<1>;
using cuda_block_z_direct = cuda_block_xyz_direct<2>;






template<int dim>
struct cuda_block_xyz_loop{};

using cuda_block_x_loop = cuda_block_xyz_loop<0>;
using cuda_block_y_loop = cuda_block_xyz_loop<1>;
using cuda_block_z_loop = cuda_block_xyz_loop<2>;




namespace internal{

template<int dim>
struct CudaDimHelper;

template<>
struct CudaDimHelper<0>{

  template<typename dim_t>
  __attribute__((host)) __attribute__((device))
  inline
  static
  constexpr
  auto get(dim_t const &d) ->
    decltype(d.x)
  {
    return d.x;
  }

  template<typename dim_t>
  __attribute__((host)) __attribute__((device))
  inline
  static
  void set(dim_t &d, int value)
  {
    d.x = value;
  }
};

template<>
struct CudaDimHelper<1>{

  template<typename dim_t>
  __attribute__((host)) __attribute__((device))
  inline
  static
  constexpr
  auto get(dim_t const &d) ->
    decltype(d.x)
  {
    return d.y;
  }

  template<typename dim_t>
  __attribute__((host)) __attribute__((device))
  inline
  static
  void set(dim_t &d, int value)
  {
    d.y = value;
  }
};

template<>
struct CudaDimHelper<2>{

  template<typename dim_t>
  __attribute__((host)) __attribute__((device))
  inline
  static
  constexpr
  auto get(dim_t const &d) ->
    decltype(d.x)
  {
    return d.z;
  }

  template<typename dim_t>
  __attribute__((host)) __attribute__((device))
  inline
  static
  void set(dim_t &d, int value)
  {
    d.z = value;
  }
};

template<int dim, typename dim_t>
__attribute__((host)) __attribute__((device))
constexpr
auto get_cuda_dim(dim_t const &d) ->
  decltype(d.x)
{
  return CudaDimHelper<dim>::get(d);
}

template<int dim, typename dim_t>
__attribute__((host)) __attribute__((device))
void set_cuda_dim(dim_t &d, int value)
{
  return CudaDimHelper<dim>::set(d, value);
}
}


}
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/resource.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/hip/policy.hpp" 1
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/resource.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/policy.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/policy.hpp"
namespace RAJA
{
namespace policy
{
namespace sequential
{
# 42 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/policy.hpp"
struct seq_region : make_policy_pattern_launch_platform_t<Policy::sequential,
                                                          Pattern::region,
                                                          Launch::sync,
                                                          Platform::host> {
};

struct seq_exec : make_policy_pattern_launch_platform_t<Policy::sequential,
                                                        Pattern::forall,
                                                        Launch::undefined,
                                                        Platform::host> {
};




using seq_segit = seq_exec;




struct seq_work : make_policy_pattern_launch_platform_t<Policy::sequential,
                                                        Pattern::workgroup_exec,
                                                        Launch::sync,
                                                        Platform::host> {
};
# 75 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/policy.hpp"
struct seq_reduce : make_policy_pattern_launch_platform_t<Policy::sequential,
                                                          Pattern::forall,
                                                          Launch::undefined,
                                                          Platform::host> {
};
}
}

using policy::sequential::seq_exec;
using policy::sequential::seq_reduce;
using policy::sequential::seq_region;
using policy::sequential::seq_segit;
using policy::sequential::seq_work;



}
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/resource.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/openmp_target/policy.hpp" 1
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/openmp_target/policy.hpp"
namespace RAJA {

namespace policy {
namespace omp {




static constexpr int MAXNUMTHREADS = 1024;

template <unsigned int TeamSize>
struct Teams : std::integral_constant<unsigned int, TeamSize> {
};

struct Target {
};

struct Distribute {
};

struct Collapse {
};

template <size_t ThreadsPerTeam>
struct omp_target_parallel_for_exec
    : make_policy_pattern_t<Policy::target_openmp,
                            Pattern::forall,
                            omp::Target,
                            omp::Teams<ThreadsPerTeam>,
                            omp::Distribute> {
};

struct omp_target_parallel_for_exec_nt
    : make_policy_pattern_t<Policy::target_openmp,
                            Pattern::forall,
                            omp::Target,
                            omp::Distribute> {
};

struct omp_target_parallel_collapse_exec
    : make_policy_pattern_t<Policy::target_openmp,
                            Pattern::forall,
                            omp::Target,
                            omp::Collapse> {
};

struct omp_target_reduce
    : make_policy_pattern_t<Policy::target_openmp, Pattern::reduce> {
};




struct omp_target_work
    : make_policy_pattern_launch_platform_t<Policy::target_openmp,
                                            Pattern::workgroup_exec,
                                            Launch::sync,
                                            Platform::omp_target> {
};


}
}
# 85 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/openmp_target/policy.hpp"
}
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/resource.hpp" 2

namespace RAJA
{

  namespace resources
  {
  using namespace camp::resources;

  template<typename e>
  struct get_resource{
    using type = camp::resources::Host;
  };

  template<typename ExecPol>
  constexpr auto get_default_resource() -> typename get_resource<ExecPol>::type {
    return get_resource<ExecPol>::type::get_default();
  }


  template<size_t BlockSize, bool Async>
  struct get_resource<cuda_exec<BlockSize, Async>>{
    using type = camp::resources::Cuda;
  };

  template<typename ISetIter, size_t BlockSize, bool Async>
  struct get_resource<ExecPolicy<ISetIter, cuda_exec<BlockSize, Async>>>{
    using type = camp::resources::Cuda;
  };
# 94 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/resource.hpp"
  }

  namespace type_traits
  {
    template <typename T> struct is_resource : std::false_type {};
    template <> struct is_resource<resources::Host> : std::true_type {};

    template <> struct is_resource<resources::Cuda> : std::true_type {};







  }

}
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/MultiPolicy.hpp" 2


namespace RAJA
{

namespace detail
{
template <size_t index, size_t size, typename Policy, typename... rest>
struct policy_invoker;
}

namespace policy
{
namespace multi
{






template <typename Selector, typename... Policies>
class MultiPolicy
{
  Selector s;

public:
  MultiPolicy() = delete;
  MultiPolicy(Selector s) : s(s), _policies({Policies{}...}) {}
  MultiPolicy(Selector s, Policies... policies) : s(s), _policies({policies...})
  {
  }

  MultiPolicy(const MultiPolicy &p) : s(p.s), _policies(p._policies) {}

  template <typename Iterable, typename Body>
  int invoke(Iterable &&i, Body &&b)
  {
    size_t index = s(i);
    _policies.invoke(index, i, b);
    return s(i);
  }

  detail::
      policy_invoker<sizeof...(Policies) - 1, sizeof...(Policies), Policies...>
          _policies;
};






template <typename Iterable,
          typename Body,
          typename Selector,
          typename... Policies>
inline __attribute__((always_inline)) void forall_impl(MultiPolicy<Selector, Policies...> p,
                             Iterable &&iter,
                             Body &&body)
{
  p.invoke(iter, body);
}
template <typename Res,
          typename Iterable,
          typename Body,
          typename Selector,
          typename... Policies>
inline __attribute__((always_inline)) resources::EventProxy<Res> forall_impl(Res &r,
                                  MultiPolicy<Selector, Policies...> p,
                                  Iterable &&iter,
                                  Body &&body)
{
  p.invoke(iter, body);
  return resources::EventProxy<Res>(&r);
}

}
}

using policy::multi::MultiPolicy;

namespace detail
{

template <camp::idx_t... Indices, typename... Policies, typename Selector>
auto make_multi_policy(camp::idx_seq<Indices...>,
                       Selector s,
                       std::tuple<Policies...> policies)
    -> MultiPolicy<Selector, Policies...>
{
  return MultiPolicy<Selector, Policies...>(s, std::get<Indices>(policies)...);
}
}
# 135 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/MultiPolicy.hpp"
template <typename... Policies, typename Selector>
[[deprecated("In the next RAJA Release, MultiPolicy will be deprecated.")]]
auto make_multi_policy(Selector s) -> MultiPolicy<Selector, Policies...>
{
  return MultiPolicy<Selector, Policies...>(s, Policies{}...);
}
# 151 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/MultiPolicy.hpp"
template <typename... Policies, typename Selector>
[[deprecated("In the next RAJA Release, MultiPolicy will be deprecated.")]]
auto make_multi_policy(std::tuple<Policies...> policies, Selector s)
    -> MultiPolicy<Selector, Policies...>
{
  return detail::make_multi_policy(
      camp::make_idx_seq_t<sizeof...(Policies)>{}, s, policies);
}

namespace detail
{

template <size_t index, size_t size, typename Policy, typename... rest>
struct policy_invoker : public policy_invoker<index - 1, size, rest...> {
  static_assert(index < size, "index must be in the range of possibilities");
  Policy _p;
  using NextInvoker = policy_invoker<index - 1, size, rest...>;

  policy_invoker(Policy p, rest... args) : NextInvoker(args...), _p(p) {}

  template <typename Iterable, typename LoopBody>
  void invoke(int offset, Iterable &&iter, LoopBody &&loop_body)
  {
    if (offset == size - index - 1) {

      util::PluginContext context{util::make_context<Policy>()};
      util::callPreCapturePlugins(context);

      using RAJA::util::trigger_updates_before;
      auto body = trigger_updates_before(loop_body);

      util::callPostCapturePlugins(context);

      util::callPreLaunchPlugins(context);

      using policy::multi::forall_impl;

      auto r = resources::get_resource<Policy>::type::get_default();
      forall_impl(r, _p, std::forward<Iterable>(iter), body);

      util::callPostLaunchPlugins(context);
    } else {
      NextInvoker::invoke(offset, std::forward<Iterable>(iter), std::forward<LoopBody>(loop_body));
    }
  }
};

template <size_t size, typename Policy, typename... rest>
struct policy_invoker<0, size, Policy, rest...> {
  Policy _p;
  policy_invoker(Policy p, rest...) : _p(p) {}
  template <typename Iterable, typename LoopBody>
  void invoke(int offset, Iterable &&iter, LoopBody &&loop_body)
  {
    if (offset == size - 1) {

      util::PluginContext context{util::make_context<Policy>()};
      util::callPreCapturePlugins(context);

      using RAJA::util::trigger_updates_before;
      auto body = trigger_updates_before(loop_body);

      util::callPostCapturePlugins(context);

      util::callPreLaunchPlugins(context);


      using policy::multi::forall_impl;

      auto r = resources::get_resource<Policy>::type::get_default();
      forall_impl(r, _p, std::forward<Iterable>(iter), body);

      util::callPostLaunchPlugins(context);
    } else {
      throw std::runtime_error("unknown offset invoked");
    }
  }
};

}

namespace type_traits
{

template <typename T>
struct is_multi_policy
    : ::RAJA::type_traits::SpecializationOf<RAJA::MultiPolicy, typename std::decay<T>::type> {
};
}

}
# 65 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp" 2





# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/internal/fault_tolerance.hpp" 1
# 71 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp" 2





# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/forall.hpp" 1
# 34 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/forall.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/forall.hpp" 1
# 35 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/forall.hpp" 2



namespace RAJA
{
namespace policy
{
namespace sequential
{
# 56 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/forall.hpp"
template <typename Iterable, typename Func>
inline __attribute__((always_inline)) resources::EventProxy<resources::Host> forall_impl(resources::Host &host_res,
                                                               const seq_exec &,
                                                               Iterable &&iter,
                                                               Func &&body)
{
  using std::begin; using std::end; using std::distance; auto begin_it = begin(iter); auto end_it = end(iter); auto distance_it = distance(begin_it, end_it);

#pragma clang loop vectorize(disable)
 for (decltype(distance_it) i = 0; i < distance_it; ++i) {
    body(*(begin_it + i));
  }
  return resources::EventProxy<resources::Host>(&host_res);
}

}

}

}
# 77 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp" 2
# 86 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp"
namespace RAJA
{
# 97 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp"
namespace detail
{

template <typename Range, typename Body, typename IndexT>
struct icount_adapter {
  using index_type = typename std::decay<IndexT>::type;
  typename std::decay<Body>::type body;
  using container_type = typename std::decay<Range>::type;
  typename container_type::iterator begin_it;
  Index_type icount;
  icount_adapter(Range const& r, Body const& b, IndexT icount_)
      : body{b}, icount{icount_}
  {
    using std::begin;
    begin_it = begin(r);
  }

#pragma nv_exec_check_disable
 template <typename T>
  __attribute__((host)) __attribute__((device)) void operator()(T const& i) const
  {
    body(static_cast<index_type>(i + icount), begin_it[i]);
  }
};

struct CallForall {
  template <typename T, typename ExecPol, typename Body, typename Res>
  inline __attribute__((always_inline)) camp::resources::EventProxy<Res> operator()(T const&, ExecPol, Body, Res&) const;
};

struct CallForallIcount {
  constexpr CallForallIcount(int s);

  template <typename T, typename ExecPol, typename Body, typename Res>
  inline __attribute__((always_inline)) camp::resources::EventProxy<Res> operator()(T const&, ExecPol, Body, Res&) const;

  const int start;
};
}
# 144 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp"
namespace wrap
{
# 155 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp"
template <typename Res, typename ExecutionPolicy, typename Container, typename LoopBody>
inline __attribute__((always_inline)) concepts::enable_if_t<
    RAJA::resources::EventProxy<Res>,
    concepts::negate<type_traits::is_indexset_policy<ExecutionPolicy>>,
    type_traits::is_range<Container>>
forall(Res &r, ExecutionPolicy&& p, Container&& c, LoopBody&& loop_body)
{

  return forall_impl(r,
                     std::forward<ExecutionPolicy>(p),
                     std::forward<Container>(c),
                     std::forward<LoopBody>(loop_body));
}
# 177 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp"
template <typename Res,
          typename ExecutionPolicy,
          typename Container,
          typename IndexType,
          typename LoopBody>
inline __attribute__((always_inline)) resources::EventProxy<Res> forall_Icount(Res &r,
                                                      ExecutionPolicy&& p,
                                                      Container&& c,
                                                      IndexType&& icount,
                                                      LoopBody&& loop_body)
{
  using std::begin;
  using std::distance;
  using std::end;
  auto range = RangeSegment(0, distance(begin(c), end(c)));
  detail::icount_adapter<Container, LoopBody, IndexType> adapted(c,
                                                                 loop_body,
                                                                 icount);
  using policy::sequential::forall_impl;

  return forall_impl(r, std::forward<ExecutionPolicy>(p), range, adapted);
}
# 209 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp"
template <typename Res,
          typename SegmentIterPolicy,
          typename SegmentExecPolicy,
          typename... SegmentTypes,
          typename LoopBody>
inline __attribute__((always_inline)) resources::EventProxy<Res> forall_Icount(Res&r,
                                                ExecPolicy<SegmentIterPolicy,
                                                SegmentExecPolicy>,
                                                const TypedIndexSet<SegmentTypes...>& iset,
                                                LoopBody loop_body)
{

  auto segIterRes = resources::get_resource<SegmentIterPolicy>::type::get_default();
  wrap::forall(segIterRes, SegmentIterPolicy(), iset, [=, &r](int segID) {
    iset.segmentCall(segID,
                     detail::CallForallIcount(iset.getStartingIcount(segID)),
                     SegmentExecPolicy(),
                     loop_body,
                     r);
  });
  return RAJA::resources::EventProxy<Res>(&r);
}

template <typename Res,
          typename SegmentIterPolicy,
          typename SegmentExecPolicy,
          typename LoopBody,
          typename... SegmentTypes>
inline __attribute__((always_inline)) resources::EventProxy<Res> forall(Res &r,
                                         ExecPolicy<SegmentIterPolicy,
                                         SegmentExecPolicy>,
                                         const TypedIndexSet<SegmentTypes...>& iset,
                                         LoopBody loop_body)
{
  auto segIterRes = resources::get_resource<SegmentIterPolicy>::type::get_default();
  wrap::forall(segIterRes, SegmentIterPolicy(), iset, [=, &r](int segID) {
    iset.segmentCall(segID, detail::CallForall{}, SegmentExecPolicy(), loop_body, r);
  });
  return RAJA::resources::EventProxy<Res>(&r);
}

}
# 263 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp"
inline namespace policy_by_value_interface
{
# 274 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp"
template <typename ExecutionPolicy, typename IdxSet, typename LoopBody,
          typename Res = typename resources::get_resource<ExecutionPolicy>::type >
inline __attribute__((always_inline)) resources::EventProxy<Res> forall_Icount(ExecutionPolicy&& p,
                                                     IdxSet&& c,
                                                     LoopBody&& loop_body)
{
  auto r = Res::get_default();
  return forall_Icount(std::forward<ExecutionPolicy>(p),
                       r,
                       std::forward<IdxSet>(c),
                       std::forward<LoopBody>(loop_body));
}
template <typename ExecutionPolicy, typename Res, typename IdxSet, typename LoopBody>
inline __attribute__((always_inline)) resources::EventProxy<Res> forall_Icount(ExecutionPolicy&& p,
                                                     Res &r,
                                                     IdxSet&& c,
                                                     LoopBody&& loop_body)
{
  static_assert(type_traits::is_index_set<IdxSet>::value,
                "Expected a TypedIndexSet but did not get one. Are you using "
                "a TypedIndexSet policy by mistake?");

  util::PluginContext context{util::make_context<camp::decay<ExecutionPolicy>>()};
  util::callPreCapturePlugins(context);

  using RAJA::util::trigger_updates_before;
  auto body = trigger_updates_before(loop_body);

  util::callPostCapturePlugins(context);

  util::callPreLaunchPlugins(context);

  RAJA::resources::EventProxy<Res> e = wrap::forall_Icount(r,
                                  std::forward<ExecutionPolicy>(p),
                                  std::forward<IdxSet>(c),
                                  std::move(body));

  util::callPostLaunchPlugins(context);
  return e;
}
# 322 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp"
template <typename ExecutionPolicy, typename IdxSet, typename LoopBody,
          typename Res = typename resources::get_resource<ExecutionPolicy>::type >
inline __attribute__((always_inline)) concepts::enable_if_t<
    resources::EventProxy<Res>,
    type_traits::is_indexset_policy<ExecutionPolicy>>
forall(ExecutionPolicy&& p, IdxSet&& c, LoopBody&& loop_body)
{
  auto r = Res::get_default();
  return forall(std::forward<ExecutionPolicy>(p),
                r,
                std::forward<IdxSet>(c),
                std::forward<LoopBody>(loop_body));
}
template <typename ExecutionPolicy, typename Res, typename IdxSet, typename LoopBody>
inline __attribute__((always_inline)) concepts::enable_if_t<
    resources::EventProxy<Res>,
    type_traits::is_indexset_policy<ExecutionPolicy>>
forall(ExecutionPolicy&& p, Res &r, IdxSet&& c, LoopBody&& loop_body)
{
  static_assert(type_traits::is_index_set<IdxSet>::value,
                "Expected a TypedIndexSet but did not get one. Are you using "
                "a TypedIndexSet policy by mistake?");

  util::PluginContext context{util::make_context<camp::decay<ExecutionPolicy>>()};
  util::callPreCapturePlugins(context);

  using RAJA::util::trigger_updates_before;
  auto body = trigger_updates_before(loop_body);

  util::callPostCapturePlugins(context);

  util::callPreLaunchPlugins(context);

  resources::EventProxy<Res> e = wrap::forall(r,
                                         std::forward<ExecutionPolicy>(p),
                                         std::forward<IdxSet>(c),
                                         std::move(body));

  util::callPostLaunchPlugins(context);
  return e;
}
# 371 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp"
template <typename ExecutionPolicy, typename Container, typename LoopBody,
          typename Res = typename resources::get_resource<ExecutionPolicy>::type >
inline __attribute__((always_inline)) concepts::enable_if<
    type_traits::is_multi_policy<ExecutionPolicy>,
    type_traits::is_range<Container>>
forall(ExecutionPolicy&& p, Container&& c, LoopBody&& loop_body)
{
  static_assert(type_traits::is_random_access_range<Container>::value,
                "Container does not model RandomAccessIterator");

  auto r = Res::get_default();


  forall_impl(r,
              std::forward<ExecutionPolicy>(p),
              std::forward<Container>(c),
              std::forward<LoopBody>(loop_body));
}
# 397 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp"
template <typename ExecutionPolicy,
          typename Container,
          typename IndexType,
          typename LoopBody,
          typename Res = typename resources::get_resource<ExecutionPolicy>::type >
inline __attribute__((always_inline)) concepts::enable_if_t<
    resources::EventProxy<Res>,
    type_traits::is_range<Container>,
    concepts::negate<type_traits::is_indexset_policy<ExecutionPolicy>>,
    type_traits::is_integral<IndexType>>
forall_Icount(ExecutionPolicy&& p,
              Container&& c,
              IndexType icount,
              LoopBody&& loop_body)
{
  auto r = Res::get_default();
  return forall_Icount(std::forward<ExecutionPolicy>(p),
                       r,
                       std::forward<Container>(c),
                       icount,
                       std::forward<LoopBody>(loop_body));
}
template <typename ExecutionPolicy,
          typename Res,
          typename Container,
          typename IndexType,
          typename LoopBody>
inline __attribute__((always_inline)) concepts::enable_if_t<
    resources::EventProxy<Res>,
    type_traits::is_range<Container>,
    type_traits::is_integral<IndexType>>
forall_Icount(ExecutionPolicy&& p,
              Res& r,
              Container&& c,
              IndexType icount,
              LoopBody&& loop_body)
{
  static_assert(type_traits::is_random_access_range<Container>::value,
                "Container does not model RandomAccessIterator");

  util::PluginContext context{util::make_context<camp::decay<ExecutionPolicy>>()};
  util::callPreCapturePlugins(context);

  using RAJA::util::trigger_updates_before;
  auto body = trigger_updates_before(loop_body);

  util::callPostCapturePlugins(context);

  util::callPreLaunchPlugins(context);

  resources::EventProxy<Res> e = wrap::forall_Icount(r,
                                                 std::forward<ExecutionPolicy>(p),
                                                 std::forward<Container>(c),
                                                 icount,
                                                 std::move(body));

  util::callPostLaunchPlugins(context);
  return e;
}
# 464 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/forall.hpp"
template <typename ExecutionPolicy, typename Container, typename LoopBody,
          typename Res = typename resources::get_resource<ExecutionPolicy>::type >
inline __attribute__((always_inline)) concepts::enable_if_t<
    resources::EventProxy<Res>,
    concepts::negate<type_traits::is_indexset_policy<ExecutionPolicy>>,
    concepts::negate<type_traits::is_multi_policy<ExecutionPolicy>>,
    type_traits::is_range<Container>>
forall(ExecutionPolicy&& p, Container&& c, LoopBody&& loop_body)
{
  auto r = Res::get_default();
  return forall(std::forward<ExecutionPolicy>(p),
                r,
                std::forward<Container>(c),
                std::forward<LoopBody>(loop_body));
}

template <typename ExecutionPolicy, typename Res, typename Container, typename LoopBody>
inline __attribute__((always_inline)) concepts::enable_if_t<
    resources::EventProxy<Res>,
    concepts::negate<type_traits::is_indexset_policy<ExecutionPolicy>>,
    concepts::negate<type_traits::is_multi_policy<ExecutionPolicy>>,
    type_traits::is_range<Container>>
forall(ExecutionPolicy&& p, Res &r, Container&& c, LoopBody&& loop_body)
{
  static_assert(type_traits::is_random_access_range<Container>::value,
                "Container does not model RandomAccessIterator");

  util::PluginContext context{util::make_context<camp::decay<ExecutionPolicy>>()};
  util::callPreCapturePlugins(context);

  using RAJA::util::trigger_updates_before;
  auto body = trigger_updates_before(loop_body);

  util::callPostCapturePlugins(context);

  util::callPreLaunchPlugins(context);

  resources::EventProxy<Res> e = wrap::forall(r,
                                          std::forward<ExecutionPolicy>(p),
                                          std::forward<Container>(c),
                                          std::move(body));

  util::callPostLaunchPlugins(context);
  return e;
}

}







template <typename ExecutionPolicy, typename... Args,
          typename Res = typename resources::get_resource<ExecutionPolicy>::type >
inline __attribute__((always_inline)) resources::EventProxy<Res> forall(Args&&... args)
{
  Res r = Res::get_default();
  return forall<ExecutionPolicy>(r, std::forward<Args>(args)...);
}
template <typename ExecutionPolicy, typename Res, typename... Args>
inline __attribute__((always_inline)) concepts::enable_if_t<resources::EventProxy<Res>, type_traits::is_resource<Res>> forall(Res &r, Args&&... args)
{
  return policy_by_value_interface::forall(ExecutionPolicy(), r, std::forward<Args>(args)...);
}







template <typename ExecutionPolicy, typename... Args,
          typename Res = typename resources::get_resource<ExecutionPolicy>::type >
inline __attribute__((always_inline)) resources::EventProxy<Res> forall_Icount(Args&&... args)
{
  Res r = Res::get_default();
  return forall_Icount<ExecutionPolicy>(r, std::forward<Args>(args)...);
}
template <typename ExecutionPolicy, typename Res, typename... Args>
inline __attribute__((always_inline)) concepts::enable_if_t<resources::EventProxy<Res>, type_traits::is_resource<Res>> forall_Icount(Res &r, Args&&... args)
{
  return policy_by_value_interface::forall_Icount(ExecutionPolicy(), r, std::forward<Args>(args)...);
}

namespace detail
{

template <typename T, typename ExecutionPolicy, typename LoopBody, typename Res>
inline __attribute__((always_inline)) camp::resources::EventProxy<Res> CallForall::operator()(T const& segment,
                                                               ExecutionPolicy,
                                                               LoopBody body,
                                                               Res &r) const
{

  using policy::sequential::forall_impl;

  return forall_impl(r, ExecutionPolicy(), segment, body);
}

constexpr CallForallIcount::CallForallIcount(int s) : start(s) {}

template <typename T, typename ExecutionPolicy, typename LoopBody, typename Res>
inline __attribute__((always_inline)) camp::resources::EventProxy<Res> CallForallIcount::operator()(T const& segment,
                                                                     ExecutionPolicy,
                                                                     LoopBody body,
                                                                     Res &r) const
{

  return wrap::forall_Icount(r, ExecutionPolicy(), segment, start, body);
}

}

}
# 45 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel.hpp" 1
# 35 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel.hpp"
namespace RAJA
{






template <typename... Stmts>
using KernelPolicy = internal::StatementList<Stmts...>;





template <camp::idx_t... ArgumentId>
using ArgList = camp::idx_seq<ArgumentId...>;


template <typename T>
struct IterableWrapperTuple;

template <typename... Ts>
struct IterableWrapperTuple<camp::tuple<Ts...>> {

  using type =
      camp::tuple<RAJA::Span<typename camp::decay<Ts>::iterator,
                             typename camp::decay<Ts>::IndexType>...>;
};


namespace internal
{
template <class Tuple, camp::idx_t... I>
inline __attribute__((always_inline)) constexpr auto make_wrapped_tuple_impl(Tuple &&t,
                                                   camp::idx_seq<I...>)
    -> camp::tuple<RAJA::Span<
        typename camp::decay<
            camp::tuple_element_t<I, camp::decay<Tuple>>>::iterator,
        typename camp::decay<
            camp::tuple_element_t<I, camp::decay<Tuple>>>::IndexType>...>
{
  return camp::make_tuple(
      RAJA::Span<
          typename camp::decay<
              camp::tuple_element_t<I, camp::decay<Tuple>>>::iterator,
          typename camp::decay<camp::tuple_element_t<I, camp::decay<Tuple>>>::
              IndexType>{camp::get<I>(std::forward<Tuple>(t)).begin(),
                         camp::get<I>(std::forward<Tuple>(t)).end()}...);
}
}

template <class Tuple>
inline __attribute__((always_inline)) constexpr auto make_wrapped_tuple(Tuple &&t)
    -> decltype(internal::make_wrapped_tuple_impl(
        std::forward<Tuple>(t),
        camp::make_idx_seq_t<camp::tuple_size<camp::decay<Tuple>>::value>{}))
{
  return internal::make_wrapped_tuple_impl(
      std::forward<Tuple>(t),
      camp::make_idx_seq_t<camp::tuple_size<camp::decay<Tuple>>::value>{});
}


template <typename PolicyType,
          typename SegmentTuple,
          typename ParamTuple,
          typename... Bodies>
inline __attribute__((always_inline)) void kernel_param(SegmentTuple &&segments,
                              ParamTuple &&params,
                              Bodies &&... bodies)
{
  util::PluginContext context{util::make_context<PolicyType>()};






  using segment_tuple_t =
      typename IterableWrapperTuple<camp::decay<SegmentTuple>>::type;


  using param_tuple_t = camp::decay<ParamTuple>;

  using loop_data_t = internal::LoopData<segment_tuple_t,
                                         param_tuple_t,
                                         camp::decay<Bodies>...>;


  util::callPreCapturePlugins(context);





  loop_data_t loop_data(make_wrapped_tuple(
                            std::forward<SegmentTuple>(segments)),
                        std::forward<ParamTuple>(params),
                        std::forward<Bodies>(bodies)...);

  util::callPostCapturePlugins(context);

  using loop_types_t = internal::makeInitialLoopTypes<loop_data_t>;

  util::callPreLaunchPlugins(context);



  internal::execute_statement_list<PolicyType, loop_types_t>(loop_data);

  util::callPostLaunchPlugins(context);
}

template <typename PolicyType, typename SegmentTuple, typename... Bodies>
inline __attribute__((always_inline)) void kernel(SegmentTuple &&segments, Bodies &&... bodies)
{
  RAJA::kernel_param<PolicyType>(std::forward<SegmentTuple>(segments),
                                 RAJA::make_tuple(),
                                 std::forward<Bodies>(bodies)...);
}


}



# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Collapse.hpp" 1
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Collapse.hpp"
namespace RAJA
{

namespace statement
{


template <typename ExecPolicy, typename ForList, typename... EnclosedStmts>
struct Collapse : public internal::ForList,
                  public internal::CollapseBase,
                  public internal::Statement<ExecPolicy, EnclosedStmts...> {
};


}
}
# 162 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Conditional.hpp" 1
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Conditional.hpp"
namespace RAJA
{
namespace statement
{






template <typename Condition, typename... EnclosedStmts>
struct If : public internal::Statement<camp::nil, EnclosedStmts...> {
};






template <long value>
struct Value {

  template <typename Data>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) static long eval(Data const &)
  {
    return value;
  }
};





template <typename L, typename R>
struct Equals {

  template <typename Data>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) static bool eval(Data const &data)
  {
    return L::eval(data) == R::eval(data);
  }
};





template <typename L, typename R>
struct NotEquals {

  template <typename Data>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) static bool eval(Data const &data)
  {
    return L::eval(data) != R::eval(data);
  }
};






template <typename L, typename R>
struct Or {

  template <typename Data>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) static bool eval(Data const &data)
  {
    return L::eval(data) || R::eval(data);
  }
};






template <typename L, typename R>
struct And {

  template <typename Data>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) static bool eval(Data const &data)
  {
    return L::eval(data) && R::eval(data);
  }
};






template <typename L, typename R>
struct LessThan {

  template <typename Data>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) static bool eval(Data const &data)
  {
    return L::eval(data) < R::eval(data);
  }
};






template <typename L, typename R>
struct LessThanEq {

  template <typename Data>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) static bool eval(Data const &data)
  {
    return L::eval(data) <= R::eval(data);
  }
};






template <typename L, typename R>
struct GreaterThan {

  template <typename Data>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) static bool eval(Data const &data)
  {
    return L::eval(data) > R::eval(data);
  }
};






template <typename L, typename R>
struct GreaterThanEq {

  template <typename Data>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) static bool eval(Data const &data)
  {
    return L::eval(data) >= R::eval(data);
  }
};






template <typename L>
struct Not {

  template <typename Data>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) static bool eval(Data const &data)
  {
    return !(L::eval(data));
  }
};


}

namespace internal
{


template <typename Condition, typename... EnclosedStmts, typename Types>
struct StatementExecutor<statement::If<Condition, EnclosedStmts...>, Types> {


  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &&data)
  {

    if (Condition::eval(data)) {
      execute_statement_list<camp::list<EnclosedStmts...>, Types>(
          std::forward<Data>(data));
    }
  }
};


}
}
# 163 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/For.hpp" 1
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/For.hpp"
namespace RAJA
{

namespace statement
{







template <camp::idx_t ArgumentId,
          typename ExecPolicy = camp::nil,
          typename... EnclosedStmts>
struct For : public internal::ForList,
             public internal::ForTraitBase<ArgumentId, ExecPolicy>,
             public internal::Statement<ExecPolicy, EnclosedStmts...> {


  using execution_policy_t = ExecPolicy;
};


}

namespace internal
{






template <camp::idx_t ArgumentId, typename Data, typename Types, typename... EnclosedStmts>
struct ForWrapper : public GenericWrapper<Data, Types, EnclosedStmts...> {

  using Base = GenericWrapper<Data, Types, EnclosedStmts...>;
  using Base::Base;
  using privatizer = NestedPrivatizer<ForWrapper>;

  template <typename InIndexType>
  inline __attribute__((always_inline)) void operator()(InIndexType i)
  {
    Base::data.template assign_offset<ArgumentId>(i);
    Base::exec();
  }
};







template <camp::idx_t ArgumentId,
          typename ExecPolicy,
          typename... EnclosedStmts,
          typename Types>
struct StatementExecutor<
    statement::For<ArgumentId, ExecPolicy, EnclosedStmts...>, Types> {


  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &&data)
  {


    using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;


    ForWrapper<ArgumentId, Data, NewTypes, EnclosedStmts...> for_wrapper(data);

    auto len = segment_length<ArgumentId>(data);
    using len_t = decltype(len);

    auto r = resources::get_resource<ExecPolicy>::type::get_default();

    forall_impl(r, ExecPolicy{}, TypedRangeSegment<len_t>(0, len), for_wrapper);
  }
};


}
}
# 164 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/ForICount.hpp" 1
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/ForICount.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Param.hpp" 1
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Param.hpp"
namespace RAJA
{
namespace internal
{

struct ParamBase {
};

}

namespace statement
{
# 49 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Param.hpp"
template <camp::idx_t ParamId>
struct Param : public internal::ParamBase {

  constexpr static camp::idx_t param_idx = ParamId;

  template <typename Data>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) static auto eval(Data const &data)
      -> decltype(camp::get<ParamId>(data.param_tuple))
  {
    return camp::get<ParamId>(data.param_tuple);
  }
};

}
}
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/ForICount.hpp" 2

namespace RAJA
{

namespace statement
{
# 42 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/ForICount.hpp"
template <camp::idx_t ArgumentId,
          typename ParamId,
          typename ExecPolicy = camp::nil,
          typename... EnclosedStmts>
struct ForICount : public internal::ForList,
             public internal::ForTraitBase<ArgumentId, ExecPolicy>,
             public internal::Statement<ExecPolicy, EnclosedStmts...> {

  static_assert(std::is_base_of<internal::ParamBase, ParamId>::value,
                "Inappropriate ParamId, ParamId must be of type "
                "RAJA::Statement::Param< # >");

  using execution_policy_t = ExecPolicy;
};

}

namespace internal
{






template <camp::idx_t ArgumentId, typename ParamId, typename Data, typename Types,
          typename... EnclosedStmts>
struct ForICountWrapper : public GenericWrapper<Data, Types, EnclosedStmts...> {

  using Base = GenericWrapper<Data, Types, EnclosedStmts...>;
  using Base::Base;
  using privatizer = NestedPrivatizer<ForICountWrapper>;

  template <typename InIndexType>
  inline __attribute__((always_inline)) void operator()(InIndexType i)
  {
    Base::data.template assign_offset<ArgumentId>(i);
    Base::data.template assign_param<ParamId>(i);
    Base::exec();
  }
};







template <camp::idx_t ArgumentId,
          typename ParamId,
          typename ExecPolicy,
          typename... EnclosedStmts,
          typename Types>
struct StatementExecutor<
    statement::ForICount<ArgumentId, ParamId, ExecPolicy, EnclosedStmts...>, Types> {


  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &&data)
  {


    using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;


    ForICountWrapper<ArgumentId, ParamId, Data, NewTypes,
                     EnclosedStmts...> for_wrapper(data);

    auto len = segment_length<ArgumentId>(data);
    using len_t = decltype(len);

    auto r = resources::get_resource<ExecPolicy>::type::get_default();

    forall_impl(r, ExecPolicy{}, TypedRangeSegment<len_t>(0, len), for_wrapper);
  }
};


}
}
# 165 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Hyperplane.hpp" 1
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Hyperplane.hpp"
namespace RAJA
{
namespace statement
{
# 79 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Hyperplane.hpp"
template <camp::idx_t HpArgumentId,
          typename HpExecPolicy,
          typename ArgList,
          typename ExecPolicy,
          typename... EnclosedStmts>
struct Hyperplane
    : public internal::Statement<ExecPolicy,
                                 EnclosedStmts...> {
};

}

namespace internal
{


template <camp::idx_t HpArgumentId, typename ArgList, typename... EnclosedStmts>
struct HyperplaneInner
    : public internal::Statement<camp::nil, EnclosedStmts...> {
};


template <camp::idx_t HpArgumentId,
          typename HpExecPolicy,
          camp::idx_t... Args,
          typename ExecPolicy,
          typename... EnclosedStmts,
          typename Types>
struct StatementExecutor<statement::Hyperplane<HpArgumentId,
                                               HpExecPolicy,
                                               ArgList<Args...>,
                                               ExecPolicy,
                                               EnclosedStmts...>, Types> {


  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &data)
  {


    using data_t = camp::decay<Data>;
    using idx_t =
        camp::tuple_element_t<HpArgumentId, typename data_t::offset_tuple_t>;


    using NewTypes = setSegmentTypeFromData<Types, HpArgumentId, Data>;



    using kernel_policy = statement::Collapse<
        ExecPolicy,
        ArgList<Args...>,
        HyperplaneInner<HpArgumentId, ArgList<Args...>, EnclosedStmts...>>;


    ForWrapper<HpArgumentId, Data, NewTypes, kernel_policy> outer_wrapper(data);



    idx_t hp_len = segment_length<HpArgumentId>(data) +
                   foldl(RAJA::operators::plus<idx_t>(),
                                 segment_length<Args>(data)...);







    auto r = resources::get_resource<HpExecPolicy>::type::get_default();
    forall_impl(r, HpExecPolicy{},
                TypedRangeSegment<idx_t>(0, hp_len),
                outer_wrapper);
  }
};


template <camp::idx_t HpArgumentId,
          camp::idx_t... Args,
          typename... EnclosedStmts,
          typename Types>
struct StatementExecutor<
    HyperplaneInner<HpArgumentId, ArgList<Args...>, EnclosedStmts...>, Types> {


  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &data)
  {


    auto h = camp::get<HpArgumentId>(data.offset_tuple);
    using idx_t = decltype(h);



    idx_t i = h - foldl(RAJA::operators::plus<idx_t>(),
                                camp::get<Args>(data.offset_tuple)...);


    auto len = segment_length<HpArgumentId>(data);


    if (i >= 0 && i < len) {


      data.template assign_offset<HpArgumentId>(i);


      execute_statement_list<StatementList<EnclosedStmts...>, Types>(data);


      data.template assign_offset<HpArgumentId>(h);
    }
  }
};


}

}
# 166 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/InitLocalMem.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/InitLocalMem.hpp"
namespace RAJA
{


struct cpu_tile_mem;


namespace statement
{
# 46 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/InitLocalMem.hpp"
template<typename Pol, typename Indices, typename... EnclosedStmts>
struct InitLocalMem : public internal::Statement<camp::nil> {
};


template<camp::idx_t... Indices, typename... EnclosedStmts>
struct InitLocalMem<RAJA::cpu_tile_mem, camp::idx_seq<Indices...>, EnclosedStmts...> : public internal::Statement<camp::nil> {
};


}

namespace internal
{


template<camp::idx_t... Indices, typename... EnclosedStmts, typename Types>
struct StatementExecutor<statement::InitLocalMem<RAJA::cpu_tile_mem,camp::idx_seq<Indices...>, EnclosedStmts...>, Types>{


  template<class Data>
  static void inline __attribute__((always_inline)) initMem(Data && data)
  {
    execute_statement_list<camp::list<EnclosedStmts...>, Types>(data);
  }



  template<camp::idx_t Pos, camp::idx_t... others, class Data>
  static void inline __attribute__((always_inline)) initMem(Data && data)
  {
    using varType = typename camp::tuple_element_t<Pos, typename camp::decay<Data>::param_tuple_t>::element_t;
    const camp::idx_t NumElem = camp::tuple_element_t<Pos, typename camp::decay<Data>::param_tuple_t>::NumElem;

    varType Array[NumElem];
    camp::get<Pos>(data.param_tuple).m_arrayPtr = Array;
    initMem<others...>(data);
  }


  template<class Data>
  static void inline __attribute__((always_inline)) setPtrToNull(Data &&) {}

  template<camp::idx_t Pos, camp::idx_t... others, class Data>
  static void inline __attribute__((always_inline)) setPtrToNull(Data && data)
  {
    camp::get<Pos>(data.param_tuple).m_arrayPtr = nullptr;
    setPtrToNull<others...>(data);
  }

  template<typename Data>
  static inline __attribute__((always_inline)) void exec(Data &&data)
  {

    initMem<Indices...>(data);


    setPtrToNull<Indices...>(data);
  }

};


}
}
# 167 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Lambda.hpp" 1
# 35 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Lambda.hpp"
namespace RAJA
{

namespace internal
{
struct lambda_arg_seg_t
{};

struct lambda_arg_param_t
{};

struct lambda_arg_offset_t
{};

template<typename T>
struct lambda_arg_value_t
{
    using type = T;
};

template<typename T, camp::idx_t>
struct LambdaArg
{
};

}







template<camp::idx_t ... args>
using Segs = camp::list<internal::LambdaArg<internal::lambda_arg_seg_t, args>...>;
# 81 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Lambda.hpp"
template<camp::idx_t ... args>
using Offsets = camp::list<internal::LambdaArg<internal::lambda_arg_offset_t, args>...>;






template<camp::idx_t ... args>
using Params = camp::list<internal::LambdaArg<internal::lambda_arg_param_t, args>...>;
# 105 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Lambda.hpp"
template<typename T, camp::idx_t ... values>
using ValuesT = camp::list<internal::LambdaArg<internal::lambda_arg_value_t<T>, values>...>;


namespace statement
{
# 121 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Lambda.hpp"
template <camp::idx_t BodyIdx, typename... Args >
struct Lambda : internal::Statement<camp::nil> {
  static const camp::idx_t loop_body_index = BodyIdx;
};

}

namespace internal
{


#pragma nv_exec_check_disable
template <camp::idx_t LoopIndex,
          typename Types,
          camp::idx_t... OffsetIdx,
          camp::idx_t... ParamIdx,
          typename Data>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) void invoke_lambda_expanded(
    camp::idx_seq<OffsetIdx...> const &,
    camp::idx_seq<ParamIdx...> const &,
    Data &&data)
{

  using segment_types = typename Types::segment_types_t;


  static_assert(
      foldl(RAJA::operators::bit_and<bool>(), (!std::is_same<camp::at_v<segment_types, OffsetIdx>, void>::value)...),
      "Not all segments have been used in a loop:  Either add more loop statements, or use the Lambda<N, Args..> form");



  camp::get<LoopIndex>(data.bodies)
    ((camp::at_v<segment_types, OffsetIdx>)(camp::get<OffsetIdx>(data.segment_tuple).begin()[camp::get<OffsetIdx>(data.offset_tuple)])...,
     camp::get<ParamIdx>(data.param_tuple)...);
}


template <camp::idx_t LoopIndex, typename Types, typename Data>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void invoke_lambda(Data &&data)
{
  using Data_t = camp::decay<Data>;
  using offset_tuple_t = typename Data_t::offset_tuple_t;
  using param_tuple_t = typename Data_t::param_tuple_t;

  invoke_lambda_expanded<LoopIndex, Types>(
      camp::make_idx_seq_t<camp::tuple_size<offset_tuple_t>::value>{},
      camp::make_idx_seq_t<camp::tuple_size<param_tuple_t>::value>{},
      std::forward<Data>(data));
}


template <camp::idx_t LambdaIndex, typename Types>
struct StatementExecutor<statement::Lambda<LambdaIndex>, Types> {

  template <typename Data>
  static inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void exec(Data &&data)
  {
    invoke_lambda<LambdaIndex, Types>(std::forward<Data>(data));
  }
};





template<typename Types, typename T>
struct LambdaArgExtractor;

template<typename Types, camp::idx_t id>
struct LambdaArgExtractor<Types, LambdaArg<lambda_arg_offset_t, id>>
{


  using type = camp::at_v<typename Types::offset_types_t, id>;

  static_assert(!std::is_same<type, void>::value,
      "Offset not assigned, but used in Lambda with Offsets<> argument");

  template<typename Data>
  __attribute__((host)) __attribute__((device))
  inline __attribute__((always_inline))
  constexpr
  static type extract_arg(Data &&data)
  {
    return type(camp::get<id>(data.offset_tuple));
  }

};

template<typename Types, camp::idx_t id>
struct LambdaArgExtractor<Types, LambdaArg<lambda_arg_seg_t, id>>
{


  using type = camp::at_v<typename Types::segment_types_t, id>;

  static_assert(!std::is_same<type, void>::value,
      "Segment not assigned, but used in Lambda with Segs<> argument");

  template<typename Data>
  __attribute__((host)) __attribute__((device))
  inline __attribute__((always_inline))
  constexpr
  static type extract_arg(Data &&data)
  {
    return type(camp::get<id>(data.segment_tuple).begin()[camp::get<id>(data.offset_tuple)]);
  }

};

template<typename Types, camp::idx_t id>
struct LambdaArgExtractor<Types, LambdaArg<lambda_arg_param_t, id>>
{
  template<typename Data>
  __attribute__((host)) __attribute__((device))
  inline __attribute__((always_inline))
  constexpr
  static auto extract_arg(Data &&data)->
    typename std::add_lvalue_reference<camp::tuple_element_t<id,typename camp::decay<Data>::param_tuple_t>>::type
  {
    return camp::get<id>(data.param_tuple);
  }
};


template<typename Types, typename T, camp::idx_t value>
struct LambdaArgExtractor<Types, LambdaArg<lambda_arg_value_t<T>, value>>
{
  template<typename Data>
  __attribute__((host)) __attribute__((device))
  inline __attribute__((always_inline))
  constexpr
  static T extract_arg(Data &&)
  {
    return T(value);
  }
};



#pragma nv_exec_check_disable
template<camp::idx_t LoopIndex, typename Types, typename Data, typename... targLists>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void invoke_lambda_with_args(Data &&data,
                                                       camp::list<targLists...> const &)
{
  camp::get<LoopIndex>(data.bodies)(LambdaArgExtractor<Types, targLists>::extract_arg(data)...);
}
# 277 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Lambda.hpp"
template <camp::idx_t LambdaIndex,typename... Args, typename Types>
struct StatementExecutor<statement::Lambda<LambdaIndex, Args...>, Types> {

  template <typename Data>
  static inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void exec(Data &&data)
  {


    using targList = typename camp::flatten<camp::list<Args...>>::type;

    invoke_lambda_with_args<LambdaIndex, Types>(std::forward<Data>(data), targList{});
  }
};

}

}
# 168 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Reduce.hpp" 1
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Reduce.hpp"
namespace RAJA
{

namespace statement
{
# 41 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Reduce.hpp"
template <typename ReducePolicy,
          template <typename...> class ReduceOperator,
          typename ParamId,
          typename... EnclosedStmts>
struct Reduce : public internal::Statement<camp::nil, EnclosedStmts...> {

  static_assert(std::is_base_of<internal::ParamBase, ParamId>::value,
                "Inappropriate ParamId, ParamId must be of type "
                "RAJA::Statement::Param< # >");

  using execution_policy_t = camp::nil;
};


}


}
# 170 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Region.hpp" 1
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Region.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/region.hpp" 1
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/region.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/region.hpp" 1
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/region.hpp"
namespace RAJA
{
namespace policy
{
namespace sequential
{
# 37 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/region.hpp"
template <typename Func>
inline __attribute__((always_inline)) void region_impl(const seq_region &, Func &&body)
{
  body();
}

}

}

}
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/region.hpp" 2

namespace RAJA
{

template <typename ExecutionPolicy, typename LoopBody>
void region(LoopBody&& loop_body)
{
  region_impl(ExecutionPolicy(), loop_body);
}

template <typename ExecutionPolicy, typename OuterBody, typename InnerBody>
void region(OuterBody&& outer_body, InnerBody&& inner_body)
{
  region_impl(ExecutionPolicy(), outer_body, inner_body);
}

}
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Region.hpp" 2




namespace RAJA
{

namespace statement
{

template<typename RegionPolicy, typename... EnclosedStmts>
struct Region : public internal::Statement<camp::nil> {
};


}

namespace internal
{





template<typename RegionPolicy, typename... EnclosedStmts, typename Types>
struct StatementExecutor<statement::Region<RegionPolicy, EnclosedStmts...>, Types> {

template<typename Data>
static inline __attribute__((always_inline)) void exec(Data &&data)
{

  RAJA::region<RegionPolicy>([&]() {
      using data_t = camp::decay<Data>;
      execute_statement_list<camp::list<EnclosedStmts...>, Types>(data_t(data));
    });
}

};


}
}
# 171 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Tile.hpp" 1
# 34 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/Tile.hpp"
namespace RAJA
{

struct TileSize {
  const camp::idx_t size;

  __attribute__((host)) __attribute__((device))
  inline __attribute__((always_inline))
  constexpr TileSize(camp::idx_t size_) : size{size_}
  {
  }
};

namespace statement
{






template <camp::idx_t ArgumentId,
          typename TilePolicy,
          typename ExecPolicy,
          typename... EnclosedStmts>
struct Tile : public internal::Statement<ExecPolicy, EnclosedStmts...> {
  using tile_policy_t = TilePolicy;
  using exec_policy_t = ExecPolicy;
};

}


template <camp::idx_t chunk_size_>
struct tile_fixed {
  static constexpr camp::idx_t chunk_size = chunk_size_;
};

template <camp::idx_t ArgumentId>
struct tile_dynamic {
  static constexpr camp::idx_t id = ArgumentId;
};



namespace internal
{






template <camp::idx_t ArgumentId, typename Data, typename Types, typename... EnclosedStmts>
struct TileWrapper : public GenericWrapper<Data, Types, EnclosedStmts...> {

  using Base = GenericWrapper<Data, Types, EnclosedStmts...>;
  using Base::Base;
  using privatizer = NestedPrivatizer<TileWrapper>;

  template <typename InSegmentIndexType>
  inline __attribute__((always_inline)) void operator()(InSegmentIndexType si)
  {

    camp::get<ArgumentId>(Base::data.segment_tuple) = si.s;


    Base::exec();
  }
};


template <typename Iterable>
struct IterableTiler {
  using value_type = camp::decay<Iterable>;

  struct iterate
  {
    value_type s;
    Index_type i;
  };

  class iterator
  {

    const IterableTiler itiler;
    const Index_type block_id;

  public:
    using value_type = iterate;
    using difference_type = camp::idx_t;
    using pointer = value_type *;
    using reference = value_type &;
    using iterator_category = std::random_access_iterator_tag;

    __attribute__((host)) __attribute__((device))
    inline __attribute__((always_inline))
    constexpr iterator(IterableTiler const &itiler_, Index_type block_id_)
        : itiler{itiler_}, block_id{block_id_}
    {
    }

    __attribute__((host)) __attribute__((device))
    inline __attribute__((always_inline))
    value_type operator*()
    {
      auto start = block_id * itiler.block_size;
      return iterate{itiler.it.slice(start, itiler.block_size), block_id};
    }

    __attribute__((host)) __attribute__((device))
    inline __attribute__((always_inline)) difference_type operator-(const iterator &rhs) const
    {
      return static_cast<difference_type>(block_id) -
             static_cast<difference_type>(rhs.block_id);
    }

    __attribute__((host)) __attribute__((device))
    inline __attribute__((always_inline)) iterator operator-(const difference_type &rhs) const
    {
      return iterator(itiler, block_id - rhs);
    }

    __attribute__((host)) __attribute__((device))
    inline __attribute__((always_inline)) iterator operator+(const difference_type &rhs) const
    {
      return iterator(itiler,
                      block_id + rhs >= itiler.num_blocks ? itiler.num_blocks
                                                          : block_id + rhs);
    }

    __attribute__((host)) __attribute__((device))
    inline __attribute__((always_inline)) value_type operator[](difference_type rhs) const
    {
      return *((*this) + rhs);
    }

    __attribute__((host)) __attribute__((device))
    inline __attribute__((always_inline)) bool operator!=(const IterableTiler &rhs) const
    {
      return block_id != rhs.block_id;
    }

    __attribute__((host)) __attribute__((device))
    inline __attribute__((always_inline)) bool operator<(const IterableTiler &rhs) const
    {
      return block_id < rhs.block_id;
    }
  };

  __attribute__((host)) __attribute__((device))
  inline __attribute__((always_inline))
  IterableTiler(const Iterable &it_, camp::idx_t block_size_)
      : it{it_}, block_size{block_size_}
  {
    using std::begin;
    using std::distance;
    using std::end;
    dist = it.end() - it.begin();
    num_blocks = dist / block_size;

    if (dist - num_blocks * block_size > 0) {
      num_blocks += 1;
    }
  }

  __attribute__((host)) __attribute__((device))
  inline __attribute__((always_inline))
  iterator begin() const { return iterator(*this, 0); }

  __attribute__((host)) __attribute__((device))
  inline __attribute__((always_inline))
  iterator end() const { return iterator(*this, num_blocks); }

  value_type it;
  camp::idx_t block_size;
  camp::idx_t num_blocks;
  camp::idx_t dist;
};






template <camp::idx_t ArgumentId,
          camp::idx_t ChunkSize,
          typename EPol,
          typename... EnclosedStmts,
          typename Types>
struct StatementExecutor<
    statement::Tile<ArgumentId, tile_fixed<ChunkSize>, EPol, EnclosedStmts...>, Types> {

  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &data)
  {

    auto const &segment = camp::get<ArgumentId>(data.segment_tuple);


    auto chunk_size = tile_fixed<ChunkSize>::chunk_size;



    IterableTiler<decltype(segment)> tiled_iterable(segment, chunk_size);


    TileWrapper<ArgumentId, Data, Types,
                EnclosedStmts...> tile_wrapper(data);


    auto r = resources::get_resource<EPol>::type::get_default();
    forall_impl(r, EPol{}, tiled_iterable, tile_wrapper);


    camp::get<ArgumentId>(data.segment_tuple) = tiled_iterable.it;
  }
};

template<camp::idx_t ArgumentId,
  typename EPol,
  typename... EnclosedStmts,
  typename Types>
struct StatementExecutor<
    statement::Tile<ArgumentId, tile_dynamic<ArgumentId>, EPol, EnclosedStmts...>, Types> {

  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &data)
  {

    auto const &segment = camp::get<ArgumentId>(data.segment_tuple);


    auto chunk_size = camp::get<ArgumentId>(data.param_tuple);
    static_assert(camp::concepts::metalib::is_same<TileSize, decltype(chunk_size)>::value,
                  "Extracted parameter must be of type TileSize.");


    IterableTiler<decltype(segment)> tiled_iterable(segment, chunk_size.size);


    TileWrapper<ArgumentId, Data, Types,
                EnclosedStmts...> tile_wrapper(data);


    auto r = resources::get_resource<EPol>::type::get_default();
    forall_impl(r, EPol{}, tiled_iterable, tile_wrapper);


    camp::get<ArgumentId>(data.segment_tuple) = tiled_iterable.it;
  }
};

}
}
# 172 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/TileTCount.hpp" 1
# 34 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/TileTCount.hpp"
namespace RAJA
{
namespace statement
{







template <camp::idx_t ArgumentId,
          typename ParamId,
          typename TilePolicy,
          typename ExecPolicy,
          typename... EnclosedStmts>
struct TileTCount : public internal::Statement<ExecPolicy, EnclosedStmts...> {
  static_assert(std::is_base_of<internal::ParamBase, ParamId>::value,
                "Inappropriate ParamId, ParamId must be of type "
                "RAJA::Statement::Param< # >");
  using tile_policy_t = TilePolicy;
  using exec_policy_t = ExecPolicy;
};


}

namespace internal
{






template <camp::idx_t ArgumentId, typename ParamId, typename Data, typename Types,
          typename... EnclosedStmts>
struct TileTCountWrapper : public GenericWrapper<Data, Types, EnclosedStmts...> {

  using Base = GenericWrapper<Data, Types, EnclosedStmts...>;
  using Base::Base;
  using privatizer = NestedPrivatizer<TileTCountWrapper>;

  template <typename InSegmentIndexType>
  inline __attribute__((always_inline)) void operator()(InSegmentIndexType si)
  {

    camp::get<ArgumentId>(Base::data.segment_tuple) = si.s;


    Base::data.template assign_param<ParamId>(si.i);


    Base::exec();
  }
};
# 98 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel/TileTCount.hpp"
template <camp::idx_t ArgumentId,
          typename ParamId,
          typename TPol,
          typename EPol,
          typename... EnclosedStmts,
          typename Types>
struct StatementExecutor<
    statement::TileTCount<ArgumentId, ParamId, TPol, EPol, EnclosedStmts...>, Types> {


  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &data)
  {

    auto const &segment = camp::get<ArgumentId>(data.segment_tuple);


    auto chunk_size = TPol::chunk_size;



    IterableTiler<decltype(segment)> tiled_iterable(segment, chunk_size);


    TileTCountWrapper<ArgumentId, ParamId, Data, Types,
                      EnclosedStmts...> tile_wrapper(data);


    auto r = resources::get_resource<EPol>::type::get_default();
    forall_impl(r, EPol{}, tiled_iterable, tile_wrapper);


    camp::get<ArgumentId>(data.segment_tuple) = tiled_iterable.it;
  }
};


}
}
# 173 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/kernel.hpp" 2
# 46 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams.hpp" 1
# 21 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams/teams_core.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams/teams_core.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/StaticLayout.hpp" 1
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/StaticLayout.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Permutations.hpp" 1
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Permutations.hpp"
namespace RAJA
{

template <typename Indices>
struct as_array;

template <camp::idx_t... Indices>
struct as_array<camp::idx_seq<Indices...>> {
  static constexpr std::array<Index_type, sizeof...(Indices)> get()
  {
    return {{Indices...}};
  }
};

using PERM_I = camp::idx_seq<0>;
using PERM_IJ = camp::idx_seq<0, 1>;
using PERM_JI = camp::idx_seq<1, 0>;
using PERM_IJK = camp::idx_seq<0, 1, 2>;
using PERM_IKJ = camp::idx_seq<0, 2, 1>;
using PERM_JIK = camp::idx_seq<1, 0, 2>;
using PERM_JKI = camp::idx_seq<1, 2, 0>;
using PERM_KIJ = camp::idx_seq<2, 0, 1>;
using PERM_KJI = camp::idx_seq<2, 1, 0>;
using PERM_IJKL = camp::idx_seq<0, 1, 2, 3>;
using PERM_IJLK = camp::idx_seq<0, 1, 3, 2>;
using PERM_IKJL = camp::idx_seq<0, 2, 1, 3>;
using PERM_IKLJ = camp::idx_seq<0, 2, 3, 1>;
using PERM_ILJK = camp::idx_seq<0, 3, 1, 2>;
using PERM_ILKJ = camp::idx_seq<0, 3, 2, 1>;
using PERM_JIKL = camp::idx_seq<1, 0, 2, 3>;
using PERM_JILK = camp::idx_seq<1, 0, 3, 2>;
using PERM_JKIL = camp::idx_seq<1, 2, 0, 3>;
using PERM_JKLI = camp::idx_seq<1, 2, 3, 0>;
using PERM_JLIK = camp::idx_seq<1, 3, 0, 2>;
using PERM_JLKI = camp::idx_seq<1, 3, 2, 0>;
using PERM_KIJL = camp::idx_seq<2, 0, 1, 3>;
using PERM_KILJ = camp::idx_seq<2, 0, 3, 1>;
using PERM_KJIL = camp::idx_seq<2, 1, 0, 3>;
using PERM_KJLI = camp::idx_seq<2, 1, 3, 0>;
using PERM_KLIJ = camp::idx_seq<2, 3, 0, 1>;
using PERM_KLJI = camp::idx_seq<2, 3, 1, 0>;
using PERM_LIJK = camp::idx_seq<3, 0, 1, 2>;
using PERM_LIKJ = camp::idx_seq<3, 0, 2, 1>;
using PERM_LJIK = camp::idx_seq<3, 1, 0, 2>;
using PERM_LJKI = camp::idx_seq<3, 1, 2, 0>;
using PERM_LKIJ = camp::idx_seq<3, 2, 0, 1>;
using PERM_LKJI = camp::idx_seq<3, 2, 1, 0>;
using PERM_IJKLM = camp::idx_seq<0, 1, 2, 3, 4>;
using PERM_IJKML = camp::idx_seq<0, 1, 2, 4, 3>;
using PERM_IJLKM = camp::idx_seq<0, 1, 3, 2, 4>;
using PERM_IJLMK = camp::idx_seq<0, 1, 3, 4, 2>;
using PERM_IJMKL = camp::idx_seq<0, 1, 4, 2, 3>;
using PERM_IJMLK = camp::idx_seq<0, 1, 4, 3, 2>;
using PERM_IKJLM = camp::idx_seq<0, 2, 1, 3, 4>;
using PERM_IKJML = camp::idx_seq<0, 2, 1, 4, 3>;
using PERM_IKLJM = camp::idx_seq<0, 2, 3, 1, 4>;
using PERM_IKLMJ = camp::idx_seq<0, 2, 3, 4, 1>;
using PERM_IKMJL = camp::idx_seq<0, 2, 4, 1, 3>;
using PERM_IKMLJ = camp::idx_seq<0, 2, 4, 3, 1>;
using PERM_ILJKM = camp::idx_seq<0, 3, 1, 2, 4>;
using PERM_ILJMK = camp::idx_seq<0, 3, 1, 4, 2>;
using PERM_ILKJM = camp::idx_seq<0, 3, 2, 1, 4>;
using PERM_ILKMJ = camp::idx_seq<0, 3, 2, 4, 1>;
using PERM_ILMJK = camp::idx_seq<0, 3, 4, 1, 2>;
using PERM_ILMKJ = camp::idx_seq<0, 3, 4, 2, 1>;
using PERM_IMJKL = camp::idx_seq<0, 4, 1, 2, 3>;
using PERM_IMJLK = camp::idx_seq<0, 4, 1, 3, 2>;
using PERM_IMKJL = camp::idx_seq<0, 4, 2, 1, 3>;
using PERM_IMKLJ = camp::idx_seq<0, 4, 2, 3, 1>;
using PERM_IMLJK = camp::idx_seq<0, 4, 3, 1, 2>;
using PERM_IMLKJ = camp::idx_seq<0, 4, 3, 2, 1>;
using PERM_JIKLM = camp::idx_seq<1, 0, 2, 3, 4>;
using PERM_JIKML = camp::idx_seq<1, 0, 2, 4, 3>;
using PERM_JILKM = camp::idx_seq<1, 0, 3, 2, 4>;
using PERM_JILMK = camp::idx_seq<1, 0, 3, 4, 2>;
using PERM_JIMKL = camp::idx_seq<1, 0, 4, 2, 3>;
using PERM_JIMLK = camp::idx_seq<1, 0, 4, 3, 2>;
using PERM_JKILM = camp::idx_seq<1, 2, 0, 3, 4>;
using PERM_JKIML = camp::idx_seq<1, 2, 0, 4, 3>;
using PERM_JKLIM = camp::idx_seq<1, 2, 3, 0, 4>;
using PERM_JKLMI = camp::idx_seq<1, 2, 3, 4, 0>;
using PERM_JKMIL = camp::idx_seq<1, 2, 4, 0, 3>;
using PERM_JKMLI = camp::idx_seq<1, 2, 4, 3, 0>;
using PERM_JLIKM = camp::idx_seq<1, 3, 0, 2, 4>;
using PERM_JLIMK = camp::idx_seq<1, 3, 0, 4, 2>;
using PERM_JLKIM = camp::idx_seq<1, 3, 2, 0, 4>;
using PERM_JLKMI = camp::idx_seq<1, 3, 2, 4, 0>;
using PERM_JLMIK = camp::idx_seq<1, 3, 4, 0, 2>;
using PERM_JLMKI = camp::idx_seq<1, 3, 4, 2, 0>;
using PERM_JMIKL = camp::idx_seq<1, 4, 0, 2, 3>;
using PERM_JMILK = camp::idx_seq<1, 4, 0, 3, 2>;
using PERM_JMKIL = camp::idx_seq<1, 4, 2, 0, 3>;
using PERM_JMKLI = camp::idx_seq<1, 4, 2, 3, 0>;
using PERM_JMLIK = camp::idx_seq<1, 4, 3, 0, 2>;
using PERM_JMLKI = camp::idx_seq<1, 4, 3, 2, 0>;
using PERM_KIJLM = camp::idx_seq<2, 0, 1, 3, 4>;
using PERM_KIJML = camp::idx_seq<2, 0, 1, 4, 3>;
using PERM_KILJM = camp::idx_seq<2, 0, 3, 1, 4>;
using PERM_KILMJ = camp::idx_seq<2, 0, 3, 4, 1>;
using PERM_KIMJL = camp::idx_seq<2, 0, 4, 1, 3>;
using PERM_KIMLJ = camp::idx_seq<2, 0, 4, 3, 1>;
using PERM_KJILM = camp::idx_seq<2, 1, 0, 3, 4>;
using PERM_KJIML = camp::idx_seq<2, 1, 0, 4, 3>;
using PERM_KJLIM = camp::idx_seq<2, 1, 3, 0, 4>;
using PERM_KJLMI = camp::idx_seq<2, 1, 3, 4, 0>;
using PERM_KJMIL = camp::idx_seq<2, 1, 4, 0, 3>;
using PERM_KJMLI = camp::idx_seq<2, 1, 4, 3, 0>;
using PERM_KLIJM = camp::idx_seq<2, 3, 0, 1, 4>;
using PERM_KLIMJ = camp::idx_seq<2, 3, 0, 4, 1>;
using PERM_KLJIM = camp::idx_seq<2, 3, 1, 0, 4>;
using PERM_KLJMI = camp::idx_seq<2, 3, 1, 4, 0>;
using PERM_KLMIJ = camp::idx_seq<2, 3, 4, 0, 1>;
using PERM_KLMJI = camp::idx_seq<2, 3, 4, 1, 0>;
using PERM_KMIJL = camp::idx_seq<2, 4, 0, 1, 3>;
using PERM_KMILJ = camp::idx_seq<2, 4, 0, 3, 1>;
using PERM_KMJIL = camp::idx_seq<2, 4, 1, 0, 3>;
using PERM_KMJLI = camp::idx_seq<2, 4, 1, 3, 0>;
using PERM_KMLIJ = camp::idx_seq<2, 4, 3, 0, 1>;
using PERM_KMLJI = camp::idx_seq<2, 4, 3, 1, 0>;
using PERM_LIJKM = camp::idx_seq<3, 0, 1, 2, 4>;
using PERM_LIJMK = camp::idx_seq<3, 0, 1, 4, 2>;
using PERM_LIKJM = camp::idx_seq<3, 0, 2, 1, 4>;
using PERM_LIKMJ = camp::idx_seq<3, 0, 2, 4, 1>;
using PERM_LIMJK = camp::idx_seq<3, 0, 4, 1, 2>;
using PERM_LIMKJ = camp::idx_seq<3, 0, 4, 2, 1>;
using PERM_LJIKM = camp::idx_seq<3, 1, 0, 2, 4>;
using PERM_LJIMK = camp::idx_seq<3, 1, 0, 4, 2>;
using PERM_LJKIM = camp::idx_seq<3, 1, 2, 0, 4>;
using PERM_LJKMI = camp::idx_seq<3, 1, 2, 4, 0>;
using PERM_LJMIK = camp::idx_seq<3, 1, 4, 0, 2>;
using PERM_LJMKI = camp::idx_seq<3, 1, 4, 2, 0>;
using PERM_LKIJM = camp::idx_seq<3, 2, 0, 1, 4>;
using PERM_LKIMJ = camp::idx_seq<3, 2, 0, 4, 1>;
using PERM_LKJIM = camp::idx_seq<3, 2, 1, 0, 4>;
using PERM_LKJMI = camp::idx_seq<3, 2, 1, 4, 0>;
using PERM_LKMIJ = camp::idx_seq<3, 2, 4, 0, 1>;
using PERM_LKMJI = camp::idx_seq<3, 2, 4, 1, 0>;
using PERM_LMIJK = camp::idx_seq<3, 4, 0, 1, 2>;
using PERM_LMIKJ = camp::idx_seq<3, 4, 0, 2, 1>;
using PERM_LMJIK = camp::idx_seq<3, 4, 1, 0, 2>;
using PERM_LMJKI = camp::idx_seq<3, 4, 1, 2, 0>;
using PERM_LMKIJ = camp::idx_seq<3, 4, 2, 0, 1>;
using PERM_LMKJI = camp::idx_seq<3, 4, 2, 1, 0>;
using PERM_MIJKL = camp::idx_seq<4, 0, 1, 2, 3>;
using PERM_MIJLK = camp::idx_seq<4, 0, 1, 3, 2>;
using PERM_MIKJL = camp::idx_seq<4, 0, 2, 1, 3>;
using PERM_MIKLJ = camp::idx_seq<4, 0, 2, 3, 1>;
using PERM_MILJK = camp::idx_seq<4, 0, 3, 1, 2>;
using PERM_MILKJ = camp::idx_seq<4, 0, 3, 2, 1>;
using PERM_MJIKL = camp::idx_seq<4, 1, 0, 2, 3>;
using PERM_MJILK = camp::idx_seq<4, 1, 0, 3, 2>;
using PERM_MJKIL = camp::idx_seq<4, 1, 2, 0, 3>;
using PERM_MJKLI = camp::idx_seq<4, 1, 2, 3, 0>;
using PERM_MJLIK = camp::idx_seq<4, 1, 3, 0, 2>;
using PERM_MJLKI = camp::idx_seq<4, 1, 3, 2, 0>;
using PERM_MKIJL = camp::idx_seq<4, 2, 0, 1, 3>;
using PERM_MKILJ = camp::idx_seq<4, 2, 0, 3, 1>;
using PERM_MKJIL = camp::idx_seq<4, 2, 1, 0, 3>;
using PERM_MKJLI = camp::idx_seq<4, 2, 1, 3, 0>;
using PERM_MKLIJ = camp::idx_seq<4, 2, 3, 0, 1>;
using PERM_MKLJI = camp::idx_seq<4, 2, 3, 1, 0>;
using PERM_MLIJK = camp::idx_seq<4, 3, 0, 1, 2>;
using PERM_MLIKJ = camp::idx_seq<4, 3, 0, 2, 1>;
using PERM_MLJIK = camp::idx_seq<4, 3, 1, 0, 2>;
using PERM_MLJKI = camp::idx_seq<4, 3, 1, 2, 0>;
using PERM_MLKIJ = camp::idx_seq<4, 3, 2, 0, 1>;
using PERM_MLKJI = camp::idx_seq<4, 3, 2, 1, 0>;




namespace internal
{


template<camp::idx_t I, camp::idx_t J, camp::idx_t N, typename Perm>
struct CalcInversePermutationElem
{
  static constexpr camp::idx_t value =
    camp::seq_at<J, Perm>::value == I ? J : CalcInversePermutationElem<I, J+1, N, Perm>::value;
};

template<camp::idx_t I, camp::idx_t N, typename Perm>
struct CalcInversePermutationElem<I, N, N, Perm>
{
  static constexpr camp::idx_t value = I;
};



template<typename Range, typename Perm>
struct InversePermutationHelper;

template<camp::idx_t ... Range, camp::idx_t ... Perm>
struct InversePermutationHelper<camp::idx_seq<Range...>,
                                camp::idx_seq<Perm...>>
{
  static_assert(sizeof...(Range) == sizeof...(Perm), "Fatal Error");
  using type = camp::idx_seq<
    CalcInversePermutationElem<Range, 0, sizeof...(Range), camp::idx_seq<Perm...>>::value ...
  >;
};



}






template<typename Perm>
using invert_permutation = typename internal::InversePermutationHelper<camp::make_idx_seq_t<camp::size<Perm>::value>, Perm>::type;

}
# 33 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/StaticLayout.hpp" 2


namespace RAJA
{

namespace detail
{


template <typename IdxLin, typename Range, typename Sizes, typename Strides>
struct StaticLayoutBase_impl;


template <typename IdxLin,
          IdxLin... RangeInts,
          IdxLin... Sizes,
          IdxLin... Strides>
struct StaticLayoutBase_impl<IdxLin,
                             camp::int_seq<IdxLin, RangeInts...>,
                             camp::int_seq<IdxLin, Sizes...>,
                             camp::int_seq<IdxLin, Strides...>> {

  using IndexLinear = IdxLin;
  using sizes = camp::int_seq<IdxLin, Sizes...>;
  using strides = camp::int_seq<IdxLin, Strides...>;




  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr StaticLayoutBase_impl() {}

  inline __attribute__((always_inline)) static void print()
  {
    camp::sink(printf("StaticLayout: arg%d: size=%d, stride=%d\n",
                               (int)RangeInts,
                               (int)Sizes,
                               (int)Strides)...);
  }
# 80 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/StaticLayout.hpp"
  template <typename... Indices>
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr IdxLin operator()(
      Indices... indices) const
  {

    return sum<IdxLin>((IdxLin(indices * Strides))...);
  }


  template <typename... Indices>
  static inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr IdxLin s_oper(Indices... indices)
  {

    return sum<IdxLin>((IdxLin(indices * Strides))...);
  }


  static constexpr IdxLin s_size =
      RAJA::product<IdxLin>((Sizes == IdxLin(0) ? IdxLin(1) : Sizes)...);
# 108 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/StaticLayout.hpp"
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) static constexpr IdxLin size()
  {


    return s_size;
  }



};

template <typename IdxLin, IdxLin N, IdxLin Idx, IdxLin... Sizes>
struct StrideCalculatorIdx {
  static_assert(N == sizeof...(Sizes), "");

  using sizes_seq = camp::int_seq<IdxLin, Sizes...>;
  static constexpr IdxLin size = camp::seq_at<Idx, sizes_seq>::value;
  static constexpr IdxLin size_last =
      StrideCalculatorIdx<IdxLin, N, Idx + 1, Sizes...>::size;
  static constexpr IdxLin value =
      (size_last > 0 ? size_last : 1) *
      StrideCalculatorIdx<IdxLin, N, Idx + 1, Sizes...>::value;
  static constexpr IdxLin stride = size > 0 ? value : 0;
};

template <typename IdxLin, IdxLin N, IdxLin... Sizes>
struct StrideCalculatorIdx<IdxLin, N, N, Sizes...> {
  static_assert(N == sizeof...(Sizes), "");

  static constexpr IdxLin size = 1;
  static constexpr IdxLin value = 1;
  static constexpr IdxLin stride = size > 0 ? value : 0;
};

template <typename IdxLin, typename Range, typename Perm, typename Sizes>
struct StrideCalculator;

template <typename IdxLin, IdxLin ... Range, camp::idx_t... Perm, IdxLin... Sizes>
struct StrideCalculator<IdxLin,
                        camp::int_seq<IdxLin, Range...>,
                        camp::idx_seq<Perm...>,
                        camp::int_seq<IdxLin, Sizes...>> {
  static_assert(sizeof...(Sizes) == sizeof...(Perm), "");

  using sizes = camp::int_seq<IdxLin, Sizes...>;
  static constexpr IdxLin N = sizeof...(Sizes);
  using range = camp::int_seq<IdxLin, Range...>;
  using perm = camp::idx_seq<Perm...>;
  using inv_perm = invert_permutation<perm>;
  using strides_unperm =
      camp::int_seq<IdxLin, StrideCalculatorIdx<IdxLin, N, Range, camp::seq_at<Perm, sizes>::value...>::stride...>;

  using strides = camp::int_seq<IdxLin, camp::seq_at<camp::seq_at<Range, inv_perm>::value, strides_unperm>::value...>;
};


template <typename Layout, typename DimTypeList>
struct TypedStaticLayoutImpl;

template <typename Layout, typename... DimTypes>
struct TypedStaticLayoutImpl<Layout, camp::list<DimTypes...>> {

  using IndexLinear = typename Layout::IndexLinear;







  static inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr IndexLinear s_oper(
      DimTypes... indices)
  {
    return Layout::s_oper(stripIndexType(indices)...);
  }


  static constexpr IndexLinear s_size = Layout::s_size;

  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr static IndexLinear size()
  {
    return s_size;
  }

  inline __attribute__((always_inline))
  static void print() { Layout::print(); }
};


}


template <typename Perm, typename IdxLin, camp::idx_t... Sizes>
using StaticLayoutT = detail::StaticLayoutBase_impl<
    IdxLin,
    camp::make_int_seq_t<IdxLin, sizeof...(Sizes)>,
    camp::int_seq<IdxLin, Sizes...>,
    typename detail::StrideCalculator<IdxLin,
                                      camp::make_int_seq_t<IdxLin, sizeof...(Sizes)>,
                                      Perm,
                                      camp::int_seq<IdxLin, Sizes...>>::strides>;


template <typename Perm, camp::idx_t... Sizes>
using StaticLayout = StaticLayoutT<Perm, camp::idx_t, Sizes...>;



template <typename Perm, typename IdxLin, typename TypeList, camp::idx_t... Sizes>
using TypedStaticLayout =
    detail::TypedStaticLayoutImpl<StaticLayoutT<Perm, IdxLin, Sizes...>, TypeList>;


}
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams/teams_core.hpp" 2
# 37 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams/teams_core.hpp"
namespace RAJA
{

namespace expt
{


enum ExecPlace { HOST, DEVICE, NUM_PLACES };

struct null_launch_t {
};


template <typename HOST_POLICY

          ,
          typename DEVICE_POLICY

          >
struct LoopPolicy {
  using host_policy_t = HOST_POLICY;

  using device_policy_t = DEVICE_POLICY;

};

template <typename HOST_POLICY

          ,
          typename DEVICE_POLICY

          >
struct LaunchPolicy {
  using host_policy_t = HOST_POLICY;

  using device_policy_t = DEVICE_POLICY;

};


struct Teams {
  int value[3];

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  constexpr Teams() : value{1, 1, 1} {}

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  constexpr Teams(int i) : value{i, 1, 1} {}

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  constexpr Teams(int i, int j) : value{i, j, 1} {}

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  constexpr Teams(int i, int j, int k) : value{i, j, k} {}
};

struct Threads {
  int value[3];

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  constexpr Threads() : value{1, 1, 1} {}


  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  constexpr Threads(int i) : value{i, 1, 1} {}

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  constexpr Threads(int i, int j) : value{i, j, 1} {}

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  constexpr Threads(int i, int j, int k) : value{i, j, k} {}
};

struct Lanes {
  int value;

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  constexpr Lanes() : value(0) {}

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  constexpr Lanes(int i) : value(i) {}
};

struct Resources {
public:
  Teams teams;
  Threads threads;
  Lanes lanes;

  inline __attribute__((always_inline))
  Resources() = default;

  Resources(Teams in_teams, Threads in_threads)
      : teams(in_teams), threads(in_threads){};

private:
  __attribute__((host)) __attribute__((device))
  inline __attribute__((always_inline))
  Teams apply(Teams const &a) { return (teams = a); }

  __attribute__((host)) __attribute__((device))
  inline __attribute__((always_inline))
  Threads apply(Threads const &a) { return (threads = a); }

  __attribute__((host)) __attribute__((device))
  inline __attribute__((always_inline))
  Lanes apply(Lanes const &a) { return (lanes = a); }
};


class LaunchContext : public Resources
{
public:
  ExecPlace exec_place;

  LaunchContext(Resources const &base, ExecPlace place)
      : Resources(base), exec_place(place)
  {
  }


  __attribute__((host)) __attribute__((device))
  void teamSync()
  {

    __syncthreads();

  }
};


template <typename LAUNCH_POLICY>
struct LaunchExecute;

template <typename POLICY_LIST, typename BODY>
void launch(ExecPlace place, Resources const &team_resources, BODY const &body)
{
  switch (place) {
    case HOST: {
      using launch_t = LaunchExecute<typename POLICY_LIST::host_policy_t>;
      launch_t::exec(LaunchContext(team_resources, HOST), body);
      break;
    }

    case DEVICE: {
      using launch_t = LaunchExecute<typename POLICY_LIST::device_policy_t>;
      launch_t::exec(LaunchContext(team_resources, DEVICE), body);
      break;
    }

    default:
      RAJA_ABORT_OR_THROW("Unknown launch place or Device is not enabled");
  }
}

template <typename POLICY, typename SEGMENT>
struct LoopExecute;


template <typename POLICY_LIST,
          typename CONTEXT,
          typename SEGMENT,
          typename BODY>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) void loop(CONTEXT const &ctx,
                                       SEGMENT const &segment,
                                       BODY const &body)
{

  LoopExecute<typename POLICY_LIST::device_policy_t, SEGMENT>::exec(ctx,
                                                                    segment,
                                                                    body);





}

template <typename POLICY_LIST,
          typename CONTEXT,
          typename SEGMENT,
          typename BODY>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) void loop(CONTEXT const &ctx,
                                       SEGMENT const &segment0,
                                       SEGMENT const &segment1,
                                       BODY const &body)
{

  LoopExecute<typename POLICY_LIST::device_policy_t, SEGMENT>::exec(ctx,
                                                                    segment0,
                                                                    segment1,
                                                                    body);






}

template <typename POLICY_LIST,
          typename CONTEXT,
          typename SEGMENT,
          typename BODY>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) void loop(CONTEXT const &ctx,
                                       SEGMENT const &segment0,
                                       SEGMENT const &segment1,
                                       SEGMENT const &segment2,
                                       BODY const &body)
{


  LoopExecute<typename POLICY_LIST::device_policy_t, SEGMENT>::exec(
      ctx, segment0, segment1, segment2, body);




}

}

}
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams.hpp" 2




# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams/teams_sequential.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams/teams_sequential.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/policy.hpp" 1
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/policy.hpp"
namespace RAJA
{
namespace policy
{
namespace loop
{
# 44 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/policy.hpp"
struct loop_exec : make_policy_pattern_launch_platform_t<Policy::loop,
                                                         Pattern::forall,
                                                         Launch::undefined,
                                                         Platform::host> {
};




using loop_segit = loop_exec;




struct loop_work : make_policy_pattern_launch_platform_t<Policy::loop,
                                                         Pattern::workgroup_exec,
                                                         Launch::sync,
                                                         Platform::host> {
};
# 71 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/policy.hpp"
using loop_reduce = seq_reduce;

}

}

using policy::loop::loop_exec;
using policy::loop::loop_reduce;
using policy::loop::loop_segit;
using policy::loop::loop_work;

}
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams/teams_sequential.hpp" 2


namespace RAJA
{

namespace expt
{

struct seq_launch_t {
};

template <>
struct LaunchExecute<RAJA::expt::null_launch_t> {
  template <typename BODY>
  static void exec(LaunchContext const& ,
                   BODY const& )
  {
    RAJA_ABORT_OR_THROW("NULL Launch");
  }
};


template <>
struct LaunchExecute<RAJA::expt::seq_launch_t> {
  template <typename BODY>
  static void exec(LaunchContext const &ctx, BODY const &body)
  {
    body(ctx);
  }
};

template <typename SEGMENT>
struct LoopExecute<loop_exec, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment,
      BODY const &body)
  {


    const int len = segment.end() - segment.begin();
    for (int i = 0; i < len; i++) {

      body(*(segment.begin() + i));
    }
  }

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment0,
      SEGMENT const &segment1,
      BODY const &body)
  {


    const int len1 = segment1.end() - segment1.begin();
    const int len0 = segment0.end() - segment0.begin();

    for (int j = 0; j < len1; j++) {
      for (int i = 0; i < len0; i++) {

        body(*(segment0.begin() + i), *(segment1.begin() + j));
      }
    }
  }

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment0,
      SEGMENT const &segment1,
      SEGMENT const &segment2,
      BODY const &body)
  {


    const int len2 = segment2.end() - segment2.begin();
    const int len1 = segment1.end() - segment1.begin();
    const int len0 = segment0.end() - segment0.begin();

    for (int k = 0; k < len2; k++) {
      for (int j = 0; j < len1; j++) {
        for (int i = 0; i < len0; i++) {
          body(*(segment0.begin() + i),
               *(segment1.begin() + j),
               *(segment2.begin() + k));
        }
      }
    }
  }
};

}

}
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams.hpp" 2


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams/teams_cuda.hpp" 1
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams/teams_cuda.hpp"
namespace RAJA
{

namespace expt
{

template <bool async, int num_threads = 0>
struct cuda_launch_t {
};

template <typename BODY>
__attribute__((global)) void launch_global_fcn(LaunchContext ctx, BODY body)
{
  body(ctx);
}


template <bool async>
struct LaunchExecute<RAJA::expt::cuda_launch_t<async, 0>> {
  template <typename BODY>
  static void exec(LaunchContext const &ctx, BODY const &body)
  {
    dim3 blocks;
    dim3 threads;

    blocks.x = ctx.teams.value[0];
    blocks.y = ctx.teams.value[1];
    blocks.z = ctx.teams.value[2];

    threads.x = ctx.threads.value[0];
    threads.y = ctx.threads.value[1];
    threads.z = ctx.threads.value[2];
    launch_global_fcn<<<blocks, threads>>>(ctx, body);

    if (!async) {
      cudaDeviceSynchronize();
    }
  }
};


template <typename BODY, int num_threads>
__attribute__((launch_bounds(num_threads, 1))) __attribute__((global))
    void launch_global_fcn_fixed(LaunchContext ctx, BODY body)
{
  body(ctx);
}


template <bool async, int nthreads>
struct LaunchExecute<RAJA::expt::cuda_launch_t<async, nthreads>> {
  template <typename BODY>
  static void exec(LaunchContext const &ctx, BODY const &body)
  {
    dim3 blocks;
    dim3 threads;

    blocks.x = ctx.teams.value[0];
    blocks.y = ctx.teams.value[1];
    blocks.z = ctx.teams.value[2];

    threads.x = ctx.threads.value[0];
    threads.y = ctx.threads.value[1];
    threads.z = ctx.threads.value[2];
    launch_global_fcn_fixed<nthreads><<<blocks, threads>>>(ctx, body);

    if (!async) {
      cudaDeviceSynchronize();
    }
  }
};





template <typename SEGMENT>
struct LoopExecute<cuda_thread_x_loop, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment,
      BODY const &body)
  {

    const int len = segment.end() - segment.begin();

    for (int tx = threadIdx.x; tx < len; tx += blockDim.x) {
      body(*(segment.begin() + tx));
    }
  }
};

template <typename SEGMENT>
struct LoopExecute<cuda_thread_y_loop, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment,
      BODY const &body)
  {

    const int len = segment.end() - segment.begin();

    for (int ty = threadIdx.y; ty < len; ty += blockDim.y) {
      body(*(segment.begin() + ty));
    }
  }
};

template <typename SEGMENT>
struct LoopExecute<cuda_thread_z_loop, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment,
      BODY const &body)
  {

    const int len = segment.end() - segment.begin();

    for (int tz = threadIdx.z; tz < len; tz += blockDim.z) {
      body(*(segment.begin() + tz));
    }
  }
};





template <typename SEGMENT>
struct LoopExecute<cuda_thread_x_direct, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment,
      BODY const &body)
  {

    const int len = segment.end() - segment.begin();
    {
      const int tx = threadIdx.x;
      if (tx < len) body(*(segment.begin() + tx));
    }
  }
};

template <typename SEGMENT>
struct LoopExecute<cuda_thread_y_direct, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment,
      BODY const &body)
  {

    const int len = segment.end() - segment.begin();
    {
      const int ty = threadIdx.y;
      if (ty < len) body(*(segment.begin() + ty));
    }
  }
};

template <typename SEGMENT>
struct LoopExecute<cuda_thread_z_direct, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment,
      BODY const &body)
  {

    const int len = segment.end() - segment.begin();
    {
      const int tz = threadIdx.z;
      if (tz < len) body(*(segment.begin() + tz));
    }
  }
};




template <typename SEGMENT>
struct LoopExecute<cuda_block_x_loop, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment,
      BODY const &body)
  {

    const int len = segment.end() - segment.begin();

    for (int bx = blockIdx.x; bx < len; bx += gridDim.x) {
      body(*(segment.begin() + bx));
    }
  }
};

template <typename SEGMENT>
struct LoopExecute<cuda_block_y_loop, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment,
      BODY const &body)
  {

    const int len = segment.end() - segment.begin();

    for (int by = blockIdx.y; by < len; by += gridDim.y) {
      body(*(segment.begin() + by));
    }
  }
};

template <typename SEGMENT>
struct LoopExecute<cuda_block_z_loop, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment,
      BODY const &body)
  {

    const int len = segment.end() - segment.begin();

    for (int bz = blockIdx.z; bz < len; bz += gridDim.z) {
      body(*(segment.begin() + bz));
    }
  }
};





template <typename SEGMENT>
struct LoopExecute<cuda_block_x_direct, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment,
      BODY const &body)
  {

    const int len = segment.end() - segment.begin();
    {
      const int bx = blockIdx.x;
      if (bx < len) body(*(segment.begin() + bx));
    }
  }
};

template <typename SEGMENT>
struct LoopExecute<cuda_block_y_direct, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment,
      BODY const &body)
  {

    const int len = segment.end() - segment.begin();
    {
      const int by = blockIdx.y;
      if (by < len) body(*(segment.begin() + by));
    }
  }
};

template <typename SEGMENT>
struct LoopExecute<cuda_block_z_direct, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment,
      BODY const &body)
  {

    const int len = segment.end() - segment.begin();
    {
      const int bz = blockIdx.z;
      if (bz < len) body(*(segment.begin() + bz));
    }
  }
};



struct cuda_block_xy_nested_direct;
struct cuda_block_xyz_nested_direct;

struct cuda_thread_xy_nested_direct;
struct cuda_thread_xyz_nested_direct;


template <typename SEGMENT>
struct LoopExecute<cuda_block_xy_nested_direct, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment0,
      SEGMENT const &segment1,
      BODY const &body)
  {
    const int len1 = segment1.end() - segment1.begin();
    const int len0 = segment0.end() - segment0.begin();
    {
      const int tx = blockIdx.x;
      const int ty = blockIdx.y;
      if (tx < len0 && ty < len1)
        body(*(segment0.begin() + tx), *(segment1.begin() + ty));
    }
  }
};

template <typename SEGMENT>
struct LoopExecute<cuda_thread_xy_nested_direct, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment0,
      SEGMENT const &segment1,
      BODY const &body)
  {
    const int len1 = segment1.end() - segment1.begin();
    const int len0 = segment0.end() - segment0.begin();
    {
      const int tx = threadIdx.x;
      const int ty = threadIdx.y;
      if (tx < len0 && ty < len1)
        body(*(segment0.begin() + tx), *(segment1.begin() + ty));
    }
  }
};


template <typename SEGMENT>
struct LoopExecute<cuda_block_xyz_nested_direct, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment0,
      SEGMENT const &segment1,
      SEGMENT const &segment2,
      BODY const &body)
  {
    const int len2 = segment2.end() - segment2.begin();
    const int len1 = segment1.end() - segment1.begin();
    const int len0 = segment0.end() - segment0.begin();
    {
      const int tx = blockIdx.x;
      const int ty = blockIdx.y;
      const int tz = blockIdx.z;
      if (tx < len0 && ty < len1 && tz < len2)
        body(*(segment0.begin() + tx),
             *(segment1.begin() + ty),
             *(segment2.begin() + tz));
    }
  }
};

template <typename SEGMENT>
struct LoopExecute<cuda_thread_xyz_nested_direct, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment0,
      SEGMENT const &segment1,
      SEGMENT const &segment2,
      BODY const &body)
  {
    const int len2 = segment2.end() - segment2.begin();
    const int len1 = segment1.end() - segment1.begin();
    const int len0 = segment0.end() - segment0.begin();
    {
      const int tx = threadIdx.x;
      const int ty = threadIdx.y;
      const int tz = threadIdx.z;
      if (tx < len0 && ty < len1 && tz < len2)
        body(*(segment0.begin() + tx),
             *(segment1.begin() + ty),
             *(segment2.begin() + tz));
    }
  }
};



struct cuda_block_xy_nested_loop;
struct cuda_block_xyz_nested_loop;

struct cuda_thread_xy_nested_loop;
struct cuda_thread_xyz_nested_loop;

template <typename SEGMENT>
struct LoopExecute<cuda_block_xy_nested_loop, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment0,
      SEGMENT const &segment1,
      BODY const &body)
  {
    const int len1 = segment1.end() - segment1.begin();
    const int len0 = segment0.end() - segment0.begin();
    {
      for (int by = blockIdx.y; by < len1; by += gridDim.y) {
        for (int bx = blockIdx.x; bx < len0; bx += gridDim.x) {
          body(*(segment0.begin() + bx), *(segment1.begin() + by));
        }
      }
    }
  }
};

template <typename SEGMENT>
struct LoopExecute<cuda_thread_xy_nested_loop, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment0,
      SEGMENT const &segment1,
      BODY const &body)
  {
    const int len1 = segment1.end() - segment1.begin();
    const int len0 = segment0.end() - segment0.begin();
    {
      for (int ty = threadIdx.y; ty < len1; ty += blockDim.y) {
        for (int tx = threadIdx.x; tx < len0; tx += blockDim.x) {
          body(*(segment0.begin() + tx), *(segment1.begin() + ty));
        }
      }
    }
  }
};


template <typename SEGMENT>
struct LoopExecute<cuda_block_xyz_nested_loop, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment0,
      SEGMENT const &segment1,
      SEGMENT const &segment2,
      BODY const &body)
  {
    const int len2 = segment2.end() - segment2.begin();
    const int len1 = segment1.end() - segment1.begin();
    const int len0 = segment0.end() - segment0.begin();

    for (int bz = blockIdx.z; bz < len2; bz += gridDim.z) {
      for (int by = blockIdx.y; by < len1; by += gridDim.y) {
        for (int bx = blockIdx.x; bx < len0; bx += gridDim.x) {
          body(*(segment0.begin() + bx),
               *(segment1.begin() + by),
               *(segment2.begin() + bz));
        }
      }
    }
  }
};

template <typename SEGMENT>
struct LoopExecute<cuda_thread_xyz_nested_loop, SEGMENT> {

  template <typename BODY>
  static inline __attribute__((always_inline)) __attribute__((device)) void exec(
      LaunchContext const ,
      SEGMENT const &segment0,
      SEGMENT const &segment1,
      SEGMENT const &segment2,
      BODY const &body)
  {
    const int len2 = segment2.end() - segment2.begin();
    const int len1 = segment1.end() - segment1.begin();
    const int len0 = segment0.end() - segment0.begin();

    for (int bz = threadIdx.z; bz < len2; bz += blockDim.z) {
      for (int by = threadIdx.y; by < len1; by += blockDim.y) {
        for (int bx = threadIdx.x; bx < len0; bx += blockDim.x) {
          body(*(segment0.begin() + bx),
               *(segment1.begin() + by),
               *(segment2.begin() + bz));
        }
      }
    }
  }
};

}

}
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/teams.hpp" 2
# 47 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2





# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/atomic.hpp" 1
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/atomic.hpp"
namespace RAJA
{

struct seq_atomic {
};


#pragma nv_exec_check_disable
template <typename T>
__attribute__((host)) __attribute__((device))
inline __attribute__((always_inline)) T atomicAdd(seq_atomic, T volatile *acc, T value)
{
  T ret = *acc;
  *acc += value;
  return ret;
}


#pragma nv_exec_check_disable
template <typename T>
__attribute__((host)) __attribute__((device))
inline __attribute__((always_inline)) T atomicSub(seq_atomic, T volatile *acc, T value)
{
  T ret = *acc;
  *acc -= value;
  return ret;
}


#pragma nv_exec_check_disable
template <typename T>
__attribute__((host)) __attribute__((device))
inline __attribute__((always_inline)) T atomicMin(seq_atomic, T volatile *acc, T value)
{
  T ret = *acc;
  *acc = ret < value ? ret : value;
  return ret;
}

#pragma nv_exec_check_disable
template <typename T>
__attribute__((host)) __attribute__((device))
inline __attribute__((always_inline)) T atomicMax(seq_atomic, T volatile *acc, T value)
{
  T ret = *acc;
  *acc = ret > value ? ret : value;
  return ret;
}


#pragma nv_exec_check_disable
template <typename T>
__attribute__((host)) __attribute__((device))
inline __attribute__((always_inline)) T atomicInc(seq_atomic, T volatile *acc)
{
  T ret = *acc;
  (*acc) += 1;
  return ret;
}

#pragma nv_exec_check_disable
template <typename T>
__attribute__((host)) __attribute__((device))
inline __attribute__((always_inline)) T atomicInc(seq_atomic, T volatile *acc, T val)
{
  T old = *acc;
  (*acc) = ((old >= val) ? 0 : (old + 1));
  return old;
}

#pragma nv_exec_check_disable
template <typename T>
__attribute__((host)) __attribute__((device))
inline __attribute__((always_inline)) T atomicDec(seq_atomic, T volatile *acc)
{
  T ret = *acc;
  (*acc) -= 1;
  return ret;
}

#pragma nv_exec_check_disable
template <typename T>
__attribute__((host)) __attribute__((device))
inline __attribute__((always_inline)) T atomicDec(seq_atomic, T volatile *acc, T val)
{
  T old = *acc;
  (*acc) = (((old == 0) | (old > val)) ? val : (old - 1));
  return old;
}

#pragma nv_exec_check_disable
template <typename T>
__attribute__((host)) __attribute__((device))
inline __attribute__((always_inline)) T atomicAnd(seq_atomic, T volatile *acc, T value)
{
  T ret = *acc;
  *acc &= value;
  return ret;
}

#pragma nv_exec_check_disable
template <typename T>
__attribute__((host)) __attribute__((device))
inline __attribute__((always_inline)) T atomicOr(seq_atomic, T volatile *acc, T value)
{
  T ret = *acc;
  *acc |= value;
  return ret;
}

#pragma nv_exec_check_disable
template <typename T>
__attribute__((host)) __attribute__((device))
inline __attribute__((always_inline)) T atomicXor(seq_atomic, T volatile *acc, T value)
{
  T ret = *acc;
  *acc ^= value;
  return ret;
}

#pragma nv_exec_check_disable
template <typename T>
__attribute__((host)) __attribute__((device))
inline __attribute__((always_inline)) T atomicExchange(seq_atomic, T volatile *acc, T value)
{
  T ret = *acc;
  *acc = value;
  return ret;
}

#pragma nv_exec_check_disable
template <typename T>
__attribute__((host)) __attribute__((device))
inline __attribute__((always_inline)) T atomicCAS(seq_atomic, T volatile *acc, T compare, T value)
{
  T ret = *acc;
  *acc = ret == compare ? value : ret;
  return ret;
}


}
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/kernel.hpp" 1
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/kernel.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/kernel/Collapse.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/kernel/Collapse.hpp"
namespace RAJA
{

namespace internal
{





template <typename... EnclosedStmts, typename Types>
struct StatementExecutor<
    statement::Collapse<seq_exec, ArgList<>, EnclosedStmts...>, Types> {

  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &data)
  {

    execute_statement_list<camp::list<EnclosedStmts...>, Types>(data);
  }
};






template <camp::idx_t Arg0, camp::idx_t... ArgRest, typename... EnclosedStmts, typename Types>
struct StatementExecutor<statement::Collapse<seq_exec,
                                             ArgList<Arg0, ArgRest...>,
                                             EnclosedStmts...>, Types> {

  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &data)
  {


    using NewTypes = setSegmentTypeFromData<Types, Arg0, Data>;


    using next_loop_t = StatementExecutor<
        statement::Collapse<seq_exec, ArgList<ArgRest...>, EnclosedStmts...>, NewTypes>;

    auto len0 = segment_length<Arg0>(data);

#pragma clang loop vectorize(disable)
 for (auto i0 = 0; i0 < len0; ++i0) {
      data.template assign_offset<Arg0>(i0);

      next_loop_t::exec(data);
    }
  }
};


}

}
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/kernel/Reduce.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/kernel/Reduce.hpp"
namespace RAJA
{

namespace internal
{




template <template <typename...> class ReduceOperator,
          typename ParamId,
          typename... EnclosedStmts,
          typename Types>
struct StatementExecutor<
    statement::Reduce<seq_reduce, ReduceOperator, ParamId, EnclosedStmts...>, Types> {

  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &&data)
  {



    execute_statement_list<camp::list<EnclosedStmts...>, Types>(data);
  }
};


}

}
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/kernel.hpp" 2
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/reduce.hpp" 1
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/reduce.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/reduce.hpp" 1
# 53 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/reduce.hpp"
namespace RAJA
{

namespace reduce
{





namespace detail
{

template <typename T, template <typename...> class Op>
struct op_adapter : private Op<T, T, T> {
  using operator_type = Op<T, T, T>;
  __attribute__((host)) __attribute__((device)) static constexpr T identity()
  {
    return operator_type::identity();
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) void operator()(T &val, const T v) const
  {
    val = operator_type::operator()(val, v);
  }
};
}

template <typename T>
struct sum : detail::op_adapter<T, RAJA::operators::plus> {
};

template <typename T>
struct min : detail::op_adapter<T, RAJA::operators::minimum> {
};

template <typename T>
struct max : detail::op_adapter<T, RAJA::operators::maximum> {
};

template <typename T>
struct or_bit : detail::op_adapter<T, RAJA::operators::bit_or> {
};

template <typename T>
struct and_bit : detail::op_adapter<T, RAJA::operators::bit_and> {
};






namespace detail
{

template <typename T, bool = std::is_integral<T>::value>
struct DefaultLoc {};

template <typename T>
struct DefaultLoc<T, false>
{
  __attribute__((host)) __attribute__((device)) constexpr T value() const { return T(); }
};

template <typename T>
struct DefaultLoc<T, true>
{
  __attribute__((host)) __attribute__((device)) constexpr T value() const { return -1; }
};

template <typename T, typename IndexType, bool doing_min = true>
class ValueLoc
{
public:
  T val = doing_min ? operators::limits<T>::max() : operators::limits<T>::min();
  IndexType loc = DefaultLoc<IndexType>().value();







  constexpr ValueLoc() = default;
  constexpr ValueLoc(ValueLoc const &other) = default;
  ValueLoc &operator=(ValueLoc const &other) = default;


  __attribute__((host)) __attribute__((device)) constexpr ValueLoc(T const &val_) : val{val_}, loc{DefaultLoc<IndexType>().value()} {}
  __attribute__((host)) __attribute__((device)) constexpr ValueLoc(T const &val_, IndexType const &loc_)
      : val{val_}, loc{loc_}
  {
  }

  __attribute__((host)) __attribute__((device)) operator T() const { return val; }
  __attribute__((host)) __attribute__((device)) IndexType getLoc() { return loc; }
  __attribute__((host)) __attribute__((device)) bool operator<(ValueLoc const &rhs) const
  {
    return val < rhs.val;
  }
  __attribute__((host)) __attribute__((device)) bool operator>(ValueLoc const &rhs) const
  {
    return val > rhs.val;
  }
};

}

}

namespace operators
{
template <typename T, typename IndexType, bool B>
struct limits<::RAJA::reduce::detail::ValueLoc<T, IndexType, B>> : limits<T> {
};
}

namespace reduce
{

namespace detail
{

template <typename T,
          template <typename>
          class Reduce_,
          template <typename, typename>
          class Combiner_>
class BaseReduce
{
  using Reduce = Reduce_<T>;

  using Combiner_t = Combiner_<T, Reduce>;
  Combiner_t mutable c;

public:
  using value_type = T;
  using reduce_type = Reduce;

#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  BaseReduce() : c{T(), Reduce::identity()} {}

#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  BaseReduce(T init_val, T identity_ = Reduce::identity())
      : c{init_val, identity_}
  {
  }

#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  void reset(T val, T identity_ = Reduce::identity())
  {
    c.reset(val, identity_);
  }


  BaseReduce &operator=(const BaseReduce &) = delete;


#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  BaseReduce(const BaseReduce &copy) : c(copy.c) {}


#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  inline __attribute__((always_inline))
  BaseReduce(BaseReduce &&copy) : c(std::move(copy.c)) {}


  BaseReduce &operator=(BaseReduce &&) = default;

#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  void combine(T const &other) const { c.combine(other); }

  T &local() const { return c.local(); }


  operator T() const { return c.get(); }


  T get() const { return c.get(); }
};

template <typename T, typename Reduce, typename Derived>
class BaseCombinable
{
protected:
  BaseCombinable const *parent = nullptr;
  T identity;
  T mutable my_data;

public:
#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  constexpr BaseCombinable() : identity{T()}, my_data{T()} {}

#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  constexpr BaseCombinable(T init_val, T identity_ = T())
      : identity{identity_}, my_data{init_val}
  {
  }

#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  void reset(T init_val, T identity_)
  {
    my_data = init_val;
    identity = identity_;
  }

#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  constexpr BaseCombinable(BaseCombinable const &other)
      : parent{other.parent ? other.parent : &other},
        identity{other.identity},
        my_data{identity}
  {
  }

#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  ~BaseCombinable()
  {
    if (parent && my_data != identity) {
      Reduce()(parent->my_data, my_data);
    }
  }

#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  void combine(T const &other) { Reduce{}(my_data, other); }




  T get() const { return derived().get_combined(); }




  T &local() const { return my_data; }

  T get_combined() const { return my_data; }

private:

  const Derived &derived() const
  {
    return *(static_cast<const Derived *>(this));
  }
  Derived &derived() { return *(static_cast<Derived *>(this)); }
};
# 321 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/reduce.hpp"
template <typename T, template <typename, typename> class Combiner>
class BaseReduceMin : public BaseReduce<T, RAJA::reduce::min, Combiner>
{
public:
  using Base = BaseReduce<T, RAJA::reduce::min, Combiner>;
  using Base::Base;


  __attribute__((host)) __attribute__((device))
  const BaseReduceMin &min(T rhs) const
  {
    this->combine(rhs);
    return *this;
  }
};
# 344 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/reduce.hpp"
template <typename T, typename IndexType, template <typename, typename> class Combiner>
class BaseReduceMinLoc
    : public BaseReduce<ValueLoc<T, IndexType>, RAJA::reduce::min, Combiner>
{
public:
  using Base = BaseReduce<ValueLoc<T, IndexType>, RAJA::reduce::min, Combiner>;
  using value_type = typename Base::value_type;
  using reduce_type = typename Base::reduce_type;
  using Base::Base;

  constexpr BaseReduceMinLoc() : Base(value_type(T(), IndexType())) {}

  constexpr BaseReduceMinLoc(T init_val, IndexType init_idx,
                             T identity_ = reduce_type::identity())
    : Base(value_type(init_val, init_idx), identity_)
  {
  }


  __attribute__((host)) __attribute__((device))
  const BaseReduceMinLoc &minloc(T rhs, IndexType loc) const
  {
    this->combine(value_type(rhs, loc));
    return *this;
  }

  void reset(T init_val, IndexType init_idx=DefaultLoc<IndexType>().value(),
             T identity_ = reduce_type::identity())
  {
    Base::reset(value_type(init_val, init_idx), identity_);
  }


  IndexType getLoc() const { return Base::get().getLoc(); }


  operator T() const { return Base::get(); }
};
# 390 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/reduce.hpp"
template <typename T, template <typename, typename> class Combiner>
class BaseReduceMax : public BaseReduce<T, RAJA::reduce::max, Combiner>
{
public:
  using Base = BaseReduce<T, RAJA::reduce::max, Combiner>;
  using Base::Base;


  __attribute__((host)) __attribute__((device))
  const BaseReduceMax &max(T rhs) const
  {
    this->combine(rhs);
    return *this;
  }
};
# 413 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/reduce.hpp"
template <typename T, template <typename, typename> class Combiner>
class BaseReduceSum : public BaseReduce<T, RAJA::reduce::sum, Combiner>
{
public:
  using Base = BaseReduce<T, RAJA::reduce::sum, Combiner>;
  using Base::Base;


#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  const BaseReduceSum &operator+=(T rhs) const
  {
    this->combine(rhs);
    return *this;
  }
};
# 437 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/reduce.hpp"
template <typename T, template <typename, typename> class Combiner>
class BaseReduceBitOr : public BaseReduce<T, RAJA::reduce::or_bit, Combiner>
{
public:
  using Base = BaseReduce<T, RAJA::reduce::or_bit, Combiner>;
  using Base::Base;


#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  const BaseReduceBitOr &operator|=(T rhs) const
  {
    this->combine(rhs);
    return *this;
  }
};
# 461 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/reduce.hpp"
template <typename T, template <typename, typename> class Combiner>
class BaseReduceBitAnd : public BaseReduce<T, RAJA::reduce::and_bit, Combiner>
{
public:
  using Base = BaseReduce<T, RAJA::reduce::and_bit, Combiner>;
  using Base::Base;


#pragma nv_exec_check_disable
 __attribute__((host)) __attribute__((device))
  const BaseReduceBitAnd &operator&=(T rhs) const
  {
    this->combine(rhs);
    return *this;
  }
};
# 486 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/reduce.hpp"
template <typename T, typename IndexType, template <typename, typename> class Combiner>
class BaseReduceMaxLoc
    : public BaseReduce<ValueLoc<T, IndexType, false>, RAJA::reduce::max, Combiner>
{
public:
  using Base = BaseReduce<ValueLoc<T, IndexType, false>, RAJA::reduce::max, Combiner>;
  using value_type = typename Base::value_type;
  using reduce_type = typename Base::reduce_type;
  using Base::Base;

  constexpr BaseReduceMaxLoc() : Base(value_type(T(), IndexType())) {}

  constexpr BaseReduceMaxLoc(T init_val, IndexType init_idx,
                             T identity_ = reduce_type::identity())
    : Base(value_type(init_val, init_idx), identity_)
  {
  }


  __attribute__((host)) __attribute__((device))
  const BaseReduceMaxLoc &maxloc(T rhs, IndexType loc) const
  {
    this->combine(value_type(rhs, loc));
    return *this;
  }

  void reset(T init_val, IndexType init_idx=DefaultLoc<IndexType>().value(),
             T identity_ = reduce_type::identity())
  {
    Base::reset(value_type(init_val, init_idx), identity_);
  }


  IndexType getLoc() const { return Base::get().getLoc(); }


  operator T() const { return Base::get(); }
};

}

}

}
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/reduce.hpp" 2






namespace RAJA
{

namespace detail
{
template <typename T, typename Reduce>
class ReduceSeq
    : public reduce::detail::BaseCombinable<T, Reduce, ReduceSeq<T, Reduce>>
{
  using Base = reduce::detail::BaseCombinable<T, Reduce, ReduceSeq<T, Reduce>>;

public:

  ReduceSeq() = delete;

  using Base::Base;
};


}

template <typename T> class ReduceSum<seq_reduce, T> : public reduce::detail::BaseReduceSum<T, detail::ReduceSeq> { public: using Base = reduce::detail::BaseReduceSum<T, detail::ReduceSeq>; using Base::Base; }; template <typename T> class ReduceMin<seq_reduce, T> : public reduce::detail::BaseReduceMin<T, detail::ReduceSeq> { public: using Base = reduce::detail::BaseReduceMin<T, detail::ReduceSeq>; using Base::Base; }; template <typename T> class ReduceMax<seq_reduce, T> : public reduce::detail::BaseReduceMax<T, detail::ReduceSeq> { public: using Base = reduce::detail::BaseReduceMax<T, detail::ReduceSeq>; using Base::Base; }; template <typename T, typename IndexType> class ReduceMinLoc<seq_reduce, T, IndexType> : public reduce::detail::BaseReduceMinLoc<T, IndexType, detail::ReduceSeq> { public: using Base = reduce::detail::BaseReduceMinLoc<T, IndexType, detail::ReduceSeq>; using Base::Base; }; template <typename T, typename IndexType> class ReduceMaxLoc<seq_reduce, T, IndexType> : public reduce::detail::BaseReduceMaxLoc<T, IndexType, detail::ReduceSeq> { public: using Base = reduce::detail::BaseReduceMaxLoc<T, IndexType, detail::ReduceSeq>; using Base::Base; }; template <typename T> class ReduceBitOr<seq_reduce, T> : public reduce::detail::BaseReduceBitOr<T, detail::ReduceSeq> { public: using Base = reduce::detail::BaseReduceBitOr<T, detail::ReduceSeq>; using Base::Base; }; template <typename T> class ReduceBitAnd<seq_reduce, T> : public reduce::detail::BaseReduceBitAnd<T, detail::ReduceSeq> { public: using Base = reduce::detail::BaseReduceBitAnd<T, detail::ReduceSeq>; using Base::Base; };

}
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/scan.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/scan.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/algorithm" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/algorithm" 3



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 3
# 60 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/algorithmfwd.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/algorithmfwd.h" 3








namespace std __attribute__ ((__visibility__ ("default")))
{
# 194 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _Predicate>
    bool
    all_of(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Predicate>
    bool
    any_of(_IIter, _IIter, _Predicate);


  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);


  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    copy_if(_IIter, _IIter, _OIter, _Predicate);

  template<typename _IIter, typename _Size, typename _OIter>
    _OIter
    copy_n(_IIter, _Size, _OIter);





  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);





  template<typename _IIter, typename _Predicate>
    _IIter
    find_if_not(_IIter, _IIter, _Predicate);






  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);


  template<typename _RAIter>
    bool
    is_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    bool
    is_heap(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    _RAIter
    is_heap_until(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    _RAIter
    is_heap_until(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _Predicate>
    bool
    is_partitioned(_IIter, _IIter, _Predicate);

  template<typename _FIter1, typename _FIter2>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2);

  template<typename _FIter1, typename _FIter2,
    typename _BinaryPredicate>
    bool
    is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);

  template<typename _FIter>
    bool
    is_sorted(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    bool
    is_sorted(_FIter, _FIter, _Compare);

  template<typename _FIter>
    _FIter
    is_sorted_until(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    is_sorted_until(_FIter, _FIter, _Compare);


  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    pair<const _Tp&, const _Tp&>
    minmax(const _Tp&, const _Tp&, _Compare);

  template<typename _FIter>
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    pair<_FIter, _FIter>
    minmax_element(_FIter, _FIter, _Compare);

  template<typename _Tp>
    _Tp
    min(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    _Tp
    min(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    _Tp
    max(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    _Tp
    max(initializer_list<_Tp>, _Compare);

  template<typename _Tp>
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>);

  template<typename _Tp, typename _Compare>
    pair<_Tp, _Tp>
    minmax(initializer_list<_Tp>, _Compare);




  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);


  template<typename _IIter, typename _Predicate>
    bool
    none_of(_IIter, _IIter, _Predicate);





  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);




  template<typename _IIter, typename _OIter1,
    typename _OIter2, typename _Predicate>
    pair<_OIter1, _OIter2>
    partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);

  template<typename _FIter, typename _Predicate>
    _FIter
    partition_point(_FIter, _FIter, _Predicate);


  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  template<typename _FIter>
    void
    rotate(_FIter, _FIter, _FIter);

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 535 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/algorithmfwd.h" 3
  template<typename _RAIter, typename _UGenerator>
    void
    shuffle(_RAIter, _RAIter, _UGenerator&&);


  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);

  template<typename _Tp>
    void
    swap(_Tp&, _Tp&)

    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)

    ;

  template<typename _Tp, size_t _Nm>
    void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])

    noexcept(noexcept(swap(*__a, *__b)))

    ;

  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);





  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,

     _Generator&&);




  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);


}
# 61 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 1 3
# 62 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first + __parent, __first + __child))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    {
      return std::__is_heap_until(__first, __n,
   __gnu_cxx::__ops::__iter_less_iter()) == __n;
    }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    {
      return std::__is_heap_until(__first, __n,
 __gnu_cxx::__ops::__iter_comp_iter(__comp)) == __n;
    }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value,
  _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 {
   *(__first + __holeIndex) = std::move(*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = std::move(__value);
    }
# 148 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;





                                                     ;
                                                  ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value),
         __gnu_cxx::__ops::__iter_less_val());
    }
# 182 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;




                                                     ;
                                                               ;

      _ValueType __value = std::move(*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), std::move(__value),
         __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(__first + __secondChild,
       __first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = std::move(*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         std::move(__value),
         __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = std::move(*__result);
      *__result = std::move(*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    std::move(__value), __comp);
    }
# 261 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;





                                                         ;
                                                     ;
                                              ;

      if (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last,
     __gnu_cxx::__ops::__iter_less_iter());
 }
    }
# 295 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {



                                                     ;
                                                         ;
                                                           ;

      if (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
 }
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = std::move(*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, std::move(__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 349 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      std::__make_heap(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 374 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {



                                                     ;

      std::__make_heap(__first, __last,
         __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 408 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;
                                              ;

      std::__sort_heap(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 434 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {



                                                     ;
                                                           ;

      std::__sort_heap(__first, __last,
         __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 460 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      return __first +
 std::__is_heap_until(__first, std::distance(__first, __last),
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 487 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {



                                                     ;

      return __first
 + std::__is_heap_until(__first, std::distance(__first, __last),
          __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 509 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::is_heap_until(__first, __last) == __last; }
# 522 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _Compare __comp)
    { return std::is_heap_until(__first, __last, __comp) == __last; }



}
# 62 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 2 3




# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/random" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/random" 3





# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cmath" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cmath" 3
# 39 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/random" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/random" 2 3
# 49 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/random" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 1 3
# 36 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 55 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __g);






  namespace __detail
  {


    template<typename _UIntType, size_t __w,
      bool = __w < static_cast<size_t>
     (std::numeric_limits<_UIntType>::digits)>
      struct _Shift
      { static const _UIntType __value = 0; };

    template<typename _UIntType, size_t __w>
      struct _Shift<_UIntType, __w, true>
      { static const _UIntType __value = _UIntType(1) << __w; };

    template<int __s,
      int __which = ((__s <= 8 * sizeof (int))
       + (__s <= 8 * sizeof (long))
       + (__s <= 8 * sizeof (long long))

       + (__s <= 128))>
      struct _Select_uint_least_t
      {
 static_assert(__which < 0,
        "sorry, would be too much trouble for a slow result");
      };

    template<int __s>
      struct _Select_uint_least_t<__s, 4>
      { typedef unsigned int type; };

    template<int __s>
      struct _Select_uint_least_t<__s, 3>
      { typedef unsigned long type; };

    template<int __s>
      struct _Select_uint_least_t<__s, 2>
      { typedef unsigned long long type; };


    template<int __s>
      struct _Select_uint_least_t<__s, 1>
      { typedef unsigned __int128 type; };



    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c,
      bool __big_enough = (!(__m & (__m - 1))
      || (_Tp(-1) - __c) / __a >= __m - 1),
             bool __schrage_ok = __m % __a < __m / __a>
      struct _Mod
      {
 typedef typename _Select_uint_least_t<std::__lg(__a)
           + std::__lg(__m) + 2>::type _Tp2;
 static _Tp
 __calc(_Tp __x)
 { return static_cast<_Tp>((_Tp2(__a) * __x + __c) % __m); }
      };


    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>
      struct _Mod<_Tp, __m, __a, __c, false, true>
      {
 static _Tp
 __calc(_Tp __x);
      };




    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s>
      struct _Mod<_Tp, __m, __a, __c, true, __s>
      {
 static _Tp
 __calc(_Tp __x)
 {
   _Tp __res = __a * __x + __c;
   if (__m)
     __res %= __m;
   return __res;
 }
      };

    template<typename _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0>
      inline _Tp
      __mod(_Tp __x)
      { return _Mod<_Tp, __m, __a, __c>::__calc(__x); }


    template<typename _Tp>
      inline bool
      _Power_of_2(_Tp __x)
      {
 return ((__x - 1) & __x) == 0;
      };





    template<typename _Engine, typename _DInputType>
      struct _Adaptor
      {
 static_assert(std::is_floating_point<_DInputType>::value,
        "template argument not a floating point type");

      public:
 _Adaptor(_Engine& __g)
 : _M_g(__g) { }

 _DInputType
 min() const
 { return _DInputType(0); }

 _DInputType
 max() const
 { return _DInputType(1); }






 _DInputType
 operator()()
 {
   return std::generate_canonical<_DInputType,
                             std::numeric_limits<_DInputType>::digits,
                             _Engine>(_M_g);
 }

      private:
 _Engine& _M_g;
      };


  }
# 242 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    class linear_congruential_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(__m == 0u || (__a < __m && __c < __m),
      "template argument substituting __m out of bounds");

    public:

      typedef _UIntType result_type;


      static constexpr result_type multiplier = __a;

      static constexpr result_type increment = __c;

      static constexpr result_type modulus = __m;
      static constexpr result_type default_seed = 1u;
# 269 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      explicit
      linear_congruential_engine(result_type __s = default_seed)
      { seed(__s); }







      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, linear_congruential_engine>::value>
        ::type>
        explicit
        linear_congruential_engine(_Sseq& __q)
        { seed(__q); }







      void
      seed(result_type __s = default_seed);
# 302 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _Sseq>
        typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);







      static constexpr result_type
      min()
      { return __c == 0u ? 1u : 0u; }




      static constexpr result_type
      max()
      { return __m - 1u; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()()
      {
 _M_x = __detail::__mod<_UIntType, __m, __a, __c>(_M_x);
 return _M_x;
      }
# 354 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      friend bool
      operator==(const linear_congruential_engine& __lhs,
   const linear_congruential_engine& __rhs)
      { return __lhs._M_x == __rhs._M_x; }
# 367 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::linear_congruential_engine<_UIntType1,
     __a1, __c1, __m1>& __lcr);
# 387 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _UIntType1, _UIntType1 __a1, _UIntType1 __c1,
        _UIntType1 __m1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::linear_congruential_engine<_UIntType1, __a1,
     __c1, __m1>& __lcr);

    private:
      _UIntType _M_x;
    };
# 409 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    inline bool
    operator!=(const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __lhs,
        const std::linear_congruential_engine<_UIntType, __a,
        __c, __m>& __rhs)
    { return !(__lhs == __rhs); }
# 446 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    class mersenne_twister_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(1u <= __m && __m <= __n,
      "template argument substituting __m out of bounds");
      static_assert(__r <= __w, "template argument substituting "
      "__r out of bound");
      static_assert(__u <= __w, "template argument substituting "
      "__u out of bound");
      static_assert(__s <= __w, "template argument substituting "
      "__s out of bound");
      static_assert(__t <= __w, "template argument substituting "
      "__t out of bound");
      static_assert(__l <= __w, "template argument substituting "
      "__l out of bound");
      static_assert(__w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bound");
      static_assert(__a <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __a out of bound");
      static_assert(__b <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __b out of bound");
      static_assert(__c <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __c out of bound");
      static_assert(__d <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __d out of bound");
      static_assert(__f <= (__detail::_Shift<_UIntType, __w>::__value - 1),
      "template argument substituting __f out of bound");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t state_size = __n;
      static constexpr size_t shift_size = __m;
      static constexpr size_t mask_bits = __r;
      static constexpr result_type xor_mask = __a;
      static constexpr size_t tempering_u = __u;
      static constexpr result_type tempering_d = __d;
      static constexpr size_t tempering_s = __s;
      static constexpr result_type tempering_b = __b;
      static constexpr size_t tempering_t = __t;
      static constexpr result_type tempering_c = __c;
      static constexpr size_t tempering_l = __l;
      static constexpr result_type initialization_multiplier = __f;
      static constexpr result_type default_seed = 5489u;


      explicit
      mersenne_twister_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, mersenne_twister_engine>::value>
        ::type>
        explicit
        mersenne_twister_engine(_Sseq& __q)
        { seed(__q); }

      void
      seed(result_type __sd = default_seed);

      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);




      static constexpr result_type
      min()
      { return 0; };




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z);

      result_type
      operator()();
# 560 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      friend bool
      operator==(const mersenne_twister_engine& __lhs,
   const mersenne_twister_engine& __rhs)
      { return (std::equal(__lhs._M_x, __lhs._M_x + state_size, __rhs._M_x)
  && __lhs._M_p == __rhs._M_p); }
# 578 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::mersenne_twister_engine<_UIntType1, __w1, __n1,
     __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>& __x);
# 604 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _UIntType1,
        size_t __w1, size_t __n1,
        size_t __m1, size_t __r1,
        _UIntType1 __a1, size_t __u1,
        _UIntType1 __d1, size_t __s1,
        _UIntType1 __b1, size_t __t1,
        _UIntType1 __c1, size_t __l1, _UIntType1 __f1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::mersenne_twister_engine<_UIntType1, __w1, __n1, __m1,
     __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1,
     __l1, __f1>& __x);

    private:
      void _M_gen_rand();

      _UIntType _M_x[state_size];
      size_t _M_p;
    };
# 637 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t,
    _UIntType __c, size_t __l, _UIntType __f>
    inline bool
    operator!=(const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __lhs,
        const std::mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __rhs)
    { return !(__lhs == __rhs); }
# 669 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    class subtract_with_carry_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __s && __s < __r,
      "template argument substituting __s out of bounds");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;


      static constexpr size_t word_size = __w;
      static constexpr size_t short_lag = __s;
      static constexpr size_t long_lag = __r;
      static constexpr result_type default_seed = 19780503u;





      explicit
      subtract_with_carry_engine(result_type __sd = default_seed)
      { seed(__sd); }







      template<typename _Sseq, typename = typename
        std::enable_if<!std::is_same<_Sseq, subtract_with_carry_engine>::value>
        ::type>
        explicit
        subtract_with_carry_engine(_Sseq& __q)
        { seed(__q); }
# 722 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      void
      seed(result_type __sd = default_seed);





      template<typename _Sseq>
 typename std::enable_if<std::is_class<_Sseq>::value>::type
        seed(_Sseq& __q);





      static constexpr result_type
      min()
      { return 0; }





      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 777 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      friend bool
      operator==(const subtract_with_carry_engine& __lhs,
   const subtract_with_carry_engine& __rhs)
      { return (std::equal(__lhs._M_x, __lhs._M_x + long_lag, __rhs._M_x)
  && __lhs._M_carry == __rhs._M_carry
  && __lhs._M_p == __rhs._M_p); }
# 796 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>&,
     const std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>&);
# 815 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _UIntType1, size_t __w1, size_t __s1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>&,
     std::subtract_with_carry_engine<_UIntType1, __w1,
     __s1, __r1>&);

    private:
      _UIntType _M_x[long_lag];
      _UIntType _M_carry;
      size_t _M_p;
    };
# 840 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    inline bool
    operator!=(const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __lhs,
        const std::subtract_with_carry_engine<_UIntType, __w,
        __s, __r>& __rhs)
    { return !(__lhs == __rhs); }
# 855 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    class discard_block_engine
    {
      static_assert(1 <= __r && __r <= __p,
      "template argument substituting __r out of bounds");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;


      static constexpr size_t block_size = __p;
      static constexpr size_t used_block = __r;






      discard_block_engine()
      : _M_b(), _M_n(0) { }







      explicit
      discard_block_engine(const _RandomNumberEngine& __rng)
      : _M_b(__rng), _M_n(0) { }







      explicit
      discard_block_engine(_RandomNumberEngine&& __rng)
      : _M_b(std::move(__rng)), _M_n(0) { }







      explicit
      discard_block_engine(result_type __s)
      : _M_b(__s), _M_n(0) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, discard_block_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        discard_block_engine(_Sseq& __q)
 : _M_b(__q), _M_n(0)
        { }





      void
      seed()
      {
 _M_b.seed();
 _M_n = 0;
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_n = 0;
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_n = 0;
 }





      const _RandomNumberEngine&
      base() const noexcept
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1005 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      friend bool
      operator==(const discard_block_engine& __lhs,
   const discard_block_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b && __lhs._M_n == __rhs._M_n; }
# 1021 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>& __x);
# 1039 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __p1, size_t __r1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::discard_block_engine<_RandomNumberEngine1,
     __p1, __r1>& __x);

    private:
      _RandomNumberEngine _M_b;
      size_t _M_n;
    };
# 1062 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    inline bool
    operator!=(const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __lhs,
        const std::discard_block_engine<_RandomNumberEngine, __p,
        __r>& __rhs)
    { return !(__lhs == __rhs); }






  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    class independent_bits_engine
    {
      static_assert(std::is_unsigned<_UIntType>::value, "template argument "
      "substituting _UIntType not an unsigned integral type");
      static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,
      "template argument substituting __w out of bounds");

    public:

      typedef _UIntType result_type;






      independent_bits_engine()
      : _M_b() { }







      explicit
      independent_bits_engine(const _RandomNumberEngine& __rng)
      : _M_b(__rng) { }







      explicit
      independent_bits_engine(_RandomNumberEngine&& __rng)
      : _M_b(std::move(__rng)) { }







      explicit
      independent_bits_engine(result_type __s)
      : _M_b(__s) { }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, independent_bits_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
               ::type>
        explicit
        independent_bits_engine(_Sseq& __q)
        : _M_b(__q)
        { }





      void
      seed()
      { _M_b.seed(); }





      void
      seed(result_type __s)
      { _M_b.seed(__s); }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        { _M_b.seed(__q); }





      const _RandomNumberEngine&
      base() const noexcept
      { return _M_b; }




      static constexpr result_type
      min()
      { return 0U; }




      static constexpr result_type
      max()
      { return __detail::_Shift<_UIntType, __w>::__value - 1; }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1215 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      friend bool
      operator==(const independent_bits_engine& __lhs,
   const independent_bits_engine& __rhs)
      { return __lhs._M_b == __rhs._M_b; }
# 1232 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::independent_bits_engine<_RandomNumberEngine,
     __w, _UIntType>& __x)
 {
   __is >> __x._M_b;
   return __is;
 }

    private:
      _RandomNumberEngine _M_b;
    };
# 1258 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    inline bool
    operator!=(const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __lhs,
        const std::independent_bits_engine<_RandomNumberEngine, __w,
        _UIntType>& __rhs)
    { return !(__lhs == __rhs); }
# 1276 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __w, typename _UIntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::independent_bits_engine<_RandomNumberEngine,
        __w, _UIntType>& __x)
    {
      __os << __x.base();
      return __os;
    }







  template<typename _RandomNumberEngine, size_t __k>
    class shuffle_order_engine
    {
      static_assert(1u <= __k, "template argument substituting "
      "__k out of bound");

    public:

      typedef typename _RandomNumberEngine::result_type result_type;

      static constexpr size_t table_size = __k;






      shuffle_order_engine()
      : _M_b()
      { _M_initialize(); }







      explicit
      shuffle_order_engine(const _RandomNumberEngine& __rng)
      : _M_b(__rng)
      { _M_initialize(); }







      explicit
      shuffle_order_engine(_RandomNumberEngine&& __rng)
      : _M_b(std::move(__rng))
      { _M_initialize(); }







      explicit
      shuffle_order_engine(result_type __s)
      : _M_b(__s)
      { _M_initialize(); }






      template<typename _Sseq, typename = typename
 std::enable_if<!std::is_same<_Sseq, shuffle_order_engine>::value
         && !std::is_same<_Sseq, _RandomNumberEngine>::value>
        ::type>
        explicit
        shuffle_order_engine(_Sseq& __q)
        : _M_b(__q)
        { _M_initialize(); }





      void
      seed()
      {
 _M_b.seed();
 _M_initialize();
      }





      void
      seed(result_type __s)
      {
 _M_b.seed(__s);
 _M_initialize();
      }






      template<typename _Sseq>
        void
        seed(_Sseq& __q)
        {
   _M_b.seed(__q);
   _M_initialize();
 }




      const _RandomNumberEngine&
      base() const noexcept
      { return _M_b; }




      static constexpr result_type
      min()
      { return _RandomNumberEngine::min(); }




      static constexpr result_type
      max()
      { return _RandomNumberEngine::max(); }




      void
      discard(unsigned long long __z)
      {
 for (; __z != 0ULL; --__z)
   (*this)();
      }




      result_type
      operator()();
# 1444 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      friend bool
      operator==(const shuffle_order_engine& __lhs,
   const shuffle_order_engine& __rhs)
      { return (__lhs._M_b == __rhs._M_b
  && std::equal(__lhs._M_v, __lhs._M_v + __k, __rhs._M_v)
  && __lhs._M_y == __rhs._M_y); }
# 1462 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::shuffle_order_engine<_RandomNumberEngine1,
     __k1>& __x);
# 1480 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RandomNumberEngine1, size_t __k1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::shuffle_order_engine<_RandomNumberEngine1, __k1>& __x);

    private:
      void _M_initialize()
      {
 for (size_t __i = 0; __i < __k; ++__i)
   _M_v[__i] = _M_b();
 _M_y = _M_b();
      }

      _RandomNumberEngine _M_b;
      result_type _M_v[__k];
      result_type _M_y;
    };
# 1510 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RandomNumberEngine, size_t __k>
    inline bool
    operator!=(const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __lhs,
        const std::shuffle_order_engine<_RandomNumberEngine,
        __k>& __rhs)
    { return !(__lhs == __rhs); }





  typedef linear_congruential_engine<uint_fast32_t, 16807UL, 0UL, 2147483647UL>
  minstd_rand0;




  typedef linear_congruential_engine<uint_fast32_t, 48271UL, 0UL, 2147483647UL>
  minstd_rand;
# 1539 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  typedef mersenne_twister_engine<
    uint_fast32_t,
    32, 624, 397, 31,
    0x9908b0dfUL, 11,
    0xffffffffUL, 7,
    0x9d2c5680UL, 15,
    0xefc60000UL, 18, 1812433253UL> mt19937;




  typedef mersenne_twister_engine<
    uint_fast64_t,
    64, 312, 156, 31,
    0xb5026f5aa96619e9ULL, 29,
    0x5555555555555555ULL, 17,
    0x71d67fffeda60000ULL, 37,
    0xfff7eee000000000ULL, 43,
    6364136223846793005ULL> mt19937_64;

  typedef subtract_with_carry_engine<uint_fast32_t, 24, 10, 24>
    ranlux24_base;

  typedef subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>
    ranlux48_base;

  typedef discard_block_engine<ranlux24_base, 223, 23> ranlux24;

  typedef discard_block_engine<ranlux48_base, 389, 11> ranlux48;

  typedef shuffle_order_engine<minstd_rand0, 256> knuth_b;

  typedef minstd_rand0 default_random_engine;





  class random_device
  {
  public:

    typedef unsigned int result_type;





    explicit
    random_device(const std::string& __token = "default")
    {
      _M_init(__token);
    }

    ~random_device()
    { _M_fini(); }
# 1606 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
    static constexpr result_type
    min()
    { return std::numeric_limits<result_type>::min(); }

    static constexpr result_type
    max()
    { return std::numeric_limits<result_type>::max(); }

    double
    entropy() const noexcept
    { return 0.0; }

    result_type
    operator()()
    {

      return this->_M_getval();



    }


    random_device(const random_device&) = delete;
    void operator=(const random_device&) = delete;

  private:

    void _M_init(const std::string& __token);
    void _M_init_pretr1(const std::string& __token);
    void _M_fini();

    result_type _M_getval();
    result_type _M_getval_pretr1();

    union
    {
      void* _M_file;
      mt19937 _M_mt;
    };
  };
# 1667 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _IntType = int>
    class uniform_int_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef uniform_int_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __a = 0,
     _IntType __b = std::numeric_limits<_IntType>::max())
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _IntType _M_a;
 _IntType _M_b;
      };

    public:



      explicit
      uniform_int_distribution(_IntType __a = 0,
      _IntType __b = std::numeric_limits<_IntType>::max())
      : _M_param(__a, __b)
      { }

      explicit
      uniform_int_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const uniform_int_distribution& __d1,
   const uniform_int_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_int_distribution<_IntType>& __d1,
        const std::uniform_int_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 1841 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_int_distribution<_IntType>&);
# 1855 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_int_distribution<_IntType>&);
# 1868 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType = double>
    class uniform_real_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef uniform_real_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 {
                                      ;
 }

 result_type
 a() const
 { return _M_a; }

 result_type
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

    public:






      explicit
      uniform_real_distribution(_RealType __a = _RealType(0),
    _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      uniform_real_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }

      result_type
      a() const
      { return _M_param.a(); }

      result_type
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return this->a(); }




      result_type
      max() const
      { return this->b(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return (__aurng() * (__p.b() - __p.a())) + __p.a();
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const uniform_real_distribution& __d1,
   const uniform_real_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator!=(const std::uniform_real_distribution<_IntType>& __d1,
        const std::uniform_real_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 2050 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>&,
        const std::uniform_real_distribution<_RealType>&);
# 2064 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>&,
        std::uniform_real_distribution<_RealType>&);
# 2086 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType = double>
    class normal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef normal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __mean = _RealType(0),
     _RealType __stddev = _RealType(1))
 : _M_mean(__mean), _M_stddev(__stddev)
 {
                                                  ;
 }

 _RealType
 mean() const
 { return _M_mean; }

 _RealType
 stddev() const
 { return _M_stddev; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_mean == __p2._M_mean
    && __p1._M_stddev == __p2._M_stddev); }

      private:
 _RealType _M_mean;
 _RealType _M_stddev;
      };

    public:




      explicit
      normal_distribution(result_type __mean = result_type(0),
     result_type __stddev = result_type(1))
      : _M_param(__mean, __stddev), _M_saved_available(false)
      { }

      explicit
      normal_distribution(const param_type& __p)
      : _M_param(__p), _M_saved_available(false)
      { }




      void
      reset()
      { _M_saved_available = false; }




      _RealType
      mean() const
      { return _M_param.mean(); }




      _RealType
      stddev() const
      { return _M_param.stddev(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      template<typename _RealType1>
 friend bool
        operator==(const std::normal_distribution<_RealType1>& __d1,
     const std::normal_distribution<_RealType1>& __d2);
# 2247 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::normal_distribution<_RealType1>& __x);
# 2262 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::normal_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
      result_type _M_saved;
      bool _M_saved_available;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2299 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType = double>
    class lognormal_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef lognormal_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(0),
     _RealType __s = _RealType(1))
 : _M_m(__m), _M_s(__s)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 s() const
 { return _M_s; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_s == __p2._M_s; }

      private:
 _RealType _M_m;
 _RealType _M_s;
      };

      explicit
      lognormal_distribution(_RealType __m = _RealType(0),
        _RealType __s = _RealType(1))
      : _M_param(__m, __s), _M_nd()
      { }

      explicit
      lognormal_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      s() const
      { return _M_param.s(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        { return std::exp(__p.s() * _M_nd(__urng) + __p.m()); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const lognormal_distribution& __d1,
   const lognormal_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_nd == __d2._M_nd); }
# 2451 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::lognormal_distribution<_RealType1>& __x);
# 2466 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::lognormal_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::lognormal_distribution<_RealType>& __d1,
        const std::lognormal_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2503 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType = double>
    class gamma_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef gamma_distribution<_RealType> distribution_type;
 friend class gamma_distribution<_RealType>;

 explicit
 param_type(_RealType __alpha_val = _RealType(1),
     _RealType __beta_val = _RealType(1))
 : _M_alpha(__alpha_val), _M_beta(__beta_val)
 {
                                                 ;
   _M_initialize();
 }

 _RealType
 alpha() const
 { return _M_alpha; }

 _RealType
 beta() const
 { return _M_beta; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_alpha == __p2._M_alpha
    && __p1._M_beta == __p2._M_beta); }

      private:
 void
 _M_initialize();

 _RealType _M_alpha;
 _RealType _M_beta;

 _RealType _M_malpha, _M_a2;
      };

    public:




      explicit
      gamma_distribution(_RealType __alpha_val = _RealType(1),
    _RealType __beta_val = _RealType(1))
      : _M_param(__alpha_val, __beta_val), _M_nd()
      { }

      explicit
      gamma_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _RealType
      alpha() const
      { return _M_param.alpha(); }




      _RealType
      beta() const
      { return _M_param.beta(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const gamma_distribution& __d1,
   const gamma_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_nd == __d2._M_nd); }
# 2672 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::gamma_distribution<_RealType1>& __x);
# 2686 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::gamma_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
    };




   template<typename _RealType>
     inline bool
     operator!=(const std::gamma_distribution<_RealType>& __d1,
  const std::gamma_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2720 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType = double>
    class chi_squared_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef chi_squared_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      chi_squared_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_gd(__n / 2)
      { }

      explicit
      chi_squared_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.n() / 2)
      { }




      void
      reset()
      { _M_gd.reset(); }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return 2 * _M_gd(__urng); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return 2 * _M_gd(__urng, param_type(__p.n() / 2));
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
        { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { typename std::gamma_distribution<result_type>::param_type
     __p2(__p.n() / 2);
   this->__generate_impl(__f, __t, __urng, __p2); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
        { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { typename std::gamma_distribution<result_type>::param_type
     __p2(__p.n() / 2);
   this->__generate_impl(__f, __t, __urng, __p2); }






      friend bool
      operator==(const chi_squared_distribution& __d1,
   const chi_squared_distribution& __d2)
      { return __d1._M_param == __d2._M_param && __d1._M_gd == __d2._M_gd; }
# 2874 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::chi_squared_distribution<_RealType1>& __x);
# 2889 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::chi_squared_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const typename
   std::gamma_distribution<result_type>::param_type& __p);

      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::chi_squared_distribution<_RealType>& __d1,
        const std::chi_squared_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 2930 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType = double>
    class cauchy_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef cauchy_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      cauchy_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      cauchy_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }

      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const cauchy_distribution& __d1,
   const cauchy_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::cauchy_distribution<_RealType>& __d1,
        const std::cauchy_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3100 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::cauchy_distribution<_RealType>& __x);
# 3115 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::cauchy_distribution<_RealType>& __x);
# 3131 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType = double>
    class fisher_f_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef fisher_f_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __m = _RealType(1),
     _RealType __n = _RealType(1))
 : _M_m(__m), _M_n(__n)
 { }

 _RealType
 m() const
 { return _M_m; }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_m == __p2._M_m && __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_m;
 _RealType _M_n;
      };

      explicit
      fisher_f_distribution(_RealType __m = _RealType(1),
       _RealType __n = _RealType(1))
      : _M_param(__m, __n), _M_gd_x(__m / 2), _M_gd_y(__n / 2)
      { }

      explicit
      fisher_f_distribution(const param_type& __p)
      : _M_param(__p), _M_gd_x(__p.m() / 2), _M_gd_y(__p.n() / 2)
      { }




      void
      reset()
      {
 _M_gd_x.reset();
 _M_gd_y.reset();
      }




      _RealType
      m() const
      { return _M_param.m(); }

      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return (_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;
   return ((_M_gd_x(__urng, param_type(__p.m() / 2)) * n())
    / (_M_gd_y(__urng, param_type(__p.n() / 2)) * m()));
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const fisher_f_distribution& __d1,
   const fisher_f_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_gd_x == __d2._M_gd_x
  && __d1._M_gd_y == __d2._M_gd_y); }
# 3298 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::fisher_f_distribution<_RealType1>& __x);
# 3313 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::fisher_f_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::gamma_distribution<result_type> _M_gd_x, _M_gd_y;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::fisher_f_distribution<_RealType>& __d1,
        const std::fisher_f_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3355 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType = double>
    class student_t_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef student_t_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __n = _RealType(1))
 : _M_n(__n)
 { }

 _RealType
 n() const
 { return _M_n; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_n == __p2._M_n; }

      private:
 _RealType _M_n;
      };

      explicit
      student_t_distribution(_RealType __n = _RealType(1))
      : _M_param(__n), _M_nd(), _M_gd(__n / 2, 2)
      { }

      explicit
      student_t_distribution(const param_type& __p)
      : _M_param(__p), _M_nd(), _M_gd(__p.n() / 2, 2)
      { }




      void
      reset()
      {
 _M_nd.reset();
 _M_gd.reset();
      }




      _RealType
      n() const
      { return _M_param.n(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng)
        { return _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng)); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
        {
   typedef typename std::gamma_distribution<result_type>::param_type
     param_type;

   const result_type __g = _M_gd(__urng, param_type(__p.n() / 2, 2));
   return _M_nd(__urng) * std::sqrt(__p.n() / __g);
        }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const student_t_distribution& __d1,
   const student_t_distribution& __d2)
      { return (__d1._M_param == __d2._M_param
  && __d1._M_nd == __d2._M_nd && __d1._M_gd == __d2._M_gd); }
# 3511 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::student_t_distribution<_RealType1>& __x);
# 3526 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::student_t_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::normal_distribution<result_type> _M_nd;
      std::gamma_distribution<result_type> _M_gd;
    };




  template<typename _RealType>
    inline bool
    operator!=(const std::student_t_distribution<_RealType>& __d1,
        const std::student_t_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 3574 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  class bernoulli_distribution
  {
  public:

    typedef bool result_type;

    struct param_type
    {
      typedef bernoulli_distribution distribution_type;

      explicit
      param_type(double __p = 0.5)
      : _M_p(__p)
      {
                                                      ;
      }

      double
      p() const
      { return _M_p; }

      friend bool
      operator==(const param_type& __p1, const param_type& __p2)
      { return __p1._M_p == __p2._M_p; }

    private:
      double _M_p;
    };

  public:






    explicit
    bernoulli_distribution(double __p = 0.5)
    : _M_param(__p)
    { }

    explicit
    bernoulli_distribution(const param_type& __p)
    : _M_param(__p)
    { }






    void
    reset() { }




    double
    p() const
    { return _M_param.p(); }




    param_type
    param() const
    { return _M_param; }





    void
    param(const param_type& __param)
    { _M_param = __param; }




    result_type
    min() const
    { return std::numeric_limits<result_type>::min(); }




    result_type
    max() const
    { return std::numeric_limits<result_type>::max(); }




    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng)
      { return this->operator()(__urng, _M_param); }

    template<typename _UniformRandomNumberGenerator>
      result_type
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);
 if ((__aurng() - __aurng.min())
      < __p.p() * (__aurng.max() - __aurng.min()))
   return true;
 return false;
      }

    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      __generate(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng)
      { this->__generate(__f, __t, __urng, _M_param); }

    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      __generate(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng, const param_type& __p)
      { this->__generate_impl(__f, __t, __urng, __p); }

    template<typename _UniformRandomNumberGenerator>
      void
      __generate(result_type* __f, result_type* __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      { this->__generate_impl(__f, __t, __urng, __p); }





    friend bool
    operator==(const bernoulli_distribution& __d1,
        const bernoulli_distribution& __d2)
    { return __d1._M_param == __d2._M_param; }

  private:
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p);

    param_type _M_param;
  };





  inline bool
  operator!=(const std::bernoulli_distribution& __d1,
      const std::bernoulli_distribution& __d2)
  { return !(__d1 == __d2); }
# 3745 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::bernoulli_distribution& __x);
# 3759 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::bernoulli_distribution& __x)
    {
      double __p;
      __is >> __p;
      __x.param(bernoulli_distribution::param_type(__p));
      return __is;
    }
# 3778 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _IntType = int>
    class binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef binomial_distribution<_IntType> distribution_type;
 friend class binomial_distribution<_IntType>;

 explicit
 param_type(_IntType __t = _IntType(1), double __p = 0.5)
 : _M_t(__t), _M_p(__p)
 {


                     ;
   _M_initialize();
 }

 _IntType
 t() const
 { return _M_t; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_t == __p2._M_t && __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize();

 _IntType _M_t;
 double _M_p;

 double _M_q;

 double _M_d1, _M_d2, _M_s1, _M_s2, _M_c,
        _M_a1, _M_a123, _M_s, _M_lf, _M_lp1p;

 bool _M_easy;
      };


      explicit
      binomial_distribution(_IntType __t = _IntType(1),
       double __p = 0.5)
      : _M_param(__t, __p), _M_nd()
      { }

      explicit
      binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      _IntType
      t() const
      { return _M_param.t(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return _M_param.t(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






 friend bool
        operator==(const binomial_distribution& __d1,
     const binomial_distribution& __d2)

 { return __d1._M_param == __d2._M_param && __d1._M_nd == __d2._M_nd; }
# 3951 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::binomial_distribution<_IntType1>& __x);
# 3967 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _IntType1,
        typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::binomial_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      template<typename _UniformRandomNumberGenerator>
 result_type
 _M_waiting(_UniformRandomNumberGenerator& __urng,
     _IntType __t, double __q);

      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::binomial_distribution<_IntType>& __d1,
        const std::binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4009 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _IntType = int>
    class geometric_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef geometric_distribution<_IntType> distribution_type;
 friend class geometric_distribution<_IntType>;

 explicit
 param_type(double __p = 0.5)
 : _M_p(__p)
 {
                                                      ;
   _M_initialize();
 }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_p == __p2._M_p; }

      private:
 void
 _M_initialize()
 { _M_log_1_p = std::log(1.0 - _M_p); }

 double _M_p;

 double _M_log_1_p;
      };


      explicit
      geometric_distribution(double __p = 0.5)
      : _M_param(__p)
      { }

      explicit
      geometric_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const geometric_distribution& __d1,
   const geometric_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator!=(const std::geometric_distribution<_IntType>& __d1,
        const std::geometric_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4180 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::geometric_distribution<_IntType>& __x);
# 4195 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::geometric_distribution<_IntType>& __x);
# 4209 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _IntType = int>
    class negative_binomial_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef negative_binomial_distribution<_IntType> distribution_type;

 explicit
 param_type(_IntType __k = 1, double __p = 0.5)
 : _M_k(__k), _M_p(__p)
 {
                                                                     ;
 }

 _IntType
 k() const
 { return _M_k; }

 double
 p() const
 { return _M_p; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_k == __p2._M_k && __p1._M_p == __p2._M_p; }

      private:
 _IntType _M_k;
 double _M_p;
      };

      explicit
      negative_binomial_distribution(_IntType __k = 1, double __p = 0.5)
      : _M_param(__k, __p), _M_gd(__k, (1.0 - __p) / __p)
      { }

      explicit
      negative_binomial_distribution(const param_type& __p)
      : _M_param(__p), _M_gd(__p.k(), (1.0 - __p.p()) / __p.p())
      { }




      void
      reset()
      { _M_gd.reset(); }




      _IntType
      k() const
      { return _M_param.k(); }




      double
      p() const
      { return _M_param.p(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
        operator()(_UniformRandomNumberGenerator& __urng);

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate_impl(__f, __t, __urng); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const negative_binomial_distribution& __d1,
   const negative_binomial_distribution& __d2)
      { return __d1._M_param == __d2._M_param && __d1._M_gd == __d2._M_gd; }
# 4368 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::negative_binomial_distribution<_IntType1>& __x);
# 4383 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::negative_binomial_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng);
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;

      std::gamma_distribution<double> _M_gd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::negative_binomial_distribution<_IntType>& __d1,
        const std::negative_binomial_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4431 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _IntType = int>
    class poisson_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef poisson_distribution<_IntType> distribution_type;
 friend class poisson_distribution<_IntType>;

 explicit
 param_type(double __mean = 1.0)
 : _M_mean(__mean)
 {
                                       ;
   _M_initialize();
 }

 double
 mean() const
 { return _M_mean; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_mean == __p2._M_mean; }

      private:

 void
 _M_initialize();

 double _M_mean;

 double _M_lm_thr;

 double _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb;

      };


      explicit
      poisson_distribution(double __mean = 1.0)
      : _M_param(__mean), _M_nd()
      { }

      explicit
      poisson_distribution(const param_type& __p)
      : _M_param(__p), _M_nd()
      { }




      void
      reset()
      { _M_nd.reset(); }




      double
      mean() const
      { return _M_param.mean(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return 0; }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }






      friend bool
      operator==(const poisson_distribution& __d1,
   const poisson_distribution& __d2)

      { return __d1._M_param == __d2._M_param && __d1._M_nd == __d2._M_nd; }
# 4588 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::poisson_distribution<_IntType1>& __x);
# 4603 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::poisson_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;


      std::normal_distribution<double> _M_nd;
    };




  template<typename _IntType>
    inline bool
    operator!=(const std::poisson_distribution<_IntType>& __d1,
        const std::poisson_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 4647 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType = double>
    class exponential_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef exponential_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __lambda = _RealType(1))
 : _M_lambda(__lambda)
 {
                                                  ;
 }

 _RealType
 lambda() const
 { return _M_lambda; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_lambda == __p2._M_lambda; }

      private:
 _RealType _M_lambda;
      };

    public:




      explicit
      exponential_distribution(const result_type& __lambda = result_type(1))
      : _M_param(__lambda)
      { }

      explicit
      exponential_distribution(const param_type& __p)
      : _M_param(__p)
      { }






      void
      reset() { }




      _RealType
      lambda() const
      { return _M_param.lambda(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
        { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 {
   __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
     __aurng(__urng);
   return -std::log(result_type(1) - __aurng()) / __p.lambda();
 }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const exponential_distribution& __d1,
   const exponential_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::exponential_distribution<_RealType>& __d1,
        const std::exponential_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 4819 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::exponential_distribution<_RealType>& __x);
# 4834 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::exponential_distribution<_RealType>& __x);
# 4849 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType = double>
    class weibull_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef weibull_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(1),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      weibull_distribution(_RealType __a = _RealType(1),
      _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      weibull_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const weibull_distribution& __d1,
   const weibull_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::weibull_distribution<_RealType>& __d1,
        const std::weibull_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5022 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::weibull_distribution<_RealType>& __x);
# 5037 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::weibull_distribution<_RealType>& __x);
# 5052 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType = double>
    class extreme_value_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef extreme_value_distribution<_RealType> distribution_type;

 explicit
 param_type(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
 : _M_a(__a), _M_b(__b)
 { }

 _RealType
 a() const
 { return _M_a; }

 _RealType
 b() const
 { return _M_b; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b; }

      private:
 _RealType _M_a;
 _RealType _M_b;
      };

      explicit
      extreme_value_distribution(_RealType __a = _RealType(0),
     _RealType __b = _RealType(1))
      : _M_param(__a, __b)
      { }

      explicit
      extreme_value_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      _RealType
      a() const
      { return _M_param.a(); }




      _RealType
      b() const
      { return _M_param.b(); }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return std::numeric_limits<result_type>::lowest(); }




      result_type
      max() const
      { return std::numeric_limits<result_type>::max(); }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const extreme_value_distribution& __d1,
   const extreme_value_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::extreme_value_distribution<_RealType>& __d1,
        const std::extreme_value_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5225 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const std::extreme_value_distribution<_RealType>& __x);
# 5240 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        std::extreme_value_distribution<_RealType>& __x);
# 5252 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _IntType = int>
    class discrete_distribution
    {
      static_assert(std::is_integral<_IntType>::value,
      "template argument not an integral type");

    public:

      typedef _IntType result_type;

      struct param_type
      {
 typedef discrete_distribution<_IntType> distribution_type;
 friend class discrete_distribution<_IntType>;

 param_type()
 : _M_prob(), _M_cp()
 { }

 template<typename _InputIterator>
   param_type(_InputIterator __wbegin,
       _InputIterator __wend)
   : _M_prob(__wbegin, __wend), _M_cp()
   { _M_initialize(); }

 param_type(initializer_list<double> __wil)
 : _M_prob(__wil.begin(), __wil.end()), _M_cp()
 { _M_initialize(); }

 template<typename _Func>
   param_type(size_t __nw, double __xmin, double __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<double>
 probabilities() const
 { return _M_prob.empty() ? std::vector<double>(1, 1.0) : _M_prob; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_prob == __p2._M_prob; }

      private:
 void
 _M_initialize();

 std::vector<double> _M_prob;
 std::vector<double> _M_cp;
      };

      discrete_distribution()
      : _M_param()
      { }

      template<typename _InputIterator>
 discrete_distribution(_InputIterator __wbegin,
         _InputIterator __wend)
 : _M_param(__wbegin, __wend)
 { }

      discrete_distribution(initializer_list<double> __wl)
      : _M_param(__wl)
      { }

      template<typename _Func>
 discrete_distribution(size_t __nw, double __xmin, double __xmax,
         _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      discrete_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<double>
      probabilities() const
      {
 return _M_param._M_prob.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_prob;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      { return result_type(0); }




      result_type
      max() const
      {
 return _M_param._M_prob.empty()
   ? result_type(0) : result_type(_M_param._M_prob.size() - 1);
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const discrete_distribution& __d1,
   const discrete_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }
# 5433 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::discrete_distribution<_IntType1>& __x);
# 5449 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _IntType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::discrete_distribution<_IntType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _IntType>
    inline bool
    operator!=(const std::discrete_distribution<_IntType>& __d1,
        const std::discrete_distribution<_IntType>& __d2)
    { return !(__d1 == __d2); }
# 5482 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType = double>
    class piecewise_constant_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_constant_distribution<_RealType> distribution_type;
 friend class piecewise_constant_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bi, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(1, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return __p1._M_int == __p2._M_int && __p1._M_den == __p2._M_den; }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
      };

      explicit
      piecewise_constant_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_constant_distribution(_InputIteratorB __bfirst,
     _InputIteratorB __bend,
     _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_constant_distribution(initializer_list<_RealType> __bl,
     _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_constant_distribution(size_t __nw,
     _RealType __xmin, _RealType __xmax,
     _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_constant_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }




      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(1, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const piecewise_constant_distribution& __d1,
   const piecewise_constant_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }
# 5700 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::piecewise_constant_distribution<_RealType1>& __x);
# 5716 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::piecewise_constant_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_constant_distribution<_RealType>& __d1,
        const std::piecewise_constant_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 5749 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  template<typename _RealType = double>
    class piecewise_linear_distribution
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

    public:

      typedef _RealType result_type;

      struct param_type
      {
 typedef piecewise_linear_distribution<_RealType> distribution_type;
 friend class piecewise_linear_distribution<_RealType>;

 param_type()
 : _M_int(), _M_den(), _M_cp(), _M_m()
 { }

 template<typename _InputIteratorB, typename _InputIteratorW>
   param_type(_InputIteratorB __bfirst,
       _InputIteratorB __bend,
       _InputIteratorW __wbegin);

 template<typename _Func>
   param_type(initializer_list<_RealType> __bl, _Func __fw);

 template<typename _Func>
   param_type(size_t __nw, _RealType __xmin, _RealType __xmax,
       _Func __fw);


 param_type(const param_type&) = default;
 param_type& operator=(const param_type&) = default;

 std::vector<_RealType>
 intervals() const
 {
   if (_M_int.empty())
     {
       std::vector<_RealType> __tmp(2);
       __tmp[1] = _RealType(1);
       return __tmp;
     }
   else
     return _M_int;
 }

 std::vector<double>
 densities() const
 { return _M_den.empty() ? std::vector<double>(2, 1.0) : _M_den; }

 friend bool
 operator==(const param_type& __p1, const param_type& __p2)
 { return (__p1._M_int == __p2._M_int
    && __p1._M_den == __p2._M_den); }

      private:
 void
 _M_initialize();

 std::vector<_RealType> _M_int;
 std::vector<double> _M_den;
 std::vector<double> _M_cp;
 std::vector<double> _M_m;
      };

      explicit
      piecewise_linear_distribution()
      : _M_param()
      { }

      template<typename _InputIteratorB, typename _InputIteratorW>
 piecewise_linear_distribution(_InputIteratorB __bfirst,
          _InputIteratorB __bend,
          _InputIteratorW __wbegin)
 : _M_param(__bfirst, __bend, __wbegin)
 { }

      template<typename _Func>
 piecewise_linear_distribution(initializer_list<_RealType> __bl,
          _Func __fw)
 : _M_param(__bl, __fw)
 { }

      template<typename _Func>
 piecewise_linear_distribution(size_t __nw,
          _RealType __xmin, _RealType __xmax,
          _Func __fw)
 : _M_param(__nw, __xmin, __xmax, __fw)
 { }

      explicit
      piecewise_linear_distribution(const param_type& __p)
      : _M_param(__p)
      { }




      void
      reset()
      { }




      std::vector<_RealType>
      intervals() const
      {
 if (_M_param._M_int.empty())
   {
     std::vector<_RealType> __tmp(2);
     __tmp[1] = _RealType(1);
     return __tmp;
   }
 else
   return _M_param._M_int;
      }





      std::vector<double>
      densities() const
      {
 return _M_param._M_den.empty()
   ? std::vector<double>(2, 1.0) : _M_param._M_den;
      }




      param_type
      param() const
      { return _M_param; }





      void
      param(const param_type& __param)
      { _M_param = __param; }




      result_type
      min() const
      {
 return _M_param._M_int.empty()
   ? result_type(0) : _M_param._M_int.front();
      }




      result_type
      max() const
      {
 return _M_param._M_int.empty()
   ? result_type(1) : _M_param._M_int.back();
      }




      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng)
 { return this->operator()(__urng, _M_param); }

      template<typename _UniformRandomNumberGenerator>
 result_type
 operator()(_UniformRandomNumberGenerator& __urng,
     const param_type& __p);

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng)
 { this->__generate(__f, __t, __urng, _M_param); }

      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate(_ForwardIterator __f, _ForwardIterator __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }

      template<typename _UniformRandomNumberGenerator>
 void
 __generate(result_type* __f, result_type* __t,
     _UniformRandomNumberGenerator& __urng,
     const param_type& __p)
 { this->__generate_impl(__f, __t, __urng, __p); }





      friend bool
      operator==(const piecewise_linear_distribution& __d1,
   const piecewise_linear_distribution& __d2)
      { return __d1._M_param == __d2._M_param; }
# 5970 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_ostream<_CharT, _Traits>&
 operator<<(std::basic_ostream<_CharT, _Traits>& __os,
     const std::piecewise_linear_distribution<_RealType1>& __x);
# 5986 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
      template<typename _RealType1, typename _CharT, typename _Traits>
 friend std::basic_istream<_CharT, _Traits>&
 operator>>(std::basic_istream<_CharT, _Traits>& __is,
     std::piecewise_linear_distribution<_RealType1>& __x);

    private:
      template<typename _ForwardIterator,
        typename _UniformRandomNumberGenerator>
 void
 __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
   _UniformRandomNumberGenerator& __urng,
   const param_type& __p);

      param_type _M_param;
    };





  template<typename _RealType>
    inline bool
    operator!=(const std::piecewise_linear_distribution<_RealType>& __d1,
        const std::piecewise_linear_distribution<_RealType>& __d2)
    { return !(__d1 == __d2); }
# 6027 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.h" 3
  class seed_seq
  {

  public:

    typedef uint_least32_t result_type;


    seed_seq()
    : _M_v()
    { }

    template<typename _IntType>
      seed_seq(std::initializer_list<_IntType> il);

    template<typename _InputIterator>
      seed_seq(_InputIterator __begin, _InputIterator __end);


    template<typename _RandomAccessIterator>
      void
      generate(_RandomAccessIterator __begin, _RandomAccessIterator __end);


    size_t size() const
    { return _M_v.size(); }

    template<typename OutputIterator>
      void
      param(OutputIterator __dest) const
      { std::copy(_M_v.begin(), _M_v.end(), __dest); }

  private:

    std::vector<result_type> _M_v;
  };






}
# 50 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/random" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/opt_random.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/opt_random.h" 3
# 51 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/random" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.tcc" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.tcc" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/numeric" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/numeric" 3



# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_numeric.h" 1 3
# 65 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_numeric.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 80 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_numeric.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value)
    {





                                                     ;

      for (; __first != __last; ++__first)
 {
   *__first = __value;
   ++__value;
 }
    }


}



namespace std __attribute__ ((__visibility__ ("default")))
{
# 118 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __init + *__first;
      return __init;
    }
# 144 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _Tp, typename _BinaryOperation>
    inline _Tp
    accumulate(_InputIterator __first, _InputIterator __last, _Tp __init,
        _BinaryOperation __binary_op)
    {


                                                     ;

      for (; __first != __last; ++__first)
 __init = __binary_op(__init, *__first);
      return __init;
    }
# 172 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_numeric.h" 3
  template<typename _InputIterator1, typename _InputIterator2, typename _Tp>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __init + (*__first1 * *__first2);
      return __init;
    }
# 203 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_numeric.h" 3
  template<typename _InputIterator1, typename _InputIterator2, typename _Tp,
    typename _BinaryOperation1, typename _BinaryOperation2>
    inline _Tp
    inner_product(_InputIterator1 __first1, _InputIterator1 __last1,
    _InputIterator2 __first2, _Tp __init,
    _BinaryOperation1 __binary_op1,
    _BinaryOperation2 __binary_op2)
    {



                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 __init = __binary_op1(__init, __binary_op2(*__first1, *__first2));
      return __init;
    }
# 235 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __value + *__first;
   *++__result = __value;
 }
      return ++__result;
    }
# 275 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    partial_sum(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   __value = __binary_op(__value, *__first);
   *++__result = __value;
 }
      return ++__result;
    }
# 315 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    adjacent_difference(_InputIterator __first,
   _InputIterator __last, _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __tmp - __value;
   __value = std::move(__tmp);
 }
      return ++__result;
    }
# 357 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_numeric.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryOperation>
    _OutputIterator
    adjacent_difference(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result, _BinaryOperation __binary_op)
    {
      typedef typename iterator_traits<_InputIterator>::value_type _ValueType;





                                                     ;

      if (__first == __last)
 return __result;
      _ValueType __value = *__first;
      *__result = __value;
      while (++__first != __last)
 {
   _ValueType __tmp = *__first;
   *++__result = __binary_op(__tmp, __value);
   __value = std::move(__tmp);
 }
      return ++__result;
    }


}
# 63 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/numeric" 2 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.tcc" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  namespace __detail
  {
# 50 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.tcc" 3
    template<typename _Tp, _Tp __m, _Tp __a, _Tp __c>
      _Tp
      _Mod<_Tp, __m, __a, __c, false, true>::
      __calc(_Tp __x)
      {
 if (__a == 1)
   __x %= __m;
 else
   {
     static const _Tp __q = __m / __a;
     static const _Tp __r = __m % __a;

     _Tp __t1 = __a * (__x % __q);
     _Tp __t2 = __r * (__x / __q);
     if (__t1 >= __t2)
       __x = __t1 - __t2;
     else
       __x = __m - __t2 + __t1;
   }

 if (__c != 0)
   {
     const _Tp __d = __m - __x;
     if (__d > __c)
       __x += __c;
     else
       __x = __c - __d;
   }
 return __x;
      }

    template<typename _InputIterator, typename _OutputIterator,
      typename _Tp>
      _OutputIterator
      __normalize(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, const _Tp& __factor)
      {
 for (; __first != __last; ++__first, ++__result)
   *__result = *__first / __factor;
 return __result;
      }


  }



  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::multiplier;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::increment;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::modulus;

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    constexpr _UIntType
    linear_congruential_engine<_UIntType, __a, __c, __m>::default_seed;





  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    void
    linear_congruential_engine<_UIntType, __a, __c, __m>::
    seed(result_type __s)
    {
      if ((__detail::__mod<_UIntType, __m>(__c) == 0)
   && (__detail::__mod<_UIntType, __m>(__s) == 0))
 _M_x = 1;
      else
 _M_x = __detail::__mod<_UIntType, __m>(__s);
    }




  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      linear_congruential_engine<_UIntType, __a, __c, __m>::
      seed(_Sseq& __q)
      {
 const _UIntType __k0 = __m == 0 ? std::numeric_limits<_UIntType>::digits
                                 : std::__lg(__m);
 const _UIntType __k = (__k0 + 31) / 32;
 uint_least32_t __arr[__k + 3];
 __q.generate(__arr + 0, __arr + __k + 3);
 _UIntType __factor = 1u;
 _UIntType __sum = 0u;
 for (size_t __j = 0; __j < __k; ++__j)
   {
     __sum += __arr[__j + 3] * __factor;
     __factor *= __detail::_Shift<_UIntType, 32>::__value;
   }
 seed(__sum);
      }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const linear_congruential_engine<_UIntType,
      __a, __c, __m>& __lcr)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__os.widen(' '));

      __os << __lcr._M_x;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        linear_congruential_engine<_UIntType, __a, __c, __m>& __lcr)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec);

      __is >> __lcr._M_x;

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::word_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::state_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::shift_size;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::mask_bits;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::xor_mask;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_u;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_d;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_s;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_b;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_t;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_c;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr size_t
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::tempering_l;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
                                              initialization_multiplier;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    constexpr _UIntType
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::default_seed;

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    seed(result_type __sd)
    {
      _M_x[0] = __detail::__mod<_UIntType,
 __detail::_Shift<_UIntType, __w>::__value>(__sd);

      for (size_t __i = 1; __i < state_size; ++__i)
 {
   _UIntType __x = _M_x[__i - 1];
   __x ^= __x >> (__w - 2);
   __x *= __f;
   __x += __detail::__mod<_UIntType, __n>(__i);
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__x);
 }
      _M_p = state_size;
    }

  template<typename _UIntType,
    size_t __w, size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
         __s, __b, __t, __c, __l, __f>::
      seed(_Sseq& __q)
      {
 const _UIntType __upper_mask = (~_UIntType()) << __r;
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__n * __k];
 __q.generate(__arr + 0, __arr + __n * __k);

 bool __zero = true;
 for (size_t __i = 0; __i < state_size; ++__i)
   {
     _UIntType __factor = 1u;
     _UIntType __sum = 0u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);

     if (__zero)
       {
  if (__i == 0)
    {
      if ((_M_x[0] & __upper_mask) != 0u)
        __zero = false;
    }
  else if (_M_x[__i] != 0u)
    __zero = false;
       }
   }
        if (__zero)
          _M_x[0] = __detail::_Shift<_UIntType, __w - 1>::__value;
 _M_p = state_size;
      }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    _M_gen_rand(void)
    {
      const _UIntType __upper_mask = (~_UIntType()) << __r;
      const _UIntType __lower_mask = ~__upper_mask;

      for (size_t __k = 0; __k < (__n - __m); ++__k)
        {
   _UIntType __y = ((_M_x[__k] & __upper_mask)
      | (_M_x[__k + 1] & __lower_mask));
   _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
         ^ ((__y & 0x01) ? __a : 0));
        }

      for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
 {
   _UIntType __y = ((_M_x[__k] & __upper_mask)
      | (_M_x[__k + 1] & __lower_mask));
   _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
         ^ ((__y & 0x01) ? __a : 0));
 }

      _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
         | (_M_x[0] & __lower_mask));
      _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
         ^ ((__y & 0x01) ? __a : 0));
      _M_p = 0;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    void
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    discard(unsigned long long __z)
    {
      while (__z > state_size - _M_p)
 {
   __z -= state_size - _M_p;
   _M_gen_rand();
 }
      _M_p += __z;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f>
    typename
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::result_type
    mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
       __s, __b, __t, __c, __l, __f>::
    operator()()
    {

      if (_M_p >= state_size)
 _M_gen_rand();


      result_type __z = _M_x[_M_p++];
      __z ^= (__z >> __u) & __d;
      __z ^= (__z << __s) & __b;
      __z ^= (__z << __t) & __c;
      __z ^= (__z >> __l);

      return __z;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __n; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_p;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w,
    size_t __n, size_t __m, size_t __r,
    _UIntType __a, size_t __u, _UIntType __d, size_t __s,
    _UIntType __b, size_t __t, _UIntType __c, size_t __l,
    _UIntType __f, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        mersenne_twister_engine<_UIntType, __w, __n, __m,
        __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __n; ++__i)
 __is >> __x._M_x[__i];
      __is >> __x._M_p;

      __is.flags(__flags);
      return __is;
    }


  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::word_size;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::short_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr size_t
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::long_lag;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    constexpr _UIntType
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::default_seed;

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    void
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    seed(result_type __value)
    {
      std::linear_congruential_engine<result_type, 40014u, 0u, 2147483563u>
 __lcg(__value == 0u ? default_seed : __value);

      const size_t __n = (__w + 31) / 32;

      for (size_t __i = 0; __i < long_lag; ++__i)
 {
   _UIntType __sum = 0u;
   _UIntType __factor = 1u;
   for (size_t __j = 0; __j < __n; ++__j)
     {
       __sum += __detail::__mod<uint_least32_t,
         __detail::_Shift<uint_least32_t, 32>::__value>
    (__lcg()) * __factor;
       __factor *= __detail::_Shift<_UIntType, 32>::__value;
     }
   _M_x[__i] = __detail::__mod<_UIntType,
     __detail::_Shift<_UIntType, __w>::__value>(__sum);
 }
      _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
      _M_p = 0;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    template<typename _Sseq>
      typename std::enable_if<std::is_class<_Sseq>::value>::type
      subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      seed(_Sseq& __q)
      {
 const size_t __k = (__w + 31) / 32;
 uint_least32_t __arr[__r * __k];
 __q.generate(__arr + 0, __arr + __r * __k);

 for (size_t __i = 0; __i < long_lag; ++__i)
   {
     _UIntType __sum = 0u;
     _UIntType __factor = 1u;
     for (size_t __j = 0; __j < __k; ++__j)
       {
  __sum += __arr[__k * __i + __j] * __factor;
  __factor *= __detail::_Shift<_UIntType, 32>::__value;
       }
     _M_x[__i] = __detail::__mod<_UIntType,
       __detail::_Shift<_UIntType, __w>::__value>(__sum);
   }
 _M_carry = (_M_x[long_lag - 1] == 0) ? 1 : 0;
 _M_p = 0;
      }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r>
    typename subtract_with_carry_engine<_UIntType, __w, __s, __r>::
      result_type
    subtract_with_carry_engine<_UIntType, __w, __s, __r>::
    operator()()
    {

      long __ps = _M_p - short_lag;
      if (__ps < 0)
 __ps += long_lag;




      _UIntType __xi;
      if (_M_x[__ps] >= _M_x[_M_p] + _M_carry)
 {
   __xi = _M_x[__ps] - _M_x[_M_p] - _M_carry;
   _M_carry = 0;
 }
      else
 {
   __xi = (__detail::_Shift<_UIntType, __w>::__value
    - _M_x[_M_p] - _M_carry + _M_x[__ps]);
   _M_carry = 1;
 }
      _M_x[_M_p] = __xi;


      if (++_M_p >= long_lag)
 _M_p = 0;

      return __xi;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const subtract_with_carry_engine<_UIntType,
      __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      for (size_t __i = 0; __i < __r; ++__i)
 __os << __x._M_x[__i] << __space;
      __os << __x._M_carry << __space << __x._M_p;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _UIntType, size_t __w, size_t __s, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        subtract_with_carry_engine<_UIntType, __w, __s, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      for (size_t __i = 0; __i < __r; ++__i)
 __is >> __x._M_x[__i];
      __is >> __x._M_carry;
      __is >> __x._M_p;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::block_size;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    constexpr size_t
    discard_block_engine<_RandomNumberEngine, __p, __r>::used_block;

  template<typename _RandomNumberEngine, size_t __p, size_t __r>
    typename discard_block_engine<_RandomNumberEngine,
      __p, __r>::result_type
    discard_block_engine<_RandomNumberEngine, __p, __r>::
    operator()()
    {
      if (_M_n >= used_block)
 {
   _M_b.discard(block_size - _M_n);
   _M_n = 0;
 }
      ++_M_n;
      return _M_b();
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discard_block_engine<_RandomNumberEngine,
        __p, __r>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base() << __space << __x._M_n;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __p, size_t __r,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discard_block_engine<_RandomNumberEngine, __p, __r>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b >> __x._M_n;

      __is.flags(__flags);
      return __is;
    }


  template<typename _RandomNumberEngine, size_t __w, typename _UIntType>
    typename independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
      result_type
    independent_bits_engine<_RandomNumberEngine, __w, _UIntType>::
    operator()()
    {
      typedef typename _RandomNumberEngine::result_type _Eresult_type;
      const _Eresult_type __r
 = (_M_b.max() - _M_b.min() < std::numeric_limits<_Eresult_type>::max()
    ? _M_b.max() - _M_b.min() + 1 : 0);
      const unsigned __edig = std::numeric_limits<_Eresult_type>::digits;
      const unsigned __m = __r ? std::__lg(__r) : __edig;

      typedef typename std::common_type<_Eresult_type, result_type>::type
 __ctype;
      const unsigned __cdig = std::numeric_limits<__ctype>::digits;

      unsigned __n, __n0;
      __ctype __s0, __s1, __y0, __y1;

      for (size_t __i = 0; __i < 2; ++__i)
 {
   __n = (__w + __m - 1) / __m + __i;
   __n0 = __n - __w % __n;
   const unsigned __w0 = __w / __n;

   __s0 = 0;
   __s1 = 0;
   if (__w0 < __cdig)
     {
       __s0 = __ctype(1) << __w0;
       __s1 = __s0 << 1;
     }

   __y0 = 0;
   __y1 = 0;
   if (__r)
     {
       __y0 = __s0 * (__r / __s0);
       if (__s1)
  __y1 = __s1 * (__r / __s1);

       if (__r - __y0 <= __y0 / __n)
  break;
     }
   else
     break;
 }

      result_type __sum = 0;
      for (size_t __k = 0; __k < __n0; ++__k)
 {
   __ctype __u;
   do
     __u = _M_b() - _M_b.min();
   while (__y0 && __u >= __y0);
   __sum = __s0 * __sum + (__s0 ? __u % __s0 : __u);
 }
      for (size_t __k = __n0; __k < __n; ++__k)
 {
   __ctype __u;
   do
     __u = _M_b() - _M_b.min();
   while (__y1 && __u >= __y1);
   __sum = __s1 * __sum + (__s1 ? __u % __s1 : __u);
 }
      return __sum;
    }


  template<typename _RandomNumberEngine, size_t __k>
    constexpr size_t
    shuffle_order_engine<_RandomNumberEngine, __k>::table_size;

  template<typename _RandomNumberEngine, size_t __k>
    typename shuffle_order_engine<_RandomNumberEngine, __k>::result_type
    shuffle_order_engine<_RandomNumberEngine, __k>::
    operator()()
    {
      size_t __j = __k * ((_M_y - _M_b.min())
     / (_M_b.max() - _M_b.min() + 1.0L));
      _M_y = _M_v[__j];
      _M_v[__j] = _M_b();

      return _M_y;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::dec | __ios_base::fixed | __ios_base::left);
      __os.fill(__space);

      __os << __x.base();
      for (size_t __i = 0; __i < __k; ++__i)
 __os << __space << __x._M_v[__i];
      __os << __space << __x._M_y;

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _RandomNumberEngine, size_t __k,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        shuffle_order_engine<_RandomNumberEngine, __k>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      __is >> __x._M_b;
      for (size_t __i = 0; __i < __k; ++__i)
 __is >> __x._M_v[__i];
      __is >> __x._M_y;

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename uniform_int_distribution<_IntType>::result_type
      uniform_int_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {

     const __uctype __uerange = __urange + 1;
     const __uctype __scaling = __urngrange / __uerange;
     const __uctype __past = __uerange * __scaling;
     do
       __ret = __uctype(__urng()) - __urngmin;
     while (__ret >= __past);
     __ret /= __scaling;
   }
 else if (__urngrange < __urange)
   {
# 924 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.tcc" 3
     __uctype __tmp;
     do
       {
  const __uctype __uerngrange = __urngrange + 1;
  __tmp = (__uerngrange * operator()
    (__urng, param_type(0, __urange / __uerngrange)));
  __ret = __tmp + (__uctype(__urng()) - __urngmin);
       }
     while (__ret > __urange || __ret < __tmp);
   }
 else
   __ret = __uctype(__urng()) - __urngmin;

 return __ret + __param.a();
      }


  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      uniform_int_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 typedef typename _UniformRandomNumberGenerator::result_type
   _Gresult_type;
 typedef typename std::make_unsigned<result_type>::type __utype;
 typedef typename std::common_type<_Gresult_type, __utype>::type
   __uctype;

 const __uctype __urngmin = __urng.min();
 const __uctype __urngmax = __urng.max();
 const __uctype __urngrange = __urngmax - __urngmin;
 const __uctype __urange
   = __uctype(__param.b()) - __uctype(__param.a());

 __uctype __ret;

 if (__urngrange > __urange)
   {
     if (__detail::_Power_of_2(__urngrange + 1)
  && __detail::_Power_of_2(__urange + 1))
       {
  while (__f != __t)
    {
      __ret = __uctype(__urng()) - __urngmin;
      *__f++ = (__ret & __urange) + __param.a();
    }
       }
     else
       {

  const __uctype __uerange = __urange + 1;
  const __uctype __scaling = __urngrange / __uerange;
  const __uctype __past = __uerange * __scaling;
  while (__f != __t)
    {
      do
        __ret = __uctype(__urng()) - __urngmin;
      while (__ret >= __past);
      *__f++ = __ret / __scaling + __param.a();
    }
       }
   }
 else if (__urngrange < __urange)
   {
# 1008 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.tcc" 3
     __uctype __tmp;
     while (__f != __t)
       {
  do
    {
      const __uctype __uerngrange = __urngrange + 1;
      __tmp = (__uerngrange * operator()
        (__urng, param_type(0, __urange / __uerngrange)));
      __ret = __tmp + (__uctype(__urng()) - __urngmin);
    }
  while (__ret > __urange || __ret < __tmp);
  *__f++ = __ret;
       }
   }
 else
   while (__f != __t)
     *__f++ = __uctype(__urng()) - __urngmin + __param.a();
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_int_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_int_distribution<_IntType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      uniform_real_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 auto __range = __p.b() - __p.a();
 while (__f != __t)
   *__f++ = __aurng() * __range + __p.a();
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        uniform_real_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename uniform_real_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _ForwardIterator,
    typename _UniformRandomNumberGenerator>
    void
    std::bernoulli_distribution::
    __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
      _UniformRandomNumberGenerator& __urng,
      const param_type& __p)
    {

      __detail::_Adaptor<_UniformRandomNumberGenerator, double>
 __aurng(__urng);
      auto __limit = __p.p() * (__aurng.max() - __aurng.min());

      while (__f != __t)
 *__f++ = (__aurng() - __aurng.min()) < __limit;
    }

  template<typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const bernoulli_distribution& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename geometric_distribution<_IntType>::result_type
      geometric_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {


 const double __naf =
   (1 - std::numeric_limits<double>::epsilon()) / 2;

 const double __thr =
   std::numeric_limits<_IntType>::max() + __naf;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 double __cand;
 do
   __cand = std::floor(std::log(1.0 - __aurng()) / __param._M_log_1_p);
 while (__cand >= __thr);

 return result_type(__cand + __naf);
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      geometric_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {



 const double __naf =
   (1 - std::numeric_limits<double>::epsilon()) / 2;

 const double __thr =
   std::numeric_limits<_IntType>::max() + __naf;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 while (__f != __t)
   {
     double __cand;
     do
       __cand = std::floor(std::log(1.0 - __aurng())
      / __param._M_log_1_p);
     while (__cand >= __thr);

     *__f++ = __cand + __naf;
   }
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.p();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        geometric_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __p;
      __is >> __p;
      __x.param(typename geometric_distribution<_IntType>::param_type(__p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng)
      {
 const double __y = _M_gd(__urng);


 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename negative_binomial_distribution<_IntType>::result_type
      negative_binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 typedef typename std::gamma_distribution<double>::param_type
   param_type;

 const double __y =
   _M_gd(__urng, param_type(__p.k(), (1.0 - __p.p()) / __p.p()));

 std::poisson_distribution<result_type> __poisson(__y);
 return __poisson(__urng);
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      negative_binomial_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   {
     const double __y = _M_gd(__urng);


     std::poisson_distribution<result_type> __poisson(__y);
     *__f++ = __poisson(__urng);
   }
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      negative_binomial_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 typename std::gamma_distribution<result_type>::param_type
   __p2(__p.k(), (1.0 - __p.p()) / __p.p());

 while (__f != __t)
   {
     const double __y = _M_gd(__urng, __p2);

     std::poisson_distribution<result_type> __poisson(__y);
     *__f++ = __poisson(__urng);
   }
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.k() << __space << __x.p()
    << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        negative_binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      _IntType __k;
      double __p;
      __is >> __k >> __p >> __x._M_gd;
      __x.param(typename negative_binomial_distribution<_IntType>::
  param_type(__k, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    poisson_distribution<_IntType>::param_type::
    _M_initialize()
    {

      if (_M_mean >= 12)
 {
   const double __m = std::floor(_M_mean);
   _M_lm_thr = std::log(_M_mean);
   _M_lfm = std::lgamma(__m + 1);
   _M_sm = std::sqrt(__m);

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __dx = std::sqrt(2 * __m * std::log(32 * __m
             / __pi_4));
   _M_d = std::round(std::max(6.0, std::min(__m, __dx)));
   const double __cx = 2 * __m + _M_d;
   _M_scx = std::sqrt(__cx / 2);
   _M_1cx = 1 / __cx;

   _M_c2b = std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx);
   _M_cb = 2 * __cx * std::exp(-_M_d * _M_1cx * (1 + _M_d / 2))
  / _M_d;
 }
      else

 _M_lm_thr = std::exp(-_M_mean);
      }
# 1432 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.tcc" 3
  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename poisson_distribution<_IntType>::result_type
      poisson_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 if (__param.mean() >= 12)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __m = std::floor(__param.mean());

     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __c1 = __param._M_sm * __spi_2;
     const double __c2 = __param._M_c2b + __c1;
     const double __c3 = __c2 + 1;
     const double __c4 = __c3 + 1;

     const double __e178 = 1.0129030479320018583185514777512983L;
     const double __c5 = __c4 + __e178;
     const double __c = __param._M_cb + __c5;
     const double __2cx = 2 * (2 * __m + __param._M_d);

     bool __reject = true;
     do
       {
  const double __u = __c * __aurng();
  const double __e = -std::log(1.0 - __aurng());

  double __w = 0.0;

  if (__u <= __c1)
    {
      const double __n = _M_nd(__urng);
      const double __y = -std::abs(__n) * __param._M_sm - 1;
      __x = std::floor(__y);
      __w = -__n * __n / 2;
      if (__x < -__m)
        continue;
    }
  else if (__u <= __c2)
    {
      const double __n = _M_nd(__urng);
      const double __y = 1 + std::abs(__n) * __param._M_scx;
      __x = std::ceil(__y);
      __w = __y * (2 - __y) * __param._M_1cx;
      if (__x > __param._M_d)
        continue;
    }
  else if (__u <= __c3)


    __x = -1;
  else if (__u <= __c4)
    __x = 0;
  else if (__u <= __c5)
    __x = 1;
  else
    {
      const double __v = -std::log(1.0 - __aurng());
      const double __y = __param._M_d
         + __v * __2cx / __param._M_d;
      __x = std::ceil(__y);
      __w = -__param._M_d * __param._M_1cx * (1 + __y / 2);
    }

  __reject = (__w - __e - __x * __param._M_lm_thr
       > __param._M_lfm - std::lgamma(__x + __m + 1));

  __reject |= __x + __m >= __thr;

       } while (__reject);

     return result_type(__x + __m + __naf);
   }
 else

   {
     _IntType __x = 0;
     double __prod = 1.0;

     do
       {
  __prod *= __aurng();
  __x += 1;
       }
     while (__prod > __param._M_lm_thr);

     return __x - 1;
   }
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      poisson_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 while (__f != __t)
   *__f++ = this->operator()(__urng, __param);
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.mean() << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        poisson_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::skipws);

      double __mean;
      __is >> __mean >> __x._M_nd;
      __x.param(typename poisson_distribution<_IntType>::param_type(__mean));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    binomial_distribution<_IntType>::param_type::
    _M_initialize()
    {
      const double __p12 = _M_p <= 0.5 ? _M_p : 1.0 - _M_p;

      _M_easy = true;


      if (_M_t * __p12 >= 8)
 {
   _M_easy = false;
   const double __np = std::floor(_M_t * __p12);
   const double __pa = __np / _M_t;
   const double __1p = 1 - __pa;

   const double __pi_4 = 0.7853981633974483096156608458198757L;
   const double __d1x =
     std::sqrt(__np * __1p * std::log(32 * __np
          / (81 * __pi_4 * __1p)));
   _M_d1 = std::round(std::max(1.0, __d1x));
   const double __d2x =
     std::sqrt(__np * __1p * std::log(32 * _M_t * __1p
          / (__pi_4 * __pa)));
   _M_d2 = std::round(std::max(1.0, __d2x));


   const double __spi_2 = 1.2533141373155002512078826424055226L;
   _M_s1 = std::sqrt(__np * __1p) * (1 + _M_d1 / (4 * __np));
   _M_s2 = std::sqrt(__np * __1p) * (1 + _M_d2 / (4 * _M_t * __1p));
   _M_c = 2 * _M_d1 / __np;
   _M_a1 = std::exp(_M_c) * _M_s1 * __spi_2;
   const double __a12 = _M_a1 + _M_s2 * __spi_2;
   const double __s1s = _M_s1 * _M_s1;
   _M_a123 = __a12 + (std::exp(_M_d1 / (_M_t * __1p))
        * 2 * __s1s / _M_d1
        * std::exp(-_M_d1 * _M_d1 / (2 * __s1s)));
   const double __s2s = _M_s2 * _M_s2;
   _M_s = (_M_a123 + 2 * __s2s / _M_d2
    * std::exp(-_M_d2 * _M_d2 / (2 * __s2s)));
   _M_lf = (std::lgamma(__np + 1)
     + std::lgamma(_M_t - __np + 1));
   _M_lp1p = std::log(__pa / __1p);

   _M_q = -std::log(1 - (__p12 - __pa) / __1p);
 }
      else

 _M_q = -std::log(1 - __p12);
    }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      _M_waiting(_UniformRandomNumberGenerator& __urng,
   _IntType __t, double __q)
      {
 _IntType __x = 0;
 double __sum = 0.0;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 do
   {
     if (__t == __x)
       return __x;
     const double __e = -std::log(1.0 - __aurng());
     __sum += __e / (__t - __x);
     __x += 1;
   }
 while (__sum <= __q);

 return __x - 1;
      }
# 1682 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.tcc" 3
  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename binomial_distribution<_IntType>::result_type
      binomial_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 const _IntType __t = __param.t();
 const double __p = __param.p();
 const double __p12 = __p <= 0.5 ? __p : 1.0 - __p;
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);


 if (!__param._M_easy)
   {
     double __x;


     const double __naf =
       (1 - std::numeric_limits<double>::epsilon()) / 2;
     const double __thr =
       std::numeric_limits<_IntType>::max() + __naf;

     const double __np = std::floor(__t * __p12);


     const double __spi_2 = 1.2533141373155002512078826424055226L;
     const double __a1 = __param._M_a1;
     const double __a12 = __a1 + __param._M_s2 * __spi_2;
     const double __a123 = __param._M_a123;
     const double __s1s = __param._M_s1 * __param._M_s1;
     const double __s2s = __param._M_s2 * __param._M_s2;

     bool __reject;
     do
       {
  const double __u = __param._M_s * __aurng();

  double __v;

  if (__u <= __a1)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s1 * std::abs(__n);
      __reject = __y >= __param._M_d1;
      if (!__reject)
        {
   const double __e = -std::log(1.0 - __aurng());
   __x = std::floor(__y);
   __v = -__e - __n * __n / 2 + __param._M_c;
        }
    }
  else if (__u <= __a12)
    {
      const double __n = _M_nd(__urng);
      const double __y = __param._M_s2 * std::abs(__n);
      __reject = __y >= __param._M_d2;
      if (!__reject)
        {
   const double __e = -std::log(1.0 - __aurng());
   __x = std::floor(-__y);
   __v = -__e - __n * __n / 2;
        }
    }
  else if (__u <= __a123)
    {
      const double __e1 = -std::log(1.0 - __aurng());
      const double __e2 = -std::log(1.0 - __aurng());

      const double __y = __param._M_d1
         + 2 * __s1s * __e1 / __param._M_d1;
      __x = std::floor(__y);
      __v = (-__e2 + __param._M_d1 * (1 / (__t - __np)
          -__y / (2 * __s1s)));
      __reject = false;
    }
  else
    {
      const double __e1 = -std::log(1.0 - __aurng());
      const double __e2 = -std::log(1.0 - __aurng());

      const double __y = __param._M_d2
         + 2 * __s2s * __e1 / __param._M_d2;
      __x = std::floor(-__y);
      __v = -__e2 - __param._M_d2 * __y / (2 * __s2s);
      __reject = false;
    }

  __reject = __reject || __x < -__np || __x > __t - __np;
  if (!__reject)
    {
      const double __lfx =
        std::lgamma(__np + __x + 1)
        + std::lgamma(__t - (__np + __x) + 1);
      __reject = __v > __param._M_lf - __lfx
        + __x * __param._M_lp1p;
    }

  __reject |= __x + __np >= __thr;
       }
     while (__reject);

     __x += __np + __naf;

     const _IntType __z = _M_waiting(__urng, __t - _IntType(__x),
         __param._M_q);
     __ret = _IntType(__x) + __z;
   }
 else

   __ret = _M_waiting(__urng, __t, __param._M_q);

 if (__p12 != __p)
   __ret = __t - __ret;
 return __ret;
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      binomial_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 while (__f != __t)
   *__f++ = this->operator()(__urng, __param);
      }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      __os << __x.t() << __space << __x.p()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType,
    typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        binomial_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _IntType __t;
      double __p;
      __is >> __t >> __p >> __x._M_nd;
      __x.param(typename binomial_distribution<_IntType>::
  param_type(__t, __p));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::exponential_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 while (__f != __t)
   *__f++ = -std::log(result_type(1) - __aurng()) / __p.lambda();
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__os.widen(' '));
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.lambda();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        exponential_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __lambda;
      __is >> __lambda;
      __x.param(typename exponential_distribution<_RealType>::
  param_type(__lambda));

      __is.flags(__flags);
      return __is;
    }
# 1931 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/random.tcc" 3
  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename normal_distribution<_RealType>::result_type
      normal_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 result_type __ret;
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 if (_M_saved_available)
   {
     _M_saved_available = false;
     __ret = _M_saved;
   }
 else
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     _M_saved = __x * __mult;
     _M_saved_available = true;
     __ret = __y * __mult;
   }

 __ret = __ret * __param.stddev() + __param.mean();
 return __ret;
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      normal_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 if (__f == __t)
   return;

 if (_M_saved_available)
   {
     _M_saved_available = false;
     *__f++ = _M_saved * __param.stddev() + __param.mean();

     if (__f == __t)
       return;
   }

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 while (__f + 1 < __t)
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     *__f++ = __y * __mult * __param.stddev() + __param.mean();
     *__f++ = __x * __mult * __param.stddev() + __param.mean();
   }

 if (__f != __t)
   {
     result_type __x, __y, __r2;
     do
       {
  __x = result_type(2.0) * __aurng() - 1.0;
  __y = result_type(2.0) * __aurng() - 1.0;
  __r2 = __x * __x + __y * __y;
       }
     while (__r2 > 1.0 || __r2 == 0.0);

     const result_type __mult = std::sqrt(-2 * std::log(__r2) / __r2);
     _M_saved = __x * __mult;
     _M_saved_available = true;
     *__f = __y * __mult * __param.stddev() + __param.mean();
   }
      }

  template<typename _RealType>
    bool
    operator==(const std::normal_distribution<_RealType>& __d1,
        const std::normal_distribution<_RealType>& __d2)
    {
      if (__d1._M_param == __d2._M_param
   && __d1._M_saved_available == __d2._M_saved_available)
 {
   if (__d1._M_saved_available
       && __d1._M_saved == __d2._M_saved)
     return true;
   else if(!__d1._M_saved_available)
     return true;
   else
     return false;
 }
      else
 return false;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const normal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.mean() << __space << __x.stddev()
    << __space << __x._M_saved_available;
      if (__x._M_saved_available)
 __os << __space << __x._M_saved;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        normal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      double __mean, __stddev;
      __is >> __mean >> __stddev
    >> __x._M_saved_available;
      if (__x._M_saved_available)
 __is >> __x._M_saved;
      __x.param(typename normal_distribution<_RealType>::
  param_type(__mean, __stddev));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      lognormal_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

   while (__f != __t)
     *__f++ = std::exp(__p.s() * _M_nd(__urng) + __p.m());
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.s()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        lognormal_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __s;
      __is >> __m >> __s >> __x._M_nd;
      __x.param(typename lognormal_distribution<_RealType>::
  param_type(__m, __s));

      __is.flags(__flags);
      return __is;
    }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::chi_squared_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   *__f++ = 2 * _M_gd(__urng);
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::chi_squared_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const typename
        std::gamma_distribution<result_type>::param_type& __p)
      {

 while (__f != __t)
   *__f++ = 2 * _M_gd(__urng, __p);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        chi_squared_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_gd;
      __x.param(typename chi_squared_distribution<_RealType>::
  param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename cauchy_distribution<_RealType>::result_type
      cauchy_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 _RealType __u;
 do
   __u = __aurng();
 while (__u == 0.5);

 const _RealType __pi = 3.1415926535897932384626433832795029L;
 return __p.a() + __p.b() * std::tan(__pi * __u);
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      cauchy_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 const _RealType __pi = 3.1415926535897932384626433832795029L;
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 while (__f != __t)
   {
     _RealType __u;
     do
       __u = __aurng();
     while (__u == 0.5);

     *__f++ = __p.a() + __p.b() * std::tan(__pi * __u);
   }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        cauchy_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename cauchy_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::fisher_f_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   *__f++ = ((_M_gd_x(__urng) * n()) / (_M_gd_y(__urng) * m()));
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::fisher_f_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 typedef typename std::gamma_distribution<result_type>::param_type
   param_type;
 param_type __p1(__p.m() / 2);
 param_type __p2(__p.n() / 2);
 while (__f != __t)
   *__f++ = ((_M_gd_x(__urng, __p1) * n())
      / (_M_gd_y(__urng, __p2) * m()));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.m() << __space << __x.n()
    << __space << __x._M_gd_x << __space << __x._M_gd_y;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        fisher_f_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __m, __n;
      __is >> __m >> __n >> __x._M_gd_x >> __x._M_gd_y;
      __x.param(typename fisher_f_distribution<_RealType>::
  param_type(__m, __n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::student_t_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng)
      {

 while (__f != __t)
   *__f++ = _M_nd(__urng) * std::sqrt(n() / _M_gd(__urng));
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      std::student_t_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 typename std::gamma_distribution<result_type>::param_type
   __p2(__p.n() / 2, 2);
 while (__f != __t)
   *__f++ = _M_nd(__urng) * std::sqrt(__p.n() / _M_gd(__urng, __p2));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.n() << __space << __x._M_nd << __space << __x._M_gd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        student_t_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __n;
      __is >> __n >> __x._M_nd >> __x._M_gd;
      __x.param(typename student_t_distribution<_RealType>::param_type(__n));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    gamma_distribution<_RealType>::param_type::
    _M_initialize()
    {
      _M_malpha = _M_alpha < 1.0 ? _M_alpha + _RealType(1.0) : _M_alpha;

      const _RealType __a1 = _M_malpha - _RealType(1.0) / _RealType(3.0);
      _M_a2 = _RealType(1.0) / std::sqrt(_RealType(9.0) * __a1);
    }






  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename gamma_distribution<_RealType>::result_type
      gamma_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 result_type __u, __v, __n;
 const result_type __a1 = (__param._M_malpha
      - _RealType(1.0) / _RealType(3.0));

 do
   {
     do
       {
  __n = _M_nd(__urng);
  __v = result_type(1.0) + __param._M_a2 * __n;
       }
     while (__v <= 0.0);

     __v = __v * __v * __v;
     __u = __aurng();
   }
 while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
        && (std::log(__u) > (0.5 * __n * __n + __a1
        * (1.0 - __v + std::log(__v)))));

 if (__param.alpha() == __param._M_malpha)
   return __a1 * __v * __param.beta();
 else
   {
     do
       __u = __aurng();
     while (__u == 0.0);

     return (std::pow(__u, result_type(1.0) / __param.alpha())
      * __a1 * __v * __param.beta());
   }
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      gamma_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 result_type __u, __v, __n;
 const result_type __a1 = (__param._M_malpha
      - _RealType(1.0) / _RealType(3.0));

 if (__param.alpha() == __param._M_malpha)
   while (__f != __t)
     {
       do
  {
    do
      {
        __n = _M_nd(__urng);
        __v = result_type(1.0) + __param._M_a2 * __n;
      }
    while (__v <= 0.0);

    __v = __v * __v * __v;
    __u = __aurng();
  }
       while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
       && (std::log(__u) > (0.5 * __n * __n + __a1
       * (1.0 - __v + std::log(__v)))));

       *__f++ = __a1 * __v * __param.beta();
     }
 else
   while (__f != __t)
     {
       do
  {
    do
      {
        __n = _M_nd(__urng);
        __v = result_type(1.0) + __param._M_a2 * __n;
      }
    while (__v <= 0.0);

    __v = __v * __v * __v;
    __u = __aurng();
  }
       while (__u > result_type(1.0) - 0.331 * __n * __n * __n * __n
       && (std::log(__u) > (0.5 * __n * __n + __a1
       * (1.0 - __v + std::log(__v)))));

       do
  __u = __aurng();
       while (__u == 0.0);

       *__f++ = (std::pow(__u, result_type(1.0) / __param.alpha())
   * __a1 * __v * __param.beta());
     }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.alpha() << __space << __x.beta()
    << __space << __x._M_nd;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        gamma_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __alpha_val, __beta_val;
      __is >> __alpha_val >> __beta_val >> __x._M_nd;
      __x.param(typename gamma_distribution<_RealType>::
  param_type(__alpha_val, __beta_val));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename weibull_distribution<_RealType>::result_type
      weibull_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.b() * std::pow(-std::log(result_type(1) - __aurng()),
      result_type(1) / __p.a());
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      weibull_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 auto __inv_a = result_type(1) / __p.a();

 while (__f != __t)
   *__f++ = __p.b() * std::pow(-std::log(result_type(1) - __aurng()),
          __inv_a);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        weibull_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename weibull_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename extreme_value_distribution<_RealType>::result_type
      extreme_value_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __p)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);
 return __p.a() - __p.b() * std::log(-std::log(result_type(1)
            - __aurng()));
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      extreme_value_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __p)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, result_type>
   __aurng(__urng);

 while (__f != __t)
   *__f++ = __p.a() - __p.b() * std::log(-std::log(result_type(1)
         - __aurng()));
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      __os << __x.a() << __space << __x.b();

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        extreme_value_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      _RealType __a, __b;
      __is >> __a >> __b;
      __x.param(typename extreme_value_distribution<_RealType>::
  param_type(__a, __b));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    void
    discrete_distribution<_IntType>::param_type::
    _M_initialize()
    {
      if (_M_prob.size() < 2)
 {
   _M_prob.clear();
   return;
 }

      const double __sum = std::accumulate(_M_prob.begin(),
        _M_prob.end(), 0.0);

      __detail::__normalize(_M_prob.begin(), _M_prob.end(), _M_prob.begin(),
       __sum);

      _M_cp.reserve(_M_prob.size());
      std::partial_sum(_M_prob.begin(), _M_prob.end(),
         std::back_inserter(_M_cp));

      _M_cp[_M_cp.size() - 1] = 1.0;
    }

  template<typename _IntType>
    template<typename _Func>
      discrete_distribution<_IntType>::param_type::
      param_type(size_t __nw, double __xmin, double __xmax, _Func __fw)
      : _M_prob(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const double __delta = (__xmax - __xmin) / __n;

 _M_prob.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_prob.push_back(__fw(__xmin + __k * __delta + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _IntType>
    template<typename _UniformRandomNumberGenerator>
      typename discrete_distribution<_IntType>::result_type
      discrete_distribution<_IntType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 if (__param._M_cp.empty())
   return result_type(0);

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);

 return __pos - __param._M_cp.begin();
      }

  template<typename _IntType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      discrete_distribution<_IntType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 if (__param._M_cp.empty())
   {
     while (__f != __t)
       *__f++ = result_type(0);
     return;
   }

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 while (__f != __t)
   {
     const double __p = __aurng();
     auto __pos = std::lower_bound(__param._M_cp.begin(),
       __param._M_cp.end(), __p);

     *__f++ = __pos - __param._M_cp.begin();
   }
      }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<double>::max_digits10);

      std::vector<double> __prob = __x.probabilities();
      __os << __prob.size();
      for (auto __dit = __prob.begin(); __dit != __prob.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _IntType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        discrete_distribution<_IntType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<double> __prob_vec;
      __prob_vec.reserve(__n);
      for (; __n != 0; --__n)
 {
   double __prob;
   __is >> __prob;
   __prob_vec.push_back(__prob);
 }

      __x.param(typename discrete_distribution<_IntType>::
  param_type(__prob_vec.begin(), __prob_vec.end()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_constant_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      const double __sum = std::accumulate(_M_den.begin(),
        _M_den.end(), 0.0);

      __detail::__normalize(_M_den.begin(), _M_den.end(), _M_den.begin(),
       __sum);

      _M_cp.reserve(_M_den.size());
      std::partial_sum(_M_den.begin(), _M_den.end(),
         std::back_inserter(_M_cp));


      _M_cp[_M_cp.size() - 1] = 1.0;

      for (size_t __k = 0; __k < _M_den.size(); ++__k)
 _M_den[__k] /= _M_int[__k + 1] - _M_int[__k];
    }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp()
      {
 if (__bbegin != __bend)
   {
     for (;;)
       {
  _M_int.push_back(*__bbegin);
  ++__bbegin;
  if (__bbegin == __bend)
    break;

  _M_den.push_back(*__wbegin);
  ++__wbegin;
       }
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 _M_int.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   _M_int.push_back(*__biter);

 _M_den.reserve(_M_int.size() - 1);
 for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
   _M_den.push_back(__fw(0.5 * (_M_int[__k + 1] + _M_int[__k])));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_constant_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   _M_int.push_back(__xmin + __k * __delta);

 _M_den.reserve(__n);
 for (size_t __k = 0; __k < __nw; ++__k)
   _M_den.push_back(__fw(_M_int[__k] + 0.5 * __delta));

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_constant_distribution<_RealType>::result_type
      piecewise_constant_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 return __param._M_int[__i] + (__p - __pref) / __param._M_den[__i];
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      piecewise_constant_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {

 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 if (__param._M_cp.empty())
   {
     while (__f != __t)
       *__f++ = __aurng();
     return;
   }

 while (__f != __t)
   {
     const double __p = __aurng();

     auto __pos = std::lower_bound(__param._M_cp.begin(),
       __param._M_cp.end(), __p);
     const size_t __i = __pos - __param._M_cp.begin();

     const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

     *__f++ = (__param._M_int[__i]
        + (__p - __pref) / __param._M_den[__i]);
   }
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_constant_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n);
      for (size_t __i = 0; __i < __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_constant_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _RealType>
    void
    piecewise_linear_distribution<_RealType>::param_type::
    _M_initialize()
    {
      if (_M_int.size() < 2
   || (_M_int.size() == 2
       && _M_int[0] == _RealType(0)
       && _M_int[1] == _RealType(1)
       && _M_den[0] == _M_den[1]))
 {
   _M_int.clear();
   _M_den.clear();
   return;
 }

      double __sum = 0.0;
      _M_cp.reserve(_M_int.size() - 1);
      _M_m.reserve(_M_int.size() - 1);
      for (size_t __k = 0; __k < _M_int.size() - 1; ++__k)
 {
   const _RealType __delta = _M_int[__k + 1] - _M_int[__k];
   __sum += 0.5 * (_M_den[__k + 1] + _M_den[__k]) * __delta;
   _M_cp.push_back(__sum);
   _M_m.push_back((_M_den[__k + 1] - _M_den[__k]) / __delta);
 }


      __detail::__normalize(_M_den.begin(), _M_den.end(), _M_den.begin(),
       __sum);

      __detail::__normalize(_M_cp.begin(), _M_cp.end(), _M_cp.begin(), __sum);

      __detail::__normalize(_M_m.begin(), _M_m.end(), _M_m.begin(), __sum);


      _M_cp[_M_cp.size() - 1] = 1.0;
     }

  template<typename _RealType>
    template<typename _InputIteratorB, typename _InputIteratorW>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(_InputIteratorB __bbegin,
   _InputIteratorB __bend,
   _InputIteratorW __wbegin)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 for (; __bbegin != __bend; ++__bbegin, ++__wbegin)
   {
     _M_int.push_back(*__bbegin);
     _M_den.push_back(*__wbegin);
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(initializer_list<_RealType> __bl, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 _M_int.reserve(__bl.size());
 _M_den.reserve(__bl.size());
 for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter)
   {
     _M_int.push_back(*__biter);
     _M_den.push_back(__fw(*__biter));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _Func>
      piecewise_linear_distribution<_RealType>::param_type::
      param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw)
      : _M_int(), _M_den(), _M_cp(), _M_m()
      {
 const size_t __n = __nw == 0 ? 1 : __nw;
 const _RealType __delta = (__xmax - __xmin) / __n;

 _M_int.reserve(__n + 1);
 _M_den.reserve(__n + 1);
 for (size_t __k = 0; __k <= __nw; ++__k)
   {
     _M_int.push_back(__xmin + __k * __delta);
     _M_den.push_back(__fw(_M_int[__k] + __delta));
   }

 _M_initialize();
      }

  template<typename _RealType>
    template<typename _UniformRandomNumberGenerator>
      typename piecewise_linear_distribution<_RealType>::result_type
      piecewise_linear_distribution<_RealType>::
      operator()(_UniformRandomNumberGenerator& __urng,
   const param_type& __param)
      {
 __detail::_Adaptor<_UniformRandomNumberGenerator, double>
   __aurng(__urng);

 const double __p = __aurng();
 if (__param._M_cp.empty())
   return __p;

 auto __pos = std::lower_bound(__param._M_cp.begin(),
          __param._M_cp.end(), __p);
 const size_t __i = __pos - __param._M_cp.begin();

 const double __pref = __i > 0 ? __param._M_cp[__i - 1] : 0.0;

 const double __a = 0.5 * __param._M_m[__i];
 const double __b = __param._M_den[__i];
 const double __cm = __p - __pref;

 _RealType __x = __param._M_int[__i];
 if (__a == 0)
   __x += __cm / __b;
 else
   {
     const double __d = __b * __b + 4.0 * __a * __cm;
     __x += 0.5 * (std::sqrt(__d) - __b) / __a;
          }

        return __x;
      }

  template<typename _RealType>
    template<typename _ForwardIterator,
      typename _UniformRandomNumberGenerator>
      void
      piecewise_linear_distribution<_RealType>::
      __generate_impl(_ForwardIterator __f, _ForwardIterator __t,
        _UniformRandomNumberGenerator& __urng,
        const param_type& __param)
      {


 while (__f != __t)
   *__f++ = this->operator()(__urng, __param);
      }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_ostream<_CharT, _Traits>&
    operator<<(std::basic_ostream<_CharT, _Traits>& __os,
        const piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __os.flags();
      const _CharT __fill = __os.fill();
      const std::streamsize __precision = __os.precision();
      const _CharT __space = __os.widen(' ');
      __os.flags(__ios_base::scientific | __ios_base::left);
      __os.fill(__space);
      __os.precision(std::numeric_limits<_RealType>::max_digits10);

      std::vector<_RealType> __int = __x.intervals();
      __os << __int.size() - 1;

      for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit)
 __os << __space << *__xit;

      std::vector<double> __den = __x.densities();
      for (auto __dit = __den.begin(); __dit != __den.end(); ++__dit)
 __os << __space << *__dit;

      __os.flags(__flags);
      __os.fill(__fill);
      __os.precision(__precision);
      return __os;
    }

  template<typename _RealType, typename _CharT, typename _Traits>
    std::basic_istream<_CharT, _Traits>&
    operator>>(std::basic_istream<_CharT, _Traits>& __is,
        piecewise_linear_distribution<_RealType>& __x)
    {
      typedef std::basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::ios_base __ios_base;

      const typename __ios_base::fmtflags __flags = __is.flags();
      __is.flags(__ios_base::dec | __ios_base::skipws);

      size_t __n;
      __is >> __n;

      std::vector<_RealType> __int_vec;
      __int_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   _RealType __int;
   __is >> __int;
   __int_vec.push_back(__int);
 }

      std::vector<double> __den_vec;
      __den_vec.reserve(__n + 1);
      for (size_t __i = 0; __i <= __n; ++__i)
 {
   double __den;
   __is >> __den;
   __den_vec.push_back(__den);
 }

      __x.param(typename piecewise_linear_distribution<_RealType>::
   param_type(__int_vec.begin(), __int_vec.end(), __den_vec.begin()));

      __is.flags(__flags);
      return __is;
    }


  template<typename _IntType>
    seed_seq::seed_seq(std::initializer_list<_IntType> __il)
    {
      for (auto __iter = __il.begin(); __iter != __il.end(); ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _InputIterator>
    seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end)
    {
      for (_InputIterator __iter = __begin; __iter != __end; ++__iter)
 _M_v.push_back(__detail::__mod<result_type,
         __detail::_Shift<result_type, 32>::__value>(*__iter));
    }

  template<typename _RandomAccessIterator>
    void
    seed_seq::generate(_RandomAccessIterator __begin,
         _RandomAccessIterator __end)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
        _Type;

      if (__begin == __end)
 return;

      std::fill(__begin, __end, _Type(0x8b8b8b8bu));

      const size_t __n = __end - __begin;
      const size_t __s = _M_v.size();
      const size_t __t = (__n >= 623) ? 11
         : (__n >= 68) ? 7
         : (__n >= 39) ? 5
         : (__n >= 7) ? 3
         : (__n - 1) / 2;
      const size_t __p = (__n - __t) / 2;
      const size_t __q = __p + __t;
      const size_t __m = std::max(size_t(__s + 1), __n);

      for (size_t __k = 0; __k < __m; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    ^ __begin[(__k + __p) % __n]
    ^ __begin[(__k - 1) % __n]);
   _Type __r1 = __arg ^ (__arg >> 27);
   __r1 = __detail::__mod<_Type,
      __detail::_Shift<_Type, 32>::__value>(1664525u * __r1);
   _Type __r2 = __r1;
   if (__k == 0)
     __r2 += __s;
   else if (__k <= __s)
     __r2 += __k % __n + _M_v[__k - 1];
   else
     __r2 += __k % __n;
   __r2 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r2);
   __begin[(__k + __p) % __n] += __r1;
   __begin[(__k + __q) % __n] += __r2;
   __begin[__k % __n] = __r2;
 }

      for (size_t __k = __m; __k < __m + __n; ++__k)
 {
   _Type __arg = (__begin[__k % __n]
    + __begin[(__k + __p) % __n]
    + __begin[(__k - 1) % __n]);
   _Type __r3 = __arg ^ (__arg >> 27);
   __r3 = __detail::__mod<_Type,
     __detail::_Shift<_Type, 32>::__value>(1566083941u * __r3);
   _Type __r4 = __r3 - __k % __n;
   __r4 = __detail::__mod<_Type,
            __detail::_Shift<_Type, 32>::__value>(__r4);
   __begin[(__k + __p) % __n] ^= __r3;
   __begin[(__k + __q) % __n] ^= __r4;
   __begin[__k % __n] = __r4;
 }
    }

  template<typename _RealType, size_t __bits,
    typename _UniformRandomNumberGenerator>
    _RealType
    generate_canonical(_UniformRandomNumberGenerator& __urng)
    {
      static_assert(std::is_floating_point<_RealType>::value,
      "template argument not a floating point type");

      const size_t __b
 = std::min(static_cast<size_t>(std::numeric_limits<_RealType>::digits),
                   __bits);
      const long double __r = static_cast<long double>(__urng.max())
       - static_cast<long double>(__urng.min()) + 1.0L;
      const size_t __log2r = std::log(__r) / std::log(2.0L);
      size_t __k = std::max<size_t>(1UL, (__b + __log2r - 1UL) / __log2r);
      _RealType __sum = _RealType(0);
      _RealType __tmp = _RealType(1);
      for (; __k != 0; --__k)
 {
   __sum += _RealType(__urng() - __urng.min()) * __tmp;
   __tmp *= __r;
 }
      return __sum / __tmp;
    }


}
# 52 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/random" 2 3
# 67 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator, typename _Compare>
    void
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
      _Iterator __c, _Compare __comp)
    {
      if (__comp(__a, __b))
 {
   if (__comp(__b, __c))
     std::iter_swap(__result, __b);
   else if (__comp(__a, __c))
     std::iter_swap(__result, __c);
   else
     std::iter_swap(__result, __a);
 }
      else if (__comp(__a, __c))
 std::iter_swap(__result, __a);
      else if (__comp(__b, __c))
 std::iter_swap(__result, __c);
      else
 std::iter_swap(__result, __b);
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(__first))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }

  template<typename _Iterator, typename _Predicate>
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
    {
      return __find_if(__first, __last, __pred,
         std::__iterator_category(__first));
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred)
    {
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__negate(__pred),
       std::__iterator_category(__first));
    }




  template<typename _InputIterator, typename _Predicate, typename _Distance>
    _InputIterator
    __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
    {
      for (; __len; --__len, ++__first)
 if (!__pred(__first))
   break;
      return __first;
    }
# 202 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __predicate)
    {

      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 =
     std::__find_if(__first1, __last1,
  __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));

   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(__current, __p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }






  template<typename _ForwardIterator, typename _Integer,
    typename _UnaryPredicate>
    _ForwardIterator
    __search_n_aux(_ForwardIterator __first, _ForwardIterator __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::forward_iterator_tag)
    {
      __first = std::__find_if(__first, __last, __unary_pred);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && __unary_pred(__i))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::__find_if(++__i, __last, __unary_pred);
 }
      return __last;
    }





  template<typename _RandomAccessIter, typename _Integer,
    typename _UnaryPredicate>
    _RandomAccessIter
    __search_n_aux(_RandomAccessIter __first, _RandomAccessIter __last,
     _Integer __count, _UnaryPredicate __unary_pred,
     std::random_access_iterator_tag)
    {
      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      _DistanceType __remainder = __count;

      while (__remainder <= __tailSize)
 {
   __first += __remainder;
   __tailSize -= __remainder;


   _RandomAccessIter __backTrack = __first;
   while (__unary_pred(--__backTrack))
     {
       if (--__remainder == 0)
         return (__first - __count);
     }
   __remainder = __count + 1 - (__first - __backTrack);
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _Integer,
           typename _UnaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count,
        _UnaryPredicate __unary_pred)
    {
      if (__count <= 0)
 return __first;

      if (__count == 1)
 return std::__find_if(__first, __last, __unary_pred);

      return std::__search_n_aux(__first, __last, __count, __unary_pred,
     std::__iterator_category(__first));
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;

      _ForwardIterator1 __result = __last1;
      while (1)
 {
   _ForwardIterator1 __new_result
     = std::__search(__first1, __last1, __first2, __last2, __comp);
   if (__new_result == __last1)
     return __result;
   else
     {
       __result = __new_result;
       __first1 = __new_result;
       ++__first1;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {






      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1,
           _RevIterator2(__last2), __rlast2,
           __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 423 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 471 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 506 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if_not(__first, __last, __pred); }
# 523 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return __last == std::find_if(__first, __last, __pred); }
# 541 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    { return !std::none_of(__first, __last, __pred); }
# 556 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if_not(_InputIterator __first, _InputIterator __last,
  _Predicate __pred)
    {




                                                     ;
      return std::__find_if_not(__first, __last,
    __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 580 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline bool
    is_partitioned(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {
      __first = std::find_if_not(__first, __last, __pred);
      return std::none_of(__first, __last, __pred);
    }
# 598 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    partition_point(_ForwardIterator __first, _ForwardIterator __last,
      _Predicate __pred)
    {






                                                     ;

      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__pred(*__middle))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }


  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    __remove_copy_if(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _Predicate __pred)
    {
      for (; __first != __last; ++__first)
 if (!__pred(__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 665 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {






                                                     ;

      return std::__remove_copy_if(__first, __last, __result,
 __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 697 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    inline _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      return std::__remove_copy_if(__first, __last, __result,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 731 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {






                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }

  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    _OutputIterator
    __copy_n(_InputIterator __first, _Size __n,
      _OutputIterator __result, input_iterator_tag)
    {
      if (__n > 0)
 {
   while (true)
     {
       *__result = *__first;
       ++__result;
       if (--__n > 0)
  ++__first;
       else
  break;
     }
 }
      return __result;
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _OutputIterator>
    inline _OutputIterator
    __copy_n(_RandomAccessIterator __first, _Size __n,
      _OutputIterator __result, random_access_iterator_tag)
    { return std::copy(__first, __first + __n, __result); }
# 794 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Size, typename _OutputIterator>
    inline _OutputIterator
    copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
    {





      return std::__copy_n(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 822 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator1,
    typename _OutputIterator2, typename _Predicate>
    pair<_OutputIterator1, _OutputIterator2>
    partition_copy(_InputIterator __first, _InputIterator __last,
     _OutputIterator1 __out_true, _OutputIterator2 __out_false,
     _Predicate __pred)
    {
# 837 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   {
     *__out_true = *__first;
     ++__out_true;
   }
 else
   {
     *__out_false = *__first;
     ++__out_false;
   }

      return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __remove_if(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred)
    {
      __first = std::__find_if(__first, __last, __pred);
      if (__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for (; __first != __last; ++__first)
        if (!__pred(__first))
          {
            *__result = std::move(*__first);
            ++__result;
          }
      return __result;
    }
# 891 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {





                                                     ;

      return std::__remove_if(__first, __last,
  __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 924 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__remove_if(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while (++__next != __last)
 {
   if (__binary_pred(__first, __next))
     return __first;
   __first = __next;
 }
      return __last;
    }

  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    __unique(_ForwardIterator __first, _ForwardIterator __last,
      _BinaryPredicate __binary_pred)
    {

      __first = std::__adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!__binary_pred(__dest, __first))
   *++__dest = std::move(*__first);
      return ++__dest;
    }
# 990 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {





                                                     ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1020 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {






                                                     ;

      return std::__unique(__first, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {





      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!__binary_pred(__first, __next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {





      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred))
 __rebound_pred
 = __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
      *__result = __value;
      while (++__first != __last)
 if (!__rebound_pred(__first, __value))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {




      *__result = *__first;
      while (++__first != __last)
 if (!__binary_pred(__result, __first))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1175 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {



                                                     ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1202 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {





                                                     ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }


  template<typename _ForwardIterator>
    void
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle || __last == __middle)
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
    }


  template<typename _BidirectionalIterator>
    void
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 std::__reverse(__middle, __last, bidirectional_iterator_tag());
      else
 std::__reverse(__first, __middle, bidirectional_iterator_tag());
    }


  template<typename _RandomAccessIterator>
    void
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {




      if (__first == __middle || __last == __middle)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return;
 }

      _RandomAccessIterator __p = __first;

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*__p);
    std::move(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = std::move(__t);
    return;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = std::move(*(__p + __n - 1));
    std::move_backward(__p, __p + __n - 1, __p + __n);
    *__p = std::move(__t);
    return;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
     }
 }
    }
# 1408 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline void
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {



                                                       ;
                                                      ;

      std::__rotate(__first, __middle, __last,
      std::__iterator_category(__first));
    }
# 1443 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    inline _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {




                                                       ;
                                                      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }






  template<typename _ForwardIterator, typename _Predicate, typename _Distance>
    _ForwardIterator
    __inplace_stable_partition(_ForwardIterator __first,
          _Predicate __pred, _Distance __len)
    {
      if (__len == 1)
 return __first;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __left_split =
 std::__inplace_stable_partition(__first, __pred, __len / 2);


      _Distance __right_len = __len - __len / 2;
      _ForwardIterator __right_split =
 std::__find_if_not_n(__middle, __right_len, __pred);
      if (__right_len)
 __right_split = std::__inplace_stable_partition(__middle,
       __pred,
       __right_len);
      std::rotate(__left_split, __middle, __right_split);
      std::advance(__left_split, std::distance(__middle, __right_split));
      return __left_split;
    }







  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;



   *__result2 = std::move(*__first);
   ++__result2;
   ++__first;
   for (; __first != __last; ++__first)
     if (__pred(__first))
       {
  *__result1 = std::move(*__first);
  ++__result1;
       }
     else
       {
  *__result2 = std::move(*__first);
  ++__result2;
       }
   std::move(__buffer, __result2, __result1);
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std::advance(__middle, __len / 2);
   _ForwardIterator __left_split =
     std::__stable_partition_adaptive(__first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size);


   _Distance __right_len = __len - __len / 2;
   _ForwardIterator __right_split =
     std::__find_if_not_n(__middle, __right_len, __pred);
   if (__right_len)
     __right_split =
       std::__stable_partition_adaptive(__right_split, __last, __pred,
            __right_len,
            __buffer, __buffer_size);
   std::rotate(__left_split, __middle, __right_split);
   std::advance(__left_split, std::distance(__middle, __right_split));
   return __left_split;
 }
    }

  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __stable_partition(_ForwardIterator __first, _ForwardIterator __last,
         _Predicate __pred)
    {
      __first = std::__find_if_not(__first, __last, __pred);

      if (__first == __last)
 return __first;

      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first, __last);
      if (__buf.size() > 0)
 return
   std::__stable_partition_adaptive(__first, __last, __pred,
        _DistanceType(__buf.requested_size()),
        __buf.begin(),
        _DistanceType(__buf.size()));
      else
 return
   std::__inplace_stable_partition(__first, __pred,
       _DistanceType(__buf.requested_size()));
    }
# 1650 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__stable_partition(__first, __last,
         __gnu_cxx::__ops::__pred_iter(__pred));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::__make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(__i, __first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }



  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    _RandomAccessIterator
    __partial_sort_copy(_InputIterator __first, _InputIterator __last,
   _RandomAccessIterator __result_first,
   _RandomAccessIterator __result_last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef iterator_traits<_RandomAccessIterator> _RItTraits;
      typedef typename _RItTraits::difference_type _DistanceType;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while (__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }

      std::__make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(__first, __result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first), __comp);
   ++__first;
 }
      std::__sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }
# 1736 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 1756 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
          __gnu_cxx::__ops::__iter_less_iter());
    }
# 1784 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator,
    typename _Compare>
    inline _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;
# 1809 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                     ;
                                                                   ;

      return std::__partial_sort_copy(__first, __last,
          __result_first, __result_last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = std::move(*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, __next))
 {
   *__last = std::move(*__next);
   __last = __next;
   --__next;
 }
      *__last = std::move(__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(__i, __first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = std::move(*__i);
       std::move_backward(__first, __i, __i + 1);
       *__first = std::move(__val);
     }
   else
     std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _RandomAccessIterator __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, __last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
      __comp);
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __partial_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __middle,
     _RandomAccessIterator __last,
     _Compare __comp)
    {
      std::__heap_select(__first, __middle, __last, __comp);
      std::__sort_heap(__first, __middle, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::__partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2,
    __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2020 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp));
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __upper_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, __middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2077 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




                                                                  ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2109 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

      return std::__upper_bound(__first, __last, __val,
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Tp,
    typename _CompareItTp, typename _CompareTpIt>
    pair<_ForwardIterator, _ForwardIterator>
    __equal_range(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val,
    _CompareItTp __comp_it_val, _CompareTpIt __comp_val_it)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp_it_val(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp_val_it(__val, __middle))
     __len = __half;
   else
     {
       _ForwardIterator __left
  = std::__lower_bound(__first, __middle, __val, __comp_it_val);
       std::advance(__first, __len);
       _ForwardIterator __right
  = std::__upper_bound(++__middle, __first, __val, __comp_val_it);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2183 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;





                                                                  ;
                                                                  ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val(),
    __gnu_cxx::__ops::__val_less_iter());
    }
# 2220 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    inline pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
# 2235 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                    ;

                    ;

      return std::__equal_range(__first, __last, __val,
    __gnu_cxx::__ops::__iter_comp_val(__comp),
    __gnu_cxx::__ops::__val_comp_iter(__comp));
    }
# 2256 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




                                                                  ;
                                                                  ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_less_val());
      return __i != __last && !(__val < *__i);
    }
# 2291 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;






                    ;

                    ;

      _ForwardIterator __i
 = std::__lower_bound(__first, __last, __val,
        __gnu_cxx::__ops::__iter_comp_val(__comp));
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::move(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::move_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(__last2, __last1))
     {
       *--__result = std::move(*__last1);
       if (__first1 == __last1)
  {
    std::move_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = std::move(*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::move(__middle, __last, __buffer);
       std::move_backward(__first, __middle, __last);
       return std::move(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::move(__first, __middle, __buffer);
       std::move(__middle, __last, __first);
       return std::move_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::move(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut
  = std::__lower_bound(__middle, __last, *__first_cut,
         __gnu_cxx::__ops::__iter_comp_val(__comp));
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut
  = std::__upper_bound(__first, __middle, *__second_cut,
         __gnu_cxx::__ops::__val_comp_iter(__comp));
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle
     = std::__rotate_adaptive(__first_cut, __middle, __second_cut,
         __len1 - __len11, __len22, __buffer,
         __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (__comp(__middle, __first))
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut
     = std::__lower_bound(__middle, __last, *__first_cut,
     __gnu_cxx::__ops::__iter_comp_val(__comp));
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut
     = std::__upper_bound(__first, __middle, *__second_cut,
     __gnu_cxx::__ops::__val_comp_iter(__comp));
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }

  template<typename _BidirectionalIterator, typename _Compare>
    void
    __inplace_merge(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__merge_without_buffer
   (__first, __middle, __last, __len1, __len2, __comp);
      else
 std::__merge_adaptive
   (__first, __middle, __last, __len1, __len2, __buf.begin(),
    _DistanceType(__buf.size()), __comp);
    }
# 2584 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {





                                                  ;
                                                 ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_less_iter());
    }
# 2624 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {






                                                               ;
                                                              ;

      std::__inplace_merge(__first, __middle, __last,
      __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }



  template<typename _InputIterator, typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator __first1, _InputIterator __last1,
   _InputIterator __first2, _InputIterator __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = std::move(*__first2);
       ++__first2;
     }
   else
     {
       *__result = std::move(*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::move(__first2, __last2, std::move(__first1, __last1, __result));


    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 2795 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    __includes(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first2, __first1))
   return false;
 else if (__comp(__first1, __first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 2831 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {
# 2845 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 2873 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    inline bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {
# 2889 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__includes(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 2906 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __next_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__i, __ii))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(__i, --__j))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 2955 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 2986 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      return std::__next_permutation
 (__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _BidirectionalIterator, typename _Compare>
    bool
    __prev_permutation(_BidirectionalIterator __first,
         _BidirectionalIterator __last, _Compare __comp)
    {
      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(__ii, __i))
     {
       _BidirectionalIterator __j = __last;
       while (!__comp(--__j, __i))
  {}
       std::iter_swap(__i, __j);
       std::__reverse(__ii, __last,
        std::__iterator_category(__first));
       return true;
     }
   if (__i == __first)
     {
       std::__reverse(__first, __last,
        std::__iterator_category(__first));
       return false;
     }
 }
    }
# 3053 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {





                                                     ;

      return std::__prev_permutation(__first, __last,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 3084 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    inline bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {






                                                     ;

      return std::__prev_permutation(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }




  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    __replace_copy_if(_InputIterator __first, _InputIterator __last,
        _OutputIterator __result,
        _Predicate __pred, const _Tp& __new_value)
    {
      for (; __first != __last; ++__first, ++__result)
 if (__pred(__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3133 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    inline _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {






                                                     ;

      return std::__replace_copy_if(__first, __last, __result,
   __gnu_cxx::__ops::__iter_equals_val(__old_value),
           __new_value);
    }
# 3167 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    inline _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {






                                                     ;

      return std::__replace_copy_if(__first, __last, __result,
    __gnu_cxx::__ops::__pred_iter(__pred),
           __new_value);
    }

  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(__first))
   ++__n;
      return __n;
    }
# 3206 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last)
    { return std::is_sorted_until(__first, __last) == __last; }
# 3220 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline bool
    is_sorted(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    { return std::is_sorted_until(__first, __last, __comp) == __last; }

  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
        _Compare __comp)
    {
      if (__first == __last)
 return __last;

      _ForwardIterator __next = __first;
      for (++__next; __next != __last; __first = __next, ++__next)
 if (__comp(__next, __first))
   return __next;
      return __next;
    }
# 3249 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 3272 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline _ForwardIterator
    is_sorted_until(_ForwardIterator __first, _ForwardIterator __last,
      _Compare __comp)
    {





                                                     ;

      return std::__is_sorted_until(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 3296 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _Tp>
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b)
    {



      return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a)
                : pair<const _Tp&, const _Tp&>(__a, __b);
    }
# 3316 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    inline pair<const _Tp&, const _Tp&>
    minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {
      return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a)
                       : pair<const _Tp&, const _Tp&>(__a, __b);
    }

  template<typename _ForwardIterator, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    __minmax_element(_ForwardIterator __first, _ForwardIterator __last,
       _Compare __comp)
    {
      _ForwardIterator __next = __first;
      if (__first == __last
   || ++__next == __last)
 return std::make_pair(__first, __first);

      _ForwardIterator __min, __max;
      if (__comp(__next, __first))
 {
   __min = __next;
   __max = __first;
 }
      else
 {
   __min = __first;
   __max = __next;
 }

      __first = __next;
      ++__first;

      while (__first != __last)
 {
   __next = __first;
   if (++__next == __last)
     {
       if (__comp(__first, __min))
  __min = __first;
       else if (!__comp(__first, __max))
  __max = __first;
       break;
     }

   if (__comp(__next, __first))
     {
       if (__comp(__next, __min))
  __min = __next;
       if (!__comp(__first, __max))
  __max = __first;
     }
   else
     {
       if (__comp(__first, __min))
  __min = __first;
       if (!__comp(__next, __max))
  __max = __next;
     }

   __first = __next;
   ++__first;
 }

      return std::make_pair(__min, __max);
    }
# 3394 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 3420 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline pair<_ForwardIterator, _ForwardIterator>
    minmax_element(_ForwardIterator __first, _ForwardIterator __last,
     _Compare __comp)
    {





                                                     ;

      return std::__minmax_element(__first, __last,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


  template<typename _Tp>
    inline _Tp
    min(initializer_list<_Tp> __l)
    { return *std::min_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    inline _Tp
    min(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::min_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    inline _Tp
    max(initializer_list<_Tp> __l)
    { return *std::max_element(__l.begin(), __l.end()); }

  template<typename _Tp, typename _Compare>
    inline _Tp
    max(initializer_list<_Tp> __l, _Compare __comp)
    { return *std::max_element(__l.begin(), __l.end(), __comp); }

  template<typename _Tp>
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end());
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _Tp, typename _Compare>
    inline pair<_Tp, _Tp>
    minmax(initializer_list<_Tp> __l, _Compare __comp)
    {
      pair<const _Tp*, const _Tp*> __p =
 std::minmax_element(__l.begin(), __l.end(), __comp);
      return std::make_pair(*__p.first, *__p.second);
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
     __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches
     = std::__count_if(__first2, __last2,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches ||
       std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 3524 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {






                                                       ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3555 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {






                                                       ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _ForwardIterator2 __last2,
       _BinaryPredicate __pred)
    {
      using _Cat1
 = typename iterator_traits<_ForwardIterator1>::iterator_category;
      using _Cat2
 = typename iterator_traits<_ForwardIterator2>::iterator_category;
      using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;
      using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;
      constexpr bool __ra_iters = _It1_is_RA() && _It2_is_RA();
      if (__ra_iters)
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
 }



      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, ++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__ra_iters)
 {
   if (__first1 == __last1)
     return true;
 }
      else
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 == 0 && __d2 == 0)
     return true;
   if (__d1 != __d2)
     return false;
 }

      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches = std::__count_if(__first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches
       || std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 3648 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {
                                                       ;
                                                       ;

      return
 std::__is_permutation(__first1, __last1, __first2, __last2,
         __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3675 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2, _ForwardIterator2 __last2,
     _BinaryPredicate __pred)
    {
                                                       ;
                                                       ;

      return std::__is_permutation(__first1, __last1, __first2, __last2,
       __gnu_cxx::__ops::__iter_comp_iter(__pred));
    }
# 3703 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator,
    typename _UniformRandomNumberGenerator>
    void
    shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _UniformRandomNumberGenerator&& __g)
    {



                                                     ;

      if (__first == __last)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
      typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
      typedef typename __distr_type::param_type __p_type;
      __distr_type __d;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
    }
# 3748 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {


                                                     ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return std::move(__f);
    }
# 3769 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {




                                                     ;
      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 3793 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {




                                                     ;

      return std::__find_if(__first, __last,
       __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 3824 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 3864 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {






                                                       ;
                                                       ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 3896 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__adjacent_find(__first, __last,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 3921 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    inline _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {





                                                     ;

      return std::__adjacent_find(__first, __last,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 3946 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {




                                                     ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__iter_equals_val(__value));
    }
# 3969 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {




                                                     ;

      return std::__count_if(__first, __last,
        __gnu_cxx::__ops::__pred_iter(__pred));
    }
# 4009 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {






                                                       ;
                                                       ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 4048 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {






                                                       ;
                                                       ;

      return std::__search(__first1, __last1, __first2, __last2,
      __gnu_cxx::__ops::__iter_comp_iter(__predicate));
    }
# 4083 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {




                                                     ;

      return std::__search_n(__first, __last, __count,
        __gnu_cxx::__ops::__iter_equals_val(__val));
    }
# 4116 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    inline _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {




                                                     ;

      return std::__search_n(__first, __last, __count,
  __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val));
    }
# 4150 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {





                                                     ;

      for (; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4187 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {






                                                       ;

      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4220 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4252 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {







                                                     ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 4284 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {




                                                     ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 4315 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {





      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __gen();
      return __first;
    }
# 4351 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {






                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    __gnu_cxx::__ops::__iter_equal_to_iter(),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4391 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {




                                                     ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
   __gnu_cxx::__ops::__iter_comp_iter(__binary_pred),
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4423 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {



                                                     ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   {
     _RandomAccessIterator __j = __first
     + std::rand() % ((__i - __first) + 1);
     if (__i != __j)
       std::iter_swap(__i, __j);
   }
    }
# 4456 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,

     _RandomNumberGenerator&& __rand)



    {



                                                     ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   _RandomAccessIterator __j = __first + __rand((__i - __first) + 1);
   if (__i != __j)
     std::iter_swap(__i, __j);
 }
    }
# 4496 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {





                                                     ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 4529 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {





                                                       ;
                                                      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 4566 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {






                                                       ;
                                                      ;

      std::__partial_sort(__first, __middle, __last,
     __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4601 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {





                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 4639 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {






                                                    ;
                                                   ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 4675 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
    }
# 4704 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {






                                                     ;

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    __merge(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 4764 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
# 4781 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__merge(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 4812 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
# 4829 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__merge(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;
      _TmpBuf __buf(__first, __last);

      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 4874 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {





                                                     ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_less_iter());
    }
# 4907 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {






                                                     ;

      std::__stable_sort(__first, __last,
        __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_union(_InputIterator1 __first1, _InputIterator1 __last1,
  _InputIterator2 __first2, _InputIterator2 __last2,
  _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(__first1, __first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(__first2, __first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 4974 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
# 4994 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5021 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
# 5041 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__set_union(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
         _InputIterator2 __first2, _InputIterator2 __last2,
         _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   ++__first1;
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5089 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
# 5107 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__set_intersection(__first1, __last1,
         __first2, __last2, __result,
         __gnu_cxx::__ops::__iter_less_iter());
    }
# 5135 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
# 5153 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__set_intersection(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5205 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
# 5223 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_less_iter());
    }
# 5253 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
# 5271 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__set_difference(__first1, __last1,
       __first2, __last2, __result,
       __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator,
    typename _Compare>
    _OutputIterator
    __set_symmetric_difference(_InputIterator1 __first1,
          _InputIterator1 __last1,
          _InputIterator2 __first2,
          _InputIterator2 __last2,
          _OutputIterator __result,
          _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(__first1, __first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(__first2, __first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5329 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {
# 5349 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                                ;
                                                                ;

      return std::__set_symmetric_difference(__first1, __last1,
     __first2, __last2, __result,
     __gnu_cxx::__ops::__iter_less_iter());
    }
# 5377 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    inline _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {
# 5398 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
                                                                             ;
                                                                             ;

      return std::__set_symmetric_difference(__first1, __last1,
    __first2, __last2, __result,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    __min_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__first, __result))
   __result = __first;
      return __result;
    }
# 5427 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    inline min_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5450 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      return std::__min_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    __max_element(_ForwardIterator __first, _ForwardIterator __last,
    _Compare __comp)
    {
      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(__result, __first))
   __result = __first;
      return __result;
    }
# 5486 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {




                                                     ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_less_iter());
    }
# 5509 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    inline _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {





                                                     ;

      return std::__max_element(__first, __last,
    __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }


}
# 63 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/algorithm" 2 3
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/scan.hpp" 2
# 33 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/scan.hpp"
namespace RAJA
{
namespace impl
{
namespace scan
{




template <typename ExecPolicy, typename Iter, typename BinFn>
concepts::enable_if<type_traits::is_sequential_policy<ExecPolicy>>
inclusive_inplace(const ExecPolicy &, Iter begin, Iter end, BinFn f)
{
  using ValueT = typename std::remove_reference<decltype(*begin)>::type;
  ValueT agg = *begin;

#pragma clang loop vectorize(disable)
 for (Iter i = ++begin; i != end; ++i) {
    agg = f(agg, *i);
    *i = agg;
  }
}





template <typename ExecPolicy, typename Iter, typename BinFn, typename T>
concepts::enable_if<type_traits::is_sequential_policy<ExecPolicy>>
exclusive_inplace(const ExecPolicy &, Iter begin, Iter end, BinFn f, T v)
{
  using std::distance;
  const auto n = distance(begin, end);
  using DistanceT = typename std::remove_const<decltype(n)>::type;

  using ValueT = typename std::remove_reference<decltype(*begin)>::type;
  ValueT agg = v;

#pragma clang loop vectorize(disable)
 for (DistanceT i = 0; i < n; ++i) {
    auto t = begin[i];
    begin[i] = agg;
    agg = f(agg, t);
  }
}





template <typename ExecPolicy, typename Iter, typename OutIter, typename BinFn>
concepts::enable_if<type_traits::is_sequential_policy<ExecPolicy>> inclusive(
    const ExecPolicy &,
    const Iter begin,
    const Iter end,
    OutIter out,
    BinFn f)
{
  using ValueT = typename std::remove_reference<decltype(*out)>::type;
  ValueT agg = *begin;

  *out++ = agg;

#pragma clang loop vectorize(disable)
 for (Iter i = begin + 1; i != end; ++i) {
    agg = f(agg, *i);
    *out++ = agg;
  }
}





template <typename ExecPolicy,
          typename Iter,
          typename OutIter,
          typename BinFn,
          typename T>
concepts::enable_if<type_traits::is_sequential_policy<ExecPolicy>> exclusive(
    const ExecPolicy &,
    const Iter begin,
    const Iter end,
    OutIter out,
    BinFn f,
    T v)
{
  using ValueT = typename std::remove_const<decltype(*begin)>::type;
  ValueT agg = v;
  OutIter o = out;
  *o++ = v;

#pragma clang loop vectorize(disable)
 for (Iter i = begin; i != end - 1; ++i, ++o) {
    agg = f(agg, *i);
    *o = agg;
  }
}

}

}

}
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/sort.hpp" 1
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/sort.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/sort.hpp" 1
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/sort.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/zip.hpp" 1
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/zip.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/algorithm.hpp" 1
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/detail/algorithm.hpp"
namespace RAJA
{

namespace detail
{

template <typename Iter>
using IterVal = typename ::std::iterator_traits<Iter>::value_type;

template <typename Iter>
using IterRef = typename ::std::iterator_traits<Iter>::reference;

template <typename Iter>
using IterDiff = typename ::std::iterator_traits<Iter>::difference_type;

template <typename Container>
using ContainerVal =
    camp::decay<decltype(*camp::val<camp::iterator_from<Container>>())>;

template <typename DiffType, typename CountType>
inline __attribute__((always_inline))
DiffType firstIndex(DiffType n, CountType num_threads, CountType thread_id)
{
  return (static_cast<size_t>(n) * thread_id) / num_threads;
}

}





template <typename Iter>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
void
safe_iter_swap(Iter lhs, Iter rhs)
{

  using camp::safe_swap;
  safe_swap(*lhs, *rhs);




}




template <typename Iter>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
Iter
next(Iter it)
{
  ++it;
  return it;
}




template <typename Iter>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
Iter
prev(Iter it)
{
  --it;
  return it;
}

}
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/zip.hpp" 2


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/zip_tuple.hpp" 1
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/zip_tuple.hpp"
namespace RAJA
{

template < bool is_val, typename ... Ts >
struct zip_tuple;

template < camp::idx_t I, bool is_val, typename ... Ts >
struct tuple_element<I, zip_tuple<is_val, Ts...>>
  : camp::tuple_element<I, typename zip_tuple<is_val, Ts...>::value_type>
{ };




template < camp::idx_t I, bool is_val, typename ... Ts >
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) RAJA::tuple_element_t<I, zip_tuple<is_val, Ts...>> &
get(zip_tuple<is_val, Ts...> & z)
{ return z .template get<I>(); }
template < camp::idx_t I, bool is_val, typename ... Ts >
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) RAJA::tuple_element_t<I, zip_tuple<is_val, Ts...>> const&
get(zip_tuple<is_val, Ts...> const& z)
{ return z .template get<I>(); }
template < camp::idx_t I, bool is_val, typename ... Ts >
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) typename std::remove_reference<RAJA::tuple_element_t<I, zip_tuple<is_val, Ts...>>>::type &&
get(zip_tuple<is_val, Ts...> && z)
{ return std::move(z).template get<I>(); }

namespace detail
{

struct PassThrough
{
  template < typename T >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) auto operator()(T&& t) const
    -> decltype(std::forward<T>(t))
  {
    return std::forward<T>(t);
  }
};

struct Move
{
  template < typename T >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) auto operator()(T&& t) const
    -> decltype(std::move(t))
  {
    return std::move(t);
  }
};

struct PreInc
{
  template< typename Iter >
  __attribute__((host)) __attribute__((device)) inline auto operator()(Iter&& iter) const
    -> decltype(++std::forward<Iter>(iter))
  {
    return ++std::forward<Iter>(iter);
  }
};

struct PreDec
{
  template< typename Iter >
  __attribute__((host)) __attribute__((device)) inline auto operator()(Iter&& iter) const
    -> decltype(--std::forward<Iter>(iter))
  {
    return --std::forward<Iter>(iter);
  }
};

template < typename difference_type >
struct PlusEq
{
  const difference_type& rhs;
  template< typename Iter >
  __attribute__((host)) __attribute__((device)) inline auto operator()(Iter&& iter) const
    -> decltype(std::forward<Iter>(iter) += rhs)
  {
    return std::forward<Iter>(iter) += rhs;
  }
};

template < typename difference_type >
struct MinusEq
{
  const difference_type& rhs;
  template< typename Iter >
  __attribute__((host)) __attribute__((device)) inline auto operator()(Iter&& iter) const
    -> decltype(std::forward<Iter>(iter) -= rhs)
  {
    return std::forward<Iter>(iter) -= rhs;
  }
};

struct DeRef
{
  template< typename Iter >
  __attribute__((host)) __attribute__((device)) inline auto operator()(Iter&& iter) const
    -> decltype(*std::forward<Iter>(iter))
  {
    return *std::forward<Iter>(iter);
  }
};

struct Swap
{
  template< typename T0, typename T1 >
  __attribute__((host)) __attribute__((device)) inline int operator()(T0&& t0, T1&& t1) const
  {
    using camp::safe_swap;
    safe_swap(std::forward<T0>(t0), std::forward<T1>(t1));
    return 1;
  }
};

struct IterSwap
{
  template< typename T0, typename T1 >
  __attribute__((host)) __attribute__((device)) inline int operator()(T0&& t0, T1&& t1) const
  {
    using RAJA::safe_iter_swap;
    safe_iter_swap(std::forward<T0>(t0), std::forward<T1>(t1));
    return 1;
  }
};





template < typename Tuple, typename F, camp::idx_t... Is >
__attribute__((host)) __attribute__((device)) inline
void zip_for_each_impl(Tuple&& t, F&& f, camp::idx_seq<Is...>)
{
  camp::sink(std::forward<F>(f)(RAJA::get<Is>(std::forward<Tuple>(t)))...);
}




template < typename Tuple0, typename Tuple1, typename F, camp::idx_t... Is >
__attribute__((host)) __attribute__((device)) inline
void zip_for_each_impl(Tuple0&& t0, Tuple1&& t1, F&& f, camp::idx_seq<Is...>)
{
  camp::sink(std::forward<F>(f)(RAJA::get<Is>(std::forward<Tuple0>(t0)), RAJA::get<Is>(std::forward<Tuple1>(t1)))...);
}




template < typename Tuple, typename F >
__attribute__((host)) __attribute__((device)) inline
void zip_for_each(Tuple&& t, F&& f)
{
  zip_for_each_impl(std::forward<Tuple>(t), std::forward<F>(f), typename camp::decay<Tuple>::IdxSeq{});
}




template < typename Tuple0, typename Tuple1, typename F >
__attribute__((host)) __attribute__((device)) inline
void zip_for_each(Tuple0&& t0, Tuple1&& t1, F&& f)
{
  static_assert(std::is_same<typename camp::decay<Tuple0>::IdxSeq, typename camp::decay<Tuple1>::IdxSeq>::value,
      "Tuple0 and Tuple1 must have the same size");
  zip_for_each_impl(std::forward<Tuple0>(t0), std::forward<Tuple1>(t1), std::forward<F>(f), typename camp::decay<Tuple0>::IdxSeq{});
}

}






template < bool is_val, typename ... Ts >
struct zip_tuple
{
  using value_type = RAJA::tuple<Ts...>;

  template < typename T >
  using opp_type = typename std::conditional< is_val,
        typename std::add_lvalue_reference<T>::type,
        typename std::remove_reference<T>::type >::type;


  using opp_tuple = zip_tuple<!is_val, opp_type<Ts>...>;


  using IdxSeq = camp::make_idx_seq_t<sizeof...(Ts)>;


  template < typename ... Os
           , typename = concepts::enable_if<type_traits::convertible_to<Os&&, Ts>...> >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple(Os&&... os)
    : m_tuple(std::forward<Os>(os)...) { }


  template < typename ... Os
           , typename = concepts::enable_if<type_traits::convertible_to<Os&&, typename std::remove_reference<Ts>::type>...> >
  zip_tuple& assign(Os&&... os)
  { return assign_helper(IdxSeq{}, std::forward<Os>(os)...); }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple(zip_tuple & o)
    : zip_tuple( o , IdxSeq{}) { }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple(zip_tuple const& o)
    : zip_tuple( o , IdxSeq{}) { }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple(zip_tuple && o)
    : zip_tuple(std::move(o), IdxSeq{}) { }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple& operator=(zip_tuple & o)
  { return assign_helper( o , IdxSeq{}); }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple& operator=(zip_tuple const& o)
  { return assign_helper( o , IdxSeq{}); }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple& operator=(zip_tuple && o)
  { return assign_helper(std::move(o), IdxSeq{}); }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple(opp_tuple & o)
    : zip_tuple( o , IdxSeq{}) { }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple(opp_tuple const& o)
    : zip_tuple( o , IdxSeq{}) { }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple(opp_tuple && o)
    : zip_tuple(std::move(o), IdxSeq{}) { }


  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple& operator=(opp_tuple & o)
  { return assign_helper( o , IdxSeq{}); }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple& operator=(opp_tuple const& o)
  { return assign_helper( o , IdxSeq{}); }
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple& operator=(opp_tuple && o)
  { return assign_helper(std::move(o), IdxSeq{}); }




  template < camp::idx_t I >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) RAJA::tuple_element_t<I, value_type> & get() &
  { return RAJA::get<I>(m_tuple); }
  template < camp::idx_t I >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) RAJA::tuple_element_t<I, value_type> const& get() const&
  { return RAJA::get<I>(m_tuple); }
  template < camp::idx_t I >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) typename std::remove_reference<RAJA::tuple_element_t<I, value_type>>::type && get() &&
  { return std::move(RAJA::get<I>(m_tuple)); }


  __attribute__((host)) __attribute__((device)) friend inline __attribute__((always_inline)) void safe_swap(zip_tuple& lhs, zip_tuple& rhs)
  {
    detail::zip_for_each(lhs, rhs, detail::Swap{});
  }



  __attribute__((host)) __attribute__((device)) friend inline __attribute__((always_inline)) void safe_swap(zip_tuple& lhs, opp_tuple& rhs)
  {
    detail::zip_for_each(lhs, rhs, detail::Swap{});
  }


  friend inline std::ostream& operator<<(std::ostream& o, zip_tuple const& v)
  {
    return o << v.m_tuple;
  }

private:


  using IsValMover = typename std::conditional<is_val, detail::Move, detail::PassThrough>::type;

  value_type m_tuple;


  template < typename ... Os, camp::idx_t ... Is >
  zip_tuple& assign_helper(camp::idx_seq<Is...>, Os&&... os)
  { camp::sink(get<Is>() = std::forward<Os>(os)...); return *this; }


  template < camp::idx_t ... Is >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple(zip_tuple & o, camp::idx_seq<Is...>)
    : zip_tuple(RAJA::get<Is>( o )...) { }
  template < camp::idx_t ... Is >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple(zip_tuple const& o, camp::idx_seq<Is...>)
    : zip_tuple(RAJA::get<Is>( o )...) { }
  template < camp::idx_t ... Is >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple(zip_tuple && o, camp::idx_seq<Is...>)
    : zip_tuple(RAJA::get<Is>(IsValMover{}(o))...) { }


  template < camp::idx_t ... Is >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple& assign_helper(zip_tuple & o, camp::idx_seq<Is...>)
  { if (this != &o) { camp::sink(get<Is>() = RAJA::get<Is>( o )...); } return *this; }
  template < camp::idx_t ... Is >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple& assign_helper(zip_tuple const& o, camp::idx_seq<Is...>)
  { if (this != &o) { camp::sink(get<Is>() = RAJA::get<Is>( o )...); } return *this; }
  template < camp::idx_t ... Is >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple& assign_helper(zip_tuple && o, camp::idx_seq<Is...>)
  { if (this != &o) { camp::sink(get<Is>() = RAJA::get<Is>(std::move(o))...); } return *this; }


  template < camp::idx_t ... Is >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple(opp_tuple & o, camp::idx_seq<Is...>)
    : zip_tuple(RAJA::get<Is>( o )...) { }
  template < camp::idx_t ... Is >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple(opp_tuple const& o, camp::idx_seq<Is...>)
    : zip_tuple(RAJA::get<Is>( o )...) { }
  template < camp::idx_t ... Is >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple(opp_tuple && o, camp::idx_seq<Is...>)
    : zip_tuple(RAJA::get<Is>(IsValMover{}(o))...) { }


  template < camp::idx_t ... Is >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple& assign_helper(opp_tuple & o, camp::idx_seq<Is...>)
  { camp::sink(get<Is>() = RAJA::get<Is>( o )...); return *this; }
  template < camp::idx_t ... Is >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple& assign_helper(opp_tuple const& o, camp::idx_seq<Is...>)
  { camp::sink(get<Is>() = RAJA::get<Is>( o )...); return *this; }
  template < camp::idx_t ... Is >
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) zip_tuple& assign_helper(opp_tuple && o, camp::idx_seq<Is...>)
  { camp::sink(get<Is>() = RAJA::get<Is>(std::move(o))...); return *this; }

};


template < typename ... Ts >
using zip_ref = zip_tuple<false, Ts...>;


template < typename ... Ts >
using zip_val = zip_tuple<true, Ts...>;

}
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/zip.hpp" 2

namespace RAJA
{





template < typename ... Iters >
struct ZipIterator
{
  static_assert(concepts::all_of<type_traits::is_random_access_iterator<Iters>...>::value,
      "ZipIterator can only contain random access iterators");
  static_assert(sizeof...(Iters) > 1,
      "ZipIterator must contain one or more iterators");

  using value_type = zip_val<typename std::iterator_traits<Iters>::value_type...>;
  using difference_type = std::ptrdiff_t;
  using pointer = void;
  using reference = zip_ref<typename std::iterator_traits<Iters>::reference...>;
  using creference = zip_ref<const typename std::iterator_traits<Iters>::reference...>;
  using iterator_category = std::random_access_iterator_tag;

  __attribute__((host)) __attribute__((device)) inline ZipIterator()
    : m_iterators()
  {
  }

  template < typename... Args,
             typename = concepts::enable_if<type_traits::convertible_to<Args&&, Iters>...> >
  __attribute__((host)) __attribute__((device)) inline ZipIterator(Args&&... args)
    : m_iterators(std::forward<Args>(args)...)
  {
  }

  __attribute__((host)) __attribute__((device)) inline ZipIterator(const ZipIterator& rhs)
    : m_iterators(rhs.m_iterators)
  {
  }
  __attribute__((host)) __attribute__((device)) inline ZipIterator(ZipIterator&& rhs)
    : m_iterators(std::move(rhs.m_iterators))
  {
  }

  __attribute__((host)) __attribute__((device)) inline ZipIterator& operator=(const ZipIterator& rhs)
  {
    m_iterators = rhs.m_iterators;
    return *this;
  }
  __attribute__((host)) __attribute__((device)) inline ZipIterator& operator=(ZipIterator&& rhs)
  {
    m_iterators = std::move(rhs.m_iterators);
    return *this;
  }


  __attribute__((host)) __attribute__((device)) inline difference_type get_stride() const { return 1; }

  __attribute__((host)) __attribute__((device)) inline bool operator==(const ZipIterator& rhs) const
  {
    return RAJA::get<0>(m_iterators) == RAJA::get<0>(rhs.m_iterators);
  }
  __attribute__((host)) __attribute__((device)) inline bool operator!=(const ZipIterator& rhs) const
  {
    return RAJA::get<0>(m_iterators) != RAJA::get<0>(rhs.m_iterators);
  }
  __attribute__((host)) __attribute__((device)) inline bool operator>(const ZipIterator& rhs) const
  {
    return RAJA::get<0>(m_iterators) > RAJA::get<0>(rhs.m_iterators);
  }
  __attribute__((host)) __attribute__((device)) inline bool operator<(const ZipIterator& rhs) const
  {
    return RAJA::get<0>(m_iterators) < RAJA::get<0>(rhs.m_iterators);
  }
  __attribute__((host)) __attribute__((device)) inline bool operator>=(const ZipIterator& rhs) const
  {
    return RAJA::get<0>(m_iterators) >= RAJA::get<0>(rhs.m_iterators);
  }
  __attribute__((host)) __attribute__((device)) inline bool operator<=(const ZipIterator& rhs) const
  {
    return RAJA::get<0>(m_iterators) <= RAJA::get<0>(rhs.m_iterators);
  }

  __attribute__((host)) __attribute__((device)) inline ZipIterator& operator++()
  {
    detail::zip_for_each(m_iterators, detail::PreInc{});
    return *this;
  }
  __attribute__((host)) __attribute__((device)) inline ZipIterator& operator--()
  {
    detail::zip_for_each(m_iterators, detail::PreDec{});
    return *this;
  }
  __attribute__((host)) __attribute__((device)) inline ZipIterator operator++(int)
  {
    ZipIterator tmp(*this);
    ++(*this);
    return tmp;
  }
  __attribute__((host)) __attribute__((device)) inline ZipIterator operator--(int)
  {
    ZipIterator tmp(*this);
    --(*this);
    return tmp;
  }

  __attribute__((host)) __attribute__((device)) inline ZipIterator& operator+=(
      const difference_type& rhs)
  {
    detail::zip_for_each(m_iterators, detail::PlusEq<difference_type>{rhs});
    return *this;
  }
  __attribute__((host)) __attribute__((device)) inline ZipIterator& operator-=(
      const difference_type& rhs)
  {
    detail::zip_for_each(m_iterators, detail::MinusEq<difference_type>{rhs});
    return *this;
  }

  __attribute__((host)) __attribute__((device)) inline difference_type operator-(
      const ZipIterator& rhs) const
  {
    return RAJA::get<0>(m_iterators) - RAJA::get<0>(rhs.m_iterators);
  }
  __attribute__((host)) __attribute__((device)) inline ZipIterator operator+(
      const difference_type& rhs) const
  {
    ZipIterator tmp(*this);
    tmp += rhs;
    return tmp;
  }
  __attribute__((host)) __attribute__((device)) inline ZipIterator operator-(
      const difference_type& rhs) const
  {
    ZipIterator tmp(*this);
    tmp -= rhs;
    return tmp;
  }
  __attribute__((host)) __attribute__((device)) friend ZipIterator operator+(
      difference_type lhs,
      const ZipIterator& rhs)
  {
    ZipIterator tmp(rhs);
    tmp += lhs;
    return tmp;
  }

  __attribute__((host)) __attribute__((device)) inline reference operator*() const
  {
    return deref_helper(camp::make_idx_seq_t<sizeof...(Iters)>{});
  }





  __attribute__((host)) __attribute__((device)) reference operator[](difference_type rhs) const
  {
    return *((*this) + rhs);
  }

  __attribute__((host)) __attribute__((device)) friend inline void safe_iter_swap(ZipIterator lhs, ZipIterator rhs)
  {
    detail::zip_for_each(lhs.m_iterators, rhs.m_iterators, detail::IterSwap{});
  }

private:
  zip_val<camp::decay<Iters>...> m_iterators;

  template < camp::idx_t ... Is >
  __attribute__((host)) __attribute__((device)) inline reference deref_helper(camp::idx_seq<Is...>) const
  {
    return reference(*RAJA::get<Is>(m_iterators)...);
  }
};






template < typename... Args >
__attribute__((host)) __attribute__((device))
auto zip(Args&&... args)
  -> ZipIterator<camp::decay<Args>...>
{
  return {std::forward<Args>(args)...};
}





template < typename T, typename Compare >
struct CompareFirst
{
  __attribute__((host)) __attribute__((device)) inline CompareFirst(Compare comp_)
    : comp(comp_)
  { }

  __attribute__((host)) __attribute__((device)) inline bool operator()(T const& lhs, T const& rhs)
  {
    return comp(RAJA::get<0>(lhs), RAJA::get<0>(rhs));
  }

private:
  Compare comp;
};





template < typename T, typename Compare >
__attribute__((host)) __attribute__((device))
auto compare_first(Compare comp)
  -> CompareFirst<T, Compare>
{
  return {comp};
}

}
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/sort.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/sort.hpp" 1
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/sort.hpp"
namespace RAJA
{

namespace detail
{




__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
unsigned
ulog2(size_t N)
{
  unsigned val = 0;

  while (N > 1) {
    val += 1;
    N >>= 1;
  }

  return val;
}





template <typename Iter, typename Predicate>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
Iter
partition(Iter begin,
          Iter end,
          Predicate pred)
{
  using ::RAJA::safe_iter_swap;

  if (begin == end) {
    return begin;
  }


  Iter first_false = begin;
  for (; first_false != end; ++first_false) {

    if (!pred(first_false)) {
      break;
    }
  }


  if (first_false == end) {
    return first_false;
  }


  for (Iter next_true = RAJA::next(first_false); next_true != end; ++next_true) {


    if (pred(next_true)) {



      safe_iter_swap(first_false, next_true);
      ++first_false;
    }
  }

  return first_false;
}





template <typename Iter, typename Compare>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
void
insertion_sort(Iter begin,
               Iter end,
               Compare comp)
{
  using ::RAJA::safe_iter_swap;

  if (begin == end) {
    return;
  }


  for (Iter next_unsorted = RAJA::next(begin); next_unsorted != end; ++next_unsorted) {


    for (Iter to_insert = next_unsorted; to_insert != begin; --to_insert) {

      Iter next_sorted = RAJA::prev(to_insert);


      if (comp(*to_insert, *next_sorted)) {


        safe_iter_swap(next_sorted, to_insert);

      } else {


        break;
      }
    }
  }
}




__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
constexpr size_t num_shell_strides()
{
  return 39;
}




__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
constexpr long long unsigned get_shell_stride(int i)
{
  using array_type = long long unsigned[num_shell_strides()];
  return (array_type{

      1llu, 4llu, 10llu, 23llu, 57llu, 132llu, 301llu, 701llu, 1750llu,

      3937llu, 8858llu, 19930llu, 44842llu, 100894llu, 227011llu, 510774llu,
      1149241llu, 2585792llu, 5818032llu, 13090572llu, 29453787llu, 66271020llu,
      149109795llu, 335497038llu, 754868335llu, 1698453753llu, 3821520944llu,
      8598422124llu, 19346449779llu, 43529512002llu, 97941402004llu,
      220368154509llu, 495828347645llu, 1115613782201llu, 2510131009952llu,
      5647794772392llu, 12707538237882llu, 28591961035234llu, 64331912329276llu
    })[i];
}





template <typename Iter, typename Compare>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
void
shell_sort(Iter begin,
           Iter end,
           Compare comp)
{
  using ::RAJA::safe_iter_swap;
  using diff_type = ::RAJA::detail::IterDiff<Iter>;

  diff_type n = end - begin;

  if (n <= static_cast<diff_type>(1)) {
    return;
  } else if (get_shell_stride(1) < static_cast<unsigned long long>(n)) {

    int i_stride = 2;

    constexpr int num_strides = num_shell_strides();
    for (; i_stride < num_strides; ++i_stride) {
      if (get_shell_stride(i_stride) >= static_cast<unsigned long long>(n)) {
        break;
      }
    }

    i_stride -= 1;



    for (; i_stride > 0; --i_stride) {
      diff_type stride = static_cast<diff_type>(get_shell_stride(i_stride));


      for (diff_type i_next_unsorted = stride; i_next_unsorted != n; ++i_next_unsorted) {


        for (diff_type i_to_insert = i_next_unsorted; i_to_insert >= stride; i_to_insert -= stride) {

          Iter to_insert = begin + i_to_insert;
          Iter next_sorted = to_insert - stride;


          if (comp(*to_insert, *next_sorted)) {


            safe_iter_swap(next_sorted, to_insert);

          } else {


            break;
          }
        }
      }
    }
  }


  RAJA::detail::insertion_sort(begin, end, comp);
}






template <typename Iter, typename Compare>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
void
heapify(Iter begin,
        Iter root,
        Iter end,
        Compare comp)
{
  using RAJA::safe_iter_swap;

  auto N = end - begin;



  for (auto i = root - begin; 2*i+1 < N; i = root - begin) {


    Iter maxit = root;


    Iter child = begin + 2*i+1;
    if (comp(*maxit, *child)) {
      maxit = child;
    }


    ++child;
    if (child != end && comp(*maxit, *child)) {
      maxit = child;
    }

    if (maxit == root) {

      break;
    }


    safe_iter_swap(root, maxit);

    root = maxit;
  }
}





template <typename Iter, typename Compare>
__attribute__((host)) __attribute__((device)) inline
void
heap_sort(Iter begin,
          Iter end,
          Compare comp)
{
  using RAJA::safe_iter_swap;

  auto N = end - begin;

  if (N < 2) {

    return;
  }



  for (Iter root = begin + (N-1)/2; root != begin; --root) {

    heapify(begin, root, end, comp);
  }

  heapify(begin, begin, end, comp);


  for (--end; begin != end; --end) {


    safe_iter_swap(begin, end);


    heapify(begin, begin, end, comp);
  }
}




struct intro_sort_device_max_depth
{
  static constexpr unsigned get() { return 4; }
};




struct intro_sort_insertion_sort_cutoff
{
  static constexpr size_t get() { return 16; }
};





template <typename Iter, typename Compare>
__attribute__((host)) __attribute__((device)) inline
void
intro_sort(Iter begin,
           Iter end,
           Compare comp,
           unsigned depth)
{
  using RAJA::safe_iter_swap;
  using diff_type = ::RAJA::detail::IterDiff<Iter>;

  diff_type N = end - begin;


  constexpr diff_type insertion_sort_cutoff =
      static_cast<diff_type>(intro_sort_insertion_sort_cutoff::get());

  if (N < 2) {



  } else if (N < insertion_sort_cutoff) {


    detail::insertion_sort(begin, end, comp);

  } else if (depth == 0) {


    detail::heap_sort(begin, end, comp);

  } else {



    Iter mid = begin + N/2;
    Iter last = end-1;
    Iter pivot = comp(*begin, *mid)
                    ? ( comp(*mid, *last)
                           ? mid
                           : ( comp(*begin, *last)
                                  ? last
                                  : begin ) )
                    : ( comp(*mid, *last)
                           ? ( comp(*begin, *last)
                                  ? begin
                                  : last )
                           : mid );


    if (pivot != last) {
      safe_iter_swap(pivot, last);
      pivot = last;
    }


    mid = partition(begin, last, [&](Iter it){ return comp(*it, *pivot); });


    if (mid != pivot) {
      safe_iter_swap(mid, pivot);
      pivot = mid;
    }



    detail::intro_sort(begin, pivot, comp, depth-1);
    detail::intro_sort(RAJA::next(pivot), end, comp, depth-1);
  }
}





template <typename Iter, typename Compare>
void
inline __attribute__((always_inline))
inplace_merge( Iter first,
                Iter middle,
                Iter last,
                Compare comp )
{
  using diff_type = RAJA::detail::IterDiff<Iter>;
  using value_type = RAJA::detail::IterVal<Iter>;

  diff_type copylen = middle - first;

  if ( first == middle || middle == last )
  {

    return;
  }

  if ( !comp(*middle, *(middle-1)) )
  {

    return;
  }


  using buf_deleter_type = FreeAlignedType<value_type, diff_type>;
  buf_deleter_type buf_deleter;

  std::unique_ptr<value_type, buf_deleter_type&> copy_buf(
      RAJA::allocate_aligned_type<value_type>( RAJA::DATA_ALIGN, copylen * sizeof(value_type) ),
      buf_deleter);

  value_type* copyarr = copy_buf.get();


  if (copyarr == nullptr) {
    RAJA_ABORT_OR_THROW( "inplace_merge temporary memory allocation failed" );
  }



  for ( diff_type& cc = buf_deleter.size; cc < copylen; ++cc )
  {
    new(&copyarr[cc]) value_type(std::move(first[cc]));
  }


  for ( diff_type cur = 0; cur < copylen; )
  {
    if ( middle >= last )
    {
      std::move( copyarr+cur, copyarr+copylen, first );
      break;
    }
    else if ( first == middle )
    {
      break;
    }

    if ( comp(*middle, copyarr[cur]) )
    {
      *first = std::move(*middle);
      ++middle;
    }
    else
    {
      *first = std::move(copyarr[cur]);
      ++cur;
    }
    ++first;
  }
  return;
}





template <typename Iter1, typename Iter2, typename OutIter, typename Compare>

void
inline __attribute__((always_inline))
merge_like_std( Iter1 first1,
                Iter1 last1,
                Iter2 first2,
                Iter2 last2,
                OutIter d_first,
                Compare comp)
{
  using ::RAJA::safe_iter_swap;

  if ( first1 == last2 - 1 )
  {
    return;
  }

  if ( (last2 - first1) == 2 )
  {
    if ( !comp(*d_first, *(d_first+1)) )
    {
      safe_iter_swap( d_first, d_first+1 );
    }
    return;
  }

  while ( first1 < last1 || first2 < last2 )
  {
    if ( first1 >= last1 )
    {
      *d_first = std::move(*first2);
      ++first2;
    }
    else if ( first2 >= last2 )
    {
      *d_first = std::move(*first1);
      ++first1;
    }
    else
    {
      if ( comp( *first2, *first1 ) )
      {
        *d_first = std::move(*first2);
        ++first2;
      }
      else
      {
        *d_first = std::move(*first1);
        ++first1;
      }
    }

    ++d_first;
  }

  return;
}





template <typename Iter, typename Compare>
inline __attribute__((always_inline))
void
merge_sort(Iter begin,
           Iter end,
           Compare comp)
{
  using diff_type = RAJA::detail::IterDiff<Iter>;
  using value_type = RAJA::detail::IterVal<Iter>;




  auto minlam = [] (diff_type a, diff_type b) {return (a < b) ? a : b;};


  diff_type len = end - begin;
  static constexpr diff_type insertion_sort_cutoff = 16;
  if ( len <= insertion_sort_cutoff && len > 0 )
  {
    detail::insertion_sort( begin, end, comp );
  }
  else
  {

    for ( diff_type start = 0; start < len; start += insertion_sort_cutoff )
    {
      diff_type lastchunk = minlam( insertion_sort_cutoff, len - start );
      detail::insertion_sort( begin + start, begin + start + lastchunk, comp );
    }




    using buf_deleter_type = FreeAlignedType<value_type, diff_type>;
    buf_deleter_type buf_deleter;

    std::unique_ptr<value_type, buf_deleter_type&> copy_buf(
        RAJA::allocate_aligned_type<value_type>( RAJA::DATA_ALIGN, len * sizeof(value_type) ),
        buf_deleter);

    value_type* copyarr = copy_buf.get();


    if (copyarr == nullptr) {
      RAJA_ABORT_OR_THROW( "merge_sort temporary memory allocation failed" );
    }



    for ( diff_type& cc = buf_deleter.size; cc < len; ++cc )
    {
      new(&copyarr[cc]) value_type(std::move(begin[cc]));
    }

    bool copyvalid = true;

    for ( diff_type midpoint = 16; midpoint < len; midpoint *= 2 )
    {
      for ( diff_type start = 0; start < len; start += midpoint * 2 )
      {
        diff_type finish = minlam( start + midpoint * 2, len );
        if ( finish > len )
        {
          RAJA_ABORT_OR_THROW( "merge_sort invalid finish point" );
        }

        if ( start + midpoint >= len )
        {

          if ( copyvalid )
          {
            std::move( copyarr + start, copyarr + finish, begin + start );
          }
          else
          {
            std::move( begin + start, begin + finish, copyarr + start );
          }
          break;
        }

        if ( copyvalid )
        {
          detail::merge_like_std( copyarr + start, copyarr + start + midpoint, copyarr + start + midpoint, copyarr + finish, begin + start, comp );
        }
        else
        {
          detail::merge_like_std( begin + start, begin + start + midpoint, begin + start + midpoint, begin + finish, copyarr + start, comp );
        }
      }

      copyvalid = !copyvalid;
    }


    if ( copyvalid )
    {
      std::move( copyarr, copyarr + len, begin );
    }
  }







}

}





template <typename Iter,
          typename Compare = operators::less<detail::IterVal<Iter>>>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
concepts::enable_if<type_traits::is_iterator<Iter>>
insertion_sort(Iter begin,
               Iter end,
               Compare comp = Compare{})
{
  auto N = end - begin;

  if (N > 1) {

    detail::insertion_sort(begin, end, comp);
  }
}





template <typename Iter,
          typename Compare = operators::less<detail::IterVal<Iter>>>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
concepts::enable_if<type_traits::is_iterator<Iter>>
shell_sort(Iter begin,
               Iter end,
               Compare comp = Compare{})
{
  auto N = end - begin;

  if (N > 1) {

    detail::shell_sort(begin, end, comp);
  }
}





template <typename Iter,
          typename Compare = operators::less<detail::IterVal<Iter>>>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
concepts::enable_if<type_traits::is_iterator<Iter>>
heap_sort(Iter begin,
          Iter end,
          Compare comp = Compare{})
{
  auto N = end - begin;

  if (N > 1) {

    detail::heap_sort(begin, end, comp);
  }
}





template <typename Iter,
          typename Compare = operators::less<detail::IterVal<Iter>>>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
concepts::enable_if<type_traits::is_iterator<Iter>>
intro_sort(Iter begin,
           Iter end,
           Compare comp = Compare{})
{
  auto N = end - begin;

  if (N > 1) {


    unsigned max_depth = 2*detail::ulog2(N);



    if (max_depth > detail::intro_sort_device_max_depth::get()) {
      max_depth = detail::intro_sort_device_max_depth::get();
    }


    detail::intro_sort(begin, end, comp, max_depth);
  }
}





template <typename Iter,
          typename Compare = operators::less<detail::IterVal<Iter>>>
inline __attribute__((always_inline))
concepts::enable_if<type_traits::is_iterator<Iter>>
merge_sort(Iter begin,
           Iter end,
           Compare comp = Compare{})
{
  auto N = end - begin;

  if (N > 1) {

    detail::merge_sort(begin, end, comp);
  }
}

}
# 34 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/sort.hpp" 2



namespace RAJA
{
namespace impl
{
namespace sort
{

namespace detail
{





struct UnstableSorter
{
  template < typename... Args >
  inline __attribute__((always_inline))
  void operator()(Args&&... args) const
  {
    RAJA::intro_sort(std::forward<Args>(args)...);
  }
};





struct StableSorter
{
  template < typename... Args >
  inline __attribute__((always_inline))
  void operator()(Args&&... args) const
  {
    RAJA::merge_sort(std::forward<Args>(args)...);
  }
};

}




template <typename ExecPolicy, typename Iter, typename Compare>
concepts::enable_if<type_traits::is_loop_policy<ExecPolicy>>
unstable(const ExecPolicy&,
         Iter begin,
         Iter end,
         Compare comp)
{
  detail::UnstableSorter{}(begin, end, comp);
}




template <typename ExecPolicy, typename Iter, typename Compare>
concepts::enable_if<type_traits::is_loop_policy<ExecPolicy>>
stable(const ExecPolicy&,
            Iter begin,
            Iter end,
            Compare comp)
{
  detail::StableSorter{}(begin, end, comp);
}




template <typename ExecPolicy, typename KeyIter, typename ValIter, typename Compare>
concepts::enable_if<type_traits::is_loop_policy<ExecPolicy>>
unstable_pairs(const ExecPolicy&,
               KeyIter keys_begin,
               KeyIter keys_end,
               ValIter vals_begin,
               Compare comp)
{
  auto begin = RAJA::zip(keys_begin, vals_begin);
  auto end = RAJA::zip(keys_end, vals_begin+(keys_end-keys_begin));
  using zip_ref = RAJA::detail::IterRef<camp::decay<decltype(begin)>>;
  detail::UnstableSorter{}(begin, end, RAJA::compare_first<zip_ref>(comp));
}




template <typename ExecPolicy, typename KeyIter, typename ValIter, typename Compare>
concepts::enable_if<type_traits::is_loop_policy<ExecPolicy>>
stable_pairs(const ExecPolicy&,
             KeyIter keys_begin,
             KeyIter keys_end,
             ValIter vals_begin,
             Compare comp)
{
  auto begin = RAJA::zip(keys_begin, vals_begin);
  auto end = RAJA::zip(keys_end, vals_begin+(keys_end-keys_begin));
  using zip_ref = RAJA::detail::IterRef<camp::decay<decltype(begin)>>;
  detail::StableSorter{}(begin, end, RAJA::compare_first<zip_ref>(comp));
}

}

}

}
# 33 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/sort.hpp" 2

namespace RAJA
{
namespace impl
{
namespace sort
{




template <typename ExecPolicy, typename Iter, typename Compare>
concepts::enable_if<type_traits::is_sequential_policy<ExecPolicy>>
unstable(const ExecPolicy&,
         Iter begin,
         Iter end,
         Compare comp)
{
  RAJA::impl::sort::unstable(::RAJA::loop_exec{}, begin, end, comp);
}




template <typename ExecPolicy, typename Iter, typename Compare>
concepts::enable_if<type_traits::is_sequential_policy<ExecPolicy>>
stable(const ExecPolicy&,
            Iter begin,
            Iter end,
            Compare comp)
{
  RAJA::impl::sort::stable(::RAJA::loop_exec{}, begin, end, comp);
}




template <typename ExecPolicy, typename KeyIter, typename ValIter, typename Compare>
concepts::enable_if<type_traits::is_sequential_policy<ExecPolicy>>
unstable_pairs(const ExecPolicy&,
               KeyIter keys_begin,
               KeyIter keys_end,
               ValIter vals_begin,
               Compare comp)
{
  RAJA::impl::sort::unstable_pairs(::RAJA::loop_exec{}, keys_begin, keys_end, vals_begin, comp);
}




template <typename ExecPolicy, typename KeyIter, typename ValIter, typename Compare>
concepts::enable_if<type_traits::is_sequential_policy<ExecPolicy>>
stable_pairs(const ExecPolicy&,
             KeyIter keys_begin,
             KeyIter keys_end,
             ValIter vals_begin,
             Compare comp)
{
  RAJA::impl::sort::stable_pairs(::RAJA::loop_exec{}, keys_begin, keys_end, vals_begin, comp);
}

}

}

}
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/WorkGroup.hpp" 1
# 21 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/WorkGroup.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/WorkGroup/Vtable.hpp" 1
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/WorkGroup/Vtable.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/WorkGroup/Vtable.hpp" 1
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/WorkGroup/Vtable.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup/Vtable.hpp" 1
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup/Vtable.hpp"
namespace RAJA
{

namespace detail
{






template < typename ... CallArgs >
struct Vtable {
  using move_sig = void(*)(void* , void* );
  using call_sig = void(*)(const void* , CallArgs... );
  using destroy_sig = void(*)(void* );





  template < typename T >
  static void move_construct_destroy(void* dest, void* src)
  {
    T* dest_as_T = static_cast<T*>(dest);
    T* src_as_T = static_cast<T*>(src);
    new(dest_as_T) T(std::move(*src_as_T));
    (*src_as_T).~T();
  }




  template < typename T >
  static void host_call(const void* obj, CallArgs... args)
  {
    const T* obj_as_T = static_cast<const T*>(obj);
    (*obj_as_T)(std::forward<CallArgs>(args)...);
  }

  template < typename T >
  static __attribute__((device)) void device_call(const void* obj, CallArgs... args)
  {
    const T* obj_as_T = static_cast<const T*>(obj);
    (*obj_as_T)(std::forward<CallArgs>(args)...);
  }




  template < typename T >
  static void destroy(void* obj)
  {
    T* obj_as_T = static_cast<T*>(obj);
    (*obj_as_T).~T();
  }

  move_sig move_construct_destroy_function_ptr;
  call_sig call_function_ptr;
  destroy_sig destroy_function_ptr;
  size_t size;
};
# 97 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup/Vtable.hpp"
}

}
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/WorkGroup/Vtable.hpp" 2


namespace RAJA
{

namespace detail
{




template < typename T, typename Vtable_T >
inline const Vtable_T* get_Vtable(loop_work const&)
{
  static Vtable_T vtable{
        &Vtable_T::template move_construct_destroy<T>,
        &Vtable_T::template host_call<T>,
        &Vtable_T::template destroy<T>,
        sizeof(T)
      };
  return &vtable;
}

}

}
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/WorkGroup/Vtable.hpp" 2


namespace RAJA
{

namespace detail
{




template < typename T, typename Vtable_T >
inline const Vtable_T* get_Vtable(seq_work const&)
{
  return get_Vtable<T, Vtable_T>(loop_work{});
}

}

}
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/WorkGroup.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/WorkGroup/WorkRunner.hpp" 1
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/WorkGroup/WorkRunner.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup/WorkRunner.hpp" 1
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup/WorkRunner.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/WorkGroup.hpp" 1
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/WorkGroup.hpp"
namespace RAJA
{

namespace policy
{
namespace workgroup
{

struct ordered
    : RAJA::make_policy_pattern_t<Policy::undefined,
                                  Pattern::workgroup_order> {
};
struct reverse_ordered
    : RAJA::make_policy_pattern_t<Policy::undefined,
                                  Pattern::workgroup_order> {
};

struct array_of_pointers
    : RAJA::make_policy_pattern_t<Policy::undefined,
                                  Pattern::workgroup_storage> {
};
struct ragged_array_of_objects
    : RAJA::make_policy_pattern_t<Policy::undefined,
                                  Pattern::workgroup_storage> {
};
struct constant_stride_array_of_objects
    : RAJA::make_policy_pattern_t<Policy::undefined,
                                  Pattern::workgroup_storage> {
};

template < typename EXEC_POLICY_T,
           typename ORDER_POLICY_T,
           typename STORAGE_POLICY_T >
struct WorkGroupPolicy
    : public RAJA::make_policy_pattern_platform_t<
                       policy_of<EXEC_POLICY_T>::value,
                       Pattern::workgroup,
                       platform_of<EXEC_POLICY_T>::value> {
  static_assert(RAJA::pattern_is<EXEC_POLICY_T, RAJA::Pattern::workgroup_exec>::value,
      "WorkGroupPolicy: EXEC_POLICY_T must be a workgroup exec policy");
  static_assert(RAJA::pattern_is<ORDER_POLICY_T, RAJA::Pattern::workgroup_order>::value,
      "WorkGroupPolicy: ORDER_POLICY_T must be a workgroup order policy");
  static_assert(RAJA::pattern_is<STORAGE_POLICY_T, RAJA::Pattern::workgroup_storage>::value,
      "WorkGroupPolicy: STORAGE_POLICY_T must be a workgroup storage policy");
};

}
}

using policy::workgroup::ordered;
using policy::workgroup::reverse_ordered;

using policy::workgroup::array_of_pointers;
using policy::workgroup::ragged_array_of_objects;
using policy::workgroup::constant_stride_array_of_objects;

using policy::workgroup::WorkGroupPolicy;

}
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup/WorkRunner.hpp" 2


namespace RAJA
{

namespace detail
{




template <typename LoopBody, typename ... Args>
struct HoldBodyArgs_base
{


  template < typename body_in,
      typename = typename std::enable_if<
        std::is_same<LoopBody, camp::decay<body_in>>::value>::type >
  HoldBodyArgs_base(body_in&& body, Args... args)
    : m_body(std::forward<body_in>(body))
    , m_arg_tuple(std::forward<Args>(args)...)
  { }

protected:
  LoopBody m_body;
  camp::tuple<Args...> m_arg_tuple;
};





template <typename LoopBody, typename index_type, typename ... Args>
struct HoldBodyArgs_host : HoldBodyArgs_base<LoopBody, Args...>
{
  using base = HoldBodyArgs_base<LoopBody, Args...>;
  using base::base;

  inline __attribute__((always_inline)) void operator()(index_type i) const
  {
    invoke(i, camp::make_idx_seq_t<sizeof...(Args)>{});
  }

  template < camp::idx_t ... Is >
  inline __attribute__((always_inline)) void invoke(index_type i, camp::idx_seq<Is...>) const
  {
    this->m_body(i, get<Is>(this->m_arg_tuple)...);
  }
};





template <typename LoopBody, typename index_type, typename ... Args>
struct HoldBodyArgs_device : HoldBodyArgs_base<LoopBody, Args...>
{
  using base = HoldBodyArgs_base<LoopBody, Args...>;
  using base::base;

  __attribute__((device)) inline __attribute__((always_inline)) void operator()(index_type i) const
  {
    invoke(i, camp::make_idx_seq_t<sizeof...(Args)>{});
  }

  template < camp::idx_t ... Is >
  __attribute__((device)) inline __attribute__((always_inline)) void invoke(index_type i, camp::idx_seq<Is...>) const
  {
    this->m_body(i, get<Is>(this->m_arg_tuple)...);
  }
};




template <typename ExecutionPolicy, typename Segment_type, typename LoopBody,
          typename index_type, typename ... Args>
struct HoldForall
{
  using HoldBodyArgs = typename std::conditional<
      !type_traits::is_device_exec_policy<ExecutionPolicy>::value,
      HoldBodyArgs_host<LoopBody, index_type, Args...>,
      HoldBodyArgs_device<LoopBody, index_type, Args...> >::type;

  template < typename segment_in, typename body_in >
  HoldForall(segment_in&& segment, body_in&& body)
    : m_segment(std::forward<segment_in>(segment))
    , m_body(std::forward<body_in>(body))
  { }

  inline __attribute__((always_inline)) void operator()(Args... args) const
  {
    wrap::forall(resources::get_resource<ExecutionPolicy>::type::get_default(),
                 ExecutionPolicy(),
                 m_segment,
                 HoldBodyArgs{m_body, std::forward<Args>(args)...});
  }

private:
  Segment_type m_segment;
  LoopBody m_body;
};





template <typename EXEC_POLICY_T,
          typename ORDER_POLICY_T,
          typename ALLOCATOR_T,
          typename INDEX_T,
          typename ... Args>
struct WorkRunner;





template <typename FORALL_EXEC_POLICY,
          typename EXEC_POLICY_T,
          typename ORDER_POLICY_T,
          typename ALLOCATOR_T,
          typename INDEX_T,
          typename ... Args>
struct WorkRunnerForallOrdered_base
{
  using exec_policy = EXEC_POLICY_T;
  using order_policy = ORDER_POLICY_T;
  using Allocator = ALLOCATOR_T;
  using index_type = INDEX_T;

  using forall_exec_policy = FORALL_EXEC_POLICY;
  using vtable_type = Vtable<Args...>;

  WorkRunnerForallOrdered_base() = default;

  WorkRunnerForallOrdered_base(WorkRunnerForallOrdered_base const&) = delete;
  WorkRunnerForallOrdered_base& operator=(WorkRunnerForallOrdered_base const&) = delete;

  WorkRunnerForallOrdered_base(WorkRunnerForallOrdered_base &&) = default;
  WorkRunnerForallOrdered_base& operator=(WorkRunnerForallOrdered_base &&) = default;


  template < typename segment_type, typename loop_type >
  using holder_type = HoldForall<forall_exec_policy, segment_type, loop_type,
                                 index_type, Args...>;



  using vtable_exec_policy = RAJA::loop_work;



  template < typename WorkContainer, typename segment_T, typename loop_T >
  inline void enqueue(WorkContainer& storage, segment_T&& seg, loop_T&& loop)
  {
    using holder = holder_type<camp::decay<segment_T>, camp::decay<loop_T>>;

    storage.template emplace<holder>(
        get_Vtable<holder, vtable_type>(vtable_exec_policy{}),
        std::forward<segment_T>(seg), std::forward<loop_T>(loop));
  }


  void clear()
  { }


  using per_run_storage = int;
};




template <typename FORALL_EXEC_POLICY,
          typename EXEC_POLICY_T,
          typename ORDER_POLICY_T,
          typename ALLOCATOR_T,
          typename INDEX_T,
          typename ... Args>
struct WorkRunnerForallOrdered
    : WorkRunnerForallOrdered_base<
      FORALL_EXEC_POLICY,
      EXEC_POLICY_T,
      ORDER_POLICY_T,
      ALLOCATOR_T,
      INDEX_T,
      Args...>
{
  using base = WorkRunnerForallOrdered_base<
      FORALL_EXEC_POLICY,
      EXEC_POLICY_T,
      ORDER_POLICY_T,
      ALLOCATOR_T,
      INDEX_T,
      Args...>;
  using base::base;


  template < typename WorkContainer >
  typename base::per_run_storage run(WorkContainer const& storage, Args... args) const
  {
    using value_type = typename WorkContainer::value_type;

    typename base::per_run_storage run_storage{};

    auto end = storage.end();
    for (auto iter = storage.begin(); iter != end; ++iter) {
      value_type::call(&*iter, args...);
    }

    return run_storage;
  }
};




template <typename FORALL_EXEC_POLICY,
          typename EXEC_POLICY_T,
          typename ORDER_POLICY_T,
          typename ALLOCATOR_T,
          typename INDEX_T,
          typename ... Args>
struct WorkRunnerForallReverse
    : WorkRunnerForallOrdered_base<
      FORALL_EXEC_POLICY,
      EXEC_POLICY_T,
      ORDER_POLICY_T,
      ALLOCATOR_T,
      INDEX_T,
      Args...>
{
  using base = WorkRunnerForallOrdered_base<
      FORALL_EXEC_POLICY,
      EXEC_POLICY_T,
      ORDER_POLICY_T,
      ALLOCATOR_T,
      INDEX_T,
      Args...>;
  using base::base;


  template < typename WorkContainer >
  typename base::per_run_storage run(WorkContainer const& storage, Args... args) const
  {
    using value_type = typename WorkContainer::value_type;

    typename base::per_run_storage run_storage{};

    auto begin = storage.begin();
    for (auto iter = storage.end(); iter != begin; --iter) {
      value_type::call(&*(iter-1), args...);
    }

    return run_storage;
  }
};

}

}
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/WorkGroup/WorkRunner.hpp" 2


namespace RAJA
{

namespace detail
{





template <typename ALLOCATOR_T,
          typename INDEX_T,
          typename ... Args>
struct WorkRunner<
        RAJA::seq_work,
        RAJA::ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>
    : WorkRunnerForallOrdered<
        RAJA::seq_exec,
        RAJA::seq_work,
        RAJA::ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>
{ };





template <typename ALLOCATOR_T,
          typename INDEX_T,
          typename ... Args>
struct WorkRunner<
        RAJA::seq_work,
        RAJA::reverse_ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>
    : WorkRunnerForallReverse<
        RAJA::seq_exec,
        RAJA::seq_work,
        RAJA::reverse_ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>
{ };

}

}
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential/WorkGroup.hpp" 2
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/sequential.hpp" 2
# 53 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2




# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/atomic.hpp" 1
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/atomic.hpp"
namespace RAJA
{

using loop_atomic = seq_atomic;

}
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/forall.hpp" 1
# 35 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/forall.hpp"
using RAJA::concepts::enable_if;

namespace RAJA
{
namespace policy
{
namespace loop
{
# 55 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/forall.hpp"
template <typename Iterable, typename Func>
inline __attribute__((always_inline)) resources::EventProxy<resources::Host> forall_impl(RAJA::resources::Host & host_res,
                                                    const loop_exec &,
                                                    Iterable &&iter,
                                                    Func &&body)
{
  using std::begin; using std::end; using std::distance; auto begin_it = begin(iter); auto end_it = end(iter); auto distance_it = distance(begin_it, end_it);

  for (decltype(distance_it) i = 0; i < distance_it; ++i) {
    body(*(begin_it + i));
  }
  return RAJA::resources::EventProxy<resources::Host>(&host_res);
}

}

}

}
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/kernel.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/kernel.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/kernel/Collapse.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/kernel/Collapse.hpp"
namespace RAJA
{

namespace internal
{





template <typename... EnclosedStmts, typename Types>
struct StatementExecutor<
    statement::Collapse<loop_exec, ArgList<>, EnclosedStmts...>, Types> {

  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &data)
  {

    execute_statement_list<camp::list<EnclosedStmts...>, Types>(data);
  }
};






template <camp::idx_t Arg0, camp::idx_t... ArgRest, typename... EnclosedStmts, typename Types>
struct StatementExecutor<statement::Collapse<loop_exec,
                                             ArgList<Arg0, ArgRest...>,
                                             EnclosedStmts...>, Types> {

  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &data)
  {

    using NewTypes = setSegmentTypeFromData<Types, Arg0, Data>;


    using next_loop_t = StatementExecutor<
        statement::Collapse<loop_exec, ArgList<ArgRest...>, EnclosedStmts...>, NewTypes>;

    auto len0 = segment_length<Arg0>(data);

    for (auto i0 = 0; i0 < len0; ++i0) {
      data.template assign_offset<Arg0>(i0);

      next_loop_t::exec(data);
    }
  }
};


}

}
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/kernel.hpp" 2
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/scan.hpp" 1
# 33 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/scan.hpp"
namespace RAJA
{
namespace impl
{
namespace scan
{




template <typename ExecPolicy, typename Iter, typename BinFn>
concepts::enable_if<type_traits::is_loop_policy<ExecPolicy>> inclusive_inplace(
    const ExecPolicy &,
    Iter begin,
    Iter end,
    BinFn f)
{
  auto agg = *begin;

  for (Iter i = ++begin; i != end; ++i) {
    agg = f(*i, agg);
    *i = agg;
  }
}





template <typename ExecPolicy, typename Iter, typename BinFn, typename T>
concepts::enable_if<type_traits::is_loop_policy<ExecPolicy>> exclusive_inplace(
    const ExecPolicy &,
    Iter begin,
    Iter end,
    BinFn f,
    T v)
{
  using std::distance;
  const auto n = distance(begin, end);

  using DistanceT = typename std::remove_const<decltype(n)>::type;
  using ValueT = decltype(*begin);

  ValueT agg = v;

  for (DistanceT i = 0; i < n; ++i) {
    auto t = begin[i];
    begin[i] = agg;
    agg = f(agg, t);
  }
}





template <typename ExecPolicy, typename Iter, typename OutIter, typename BinFn>
concepts::enable_if<type_traits::is_loop_policy<ExecPolicy>> inclusive(
    const ExecPolicy &,
    const Iter begin,
    const Iter end,
    OutIter out,
    BinFn f)
{
  auto agg = *begin;
  *out++ = agg;

  for (Iter i = begin + 1; i != end; ++i) {
    agg = f(agg, *i);
    *out++ = agg;
  }
}





template <typename ExecPolicy,
          typename Iter,
          typename OutIter,
          typename BinFn,
          typename T>
concepts::enable_if<type_traits::is_loop_policy<ExecPolicy>> exclusive(
    const ExecPolicy &,
    const Iter begin,
    const Iter end,
    OutIter out,
    BinFn f,
    T v)
{
  typename std::remove_const< decltype(*begin) >::type agg = v;
  OutIter o = out;
  *o++ = v;

  for (Iter i = begin; i != end - 1; ++i, ++o) {
    agg = f(*i, agg);
    *o = agg;
  }
}

}

}

}
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/WorkGroup.hpp" 1
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/WorkGroup.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/WorkGroup/WorkRunner.hpp" 1
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/WorkGroup/WorkRunner.hpp"
namespace RAJA
{

namespace detail
{





template <typename ALLOCATOR_T,
          typename INDEX_T,
          typename ... Args>
struct WorkRunner<
        RAJA::loop_work,
        RAJA::ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>
    : WorkRunnerForallOrdered<
        RAJA::loop_exec,
        RAJA::loop_work,
        RAJA::ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>
{ };





template <typename ALLOCATOR_T,
          typename INDEX_T,
          typename ... Args>
struct WorkRunner<
        RAJA::loop_work,
        RAJA::reverse_ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>
    : WorkRunnerForallReverse<
        RAJA::loop_exec,
        RAJA::loop_work,
        RAJA::reverse_ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>
{ };

}

}
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop/WorkGroup.hpp" 2
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/loop.hpp" 2
# 58 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2




# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd/forall.hpp" 1
# 38 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd/forall.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd/policy.hpp" 1
# 34 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd/policy.hpp"
namespace RAJA
{
namespace policy
{
namespace simd
{

struct simd_exec : make_policy_pattern_launch_platform_t<Policy::sequential,
                                                         Pattern::forall,
                                                         Launch::undefined,
                                                         Platform::host> {
};

}

}

using policy::simd::simd_exec;

}
# 39 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd/forall.hpp" 2

namespace RAJA
{
namespace policy
{
namespace simd
{


template <typename Iterable, typename Func>
inline __attribute__((always_inline)) resources::EventProxy<resources::Host> forall_impl(RAJA::resources::Host &host_res,
                                                               const simd_exec &,
                                                               Iterable &&iter,
                                                               Func &&loop_body)
{
  auto begin = std::begin(iter);
  auto end = std::end(iter);
  auto distance = std::distance(begin, end);
#pragma clang loop vectorize(assume_safety)
 for (decltype(distance) i = 0; i < distance; ++i) {
    loop_body(*(begin + i));
  }

  return RAJA::resources::EventProxy<resources::Host>(&host_res);
}

}

}

}
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd/kernel/For.hpp" 1
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd/kernel/For.hpp"
namespace RAJA
{

namespace internal
{







template <class T>
struct TypeIsLambda {
  static const bool value = false;
};

template <camp::idx_t BodyIdx, typename ... Args>
struct TypeIsLambda<RAJA::statement::Lambda<BodyIdx, Args...>> {
  static const bool value = true;
};







template <typename Types, class... Statements>
struct Invoke_all_Lambda;

template <typename Types>
struct Invoke_all_Lambda<Types> {

  template <typename Data>
  static inline __attribute__((always_inline)) void lambda_special(Data &&)
  {

  }
};


template <typename Types, class Statement, class... StatementRest>
struct Invoke_all_Lambda<Types, Statement, StatementRest...> {


  static const bool value = TypeIsLambda<camp::decay<Statement>>::value;
  static_assert(value, "Lambdas are only supported post RAJA::simd_exec");


  template <typename Data>
  static inline __attribute__((always_inline)) void lambda_special(Data &&data)
  {


    StatementExecutor<Statement, Types>::exec(data);


    Invoke_all_Lambda<Types, StatementRest...>::lambda_special(data);
  }
};
# 99 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd/kernel/For.hpp"
template <camp::idx_t ArgumentId, typename... EnclosedStmts, typename Types>
struct StatementExecutor<
    statement::For<ArgumentId, RAJA::simd_exec, EnclosedStmts...>, Types> {

  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &&data)
  {


    using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

    auto iter = get<ArgumentId>(data.segment_tuple);
    auto begin = std::begin(iter);
    auto end = std::end(iter);
    auto distance = std::distance(begin, end);

#pragma clang loop vectorize(assume_safety)
 for (decltype(distance) i = 0; i < distance; ++i) {


      using RAJA::internal::thread_privatize;
      auto privatizer = thread_privatize(data);
      auto& private_data = privatizer.get_priv();


      private_data.template assign_offset<ArgumentId>(i);

      Invoke_all_Lambda<NewTypes, EnclosedStmts...>::lambda_special(private_data);
    }
  }
};


}
}
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd/kernel/ForICount.hpp" 1
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd/kernel/ForICount.hpp"
namespace RAJA
{

namespace internal
{
# 45 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd/kernel/ForICount.hpp"
template <camp::idx_t ArgumentId, typename ParamId,
          typename... EnclosedStmts, typename Types>
struct StatementExecutor<
    statement::ForICount<ArgumentId, ParamId, RAJA::simd_exec,
                         EnclosedStmts...>, Types> {

  template <typename Data>
  static inline __attribute__((always_inline)) void exec(Data &&data)
  {


    using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

    auto iter = get<ArgumentId>(data.segment_tuple);
    auto begin = std::begin(iter);
    auto end = std::end(iter);
    auto distance = std::distance(begin, end);

#pragma clang loop vectorize(assume_safety)
 for (decltype(distance) i = 0; i < distance; ++i) {


      data.template assign_offset<ArgumentId>(i);
      data.template assign_param<ParamId>(i);


      using RAJA::internal::thread_privatize;
      auto privatizer = thread_privatize(data);
      auto& private_data = privatizer.get_priv();

      Invoke_all_Lambda<NewTypes, EnclosedStmts...>::lambda_special(private_data);
    }
  }
};

}
}
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/simd.hpp" 2
# 63 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2






# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda.hpp" 1
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/atomic.hpp" 1
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/atomic.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/TypeConvert.hpp" 1
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/TypeConvert.hpp"
namespace RAJA
{
namespace util
{





template <typename A, typename B>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr B reinterp_A_as_B(A const &val)
{
  static_assert(sizeof(A) == sizeof(B), "A and B must be same size");
  return reinterpret_cast<B const volatile &>(val);
}

template <typename A, typename B>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr B reinterp_A_as_B(A volatile const &val)
{
  static_assert(sizeof(A) == sizeof(B), "A and B must be same size");
  return reinterpret_cast<B const volatile &>(val);
}


}
}
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/atomic.hpp" 2



namespace RAJA
{


namespace detail
{
# 55 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/atomic.hpp"
inline __attribute__((always_inline)) __attribute__((device)) unsigned cuda_atomic_CAS(
    unsigned volatile *acc,
    unsigned compare,
    unsigned value)
{
  return ::atomicCAS((unsigned *)acc, compare, value);
}

inline __attribute__((always_inline)) __attribute__((device)) unsigned long long cuda_atomic_CAS(
    unsigned long long volatile *acc,
    unsigned long long compare,
    unsigned long long value)
{
  return ::atomicCAS((unsigned long long *)acc, compare, value);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((device))
typename std::enable_if<sizeof(T) == sizeof(unsigned), T>::type
cuda_atomic_CAS(T volatile *acc, T compare, T value)
{
  return RAJA::util::reinterp_A_as_B<unsigned, T>(
      cuda_atomic_CAS((unsigned volatile *)acc,
          RAJA::util::reinterp_A_as_B<T, unsigned>(compare),
          RAJA::util::reinterp_A_as_B<T, unsigned>(value)));
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((device))
typename std::enable_if<sizeof(T) == sizeof(unsigned long long), T>::type
cuda_atomic_CAS(T volatile *acc, T compare, T value)
{
  return RAJA::util::reinterp_A_as_B<unsigned long long, T>(
      cuda_atomic_CAS((unsigned long long volatile *)acc,
          RAJA::util::reinterp_A_as_B<T, unsigned long long>(compare),
          RAJA::util::reinterp_A_as_B<T, unsigned long long>(value)));
}

template <size_t BYTES>
struct CudaAtomicCAS {
};


template <>
struct CudaAtomicCAS<4> {







  template <typename T, typename OPER>
  inline __attribute__((always_inline)) __attribute__((device)) T operator()(T volatile *acc, OPER const &oper) const
  {


    unsigned oldval, newval, readback;
    oldval = RAJA::util::reinterp_A_as_B<T, unsigned>(*acc);
    newval = RAJA::util::reinterp_A_as_B<T, unsigned>(
        oper(RAJA::util::reinterp_A_as_B<unsigned, T>(oldval)));
    while ((readback = cuda_atomic_CAS((unsigned volatile*)acc, oldval, newval)) !=
           oldval) {
      oldval = readback;
      newval = RAJA::util::reinterp_A_as_B<T, unsigned>(
          oper(RAJA::util::reinterp_A_as_B<unsigned, T>(oldval)));
    }
    return RAJA::util::reinterp_A_as_B<unsigned, T>(oldval);
  }
};

template <>
struct CudaAtomicCAS<8> {







  template <typename T, typename OPER>
  inline __attribute__((always_inline)) __attribute__((device)) T operator()(T volatile *acc, OPER const &oper) const
  {


    unsigned long long oldval, newval, readback;
    oldval = RAJA::util::reinterp_A_as_B<T, unsigned long long>(*acc);
    newval = RAJA::util::reinterp_A_as_B<T, unsigned long long>(
        oper(RAJA::util::reinterp_A_as_B<unsigned long long, T>(oldval)));
    while (
        (readback = cuda_atomic_CAS((unsigned long long volatile*)acc, oldval, newval)) !=
        oldval) {
      oldval = readback;
      newval = RAJA::util::reinterp_A_as_B<T, unsigned long long>(
          oper(RAJA::util::reinterp_A_as_B<unsigned long long, T>(oldval)));
    }
    return RAJA::util::reinterp_A_as_B<unsigned long long, T>(oldval);
  }
};
# 163 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/atomic.hpp"
template <typename T, typename OPER>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomic_CAS_oper(T volatile *acc, OPER &&oper)
{
  CudaAtomicCAS<sizeof(T)> cas;
  return cas(acc, std::forward<OPER>(oper));
}
# 180 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/atomic.hpp"
template <typename T>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomicAdd(T volatile *acc, T value)
{
  return cuda_atomic_CAS_oper(acc, [=] __attribute__((device))(T a) {
    return a + value;
  });
}


template <>
inline __attribute__((always_inline)) __attribute__((device)) int cuda_atomicAdd<int>(int volatile *acc,
                                          int value)
{
  return ::atomicAdd((int *)acc, value);
}



template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned cuda_atomicAdd<unsigned>(unsigned volatile *acc,
                                                    unsigned value)
{
  return ::atomicAdd((unsigned *)acc, value);
}


template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned long long cuda_atomicAdd<unsigned long long>(
    unsigned long long volatile *acc,
    unsigned long long value)
{
  return ::atomicAdd((unsigned long long *)acc, value);
}



template <>
inline __attribute__((always_inline)) __attribute__((device)) float cuda_atomicAdd<float>(float volatile *acc,
                                              float value)
{
  return ::atomicAdd((float *)acc, value);
}





template <>
inline __attribute__((always_inline)) __attribute__((device)) double cuda_atomicAdd<double>(double volatile *acc,
                                                double value)
{
  return ::atomicAdd((double *)acc, value);
}



template <typename T>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomicSub(T volatile *acc, T value)
{
  return cuda_atomic_CAS_oper(acc, [=] __attribute__((device))(T a) {
    return a - value;
  });
}


template <>
inline __attribute__((always_inline)) __attribute__((device)) int cuda_atomicSub<int>(int volatile *acc,
                                          int value)
{
  return ::atomicSub((int *)acc, value);
}



template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned cuda_atomicSub<unsigned>(unsigned volatile *acc,
                                                    unsigned value)
{
  return ::atomicSub((unsigned *)acc, value);
}



template <typename T>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomicMin(T volatile *acc, T value)
{
  return cuda_atomic_CAS_oper(acc, [=] __attribute__((device))(T a) {
    return value < a ? value : a;
  });
}


template <>
inline __attribute__((always_inline)) __attribute__((device)) int cuda_atomicMin<int>(int volatile *acc,
                                          int value)
{
  return ::atomicMin((int *)acc, value);
}



template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned cuda_atomicMin<unsigned>(unsigned volatile *acc,
                                                    unsigned value)
{
  return ::atomicMin((unsigned *)acc, value);
}




template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned long long cuda_atomicMin<unsigned long long>(
    unsigned long long volatile *acc,
    unsigned long long value)
{
  return ::atomicMin((unsigned long long *)acc, value);
}



template <typename T>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomicMax(T volatile *acc, T value)
{
  return cuda_atomic_CAS_oper(acc, [=] __attribute__((device))(T a) {
    return value > a ? value : a;
  });
}


template <>
inline __attribute__((always_inline)) __attribute__((device)) int cuda_atomicMax<int>(int volatile *acc,
                                          int value)
{
  return ::atomicMax((int *)acc, value);
}



template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned cuda_atomicMax<unsigned>(unsigned volatile *acc,
                                                    unsigned value)
{
  return ::atomicMax((unsigned *)acc, value);
}




template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned long long cuda_atomicMax<unsigned long long>(
    unsigned long long volatile *acc,
    unsigned long long value)
{
  return ::atomicMax((unsigned long long *)acc, value);
}



template <typename T>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomicInc(T volatile *acc, T val)
{


  return cuda_atomic_CAS_oper(acc, [=] __attribute__((device))(T old) {
    return ((old >= val) ? 0 : (old + 1));
  });
}


template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned cuda_atomicInc<unsigned>(unsigned volatile *acc,
                                                    unsigned value)
{
  return ::atomicInc((unsigned *)acc, value);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomicInc(T volatile *acc)
{
  return cuda_atomic_CAS_oper(acc,
                                      [=] __attribute__((device))(T a) { return a + 1; });
}


template <typename T>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomicDec(T volatile *acc, T val)
{


  return cuda_atomic_CAS_oper(acc, [=] __attribute__((device))(T old) {
    return (((old == 0) | (old > val)) ? val : (old - 1));
  });
}


template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned cuda_atomicDec<unsigned>(unsigned volatile *acc,
                                                    unsigned value)
{
  return ::atomicDec((unsigned *)acc, value);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomicDec(T volatile *acc)
{
  return cuda_atomic_CAS_oper(acc,
                                      [=] __attribute__((device))(T a) { return a - 1; });
}




template <typename T>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomicAnd(T volatile *acc, T value)
{
  return cuda_atomic_CAS_oper(acc, [=] __attribute__((device))(T a) {
    return a & value;
  });
}


template <>
inline __attribute__((always_inline)) __attribute__((device)) int cuda_atomicAnd<int>(int volatile *acc,
                                          int value)
{
  return ::atomicAnd((int *)acc, value);
}



template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned cuda_atomicAnd<unsigned>(unsigned volatile *acc,
                                                    unsigned value)
{
  return ::atomicAnd((unsigned *)acc, value);
}




template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned long long cuda_atomicAnd<unsigned long long>(
    unsigned long long volatile *acc,
    unsigned long long value)
{
  return ::atomicAnd((unsigned long long *)acc, value);
}



template <typename T>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomicOr(T volatile *acc, T value)
{
  return cuda_atomic_CAS_oper(acc, [=] __attribute__((device))(T a) {
    return a | value;
  });
}


template <>
inline __attribute__((always_inline)) __attribute__((device)) int cuda_atomicOr<int>(int volatile *acc,
                                         int value)
{
  return ::atomicOr((int *)acc, value);
}



template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned cuda_atomicOr<unsigned>(unsigned volatile *acc,
                                                   unsigned value)
{
  return ::atomicOr((unsigned *)acc, value);
}




template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned long long cuda_atomicOr<unsigned long long>(
    unsigned long long volatile *acc,
    unsigned long long value)
{
  return ::atomicOr((unsigned long long *)acc, value);
}



template <typename T>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomicXor(T volatile *acc, T value)
{
  return cuda_atomic_CAS_oper(acc, [=] __attribute__((device))(T a) {
    return a ^ value;
  });
}


template <>
inline __attribute__((always_inline)) __attribute__((device)) int cuda_atomicXor<int>(int volatile *acc,
                                          int value)
{
  return ::atomicXor((int *)acc, value);
}



template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned cuda_atomicXor<unsigned>(unsigned volatile *acc,
                                                    unsigned value)
{
  return ::atomicXor((unsigned *)acc, value);
}




template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned long long cuda_atomicXor<unsigned long long>(
    unsigned long long volatile *acc,
    unsigned long long value)
{
  return ::atomicXor((unsigned long long *)acc, value);
}



template <typename T>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomicExchange(T volatile *acc, T value)
{
  return cuda_atomic_CAS_oper(acc, [=] __attribute__((device))(T) {
    return value;
  });
}

template <>
inline __attribute__((always_inline)) __attribute__((device)) int cuda_atomicExchange<int>(
    int volatile *acc, int value)
{
  return ::atomicExch((int *)acc, value);
}

template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned cuda_atomicExchange<unsigned>(
    unsigned volatile *acc, unsigned value)
{
  return ::atomicExch((unsigned *)acc, value);
}

template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned long long cuda_atomicExchange<unsigned long long>(
    unsigned long long volatile *acc,
    unsigned long long value)
{
  return ::atomicExch((unsigned long long *)acc, value);
}

template <>
inline __attribute__((always_inline)) __attribute__((device)) float cuda_atomicExchange<float>(
    float volatile *acc, float value)
{
  return ::atomicExch((float *)acc, value);
}




template <typename T>
inline __attribute__((always_inline)) __attribute__((device)) T cuda_atomicCAS(T volatile *acc, T compare, T value)
{
  return cuda_atomic_CAS(acc, compare, value);
}

template <>
inline __attribute__((always_inline)) __attribute__((device)) int cuda_atomicCAS<int>(
    int volatile *acc, int compare, int value)
{
  return ::atomicCAS((int *)acc, compare, value);
}

template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned cuda_atomicCAS<unsigned>(
    unsigned volatile *acc, unsigned compare, unsigned value)
{
  return ::atomicCAS((unsigned *)acc, compare, value);
}

template <>
inline __attribute__((always_inline)) __attribute__((device)) unsigned long long cuda_atomicCAS<unsigned long long>(
    unsigned long long volatile *acc,
    unsigned long long compare,
    unsigned long long value)
{
  return ::atomicCAS((unsigned long long *)acc, compare, value);
}


}


struct cuda_atomic {
};
# 592 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/atomic.hpp"
#pragma nv_exec_check_disable
template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicAdd(cuda_atomic, T volatile *acc, T value)
{

  return detail::cuda_atomicAdd(acc, value);





}

#pragma nv_exec_check_disable
template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicSub(cuda_atomic, T volatile *acc, T value)
{

  return detail::cuda_atomicSub(acc, value);





}

#pragma nv_exec_check_disable
template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicMin(cuda_atomic, T volatile *acc, T value)
{

  return detail::cuda_atomicMin(acc, value);





}

#pragma nv_exec_check_disable
template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicMax(cuda_atomic, T volatile *acc, T value)
{

  return detail::cuda_atomicMax(acc, value);





}

#pragma nv_exec_check_disable
template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicInc(cuda_atomic, T volatile *acc, T val)
{



  return detail::cuda_atomicInc(acc, val);





}

#pragma nv_exec_check_disable
template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicInc(cuda_atomic, T volatile *acc)
{

  return detail::cuda_atomicInc(acc);





}

#pragma nv_exec_check_disable
template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicDec(cuda_atomic, T volatile *acc, T val)
{



  return detail::cuda_atomicDec(acc, val);





}

#pragma nv_exec_check_disable
template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicDec(cuda_atomic, T volatile *acc)
{

  return detail::cuda_atomicDec(acc);





}

#pragma nv_exec_check_disable
template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicAnd(cuda_atomic, T volatile *acc, T value)
{

  return detail::cuda_atomicAnd(acc, value);





}

#pragma nv_exec_check_disable
template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicOr(cuda_atomic, T volatile *acc, T value)
{

  return detail::cuda_atomicOr(acc, value);





}

#pragma nv_exec_check_disable
template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicXor(cuda_atomic, T volatile *acc, T value)
{

  return detail::cuda_atomicXor(acc, value);





}

#pragma nv_exec_check_disable
template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T
atomicExchange(cuda_atomic, T volatile *acc, T value)
{

  return detail::cuda_atomicExchange(acc, value);





}

#pragma nv_exec_check_disable
template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T
atomicCAS(cuda_atomic, T volatile *acc, T compare, T value)
{

  return detail::cuda_atomicCAS(acc, compare, value);





}

}
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/forall.hpp" 1
# 38 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/forall.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 1 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 3

# 1 "/usr/include/assert.h" 1 3 4
# 65 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 2 3
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp" 2

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdio" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdio" 3
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp" 2

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/unordered_map" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/unordered_map" 3
# 47 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/unordered_map" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hashtable.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hashtable.h" 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hashtable_policy.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hashtable_policy.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    class _Hashtable;



namespace __detail
{







  template<typename _Key, typename _Value,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _Traits>
    struct _Hashtable_base;



  template<class _Iterator>
    inline typename std::iterator_traits<_Iterator>::difference_type
    __distance_fw(_Iterator __first, _Iterator __last,
    std::input_iterator_tag)
    { return 0; }

  template<class _Iterator>
    inline typename std::iterator_traits<_Iterator>::difference_type
    __distance_fw(_Iterator __first, _Iterator __last,
    std::forward_iterator_tag)
    { return std::distance(__first, __last); }

  template<class _Iterator>
    inline typename std::iterator_traits<_Iterator>::difference_type
    __distance_fw(_Iterator __first, _Iterator __last)
    {
      typedef typename std::iterator_traits<_Iterator>::iterator_category _Tag;
      return __distance_fw(__first, __last, _Tag());
    }


  template <typename _Key, typename _Hash>
    struct __is_noexcept_hash : std::integral_constant<bool,
 noexcept(declval<const _Hash&>()(declval<const _Key&>()))>
    { };

  struct _Identity
  {
    template<typename _Tp>
      _Tp&&
      operator()(_Tp&& __x) const
      { return std::forward<_Tp>(__x); }
  };

  struct _Select1st
  {
    template<typename _Tp>
      auto
      operator()(_Tp&& __x) const
      -> decltype(std::get<0>(std::forward<_Tp>(__x)))
      { return std::get<0>(std::forward<_Tp>(__x)); }
  };

  template<typename _NodeAlloc>
    struct _Hashtable_alloc;



  template<typename _NodeAlloc>
    struct _ReuseOrAllocNode
    {
    private:
      using __node_alloc_type = _NodeAlloc;
      using __hashtable_alloc = _Hashtable_alloc<__node_alloc_type>;
      using __value_alloc_type = typename __hashtable_alloc::__value_alloc_type;
      using __value_alloc_traits =
 typename __hashtable_alloc::__value_alloc_traits;
      using __node_alloc_traits =
 typename __hashtable_alloc::__node_alloc_traits;
      using __node_type = typename __hashtable_alloc::__node_type;

    public:
      _ReuseOrAllocNode(__node_type* __nodes, __hashtable_alloc& __h)
 : _M_nodes(__nodes), _M_h(__h) { }
      _ReuseOrAllocNode(const _ReuseOrAllocNode&) = delete;

      ~_ReuseOrAllocNode()
      { _M_h._M_deallocate_nodes(_M_nodes); }

      template<typename _Arg>
 __node_type*
 operator()(_Arg&& __arg) const
 {
   if (_M_nodes)
     {
       __node_type* __node = _M_nodes;
       _M_nodes = _M_nodes->_M_next();
       __node->_M_nxt = nullptr;
       __value_alloc_type __a(_M_h._M_node_allocator());
       __value_alloc_traits::destroy(__a, __node->_M_valptr());
       try
  {
    __value_alloc_traits::construct(__a, __node->_M_valptr(),
        std::forward<_Arg>(__arg));
  }
       catch(...)
  {
    __node->~__node_type();
    __node_alloc_traits::deallocate(_M_h._M_node_allocator(),
        __node, 1);
    throw;
  }
       return __node;
     }
   return _M_h._M_allocate_node(std::forward<_Arg>(__arg));
 }

    private:
      mutable __node_type* _M_nodes;
      __hashtable_alloc& _M_h;
    };



  template<typename _NodeAlloc>
    struct _AllocNode
    {
    private:
      using __hashtable_alloc = _Hashtable_alloc<_NodeAlloc>;
      using __node_type = typename __hashtable_alloc::__node_type;

    public:
      _AllocNode(__hashtable_alloc& __h)
 : _M_h(__h) { }

      template<typename _Arg>
 __node_type*
 operator()(_Arg&& __arg) const
 { return _M_h._M_allocate_node(std::forward<_Arg>(__arg)); }

    private:
      __hashtable_alloc& _M_h;
    };
# 211 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hashtable_policy.h" 3
  template<bool _Cache_hash_code, bool _Constant_iterators, bool _Unique_keys>
    struct _Hashtable_traits
    {
      template<bool _Cond>
 using __bool_constant = integral_constant<bool, _Cond>;

      using __hash_cached = __bool_constant<_Cache_hash_code>;
      using __constant_iterators = __bool_constant<_Constant_iterators>;
      using __unique_keys = __bool_constant<_Unique_keys>;
    };
# 230 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hashtable_policy.h" 3
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }

    _Hash_node_base(_Hash_node_base* __next) noexcept : _M_nxt(__next) { }
  };






  template<typename _Value>
    struct _Hash_node_value_base : _Hash_node_base
    {
      typedef _Value value_type;

      __gnu_cxx::__aligned_buffer<_Value> _M_storage;

      _Value*
      _M_valptr() noexcept
      { return _M_storage._M_ptr(); }

      const _Value*
      _M_valptr() const noexcept
      { return _M_storage._M_ptr(); }

      _Value&
      _M_v() noexcept
      { return *_M_valptr(); }

      const _Value&
      _M_v() const noexcept
      { return *_M_valptr(); }
    };




  template<typename _Value, bool _Cache_hash_code>
    struct _Hash_node;






  template<typename _Value>
    struct _Hash_node<_Value, true> : _Hash_node_value_base<_Value>
    {
      std::size_t _M_hash_code;

      _Hash_node*
      _M_next() const noexcept
      { return static_cast<_Hash_node*>(this->_M_nxt); }
    };






  template<typename _Value>
    struct _Hash_node<_Value, false> : _Hash_node_value_base<_Value>
    {
      _Hash_node*
      _M_next() const noexcept
      { return static_cast<_Hash_node*>(this->_M_nxt); }
    };


  template<typename _Value, bool _Cache_hash_code>
    struct _Node_iterator_base
    {
      using __node_type = _Hash_node<_Value, _Cache_hash_code>;

      __node_type* _M_cur;

      _Node_iterator_base(__node_type* __p) noexcept
      : _M_cur(__p) { }

      void
      _M_incr() noexcept
      { _M_cur = _M_cur->_M_next(); }
    };

  template<typename _Value, bool _Cache_hash_code>
    inline bool
    operator==(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,
        const _Node_iterator_base<_Value, _Cache_hash_code >& __y)
    noexcept
    { return __x._M_cur == __y._M_cur; }

  template<typename _Value, bool _Cache_hash_code>
    inline bool
    operator!=(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,
        const _Node_iterator_base<_Value, _Cache_hash_code>& __y)
    noexcept
    { return __x._M_cur != __y._M_cur; }


  template<typename _Value, bool __constant_iterators, bool __cache>
    struct _Node_iterator
    : public _Node_iterator_base<_Value, __cache>
    {
    private:
      using __base_type = _Node_iterator_base<_Value, __cache>;
      using __node_type = typename __base_type::__node_type;

    public:
      typedef _Value value_type;
      typedef std::ptrdiff_t difference_type;
      typedef std::forward_iterator_tag iterator_category;

      using pointer = typename std::conditional<__constant_iterators,
      const _Value*, _Value*>::type;

      using reference = typename std::conditional<__constant_iterators,
        const _Value&, _Value&>::type;

      _Node_iterator() noexcept
      : __base_type(0) { }

      explicit
      _Node_iterator(__node_type* __p) noexcept
      : __base_type(__p) { }

      reference
      operator*() const noexcept
      { return this->_M_cur->_M_v(); }

      pointer
      operator->() const noexcept
      { return this->_M_cur->_M_valptr(); }

      _Node_iterator&
      operator++() noexcept
      {
 this->_M_incr();
 return *this;
      }

      _Node_iterator
      operator++(int) noexcept
      {
 _Node_iterator __tmp(*this);
 this->_M_incr();
 return __tmp;
      }
    };


  template<typename _Value, bool __constant_iterators, bool __cache>
    struct _Node_const_iterator
    : public _Node_iterator_base<_Value, __cache>
    {
    private:
      using __base_type = _Node_iterator_base<_Value, __cache>;
      using __node_type = typename __base_type::__node_type;

    public:
      typedef _Value value_type;
      typedef std::ptrdiff_t difference_type;
      typedef std::forward_iterator_tag iterator_category;

      typedef const _Value* pointer;
      typedef const _Value& reference;

      _Node_const_iterator() noexcept
      : __base_type(0) { }

      explicit
      _Node_const_iterator(__node_type* __p) noexcept
      : __base_type(__p) { }

      _Node_const_iterator(const _Node_iterator<_Value, __constant_iterators,
      __cache>& __x) noexcept
      : __base_type(__x._M_cur) { }

      reference
      operator*() const noexcept
      { return this->_M_cur->_M_v(); }

      pointer
      operator->() const noexcept
      { return this->_M_cur->_M_valptr(); }

      _Node_const_iterator&
      operator++() noexcept
      {
 this->_M_incr();
 return *this;
      }

      _Node_const_iterator
      operator++(int) noexcept
      {
 _Node_const_iterator __tmp(*this);
 this->_M_incr();
 return __tmp;
      }
    };






  struct _Mod_range_hashing
  {
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
        second_argument_type __den) const noexcept
    { return __num % __den; }
  };






  struct _Default_ranged_hash { };



  struct _Prime_rehash_policy
  {
    _Prime_rehash_policy(float __z = 1.0)
    : _M_max_load_factor(__z), _M_next_resize(0) { }

    float
    max_load_factor() const noexcept
    { return _M_max_load_factor; }


    std::size_t
    _M_next_bkt(std::size_t __n) const;


    std::size_t
    _M_bkt_for_elements(std::size_t __n) const
    { return __builtin_ceil(__n / (long double)_M_max_load_factor); }





    std::pair<bool, std::size_t>
    _M_need_rehash(std::size_t __n_bkt, std::size_t __n_elt,
     std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
    { return _M_next_resize; }

    void
    _M_reset() noexcept
    { _M_next_resize = 0; }

    void
    _M_reset(_State __state)
    { _M_next_resize = __state; }

    enum { _S_n_primes = sizeof(unsigned long) != 8 ? 256 : 256 + 48 };

    static const std::size_t _S_growth_factor = 2;

    float _M_max_load_factor;
    mutable std::size_t _M_next_resize;
  };
# 527 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hashtable_policy.h" 3
  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits,
    bool _Unique_keys = _Traits::__unique_keys::value>
    struct _Map_base { };


  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
       _H1, _H2, _Hash, _RehashPolicy, _Traits, false>
    {
      using mapped_type = typename std::tuple_element<1, _Pair>::type;
    };


  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
       _H1, _H2, _Hash, _RehashPolicy, _Traits, true>
    {
    private:
      using __hashtable_base = __detail::_Hashtable_base<_Key, _Pair,
        _Select1st,
       _Equal, _H1, _H2, _Hash,
         _Traits>;

      using __hashtable = _Hashtable<_Key, _Pair, _Alloc,
         _Select1st, _Equal,
         _H1, _H2, _Hash, _RehashPolicy, _Traits>;

      using __hash_code = typename __hashtable_base::__hash_code;
      using __node_type = typename __hashtable_base::__node_type;

    public:
      using key_type = typename __hashtable_base::key_type;
      using iterator = typename __hashtable_base::iterator;
      using mapped_type = typename std::tuple_element<1, _Pair>::type;

      mapped_type&
      operator[](const key_type& __k);

      mapped_type&
      operator[](key_type&& __k);



      mapped_type&
      at(const key_type& __k);

      const mapped_type&
      at(const key_type& __k) const;
    };

  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    typename _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
         _H1, _H2, _Hash, _RehashPolicy, _Traits, true>
         ::mapped_type&
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
       _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::
    operator[](const key_type& __k)
    {
      __hashtable* __h = static_cast<__hashtable*>(this);
      __hash_code __code = __h->_M_hash_code(__k);
      std::size_t __n = __h->_M_bucket_index(__k, __code);
      __node_type* __p = __h->_M_find_node(__n, __k, __code);

      if (!__p)
 {
   __p = __h->_M_allocate_node(std::piecewise_construct,
          std::tuple<const key_type&>(__k),
          std::tuple<>());
   return __h->_M_insert_unique_node(__n, __code, __p)->second;
 }

      return __p->_M_v().second;
    }

  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    typename _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
         _H1, _H2, _Hash, _RehashPolicy, _Traits, true>
         ::mapped_type&
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
       _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::
    operator[](key_type&& __k)
    {
      __hashtable* __h = static_cast<__hashtable*>(this);
      __hash_code __code = __h->_M_hash_code(__k);
      std::size_t __n = __h->_M_bucket_index(__k, __code);
      __node_type* __p = __h->_M_find_node(__n, __k, __code);

      if (!__p)
 {
   __p = __h->_M_allocate_node(std::piecewise_construct,
          std::forward_as_tuple(std::move(__k)),
          std::tuple<>());
   return __h->_M_insert_unique_node(__n, __code, __p)->second;
 }

      return __p->_M_v().second;
    }

  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    typename _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
         _H1, _H2, _Hash, _RehashPolicy, _Traits, true>
         ::mapped_type&
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
       _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::
    at(const key_type& __k)
    {
      __hashtable* __h = static_cast<__hashtable*>(this);
      __hash_code __code = __h->_M_hash_code(__k);
      std::size_t __n = __h->_M_bucket_index(__k, __code);
      __node_type* __p = __h->_M_find_node(__n, __k, __code);

      if (!__p)
 __throw_out_of_range(("_Map_base::at"));
      return __p->_M_v().second;
    }

  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    const typename _Map_base<_Key, _Pair, _Alloc, _Select1st,
        _Equal, _H1, _H2, _Hash, _RehashPolicy,
        _Traits, true>::mapped_type&
    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
       _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::
    at(const key_type& __k) const
    {
      const __hashtable* __h = static_cast<const __hashtable*>(this);
      __hash_code __code = __h->_M_hash_code(__k);
      std::size_t __n = __h->_M_bucket_index(__k, __code);
      __node_type* __p = __h->_M_find_node(__n, __k, __code);

      if (!__p)
 __throw_out_of_range(("_Map_base::at"));
      return __p->_M_v().second;
    }






  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    struct _Insert_base
    {
    protected:
      using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey,
         _Equal, _H1, _H2, _Hash,
         _RehashPolicy, _Traits>;

      using __hashtable_base = _Hashtable_base<_Key, _Value, _ExtractKey,
            _Equal, _H1, _H2, _Hash,
            _Traits>;

      using value_type = typename __hashtable_base::value_type;
      using iterator = typename __hashtable_base::iterator;
      using const_iterator = typename __hashtable_base::const_iterator;
      using size_type = typename __hashtable_base::size_type;

      using __unique_keys = typename __hashtable_base::__unique_keys;
      using __ireturn_type = typename __hashtable_base::__ireturn_type;
      using __node_type = _Hash_node<_Value, _Traits::__hash_cached::value>;
      using __node_alloc_type =
 typename __alloctr_rebind<_Alloc, __node_type>::__type;
      using __node_gen_type = _AllocNode<__node_alloc_type>;

      __hashtable&
      _M_conjure_hashtable()
      { return *(static_cast<__hashtable*>(this)); }

      template<typename _InputIterator, typename _NodeGetter>
 void
 _M_insert_range(_InputIterator __first, _InputIterator __last,
   const _NodeGetter&);

    public:
      __ireturn_type
      insert(const value_type& __v)
      {
 __hashtable& __h = _M_conjure_hashtable();
 __node_gen_type __node_gen(__h);
 return __h._M_insert(__v, __node_gen, __unique_keys());
      }

      iterator
      insert(const_iterator __hint, const value_type& __v)
      {
 __hashtable& __h = _M_conjure_hashtable();
 __node_gen_type __node_gen(__h);
 return __h._M_insert(__hint, __v, __node_gen, __unique_keys());
      }

      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }

      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 {
   __hashtable& __h = _M_conjure_hashtable();
   __node_gen_type __node_gen(__h);
   return _M_insert_range(__first, __last, __node_gen);
 }
    };

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    template<typename _InputIterator, typename _NodeGetter>
      void
      _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash,
      _RehashPolicy, _Traits>::
      _M_insert_range(_InputIterator __first, _InputIterator __last,
        const _NodeGetter& __node_gen)
      {
 using __rehash_type = typename __hashtable::__rehash_type;
 using __rehash_state = typename __hashtable::__rehash_state;
 using pair_type = std::pair<bool, std::size_t>;

 size_type __n_elt = __detail::__distance_fw(__first, __last);

 __hashtable& __h = _M_conjure_hashtable();
 __rehash_type& __rehash = __h._M_rehash_policy;
 const __rehash_state& __saved_state = __rehash._M_state();
 pair_type __do_rehash = __rehash._M_need_rehash(__h._M_bucket_count,
       __h._M_element_count,
       __n_elt);

 if (__do_rehash.first)
   __h._M_rehash(__do_rehash.second, __saved_state);

 for (; __first != __last; ++__first)
   __h._M_insert(*__first, __node_gen, __unique_keys());
      }






  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits,
    bool _Constant_iterators = _Traits::__constant_iterators::value,
    bool _Unique_keys = _Traits::__unique_keys::value>
    struct _Insert;


  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    struct _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash,
     _RehashPolicy, _Traits, true, true>
    : public _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
      _H1, _H2, _Hash, _RehashPolicy, _Traits>
    {
      using __base_type = _Insert_base<_Key, _Value, _Alloc, _ExtractKey,
     _Equal, _H1, _H2, _Hash,
     _RehashPolicy, _Traits>;
      using value_type = typename __base_type::value_type;
      using iterator = typename __base_type::iterator;
      using const_iterator = typename __base_type::const_iterator;

      using __unique_keys = typename __base_type::__unique_keys;
      using __hashtable = typename __base_type::__hashtable;
      using __node_gen_type = typename __base_type::__node_gen_type;

      using __base_type::insert;

      std::pair<iterator, bool>
      insert(value_type&& __v)
      {
 __hashtable& __h = this->_M_conjure_hashtable();
 __node_gen_type __node_gen(__h);
 return __h._M_insert(std::move(__v), __node_gen, __unique_keys());
      }

      iterator
      insert(const_iterator __hint, value_type&& __v)
      {
 __hashtable& __h = this->_M_conjure_hashtable();
 __node_gen_type __node_gen(__h);
 return __h._M_insert(__hint, std::move(__v), __node_gen,
        __unique_keys());
      }
    };


  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    struct _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash,
     _RehashPolicy, _Traits, true, false>
    : public _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
      _H1, _H2, _Hash, _RehashPolicy, _Traits>
    {
      using __base_type = _Insert_base<_Key, _Value, _Alloc, _ExtractKey,
     _Equal, _H1, _H2, _Hash,
     _RehashPolicy, _Traits>;
      using value_type = typename __base_type::value_type;
      using iterator = typename __base_type::iterator;
      using const_iterator = typename __base_type::const_iterator;

      using __unique_keys = typename __base_type::__unique_keys;
      using __hashtable = typename __base_type::__hashtable;
      using __node_gen_type = typename __base_type::__node_gen_type;

      using __base_type::insert;

      iterator
      insert(value_type&& __v)
      {
 __hashtable& __h = this->_M_conjure_hashtable();
 __node_gen_type __node_gen(__h);
 return __h._M_insert(std::move(__v), __node_gen, __unique_keys());
      }

      iterator
      insert(const_iterator __hint, value_type&& __v)
      {
 __hashtable& __h = this->_M_conjure_hashtable();
 __node_gen_type __node_gen(__h);
 return __h._M_insert(__hint, std::move(__v), __node_gen,
        __unique_keys());
      }
    };


  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits, bool _Unique_keys>
    struct _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash,
     _RehashPolicy, _Traits, false, _Unique_keys>
    : public _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
      _H1, _H2, _Hash, _RehashPolicy, _Traits>
    {
      using __base_type = _Insert_base<_Key, _Value, _Alloc, _ExtractKey,
           _Equal, _H1, _H2, _Hash,
           _RehashPolicy, _Traits>;
      using value_type = typename __base_type::value_type;
      using iterator = typename __base_type::iterator;
      using const_iterator = typename __base_type::const_iterator;

      using __unique_keys = typename __base_type::__unique_keys;
      using __hashtable = typename __base_type::__hashtable;
      using __ireturn_type = typename __base_type::__ireturn_type;

      using __base_type::insert;

      template<typename _Pair>
 using __is_cons = std::is_constructible<value_type, _Pair&&>;

      template<typename _Pair>
 using _IFcons = std::enable_if<__is_cons<_Pair>::value>;

      template<typename _Pair>
 using _IFconsp = typename _IFcons<_Pair>::type;

      template<typename _Pair, typename = _IFconsp<_Pair>>
 __ireturn_type
 insert(_Pair&& __v)
 {
   __hashtable& __h = this->_M_conjure_hashtable();
   return __h._M_emplace(__unique_keys(), std::forward<_Pair>(__v));
 }

      template<typename _Pair, typename = _IFconsp<_Pair>>
 iterator
 insert(const_iterator __hint, _Pair&& __v)
 {
   __hashtable& __h = this->_M_conjure_hashtable();
   return __h._M_emplace(__hint, __unique_keys(),
    std::forward<_Pair>(__v));
 }
   };







  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    struct _Rehash_base;


  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _Traits>
    struct _Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _Prime_rehash_policy, _Traits>
    {
      using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey,
         _Equal, _H1, _H2, _Hash,
         _Prime_rehash_policy, _Traits>;

      float
      max_load_factor() const noexcept
      {
 const __hashtable* __this = static_cast<const __hashtable*>(this);
 return __this->__rehash_policy().max_load_factor();
      }

      void
      max_load_factor(float __z)
      {
 __hashtable* __this = static_cast<__hashtable*>(this);
 __this->__rehash_policy(_Prime_rehash_policy(__z));
      }

      void
      reserve(std::size_t __n)
      {
 __hashtable* __this = static_cast<__hashtable*>(this);
 __this->rehash(__builtin_ceil(__n / max_load_factor()));
      }
    };







  template<int _Nm, typename _Tp,
    bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Hashtable_ebo_helper;


  template<int _Nm, typename _Tp>
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
    : private _Tp
    {
      _Hashtable_ebo_helper() = default;

      template<typename _OtherTp>
 _Hashtable_ebo_helper(_OtherTp&& __tp)
   : _Tp(std::forward<_OtherTp>(__tp))
 { }

      static const _Tp&
      _S_cget(const _Hashtable_ebo_helper& __eboh)
      { return static_cast<const _Tp&>(__eboh); }

      static _Tp&
      _S_get(_Hashtable_ebo_helper& __eboh)
      { return static_cast<_Tp&>(__eboh); }
    };


  template<int _Nm, typename _Tp>
    struct _Hashtable_ebo_helper<_Nm, _Tp, false>
    {
      _Hashtable_ebo_helper() = default;

      template<typename _OtherTp>
 _Hashtable_ebo_helper(_OtherTp&& __tp)
   : _M_tp(std::forward<_OtherTp>(__tp))
 { }

      static const _Tp&
      _S_cget(const _Hashtable_ebo_helper& __eboh)
      { return __eboh._M_tp; }

      static _Tp&
      _S_get(_Hashtable_ebo_helper& __eboh)
      { return __eboh._M_tp; }

    private:
      _Tp _M_tp;
    };







  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _H1, typename _H2, typename _Hash,
    bool __cache_hash_code>
    struct _Local_iterator_base;
# 1054 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hashtable_policy.h" 3
  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _H1, typename _H2, typename _Hash,
    bool __cache_hash_code>
    struct _Hash_code_base;



  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _H1, typename _H2, typename _Hash>
    struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false>
    : private _Hashtable_ebo_helper<0, _ExtractKey>,
      private _Hashtable_ebo_helper<1, _Hash>
    {
    private:
      using __ebo_extract_key = _Hashtable_ebo_helper<0, _ExtractKey>;
      using __ebo_hash = _Hashtable_ebo_helper<1, _Hash>;

    protected:
      typedef void* __hash_code;
      typedef _Hash_node<_Value, false> __node_type;


      _Hash_code_base() = default;

      _Hash_code_base(const _ExtractKey& __ex, const _H1&, const _H2&,
        const _Hash& __h)
      : __ebo_extract_key(__ex), __ebo_hash(__h) { }

      __hash_code
      _M_hash_code(const _Key& __key) const
      { return 0; }

      std::size_t
      _M_bucket_index(const _Key& __k, __hash_code, std::size_t __n) const
      { return _M_ranged_hash()(__k, __n); }

      std::size_t
      _M_bucket_index(const __node_type* __p, std::size_t __n) const
 noexcept( noexcept(declval<const _Hash&>()(declval<const _Key&>(),
         (std::size_t)0)) )
      { return _M_ranged_hash()(_M_extract()(__p->_M_v()), __n); }

      void
      _M_store_code(__node_type*, __hash_code) const
      { }

      void
      _M_copy_code(__node_type*, const __node_type*) const
      { }

      void
      _M_swap(_Hash_code_base& __x)
      {
 std::swap(_M_extract(), __x._M_extract());
 std::swap(_M_ranged_hash(), __x._M_ranged_hash());
      }

      const _ExtractKey&
      _M_extract() const { return __ebo_extract_key::_S_cget(*this); }

      _ExtractKey&
      _M_extract() { return __ebo_extract_key::_S_get(*this); }

      const _Hash&
      _M_ranged_hash() const { return __ebo_hash::_S_cget(*this); }

      _Hash&
      _M_ranged_hash() { return __ebo_hash::_S_get(*this); }
    };







  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _H1, typename _H2, typename _Hash>
    struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, true>;




  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _H1, typename _H2>
    struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2,
      _Default_ranged_hash, false>
    : private _Hashtable_ebo_helper<0, _ExtractKey>,
      private _Hashtable_ebo_helper<1, _H1>,
      private _Hashtable_ebo_helper<2, _H2>
    {
    private:
      using __ebo_extract_key = _Hashtable_ebo_helper<0, _ExtractKey>;
      using __ebo_h1 = _Hashtable_ebo_helper<1, _H1>;
      using __ebo_h2 = _Hashtable_ebo_helper<2, _H2>;


      friend struct _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2,
      _Default_ranged_hash, false>;

    public:
      typedef _H1 hasher;

      hasher
      hash_function() const
      { return _M_h1(); }

    protected:
      typedef std::size_t __hash_code;
      typedef _Hash_node<_Value, false> __node_type;


      _Hash_code_base() = default;

      _Hash_code_base(const _ExtractKey& __ex,
        const _H1& __h1, const _H2& __h2,
        const _Default_ranged_hash&)
      : __ebo_extract_key(__ex), __ebo_h1(__h1), __ebo_h2(__h2) { }

      __hash_code
      _M_hash_code(const _Key& __k) const
      { return _M_h1()(__k); }

      std::size_t
      _M_bucket_index(const _Key&, __hash_code __c, std::size_t __n) const
      { return _M_h2()(__c, __n); }

      std::size_t
      _M_bucket_index(const __node_type* __p, std::size_t __n) const
 noexcept( noexcept(declval<const _H1&>()(declval<const _Key&>()))
    && noexcept(declval<const _H2&>()((__hash_code)0,
          (std::size_t)0)) )
      { return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __n); }

      void
      _M_store_code(__node_type*, __hash_code) const
      { }

      void
      _M_copy_code(__node_type*, const __node_type*) const
      { }

      void
      _M_swap(_Hash_code_base& __x)
      {
 std::swap(_M_extract(), __x._M_extract());
 std::swap(_M_h1(), __x._M_h1());
 std::swap(_M_h2(), __x._M_h2());
      }

      const _ExtractKey&
      _M_extract() const { return __ebo_extract_key::_S_cget(*this); }

      _ExtractKey&
      _M_extract() { return __ebo_extract_key::_S_get(*this); }

      const _H1&
      _M_h1() const { return __ebo_h1::_S_cget(*this); }

      _H1&
      _M_h1() { return __ebo_h1::_S_get(*this); }

      const _H2&
      _M_h2() const { return __ebo_h2::_S_cget(*this); }

      _H2&
      _M_h2() { return __ebo_h2::_S_get(*this); }
    };




  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _H1, typename _H2>
    struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2,
      _Default_ranged_hash, true>
    : private _Hashtable_ebo_helper<0, _ExtractKey>,
      private _Hashtable_ebo_helper<1, _H1>,
      private _Hashtable_ebo_helper<2, _H2>
    {
    private:

      friend struct _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2,
      _Default_ranged_hash, true>;

      using __ebo_extract_key = _Hashtable_ebo_helper<0, _ExtractKey>;
      using __ebo_h1 = _Hashtable_ebo_helper<1, _H1>;
      using __ebo_h2 = _Hashtable_ebo_helper<2, _H2>;

    public:
      typedef _H1 hasher;

      hasher
      hash_function() const
      { return _M_h1(); }

    protected:
      typedef std::size_t __hash_code;
      typedef _Hash_node<_Value, true> __node_type;

      _Hash_code_base(const _ExtractKey& __ex,
        const _H1& __h1, const _H2& __h2,
        const _Default_ranged_hash&)
      : __ebo_extract_key(__ex), __ebo_h1(__h1), __ebo_h2(__h2) { }

      __hash_code
      _M_hash_code(const _Key& __k) const
      { return _M_h1()(__k); }

      std::size_t
      _M_bucket_index(const _Key&, __hash_code __c,
        std::size_t __n) const
      { return _M_h2()(__c, __n); }

      std::size_t
      _M_bucket_index(const __node_type* __p, std::size_t __n) const
 noexcept( noexcept(declval<const _H2&>()((__hash_code)0,
       (std::size_t)0)) )
      { return _M_h2()(__p->_M_hash_code, __n); }

      void
      _M_store_code(__node_type* __n, __hash_code __c) const
      { __n->_M_hash_code = __c; }

      void
      _M_copy_code(__node_type* __to, const __node_type* __from) const
      { __to->_M_hash_code = __from->_M_hash_code; }

      void
      _M_swap(_Hash_code_base& __x)
      {
 std::swap(_M_extract(), __x._M_extract());
 std::swap(_M_h1(), __x._M_h1());
 std::swap(_M_h2(), __x._M_h2());
      }

      const _ExtractKey&
      _M_extract() const { return __ebo_extract_key::_S_cget(*this); }

      _ExtractKey&
      _M_extract() { return __ebo_extract_key::_S_get(*this); }

      const _H1&
      _M_h1() const { return __ebo_h1::_S_cget(*this); }

      _H1&
      _M_h1() { return __ebo_h1::_S_get(*this); }

      const _H2&
      _M_h2() const { return __ebo_h2::_S_cget(*this); }

      _H2&
      _M_h2() { return __ebo_h2::_S_get(*this); }
    };





  template <typename _Key, typename _Value, typename _ExtractKey,
     typename _Equal, typename _HashCodeType,
     bool __cache_hash_code>
  struct _Equal_helper;


  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _Equal, typename _HashCodeType>
  struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, true>
  {
    static bool
    _S_equals(const _Equal& __eq, const _ExtractKey& __extract,
       const _Key& __k, _HashCodeType __c, _Hash_node<_Value, true>* __n)
    { return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v())); }
  };


  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _Equal, typename _HashCodeType>
  struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, false>
  {
    static bool
    _S_equals(const _Equal& __eq, const _ExtractKey& __extract,
       const _Key& __k, _HashCodeType, _Hash_node<_Value, false>* __n)
    { return __eq(__k, __extract(__n->_M_v())); }
  };



  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _H1, typename _H2, typename _Hash>
    struct _Local_iterator_base<_Key, _Value, _ExtractKey,
    _H1, _H2, _Hash, true>
    : private _Hashtable_ebo_helper<0, _H2>
    {
    protected:
      using __base_type = _Hashtable_ebo_helper<0, _H2>;
      using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,
            _H1, _H2, _Hash, true>;

      _Local_iterator_base() = default;
      _Local_iterator_base(const __hash_code_base& __base,
      _Hash_node<_Value, true>* __p,
      std::size_t __bkt, std::size_t __bkt_count)
      : __base_type(__base._M_h2()),
 _M_cur(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count) { }

      void
      _M_incr()
      {
 _M_cur = _M_cur->_M_next();
 if (_M_cur)
   {
     std::size_t __bkt
       = __base_type::_S_get(*this)(_M_cur->_M_hash_code,
        _M_bucket_count);
     if (__bkt != _M_bucket)
       _M_cur = nullptr;
   }
      }

      _Hash_node<_Value, true>* _M_cur;
      std::size_t _M_bucket;
      std::size_t _M_bucket_count;

    public:
      const void*
      _M_curr() const { return _M_cur; }

      std::size_t
      _M_get_bucket() const { return _M_bucket; }
    };





  template<typename _Tp, bool _IsEmpty = std::is_empty<_Tp>::value>
    struct _Hash_code_storage
    {
      __gnu_cxx::__aligned_buffer<_Tp> _M_storage;

      _Tp*
      _M_h() { return _M_storage._M_ptr(); }

      const _Tp*
      _M_h() const { return _M_storage._M_ptr(); }
    };


  template<typename _Tp>
    struct _Hash_code_storage<_Tp, true>
    {
      static_assert( std::is_empty<_Tp>::value, "Type must be empty" );



      _Tp*
      _M_h() { return reinterpret_cast<_Tp*>(this); }

      const _Tp*
      _M_h() const { return reinterpret_cast<const _Tp*>(this); }
    };

  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _H1, typename _H2, typename _Hash>
    using __hash_code_for_local_iter
      = _Hash_code_storage<_Hash_code_base<_Key, _Value, _ExtractKey,
        _H1, _H2, _Hash, false>>;


  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _H1, typename _H2, typename _Hash>
    struct _Local_iterator_base<_Key, _Value, _ExtractKey,
    _H1, _H2, _Hash, false>
    : __hash_code_for_local_iter<_Key, _Value, _ExtractKey, _H1, _H2, _Hash>
    {
    protected:
      using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,
            _H1, _H2, _Hash, false>;

      _Local_iterator_base() : _M_bucket_count(-1) { }

      _Local_iterator_base(const __hash_code_base& __base,
      _Hash_node<_Value, false>* __p,
      std::size_t __bkt, std::size_t __bkt_count)
      : _M_cur(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count)
      { _M_init(__base); }

      ~_Local_iterator_base()
      {
 if (_M_bucket_count != -1)
   _M_destroy();
      }

      _Local_iterator_base(const _Local_iterator_base& __iter)
      : _M_cur(__iter._M_cur), _M_bucket(__iter._M_bucket),
        _M_bucket_count(__iter._M_bucket_count)
      {
 if (_M_bucket_count != -1)
   _M_init(*__iter._M_h());
      }

      _Local_iterator_base&
      operator=(const _Local_iterator_base& __iter)
      {
 if (_M_bucket_count != -1)
   _M_destroy();
 _M_cur = __iter._M_cur;
 _M_bucket = __iter._M_bucket;
 _M_bucket_count = __iter._M_bucket_count;
 if (_M_bucket_count != -1)
   _M_init(*__iter._M_h());
 return *this;
      }

      void
      _M_incr()
      {
 _M_cur = _M_cur->_M_next();
 if (_M_cur)
   {
     std::size_t __bkt = this->_M_h()->_M_bucket_index(_M_cur,
             _M_bucket_count);
     if (__bkt != _M_bucket)
       _M_cur = nullptr;
   }
      }

      _Hash_node<_Value, false>* _M_cur;
      std::size_t _M_bucket;
      std::size_t _M_bucket_count;

      void
      _M_init(const __hash_code_base& __base)
      { ::new(this->_M_h()) __hash_code_base(__base); }

      void
      _M_destroy() { this->_M_h()->~__hash_code_base(); }

    public:
      const void*
      _M_curr() const { return _M_cur; }

      std::size_t
      _M_get_bucket() const { return _M_bucket; }
    };

  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _H1, typename _H2, typename _Hash, bool __cache>
    inline bool
    operator==(const _Local_iterator_base<_Key, _Value, _ExtractKey,
       _H1, _H2, _Hash, __cache>& __x,
        const _Local_iterator_base<_Key, _Value, _ExtractKey,
       _H1, _H2, _Hash, __cache>& __y)
    { return __x._M_curr() == __y._M_curr(); }

  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _H1, typename _H2, typename _Hash, bool __cache>
    inline bool
    operator!=(const _Local_iterator_base<_Key, _Value, _ExtractKey,
       _H1, _H2, _Hash, __cache>& __x,
        const _Local_iterator_base<_Key, _Value, _ExtractKey,
       _H1, _H2, _Hash, __cache>& __y)
    { return __x._M_curr() != __y._M_curr(); }


  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _H1, typename _H2, typename _Hash,
    bool __constant_iterators, bool __cache>
    struct _Local_iterator
    : public _Local_iterator_base<_Key, _Value, _ExtractKey,
      _H1, _H2, _Hash, __cache>
    {
    private:
      using __base_type = _Local_iterator_base<_Key, _Value, _ExtractKey,
            _H1, _H2, _Hash, __cache>;
      using __hash_code_base = typename __base_type::__hash_code_base;
    public:
      typedef _Value value_type;
      typedef typename std::conditional<__constant_iterators,
     const _Value*, _Value*>::type
             pointer;
      typedef typename std::conditional<__constant_iterators,
     const _Value&, _Value&>::type
             reference;
      typedef std::ptrdiff_t difference_type;
      typedef std::forward_iterator_tag iterator_category;

      _Local_iterator() = default;

      _Local_iterator(const __hash_code_base& __base,
        _Hash_node<_Value, __cache>* __p,
        std::size_t __bkt, std::size_t __bkt_count)
 : __base_type(__base, __p, __bkt, __bkt_count)
      { }

      reference
      operator*() const
      { return this->_M_cur->_M_v(); }

      pointer
      operator->() const
      { return this->_M_cur->_M_valptr(); }

      _Local_iterator&
      operator++()
      {
 this->_M_incr();
 return *this;
      }

      _Local_iterator
      operator++(int)
      {
 _Local_iterator __tmp(*this);
 this->_M_incr();
 return __tmp;
      }
    };


  template<typename _Key, typename _Value, typename _ExtractKey,
    typename _H1, typename _H2, typename _Hash,
    bool __constant_iterators, bool __cache>
    struct _Local_const_iterator
    : public _Local_iterator_base<_Key, _Value, _ExtractKey,
      _H1, _H2, _Hash, __cache>
    {
    private:
      using __base_type = _Local_iterator_base<_Key, _Value, _ExtractKey,
            _H1, _H2, _Hash, __cache>;
      using __hash_code_base = typename __base_type::__hash_code_base;

    public:
      typedef _Value value_type;
      typedef const _Value* pointer;
      typedef const _Value& reference;
      typedef std::ptrdiff_t difference_type;
      typedef std::forward_iterator_tag iterator_category;

      _Local_const_iterator() = default;

      _Local_const_iterator(const __hash_code_base& __base,
       _Hash_node<_Value, __cache>* __p,
       std::size_t __bkt, std::size_t __bkt_count)
 : __base_type(__base, __p, __bkt, __bkt_count)
      { }

      _Local_const_iterator(const _Local_iterator<_Key, _Value, _ExtractKey,
        _H1, _H2, _Hash,
        __constant_iterators,
        __cache>& __x)
 : __base_type(__x)
      { }

      reference
      operator*() const
      { return this->_M_cur->_M_v(); }

      pointer
      operator->() const
      { return this->_M_cur->_M_valptr(); }

      _Local_const_iterator&
      operator++()
      {
 this->_M_incr();
 return *this;
      }

      _Local_const_iterator
      operator++(int)
      {
 _Local_const_iterator __tmp(*this);
 this->_M_incr();
 return __tmp;
      }
    };
# 1643 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hashtable_policy.h" 3
  template<typename _Key, typename _Value,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _Traits>
  struct _Hashtable_base
  : public _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash,
      _Traits::__hash_cached::value>,
    private _Hashtable_ebo_helper<0, _Equal>
  {
  public:
    typedef _Key key_type;
    typedef _Value value_type;
    typedef _Equal key_equal;
    typedef std::size_t size_type;
    typedef std::ptrdiff_t difference_type;

    using __traits_type = _Traits;
    using __hash_cached = typename __traits_type::__hash_cached;
    using __constant_iterators = typename __traits_type::__constant_iterators;
    using __unique_keys = typename __traits_type::__unique_keys;

    using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,
          _H1, _H2, _Hash,
          __hash_cached::value>;

    using __hash_code = typename __hash_code_base::__hash_code;
    using __node_type = typename __hash_code_base::__node_type;

    using iterator = __detail::_Node_iterator<value_type,
           __constant_iterators::value,
           __hash_cached::value>;

    using const_iterator = __detail::_Node_const_iterator<value_type,
         __constant_iterators::value,
         __hash_cached::value>;

    using local_iterator = __detail::_Local_iterator<key_type, value_type,
        _ExtractKey, _H1, _H2, _Hash,
        __constant_iterators::value,
           __hash_cached::value>;

    using const_local_iterator = __detail::_Local_const_iterator<key_type,
         value_type,
     _ExtractKey, _H1, _H2, _Hash,
     __constant_iterators::value,
     __hash_cached::value>;

    using __ireturn_type = typename std::conditional<__unique_keys::value,
           std::pair<iterator, bool>,
           iterator>::type;
  private:
    using _EqualEBO = _Hashtable_ebo_helper<0, _Equal>;
    using _EqualHelper = _Equal_helper<_Key, _Value, _ExtractKey, _Equal,
     __hash_code, __hash_cached::value>;

  protected:
    _Hashtable_base(const _ExtractKey& __ex, const _H1& __h1, const _H2& __h2,
      const _Hash& __hash, const _Equal& __eq)
    : __hash_code_base(__ex, __h1, __h2, __hash), _EqualEBO(__eq)
    { }

    bool
    _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const
    {
      return _EqualHelper::_S_equals(_M_eq(), this->_M_extract(),
         __k, __c, __n);
    }

    void
    _M_swap(_Hashtable_base& __x)
    {
      __hash_code_base::_M_swap(__x);
      std::swap(_M_eq(), __x._M_eq());
    }

    const _Equal&
    _M_eq() const { return _EqualEBO::_S_cget(*this); }

    _Equal&
    _M_eq() { return _EqualEBO::_S_get(*this); }
  };






  struct _Equality_base
  {
  protected:
    template<typename _Uiterator>
      static bool
      _S_is_permutation(_Uiterator, _Uiterator, _Uiterator);
  };


  template<typename _Uiterator>
    bool
    _Equality_base::
    _S_is_permutation(_Uiterator __first1, _Uiterator __last1,
        _Uiterator __first2)
    {
      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!(*__first1 == *__first2))
   break;

      if (__first1 == __last1)
 return true;

      _Uiterator __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));

      for (_Uiterator __it1 = __first1; __it1 != __last1; ++__it1)
 {
   _Uiterator __tmp = __first1;
   while (__tmp != __it1 && !bool(*__tmp == *__it1))
     ++__tmp;


   if (__tmp != __it1)
     continue;

   std::ptrdiff_t __n2 = 0;
   for (__tmp = __first2; __tmp != __last2; ++__tmp)
     if (*__tmp == *__it1)
       ++__n2;

   if (!__n2)
     return false;

   std::ptrdiff_t __n1 = 0;
   for (__tmp = __it1; __tmp != __last1; ++__tmp)
     if (*__tmp == *__it1)
       ++__n1;

   if (__n1 != __n2)
     return false;
 }
      return true;
    }
# 1791 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hashtable_policy.h" 3
  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits,
    bool _Unique_keys = _Traits::__unique_keys::value>
    struct _Equality;


  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    struct _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal,
       _H1, _H2, _Hash, _RehashPolicy, _Traits, true>
    {
      using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         _H1, _H2, _Hash, _RehashPolicy, _Traits>;

      bool
      _M_equal(const __hashtable&) const;
    };

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    bool
    _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal,
       _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::
    _M_equal(const __hashtable& __other) const
    {
      const __hashtable* __this = static_cast<const __hashtable*>(this);

      if (__this->size() != __other.size())
 return false;

      for (auto __itx = __this->begin(); __itx != __this->end(); ++__itx)
 {
   const auto __ity = __other.find(_ExtractKey()(*__itx));
   if (__ity == __other.end() || !bool(*__ity == *__itx))
     return false;
 }
      return true;
    }


  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    struct _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal,
       _H1, _H2, _Hash, _RehashPolicy, _Traits, false>
    : public _Equality_base
    {
      using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
         _H1, _H2, _Hash, _RehashPolicy, _Traits>;

      bool
      _M_equal(const __hashtable&) const;
    };

  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    bool
    _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal,
       _H1, _H2, _Hash, _RehashPolicy, _Traits, false>::
    _M_equal(const __hashtable& __other) const
    {
      const __hashtable* __this = static_cast<const __hashtable*>(this);

      if (__this->size() != __other.size())
 return false;

      for (auto __itx = __this->begin(); __itx != __this->end();)
 {
   const auto __xrange = __this->equal_range(_ExtractKey()(*__itx));
   const auto __yrange = __other.equal_range(_ExtractKey()(*__itx));

   if (std::distance(__xrange.first, __xrange.second)
       != std::distance(__yrange.first, __yrange.second))
     return false;

   if (!_S_is_permutation(__xrange.first, __xrange.second,
     __yrange.first))
     return false;

   __itx = __xrange.second;
 }
      return true;
    }





  template<typename _NodeAlloc>
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
    {
    private:
      using __ebo_node_alloc = _Hashtable_ebo_helper<0, _NodeAlloc>;
    public:
      using __node_type = typename _NodeAlloc::value_type;
      using __node_alloc_type = _NodeAlloc;

      using __node_alloc_traits = __gnu_cxx::__alloc_traits<__node_alloc_type>;

      using __value_type = typename __node_type::value_type;
      using __value_alloc_type =
 typename __alloctr_rebind<__node_alloc_type, __value_type>::__type;
      using __value_alloc_traits = std::allocator_traits<__value_alloc_type>;

      using __node_base = __detail::_Hash_node_base;
      using __bucket_type = __node_base*;
      using __bucket_alloc_type =
 typename __alloctr_rebind<__node_alloc_type, __bucket_type>::__type;
      using __bucket_alloc_traits = std::allocator_traits<__bucket_alloc_type>;

      _Hashtable_alloc(const _Hashtable_alloc&) = default;
      _Hashtable_alloc(_Hashtable_alloc&&) = default;

      template<typename _Alloc>
 _Hashtable_alloc(_Alloc&& __a)
   : __ebo_node_alloc(std::forward<_Alloc>(__a))
 { }

      __node_alloc_type&
      _M_node_allocator()
      { return __ebo_node_alloc::_S_get(*this); }

      const __node_alloc_type&
      _M_node_allocator() const
      { return __ebo_node_alloc::_S_cget(*this); }

      template<typename... _Args>
 __node_type*
 _M_allocate_node(_Args&&... __args);

      void
      _M_deallocate_node(__node_type* __n);


      void
      _M_deallocate_nodes(__node_type* __n);

      __bucket_type*
      _M_allocate_buckets(std::size_t __n);

      void
      _M_deallocate_buckets(__bucket_type*, std::size_t __n);
    };



  template<typename _NodeAlloc>
    template<typename... _Args>
      typename _Hashtable_alloc<_NodeAlloc>::__node_type*
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
      {
 auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 __node_type* __n = std::__addressof(*__nptr);
 try
   {
     __value_alloc_type __a(_M_node_allocator());
     ::new ((void*)__n) __node_type;
     __value_alloc_traits::construct(__a, __n->_M_valptr(),
         std::forward<_Args>(__args)...);
     return __n;
   }
 catch(...)
   {
     __node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);
     throw;
   }
      }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
    {
      typedef typename __node_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
      __value_alloc_type __a(_M_node_allocator());
      __value_alloc_traits::destroy(__a, __n->_M_valptr());
      __n->~__node_type();
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
    {
      while (__n)
 {
   __node_type* __tmp = __n;
   __n = __n->_M_next();
   _M_deallocate_node(__tmp);
 }
    }

  template<typename _NodeAlloc>
    typename _Hashtable_alloc<_NodeAlloc>::__bucket_type*
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __n)
    {
      __bucket_alloc_type __alloc(_M_node_allocator());

      auto __ptr = __bucket_alloc_traits::allocate(__alloc, __n);
      __bucket_type* __p = std::__addressof(*__ptr);
      __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts,
       std::size_t __n)
    {
      typedef typename __bucket_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
      __bucket_alloc_type __alloc(_M_node_allocator());
      __bucket_alloc_traits::deallocate(__alloc, __ptr, __n);
    }



}
}
# 36 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hashtable.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Hash>
    using __cache_default
      = __not_<__and_<
         __is_fast_hash<_Hash>,

         __detail::__is_noexcept_hash<_Tp, _Hash>>>;
# 166 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/hashtable.h" 3
  template<typename _Key, typename _Value, typename _Alloc,
    typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash,
    typename _RehashPolicy, typename _Traits>
    class _Hashtable
    : public __detail::_Hashtable_base<_Key, _Value, _ExtractKey, _Equal,
           _H1, _H2, _Hash, _Traits>,
      public __detail::_Map_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
     _H1, _H2, _Hash, _RehashPolicy, _Traits>,
      public __detail::_Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal,
          _H1, _H2, _Hash, _RehashPolicy, _Traits>,
      public __detail::_Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>,
      public __detail::_Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal,
     _H1, _H2, _Hash, _RehashPolicy, _Traits>,
      private __detail::_Hashtable_alloc<
 typename __alloctr_rebind<_Alloc,
   __detail::_Hash_node<_Value,
          _Traits::__hash_cached::value> >::__type>
    {
      using __traits_type = _Traits;
      using __hash_cached = typename __traits_type::__hash_cached;
      using __node_type = __detail::_Hash_node<_Value, __hash_cached::value>;
      using __node_alloc_type =
 typename __alloctr_rebind<_Alloc, __node_type>::__type;

      using __hashtable_alloc = __detail::_Hashtable_alloc<__node_alloc_type>;

      using __value_alloc_traits =
 typename __hashtable_alloc::__value_alloc_traits;
      using __node_alloc_traits =
 typename __hashtable_alloc::__node_alloc_traits;
      using __node_base = typename __hashtable_alloc::__node_base;
      using __bucket_type = typename __hashtable_alloc::__bucket_type;

    public:
      typedef _Key key_type;
      typedef _Value value_type;
      typedef _Alloc allocator_type;
      typedef _Equal key_equal;



      typedef typename __value_alloc_traits::pointer pointer;
      typedef typename __value_alloc_traits::const_pointer const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;

    private:
      using __rehash_type = _RehashPolicy;
      using __rehash_state = typename __rehash_type::_State;

      using __constant_iterators = typename __traits_type::__constant_iterators;
      using __unique_keys = typename __traits_type::__unique_keys;

      using __key_extract = typename std::conditional<
          __constant_iterators::value,
                 __detail::_Identity,
          __detail::_Select1st>::type;

      using __hashtable_base = __detail::
          _Hashtable_base<_Key, _Value, _ExtractKey,
           _Equal, _H1, _H2, _Hash, _Traits>;

      using __hash_code_base = typename __hashtable_base::__hash_code_base;
      using __hash_code = typename __hashtable_base::__hash_code;
      using __ireturn_type = typename __hashtable_base::__ireturn_type;

      using __map_base = __detail::_Map_base<_Key, _Value, _Alloc, _ExtractKey,
          _Equal, _H1, _H2, _Hash,
          _RehashPolicy, _Traits>;

      using __rehash_base = __detail::_Rehash_base<_Key, _Value, _Alloc,
         _ExtractKey, _Equal,
         _H1, _H2, _Hash,
         _RehashPolicy, _Traits>;

      using __eq_base = __detail::_Equality<_Key, _Value, _Alloc, _ExtractKey,
         _Equal, _H1, _H2, _Hash,
         _RehashPolicy, _Traits>;

      using __reuse_or_alloc_node_type =
 __detail::_ReuseOrAllocNode<__node_alloc_type>;


      template<typename _Cond>
 using __if_hash_cached = __or_<__not_<__hash_cached>, _Cond>;

      template<typename _Cond>
 using __if_hash_not_cached = __or_<__hash_cached, _Cond>;





      struct __hash_code_base_access : __hash_code_base
      { using __hash_code_base::_M_bucket_index; };



      static_assert(noexcept(declval<const __hash_code_base_access&>()
        ._M_bucket_index((const __node_type*)nullptr,
           (std::size_t)0)),
      "Cache the hash code or qualify your functors involved"
      " in hash code and bucket index computation with noexcept");






      static_assert(__if_hash_cached<is_default_constructible<_H2>>::value,
      "Functor used to map hash code to bucket index"
      " must be default constructible");

      template<typename _Keya, typename _Valuea, typename _Alloca,
        typename _ExtractKeya, typename _Equala,
        typename _H1a, typename _H2a, typename _Hasha,
        typename _RehashPolicya, typename _Traitsa,
        bool _Unique_keysa>
 friend struct __detail::_Map_base;

      template<typename _Keya, typename _Valuea, typename _Alloca,
        typename _ExtractKeya, typename _Equala,
        typename _H1a, typename _H2a, typename _Hasha,
        typename _RehashPolicya, typename _Traitsa>
 friend struct __detail::_Insert_base;

      template<typename _Keya, typename _Valuea, typename _Alloca,
        typename _ExtractKeya, typename _Equala,
        typename _H1a, typename _H2a, typename _Hasha,
        typename _RehashPolicya, typename _Traitsa,
        bool _Constant_iteratorsa, bool _Unique_keysa>
 friend struct __detail::_Insert;

    public:
      using size_type = typename __hashtable_base::size_type;
      using difference_type = typename __hashtable_base::difference_type;

      using iterator = typename __hashtable_base::iterator;
      using const_iterator = typename __hashtable_base::const_iterator;

      using local_iterator = typename __hashtable_base::local_iterator;
      using const_local_iterator = typename __hashtable_base::
       const_local_iterator;

    private:
      __bucket_type* _M_buckets;
      size_type _M_bucket_count;
      __node_base _M_before_begin;
      size_type _M_element_count;
      _RehashPolicy _M_rehash_policy;







      __bucket_type _M_single_bucket;

      bool
      _M_uses_single_bucket(__bucket_type* __bkts) const
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }

      bool
      _M_uses_single_bucket() const
      { return _M_uses_single_bucket(_M_buckets); }

      __hashtable_alloc&
      _M_base_alloc() { return *this; }

      __bucket_type*
      _M_allocate_buckets(size_type __n)
      {
 if (__builtin_expect(__n == 1, false))
   {
     _M_single_bucket = nullptr;
     return &_M_single_bucket;
   }

 return __hashtable_alloc::_M_allocate_buckets(__n);
      }

      void
      _M_deallocate_buckets(__bucket_type* __bkts, size_type __n)
      {
 if (_M_uses_single_bucket(__bkts))
   return;

 __hashtable_alloc::_M_deallocate_buckets(__bkts, __n);
      }

      void
      _M_deallocate_buckets()
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }



      __node_type*
      _M_bucket_begin(size_type __bkt) const;

      __node_type*
      _M_begin() const
      { return static_cast<__node_type*>(_M_before_begin._M_nxt); }

      template<typename _NodeGenerator>
 void
 _M_assign(const _Hashtable&, const _NodeGenerator&);

      void
      _M_move_assign(_Hashtable&&, std::true_type);

      void
      _M_move_assign(_Hashtable&&, std::false_type);

      void
      _M_reset() noexcept;

    public:

      _Hashtable(size_type __bucket_hint,
   const _H1&, const _H2&, const _Hash&,
   const _Equal&, const _ExtractKey&,
   const allocator_type&);

      template<typename _InputIterator>
 _Hashtable(_InputIterator __first, _InputIterator __last,
     size_type __bucket_hint,
     const _H1&, const _H2&, const _Hash&,
     const _Equal&, const _ExtractKey&,
     const allocator_type&);

      _Hashtable(const _Hashtable&);

      _Hashtable(_Hashtable&&) noexcept;

      _Hashtable(const _Hashtable&, const allocator_type&);

      _Hashtable(_Hashtable&&, const allocator_type&);


      explicit
      _Hashtable(const allocator_type& __a)
      : _Hashtable(10, _H1(), _H2(), _Hash(), key_equal(),
     __key_extract(), __a)
      { }

      explicit
      _Hashtable(size_type __n = 10,
   const _H1& __hf = _H1(),
   const key_equal& __eql = key_equal(),
   const allocator_type& __a = allocator_type())
      : _Hashtable(__n, __hf, _H2(), _Hash(), __eql,
     __key_extract(), __a)
      { }

      template<typename _InputIterator>
 _Hashtable(_InputIterator __f, _InputIterator __l,
     size_type __n = 0,
     const _H1& __hf = _H1(),
     const key_equal& __eql = key_equal(),
     const allocator_type& __a = allocator_type())
 : _Hashtable(__f, __l, __n, __hf, _H2(), _Hash(), __eql,
       __key_extract(), __a)
 { }

      _Hashtable(initializer_list<value_type> __l,
   size_type __n = 0,
   const _H1& __hf = _H1(),
   const key_equal& __eql = key_equal(),
   const allocator_type& __a = allocator_type())
      : _Hashtable(__l.begin(), __l.end(), __n, __hf, _H2(), _Hash(), __eql,
     __key_extract(), __a)
      { }

      _Hashtable&
      operator=(const _Hashtable& __ht);

      _Hashtable&
      operator=(_Hashtable&& __ht)
      noexcept(__node_alloc_traits::_S_nothrow_move())
      {
        constexpr bool __move_storage =
          __node_alloc_traits::_S_propagate_on_move_assign()
          || __node_alloc_traits::_S_always_equal();
        _M_move_assign(std::move(__ht),
                       integral_constant<bool, __move_storage>());
 return *this;
      }

      _Hashtable&
      operator=(initializer_list<value_type> __l)
      {
 __reuse_or_alloc_node_type __roan(_M_begin(), *this);
 _M_before_begin._M_nxt = nullptr;
 clear();
 this->_M_insert_range(__l.begin(), __l.end(), __roan);
 return *this;
      }

      ~_Hashtable() noexcept;

      void
      swap(_Hashtable&)
      noexcept(__node_alloc_traits::_S_nothrow_swap());


      iterator
      begin() noexcept
      { return iterator(_M_begin()); }

      const_iterator
      begin() const noexcept
      { return const_iterator(_M_begin()); }

      iterator
      end() noexcept
      { return iterator(nullptr); }

      const_iterator
      end() const noexcept
      { return const_iterator(nullptr); }

      const_iterator
      cbegin() const noexcept
      { return const_iterator(_M_begin()); }

      const_iterator
      cend() const noexcept
      { return const_iterator(nullptr); }

      size_type
      size() const noexcept
      { return _M_element_count; }

      bool
      empty() const noexcept
      { return size() == 0; }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(this->_M_node_allocator()); }

      size_type
      max_size() const noexcept
      { return __node_alloc_traits::max_size(this->_M_node_allocator()); }


      key_equal
      key_eq() const
      { return this->_M_eq(); }




      size_type
      bucket_count() const noexcept
      { return _M_bucket_count; }

      size_type
      max_bucket_count() const noexcept
      { return max_size(); }

      size_type
      bucket_size(size_type __n) const
      { return std::distance(begin(__n), end(__n)); }

      size_type
      bucket(const key_type& __k) const
      { return _M_bucket_index(__k, this->_M_hash_code(__k)); }

      local_iterator
      begin(size_type __n)
      {
 return local_iterator(*this, _M_bucket_begin(__n),
         __n, _M_bucket_count);
      }

      local_iterator
      end(size_type __n)
      { return local_iterator(*this, nullptr, __n, _M_bucket_count); }

      const_local_iterator
      begin(size_type __n) const
      {
 return const_local_iterator(*this, _M_bucket_begin(__n),
        __n, _M_bucket_count);
      }

      const_local_iterator
      end(size_type __n) const
      { return const_local_iterator(*this, nullptr, __n, _M_bucket_count); }


      const_local_iterator
      cbegin(size_type __n) const
      {
 return const_local_iterator(*this, _M_bucket_begin(__n),
        __n, _M_bucket_count);
      }

      const_local_iterator
      cend(size_type __n) const
      { return const_local_iterator(*this, nullptr, __n, _M_bucket_count); }

      float
      load_factor() const noexcept
      {
 return static_cast<float>(size()) / static_cast<float>(bucket_count());
      }






      const _RehashPolicy&
      __rehash_policy() const
      { return _M_rehash_policy; }

      void
      __rehash_policy(const _RehashPolicy&);


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      std::pair<iterator, iterator>
      equal_range(const key_type& __k);

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;

    protected:

      size_type
      _M_bucket_index(__node_type* __n) const noexcept
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }

      size_type
      _M_bucket_index(const key_type& __k, __hash_code __c) const
      { return __hash_code_base::_M_bucket_index(__k, __c, _M_bucket_count); }



      __node_base*
      _M_find_before_node(size_type, const key_type&, __hash_code) const;

      __node_type*
      _M_find_node(size_type __bkt, const key_type& __key,
     __hash_code __c) const
      {
 __node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
 if (__before_n)
   return static_cast<__node_type*>(__before_n->_M_nxt);
 return nullptr;
      }


      void
      _M_insert_bucket_begin(size_type, __node_type*);


      void
      _M_remove_bucket_begin(size_type __bkt, __node_type* __next_n,
        size_type __next_bkt);


      __node_base*
      _M_get_previous_node(size_type __bkt, __node_base* __n);




      iterator
      _M_insert_unique_node(size_type __bkt, __hash_code __code,
       __node_type* __n);



      iterator
      _M_insert_multi_node(__node_type* __hint,
      __hash_code __code, __node_type* __n);

      template<typename... _Args>
 std::pair<iterator, bool>
 _M_emplace(std::true_type, _Args&&... __args);

      template<typename... _Args>
 iterator
 _M_emplace(std::false_type __uk, _Args&&... __args)
 { return _M_emplace(cend(), __uk, std::forward<_Args>(__args)...); }


      template<typename... _Args>
 iterator
 _M_emplace(const_iterator, std::true_type __uk, _Args&&... __args)
 { return _M_emplace(__uk, std::forward<_Args>(__args)...).first; }

      template<typename... _Args>
 iterator
 _M_emplace(const_iterator, std::false_type, _Args&&... __args);

      template<typename _Arg, typename _NodeGenerator>
 std::pair<iterator, bool>
 _M_insert(_Arg&&, const _NodeGenerator&, std::true_type);

      template<typename _Arg, typename _NodeGenerator>
 iterator
 _M_insert(_Arg&& __arg, const _NodeGenerator& __node_gen,
    std::false_type __uk)
 {
   return _M_insert(cend(), std::forward<_Arg>(__arg), __node_gen,
      __uk);
 }


      template<typename _Arg, typename _NodeGenerator>
 iterator
 _M_insert(const_iterator, _Arg&& __arg, const _NodeGenerator& __node_gen,
    std::true_type __uk)
 {
   return
     _M_insert(std::forward<_Arg>(__arg), __node_gen, __uk).first;
 }


      template<typename _Arg, typename _NodeGenerator>
 iterator
 _M_insert(const_iterator, _Arg&&, const _NodeGenerator&, std::false_type);

      size_type
      _M_erase(std::true_type, const key_type&);

      size_type
      _M_erase(std::false_type, const key_type&);

      iterator
      _M_erase(size_type __bkt, __node_base* __prev_n, __node_type* __n);

    public:

      template<typename... _Args>
 __ireturn_type
 emplace(_Args&&... __args)
 { return _M_emplace(__unique_keys(), std::forward<_Args>(__args)...); }

      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __hint, _Args&&... __args)
 {
   return _M_emplace(__hint, __unique_keys(),
       std::forward<_Args>(__args)...);
 }




      iterator
      erase(const_iterator);


      iterator
      erase(iterator __it)
      { return erase(const_iterator(__it)); }

      size_type
      erase(const key_type& __k)
      { return _M_erase(__unique_keys(), __k); }

      iterator
      erase(const_iterator, const_iterator);

      void
      clear() noexcept;


      void rehash(size_type __n);




    private:

      void _M_rehash_aux(size_type __n, std::true_type);


      void _M_rehash_aux(size_type __n, std::false_type);



      void _M_rehash(size_type __n, const __rehash_state& __state);
    };



  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey,
   _Equal, _H1, _H2, _Hash, _RehashPolicy,
   _Traits>::__node_type*
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_bucket_begin(size_type __bkt) const
    {
      __node_base* __n = _M_buckets[__bkt];
      return __n ? static_cast<__node_type*>(__n->_M_nxt) : nullptr;
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _Hashtable(size_type __bucket_hint,
        const _H1& __h1, const _H2& __h2, const _Hash& __h,
        const _Equal& __eq, const _ExtractKey& __exk,
        const allocator_type& __a)
    : __hashtable_base(__exk, __h1, __h2, __h, __eq),
      __map_base(),
      __rehash_base(),
      __hashtable_alloc(__node_alloc_type(__a)),
      _M_element_count(0),
      _M_rehash_policy()
    {
      _M_bucket_count = _M_rehash_policy._M_next_bkt(__bucket_hint);
      _M_buckets = _M_allocate_buckets(_M_bucket_count);
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    template<typename _InputIterator>
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy, _Traits>::
      _Hashtable(_InputIterator __f, _InputIterator __l,
   size_type __bucket_hint,
   const _H1& __h1, const _H2& __h2, const _Hash& __h,
   const _Equal& __eq, const _ExtractKey& __exk,
   const allocator_type& __a)
      : __hashtable_base(__exk, __h1, __h2, __h, __eq),
 __map_base(),
 __rehash_base(),
 __hashtable_alloc(__node_alloc_type(__a)),
 _M_element_count(0),
 _M_rehash_policy()
      {
 auto __nb_elems = __detail::__distance_fw(__f, __l);
 _M_bucket_count =
   _M_rehash_policy._M_next_bkt(
     std::max(_M_rehash_policy._M_bkt_for_elements(__nb_elems),
       __bucket_hint));

 _M_buckets = _M_allocate_buckets(_M_bucket_count);
 try
   {
     for (; __f != __l; ++__f)
       this->insert(*__f);
   }
 catch(...)
   {
     clear();
     _M_deallocate_buckets();
     throw;
   }
      }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>&
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::operator=(
  const _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
     _H1, _H2, _Hash, _RehashPolicy, _Traits>& __ht)
      {
 if (&__ht == this)
   return *this;

 if (__node_alloc_traits::_S_propagate_on_copy_assign())
   {
     auto& __this_alloc = this->_M_node_allocator();
     auto& __that_alloc = __ht._M_node_allocator();
     if (!__node_alloc_traits::_S_always_equal()
  && __this_alloc != __that_alloc)
       {

  this->_M_deallocate_nodes(_M_begin());
  _M_before_begin._M_nxt = nullptr;
  _M_deallocate_buckets();
  _M_buckets = nullptr;
  std::__alloc_on_copy(__this_alloc, __that_alloc);
  __hashtable_base::operator=(__ht);
  _M_bucket_count = __ht._M_bucket_count;
  _M_element_count = __ht._M_element_count;
  _M_rehash_policy = __ht._M_rehash_policy;
  try
    {
      _M_assign(__ht,
         [this](const __node_type* __n)
         { return this->_M_allocate_node(__n->_M_v()); });
    }
  catch(...)
    {


      _M_reset();
      throw;
    }
  return *this;
       }
     std::__alloc_on_copy(__this_alloc, __that_alloc);
   }


 __bucket_type* __former_buckets = nullptr;
 std::size_t __former_bucket_count = _M_bucket_count;
 const __rehash_state& __former_state = _M_rehash_policy._M_state();

 if (_M_bucket_count != __ht._M_bucket_count)
   {
     __former_buckets = _M_buckets;
     _M_buckets = _M_allocate_buckets(__ht._M_bucket_count);
     _M_bucket_count = __ht._M_bucket_count;
   }
 else
   __builtin_memset(_M_buckets, 0,
      _M_bucket_count * sizeof(__bucket_type));

 try
   {
     __hashtable_base::operator=(__ht);
     _M_element_count = __ht._M_element_count;
     _M_rehash_policy = __ht._M_rehash_policy;
     __reuse_or_alloc_node_type __roan(_M_begin(), *this);
     _M_before_begin._M_nxt = nullptr;
     _M_assign(__ht,
        [&__roan](const __node_type* __n)
        { return __roan(__n->_M_v()); });
     if (__former_buckets)
       _M_deallocate_buckets(__former_buckets, __former_bucket_count);
   }
 catch(...)
   {
     if (__former_buckets)
       {

  _M_deallocate_buckets();
  _M_rehash_policy._M_reset(__former_state);
  _M_buckets = __former_buckets;
  _M_bucket_count = __former_bucket_count;
       }
     __builtin_memset(_M_buckets, 0,
        _M_bucket_count * sizeof(__bucket_type));
     throw;
   }
 return *this;
      }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    template<typename _NodeGenerator>
      void
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy, _Traits>::
      _M_assign(const _Hashtable& __ht, const _NodeGenerator& __node_gen)
      {
 __bucket_type* __buckets = nullptr;
 if (!_M_buckets)
   _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);

 try
   {
     if (!__ht._M_before_begin._M_nxt)
       return;



     __node_type* __ht_n = __ht._M_begin();
     __node_type* __this_n = __node_gen(__ht_n);
     this->_M_copy_code(__this_n, __ht_n);
     _M_before_begin._M_nxt = __this_n;
     _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;


     __node_base* __prev_n = __this_n;
     for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
       {
  __this_n = __node_gen(__ht_n);
  __prev_n->_M_nxt = __this_n;
  this->_M_copy_code(__this_n, __ht_n);
  size_type __bkt = _M_bucket_index(__this_n);
  if (!_M_buckets[__bkt])
    _M_buckets[__bkt] = __prev_n;
  __prev_n = __this_n;
       }
   }
 catch(...)
   {
     clear();
     if (__buckets)
       _M_deallocate_buckets();
     throw;
   }
      }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_reset() noexcept
    {
      _M_rehash_policy._M_reset();
      _M_bucket_count = 1;
      _M_single_bucket = nullptr;
      _M_buckets = &_M_single_bucket;
      _M_before_begin._M_nxt = nullptr;
      _M_element_count = 0;
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_move_assign(_Hashtable&& __ht, std::true_type)
    {
      this->_M_deallocate_nodes(_M_begin());
      _M_deallocate_buckets();
      __hashtable_base::operator=(std::move(__ht));
      _M_rehash_policy = __ht._M_rehash_policy;
      if (!__ht._M_uses_single_bucket())
 _M_buckets = __ht._M_buckets;
      else
 {
   _M_buckets = &_M_single_bucket;
   _M_single_bucket = __ht._M_single_bucket;
 }
      _M_bucket_count = __ht._M_bucket_count;
      _M_before_begin._M_nxt = __ht._M_before_begin._M_nxt;
      _M_element_count = __ht._M_element_count;
      std::__alloc_on_move(this->_M_node_allocator(), __ht._M_node_allocator());



      if (_M_begin())
 _M_buckets[_M_bucket_index(_M_begin())] = &_M_before_begin;
      __ht._M_reset();
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_move_assign(_Hashtable&& __ht, std::false_type)
    {
      if (__ht._M_node_allocator() == this->_M_node_allocator())
 _M_move_assign(std::move(__ht), std::true_type());
      else
 {

   __bucket_type* __former_buckets = nullptr;
   size_type __former_bucket_count = _M_bucket_count;
   const __rehash_state& __former_state = _M_rehash_policy._M_state();

   if (_M_bucket_count != __ht._M_bucket_count)
     {
       __former_buckets = _M_buckets;
       _M_buckets = _M_allocate_buckets(__ht._M_bucket_count);
       _M_bucket_count = __ht._M_bucket_count;
     }
   else
     __builtin_memset(_M_buckets, 0,
        _M_bucket_count * sizeof(__bucket_type));

   try
     {
       __hashtable_base::operator=(std::move(__ht));
       _M_element_count = __ht._M_element_count;
       _M_rehash_policy = __ht._M_rehash_policy;
       __reuse_or_alloc_node_type __roan(_M_begin(), *this);
       _M_before_begin._M_nxt = nullptr;
       _M_assign(__ht,
   [&__roan](__node_type* __n)
   { return __roan(std::move_if_noexcept(__n->_M_v())); });
       __ht.clear();
     }
   catch(...)
     {
       if (__former_buckets)
  {
    _M_deallocate_buckets();
    _M_rehash_policy._M_reset(__former_state);
    _M_buckets = __former_buckets;
    _M_bucket_count = __former_bucket_count;
  }
       __builtin_memset(_M_buckets, 0,
          _M_bucket_count * sizeof(__bucket_type));
       throw;
     }
 }
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _Hashtable(const _Hashtable& __ht)
    : __hashtable_base(__ht),
      __map_base(__ht),
      __rehash_base(__ht),
      __hashtable_alloc(
 __node_alloc_traits::_S_select_on_copy(__ht._M_node_allocator())),
      _M_buckets(),
      _M_bucket_count(__ht._M_bucket_count),
      _M_element_count(__ht._M_element_count),
      _M_rehash_policy(__ht._M_rehash_policy)
    {
      _M_assign(__ht,
  [this](const __node_type* __n)
  { return this->_M_allocate_node(__n->_M_v()); });
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _Hashtable(_Hashtable&& __ht) noexcept
    : __hashtable_base(__ht),
      __map_base(__ht),
      __rehash_base(__ht),
      __hashtable_alloc(std::move(__ht._M_base_alloc())),
      _M_buckets(__ht._M_buckets),
      _M_bucket_count(__ht._M_bucket_count),
      _M_before_begin(__ht._M_before_begin._M_nxt),
      _M_element_count(__ht._M_element_count),
      _M_rehash_policy(__ht._M_rehash_policy)
    {

      if (__ht._M_uses_single_bucket())
 {
   _M_buckets = &_M_single_bucket;
   _M_single_bucket = __ht._M_single_bucket;
 }



      if (_M_begin())
 _M_buckets[_M_bucket_index(_M_begin())] = &_M_before_begin;

      __ht._M_reset();
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _Hashtable(const _Hashtable& __ht, const allocator_type& __a)
    : __hashtable_base(__ht),
      __map_base(__ht),
      __rehash_base(__ht),
      __hashtable_alloc(__node_alloc_type(__a)),
      _M_buckets(),
      _M_bucket_count(__ht._M_bucket_count),
      _M_element_count(__ht._M_element_count),
      _M_rehash_policy(__ht._M_rehash_policy)
    {
      _M_assign(__ht,
  [this](const __node_type* __n)
  { return this->_M_allocate_node(__n->_M_v()); });
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _Hashtable(_Hashtable&& __ht, const allocator_type& __a)
    : __hashtable_base(__ht),
      __map_base(__ht),
      __rehash_base(__ht),
      __hashtable_alloc(__node_alloc_type(__a)),
      _M_buckets(),
      _M_bucket_count(__ht._M_bucket_count),
      _M_element_count(__ht._M_element_count),
      _M_rehash_policy(__ht._M_rehash_policy)
    {
      if (__ht._M_node_allocator() == this->_M_node_allocator())
 {
   if (__ht._M_uses_single_bucket())
     {
       _M_buckets = &_M_single_bucket;
       _M_single_bucket = __ht._M_single_bucket;
     }
   else
     _M_buckets = __ht._M_buckets;

   _M_before_begin._M_nxt = __ht._M_before_begin._M_nxt;


   if (_M_begin())
     _M_buckets[_M_bucket_index(_M_begin())] = &_M_before_begin;
   __ht._M_reset();
 }
      else
 {
   _M_assign(__ht,
      [this](__node_type* __n)
      {
        return this->_M_allocate_node(
     std::move_if_noexcept(__n->_M_v()));
      });
   __ht.clear();
 }
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    ~_Hashtable() noexcept
    {
      clear();
      if (_M_buckets)
 _M_deallocate_buckets();
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    swap(_Hashtable& __x)
    noexcept(__node_alloc_traits::_S_nothrow_swap())
    {



      this->_M_swap(__x);

      std::__alloc_on_swap(this->_M_node_allocator(), __x._M_node_allocator());
      std::swap(_M_rehash_policy, __x._M_rehash_policy);


      if (this->_M_uses_single_bucket())
 {
   if (!__x._M_uses_single_bucket())
     {
       _M_buckets = __x._M_buckets;
       __x._M_buckets = &__x._M_single_bucket;
     }
 }
      else if (__x._M_uses_single_bucket())
 {
   __x._M_buckets = _M_buckets;
   _M_buckets = &_M_single_bucket;
 }
      else
 std::swap(_M_buckets, __x._M_buckets);

      std::swap(_M_bucket_count, __x._M_bucket_count);
      std::swap(_M_before_begin._M_nxt, __x._M_before_begin._M_nxt);
      std::swap(_M_element_count, __x._M_element_count);
      std::swap(_M_single_bucket, __x._M_single_bucket);



      if (_M_begin())
 _M_buckets[_M_bucket_index(_M_begin())] = &_M_before_begin;

      if (__x._M_begin())
 __x._M_buckets[__x._M_bucket_index(__x._M_begin())]
   = &__x._M_before_begin;
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    __rehash_policy(const _RehashPolicy& __pol)
    {
      auto __do_rehash =
 __pol._M_need_rehash(_M_bucket_count, _M_element_count, 0);
      if (__do_rehash.first)
 _M_rehash(__do_rehash.second, _M_rehash_policy._M_state());
      _M_rehash_policy = __pol;
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy,
   _Traits>::iterator
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    find(const key_type& __k)
    {
      __hash_code __code = this->_M_hash_code(__k);
      std::size_t __n = _M_bucket_index(__k, __code);
      __node_type* __p = _M_find_node(__n, __k, __code);
      return __p ? iterator(__p) : end();
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy,
   _Traits>::const_iterator
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    find(const key_type& __k) const
    {
      __hash_code __code = this->_M_hash_code(__k);
      std::size_t __n = _M_bucket_index(__k, __code);
      __node_type* __p = _M_find_node(__n, __k, __code);
      return __p ? const_iterator(__p) : end();
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy,
   _Traits>::size_type
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    count(const key_type& __k) const
    {
      __hash_code __code = this->_M_hash_code(__k);
      std::size_t __n = _M_bucket_index(__k, __code);
      __node_type* __p = _M_bucket_begin(__n);
      if (!__p)
 return 0;

      std::size_t __result = 0;
      for (;; __p = __p->_M_next())
 {
   if (this->_M_equals(__k, __code, __p))
     ++__result;
   else if (__result)



     break;
   if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
     break;
 }
      return __result;
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    std::pair<typename _Hashtable<_Key, _Value, _Alloc,
      _ExtractKey, _Equal, _H1,
      _H2, _Hash, _RehashPolicy,
      _Traits>::iterator,
       typename _Hashtable<_Key, _Value, _Alloc,
      _ExtractKey, _Equal, _H1,
      _H2, _Hash, _RehashPolicy,
      _Traits>::iterator>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    equal_range(const key_type& __k)
    {
      __hash_code __code = this->_M_hash_code(__k);
      std::size_t __n = _M_bucket_index(__k, __code);
      __node_type* __p = _M_find_node(__n, __k, __code);

      if (__p)
 {
   __node_type* __p1 = __p->_M_next();
   while (__p1 && _M_bucket_index(__p1) == __n
   && this->_M_equals(__k, __code, __p1))
     __p1 = __p1->_M_next();

   return std::make_pair(iterator(__p), iterator(__p1));
 }
      else
 return std::make_pair(end(), end());
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    std::pair<typename _Hashtable<_Key, _Value, _Alloc,
      _ExtractKey, _Equal, _H1,
      _H2, _Hash, _RehashPolicy,
      _Traits>::const_iterator,
       typename _Hashtable<_Key, _Value, _Alloc,
      _ExtractKey, _Equal, _H1,
      _H2, _Hash, _RehashPolicy,
      _Traits>::const_iterator>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    equal_range(const key_type& __k) const
    {
      __hash_code __code = this->_M_hash_code(__k);
      std::size_t __n = _M_bucket_index(__k, __code);
      __node_type* __p = _M_find_node(__n, __k, __code);

      if (__p)
 {
   __node_type* __p1 = __p->_M_next();
   while (__p1 && _M_bucket_index(__p1) == __n
   && this->_M_equals(__k, __code, __p1))
     __p1 = __p1->_M_next();

   return std::make_pair(const_iterator(__p), const_iterator(__p1));
 }
      else
 return std::make_pair(end(), end());
    }



  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey,
   _Equal, _H1, _H2, _Hash, _RehashPolicy,
   _Traits>::__node_base*
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_find_before_node(size_type __n, const key_type& __k,
   __hash_code __code) const
    {
      __node_base* __prev_p = _M_buckets[__n];
      if (!__prev_p)
 return nullptr;

      for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);;
    __p = __p->_M_next())
 {
   if (this->_M_equals(__k, __code, __p))
     return __prev_p;

   if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
     break;
   __prev_p = __p;
 }
      return nullptr;
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_insert_bucket_begin(size_type __bkt, __node_type* __node)
    {
      if (_M_buckets[__bkt])
 {


   __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
   _M_buckets[__bkt]->_M_nxt = __node;
 }
      else
 {



   __node->_M_nxt = _M_before_begin._M_nxt;
   _M_before_begin._M_nxt = __node;
   if (__node->_M_nxt)


     _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
   _M_buckets[__bkt] = &_M_before_begin;
 }
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_remove_bucket_begin(size_type __bkt, __node_type* __next,
      size_type __next_bkt)
    {
      if (!__next || __next_bkt != __bkt)
 {


   if (__next)
     _M_buckets[__next_bkt] = _M_buckets[__bkt];


   if (&_M_before_begin == _M_buckets[__bkt])
     _M_before_begin._M_nxt = __next;
   _M_buckets[__bkt] = nullptr;
 }
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey,
   _Equal, _H1, _H2, _Hash, _RehashPolicy,
   _Traits>::__node_base*
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_get_previous_node(size_type __bkt, __node_base* __n)
    {
      __node_base* __prev_n = _M_buckets[__bkt];
      while (__prev_n->_M_nxt != __n)
 __prev_n = __prev_n->_M_nxt;
      return __prev_n;
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    template<typename... _Args>
      std::pair<typename _Hashtable<_Key, _Value, _Alloc,
        _ExtractKey, _Equal, _H1,
        _H2, _Hash, _RehashPolicy,
        _Traits>::iterator, bool>
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy, _Traits>::
      _M_emplace(std::true_type, _Args&&... __args)
      {

 __node_type* __node = this->_M_allocate_node(std::forward<_Args>(__args)...);
 const key_type& __k = this->_M_extract()(__node->_M_v());
 __hash_code __code;
 try
   {
     __code = this->_M_hash_code(__k);
   }
 catch(...)
   {
     this->_M_deallocate_node(__node);
     throw;
   }

 size_type __bkt = _M_bucket_index(__k, __code);
 if (__node_type* __p = _M_find_node(__bkt, __k, __code))
   {

     this->_M_deallocate_node(__node);
     return std::make_pair(iterator(__p), false);
   }


 return std::make_pair(_M_insert_unique_node(__bkt, __code, __node),
         true);
      }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    template<typename... _Args>
      typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
     _H1, _H2, _Hash, _RehashPolicy,
     _Traits>::iterator
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy, _Traits>::
      _M_emplace(const_iterator __hint, std::false_type, _Args&&... __args)
      {

 __node_type* __node =
   this->_M_allocate_node(std::forward<_Args>(__args)...);

 __hash_code __code;
 try
   {
     __code = this->_M_hash_code(this->_M_extract()(__node->_M_v()));
   }
 catch(...)
   {
     this->_M_deallocate_node(__node);
     throw;
   }

 return _M_insert_multi_node(__hint._M_cur, __code, __node);
      }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy,
   _Traits>::iterator
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_insert_unique_node(size_type __bkt, __hash_code __code,
     __node_type* __node)
    {
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
      std::pair<bool, std::size_t> __do_rehash
 = _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);

      try
 {
   if (__do_rehash.first)
     {
       _M_rehash(__do_rehash.second, __saved_state);
       __bkt = _M_bucket_index(this->_M_extract()(__node->_M_v()), __code);
     }

   this->_M_store_code(__node, __code);


   _M_insert_bucket_begin(__bkt, __node);
   ++_M_element_count;
   return iterator(__node);
 }
      catch(...)
 {
   this->_M_deallocate_node(__node);
   throw;
 }
    }



  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy,
   _Traits>::iterator
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_insert_multi_node(__node_type* __hint, __hash_code __code,
    __node_type* __node)
    {
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
      std::pair<bool, std::size_t> __do_rehash
 = _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);

      try
 {
   if (__do_rehash.first)
     _M_rehash(__do_rehash.second, __saved_state);

   this->_M_store_code(__node, __code);
   const key_type& __k = this->_M_extract()(__node->_M_v());
   size_type __bkt = _M_bucket_index(__k, __code);



   __node_base* __prev
     = __builtin_expect(__hint != nullptr, false)
       && this->_M_equals(__k, __code, __hint)
  ? __hint
  : _M_find_before_node(__bkt, __k, __code);
   if (__prev)
     {

       __node->_M_nxt = __prev->_M_nxt;
       __prev->_M_nxt = __node;
       if (__builtin_expect(__prev == __hint, false))


        if (__node->_M_nxt
            && !this->_M_equals(__k, __code, __node->_M_next()))
          {
            size_type __next_bkt = _M_bucket_index(__node->_M_next());
            if (__next_bkt != __bkt)
              _M_buckets[__next_bkt] = __node;
          }
     }
   else




     _M_insert_bucket_begin(__bkt, __node);
   ++_M_element_count;
   return iterator(__node);
 }
      catch(...)
 {
   this->_M_deallocate_node(__node);
   throw;
 }
    }


  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    template<typename _Arg, typename _NodeGenerator>
      std::pair<typename _Hashtable<_Key, _Value, _Alloc,
        _ExtractKey, _Equal, _H1,
        _H2, _Hash, _RehashPolicy,
        _Traits>::iterator, bool>
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy, _Traits>::
      _M_insert(_Arg&& __v, const _NodeGenerator& __node_gen, std::true_type)
      {
 const key_type& __k = this->_M_extract()(__v);
 __hash_code __code = this->_M_hash_code(__k);
 size_type __bkt = _M_bucket_index(__k, __code);

 __node_type* __n = _M_find_node(__bkt, __k, __code);
 if (__n)
   return std::make_pair(iterator(__n), false);

 __n = __node_gen(std::forward<_Arg>(__v));
 return std::make_pair(_M_insert_unique_node(__bkt, __code, __n), true);
      }


  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    template<typename _Arg, typename _NodeGenerator>
      typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
     _H1, _H2, _Hash, _RehashPolicy,
     _Traits>::iterator
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy, _Traits>::
      _M_insert(const_iterator __hint, _Arg&& __v,
  const _NodeGenerator& __node_gen,
  std::false_type)
      {


 __hash_code __code = this->_M_hash_code(this->_M_extract()(__v));


 __node_type* __node = __node_gen(std::forward<_Arg>(__v));

 return _M_insert_multi_node(__hint._M_cur, __code, __node);
      }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy,
   _Traits>::iterator
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    erase(const_iterator __it)
    {
      __node_type* __n = __it._M_cur;
      std::size_t __bkt = _M_bucket_index(__n);




      __node_base* __prev_n = _M_get_previous_node(__bkt, __n);
      return _M_erase(__bkt, __prev_n, __n);
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy,
   _Traits>::iterator
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_erase(size_type __bkt, __node_base* __prev_n, __node_type* __n)
    {
      if (__prev_n == _M_buckets[__bkt])
 _M_remove_bucket_begin(__bkt, __n->_M_next(),
    __n->_M_nxt ? _M_bucket_index(__n->_M_next()) : 0);
      else if (__n->_M_nxt)
 {
   size_type __next_bkt = _M_bucket_index(__n->_M_next());
   if (__next_bkt != __bkt)
     _M_buckets[__next_bkt] = __prev_n;
 }

      __prev_n->_M_nxt = __n->_M_nxt;
      iterator __result(__n->_M_next());
      this->_M_deallocate_node(__n);
      --_M_element_count;

      return __result;
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy,
   _Traits>::size_type
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_erase(std::true_type, const key_type& __k)
    {
      __hash_code __code = this->_M_hash_code(__k);
      std::size_t __bkt = _M_bucket_index(__k, __code);


      __node_base* __prev_n = _M_find_before_node(__bkt, __k, __code);
      if (!__prev_n)
 return 0;


      __node_type* __n = static_cast<__node_type*>(__prev_n->_M_nxt);
      _M_erase(__bkt, __prev_n, __n);
      return 1;
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy,
   _Traits>::size_type
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_erase(std::false_type, const key_type& __k)
    {
      __hash_code __code = this->_M_hash_code(__k);
      std::size_t __bkt = _M_bucket_index(__k, __code);


      __node_base* __prev_n = _M_find_before_node(__bkt, __k, __code);
      if (!__prev_n)
 return 0;







      __node_type* __n = static_cast<__node_type*>(__prev_n->_M_nxt);
      __node_type* __n_last = __n;
      std::size_t __n_last_bkt = __bkt;
      do
 {
   __n_last = __n_last->_M_next();
   if (!__n_last)
     break;
   __n_last_bkt = _M_bucket_index(__n_last);
 }
      while (__n_last_bkt == __bkt && this->_M_equals(__k, __code, __n_last));


      size_type __result = 0;
      do
 {
   __node_type* __p = __n->_M_next();
   this->_M_deallocate_node(__n);
   __n = __p;
   ++__result;
   --_M_element_count;
 }
      while (__n != __n_last);

      if (__prev_n == _M_buckets[__bkt])
 _M_remove_bucket_begin(__bkt, __n_last, __n_last_bkt);
      else if (__n_last && __n_last_bkt != __bkt)
 _M_buckets[__n_last_bkt] = __prev_n;
      __prev_n->_M_nxt = __n_last;
      return __result;
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    typename _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
   _H1, _H2, _Hash, _RehashPolicy,
   _Traits>::iterator
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    erase(const_iterator __first, const_iterator __last)
    {
      __node_type* __n = __first._M_cur;
      __node_type* __last_n = __last._M_cur;
      if (__n == __last_n)
 return iterator(__n);

      std::size_t __bkt = _M_bucket_index(__n);

      __node_base* __prev_n = _M_get_previous_node(__bkt, __n);
      bool __is_bucket_begin = __n == _M_bucket_begin(__bkt);
      std::size_t __n_bkt = __bkt;
      for (;;)
 {
   do
     {
       __node_type* __tmp = __n;
       __n = __n->_M_next();
       this->_M_deallocate_node(__tmp);
       --_M_element_count;
       if (!__n)
  break;
       __n_bkt = _M_bucket_index(__n);
     }
   while (__n != __last_n && __n_bkt == __bkt);
   if (__is_bucket_begin)
     _M_remove_bucket_begin(__bkt, __n, __n_bkt);
   if (__n == __last_n)
     break;
   __is_bucket_begin = true;
   __bkt = __n_bkt;
 }

      if (__n && (__n_bkt != __bkt || __is_bucket_begin))
 _M_buckets[__n_bkt] = __prev_n;
      __prev_n->_M_nxt = __n;
      return iterator(__n);
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
      _M_element_count = 0;
      _M_before_begin._M_nxt = nullptr;
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    rehash(size_type __n)
    {
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
      std::size_t __buckets
 = std::max(_M_rehash_policy._M_bkt_for_elements(_M_element_count + 1),
     __n);
      __buckets = _M_rehash_policy._M_next_bkt(__buckets);

      if (__buckets != _M_bucket_count)
 _M_rehash(__buckets, __saved_state);
      else

 _M_rehash_policy._M_reset(__saved_state);
    }

  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash(size_type __n, const __rehash_state& __state)
    {
      try
 {
   _M_rehash_aux(__n, __unique_keys());
 }
      catch(...)
 {


   _M_rehash_policy._M_reset(__state);
   throw;
 }
    }


  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __n, std::true_type)
    {
      __bucket_type* __new_buckets = _M_allocate_buckets(__n);
      __node_type* __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
      std::size_t __bbegin_bkt = 0;
      while (__p)
 {
   __node_type* __next = __p->_M_next();
   std::size_t __bkt = __hash_code_base::_M_bucket_index(__p, __n);
   if (!__new_buckets[__bkt])
     {
       __p->_M_nxt = _M_before_begin._M_nxt;
       _M_before_begin._M_nxt = __p;
       __new_buckets[__bkt] = &_M_before_begin;
       if (__p->_M_nxt)
  __new_buckets[__bbegin_bkt] = __p;
       __bbegin_bkt = __bkt;
     }
   else
     {
       __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
       __new_buckets[__bkt]->_M_nxt = __p;
     }
   __p = __next;
 }

      _M_deallocate_buckets();
      _M_bucket_count = __n;
      _M_buckets = __new_buckets;
    }



  template<typename _Key, typename _Value,
    typename _Alloc, typename _ExtractKey, typename _Equal,
    typename _H1, typename _H2, typename _Hash, typename _RehashPolicy,
    typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        _H1, _H2, _Hash, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __n, std::false_type)
    {
      __bucket_type* __new_buckets = _M_allocate_buckets(__n);

      __node_type* __p = _M_begin();
      _M_before_begin._M_nxt = nullptr;
      std::size_t __bbegin_bkt = 0;
      std::size_t __prev_bkt = 0;
      __node_type* __prev_p = nullptr;
      bool __check_bucket = false;

      while (__p)
 {
   __node_type* __next = __p->_M_next();
   std::size_t __bkt = __hash_code_base::_M_bucket_index(__p, __n);

   if (__prev_p && __prev_bkt == __bkt)
     {



       __p->_M_nxt = __prev_p->_M_nxt;
       __prev_p->_M_nxt = __p;






       __check_bucket = true;
     }
   else
     {
       if (__check_bucket)
  {


    if (__prev_p->_M_nxt)
      {
        std::size_t __next_bkt
   = __hash_code_base::_M_bucket_index(__prev_p->_M_next(),
           __n);
        if (__next_bkt != __prev_bkt)
   __new_buckets[__next_bkt] = __prev_p;
      }
    __check_bucket = false;
  }

       if (!__new_buckets[__bkt])
  {
    __p->_M_nxt = _M_before_begin._M_nxt;
    _M_before_begin._M_nxt = __p;
    __new_buckets[__bkt] = &_M_before_begin;
    if (__p->_M_nxt)
      __new_buckets[__bbegin_bkt] = __p;
    __bbegin_bkt = __bkt;
  }
       else
  {
    __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
    __new_buckets[__bkt]->_M_nxt = __p;
  }
     }
   __prev_p = __p;
   __prev_bkt = __bkt;
   __p = __next;
 }

      if (__check_bucket && __prev_p->_M_nxt)
 {
   std::size_t __next_bkt
     = __hash_code_base::_M_bucket_index(__prev_p->_M_next(), __n);
   if (__next_bkt != __prev_bkt)
     __new_buckets[__next_bkt] = __prev_p;
 }

      _M_deallocate_buckets();
      _M_bucket_count = __n;
      _M_buckets = __new_buckets;
    }


}
# 48 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/unordered_map" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<bool _Cache>
    using __umap_traits = __detail::_Hashtable_traits<_Cache, false, true>;

  template<typename _Key,
    typename _Tp,
    typename _Hash = hash<_Key>,
    typename _Pred = std::equal_to<_Key>,
    typename _Alloc = std::allocator<std::pair<const _Key, _Tp> >,
    typename _Tr = __umap_traits<__cache_default<_Key, _Hash>::value>>
    using __umap_hashtable = _Hashtable<_Key, std::pair<const _Key, _Tp>,
                                        _Alloc, __detail::_Select1st,
            _Pred, _Hash,
            __detail::_Mod_range_hashing,
            __detail::_Default_ranged_hash,
            __detail::_Prime_rehash_policy, _Tr>;


  template<bool _Cache>
    using __ummap_traits = __detail::_Hashtable_traits<_Cache, false, false>;

  template<typename _Key,
    typename _Tp,
    typename _Hash = hash<_Key>,
    typename _Pred = std::equal_to<_Key>,
    typename _Alloc = std::allocator<std::pair<const _Key, _Tp> >,
    typename _Tr = __ummap_traits<__cache_default<_Key, _Hash>::value>>
    using __ummap_hashtable = _Hashtable<_Key, std::pair<const _Key, _Tp>,
      _Alloc, __detail::_Select1st,
      _Pred, _Hash,
      __detail::_Mod_range_hashing,
      __detail::_Default_ranged_hash,
      __detail::_Prime_rehash_policy, _Tr>;
# 94 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
  template<class _Key, class _Tp,
    class _Hash = hash<_Key>,
    class _Pred = std::equal_to<_Key>,
    class _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class unordered_map
    {
      typedef __umap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc> _Hashtable;
      _Hashtable _M_h;

    public:



      typedef typename _Hashtable::key_type key_type;
      typedef typename _Hashtable::value_type value_type;
      typedef typename _Hashtable::mapped_type mapped_type;
      typedef typename _Hashtable::hasher hasher;
      typedef typename _Hashtable::key_equal key_equal;
      typedef typename _Hashtable::allocator_type allocator_type;




      typedef typename _Hashtable::pointer pointer;
      typedef typename _Hashtable::const_pointer const_pointer;
      typedef typename _Hashtable::reference reference;
      typedef typename _Hashtable::const_reference const_reference;
      typedef typename _Hashtable::iterator iterator;
      typedef typename _Hashtable::const_iterator const_iterator;
      typedef typename _Hashtable::local_iterator local_iterator;
      typedef typename _Hashtable::const_local_iterator const_local_iterator;
      typedef typename _Hashtable::size_type size_type;
      typedef typename _Hashtable::difference_type difference_type;
# 138 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      explicit
      unordered_map(size_type __n = 10,
      const hasher& __hf = hasher(),
      const key_equal& __eql = key_equal(),
      const allocator_type& __a = allocator_type())
      : _M_h(__n, __hf, __eql, __a)
      { }
# 159 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      template<typename _InputIterator>
 unordered_map(_InputIterator __f, _InputIterator __l,
        size_type __n = 0,
        const hasher& __hf = hasher(),
        const key_equal& __eql = key_equal(),
        const allocator_type& __a = allocator_type())
 : _M_h(__f, __l, __n, __hf, __eql, __a)
 { }


      unordered_map(const unordered_map&) = default;


      unordered_map(unordered_map&&) = default;





      explicit
      unordered_map(const allocator_type& __a)
 : _M_h(__a)
      { }






      unordered_map(const unordered_map& __umap,
      const allocator_type& __a)
 : _M_h(__umap._M_h, __a)
      { }






      unordered_map(unordered_map&& __umap,
      const allocator_type& __a)
 : _M_h(std::move(__umap._M_h), __a)
      { }
# 214 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      unordered_map(initializer_list<value_type> __l,
      size_type __n = 0,
      const hasher& __hf = hasher(),
      const key_equal& __eql = key_equal(),
      const allocator_type& __a = allocator_type())
 : _M_h(__l, __n, __hf, __eql, __a)
      { }


      unordered_map&
      operator=(const unordered_map&) = default;


      unordered_map&
      operator=(unordered_map&&) = default;
# 241 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      unordered_map&
      operator=(initializer_list<value_type> __l)
      {
 _M_h = __l;
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return _M_h.get_allocator(); }




      bool
      empty() const noexcept
      { return _M_h.empty(); }


      size_type
      size() const noexcept
      { return _M_h.size(); }


      size_type
      max_size() const noexcept
      { return _M_h.max_size(); }







      iterator
      begin() noexcept
      { return _M_h.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_h.begin(); }

      const_iterator
      cbegin() const noexcept
      { return _M_h.begin(); }






      iterator
      end() noexcept
      { return _M_h.end(); }






      const_iterator
      end() const noexcept
      { return _M_h.end(); }

      const_iterator
      cend() const noexcept
      { return _M_h.end(); }
# 338 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_h.emplace(std::forward<_Args>(__args)...); }
# 368 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 { return _M_h.emplace_hint(__pos, std::forward<_Args>(__args)...); }
# 391 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_h.insert(__x); }

      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
 std::pair<iterator, bool>
 insert(_Pair&& __x)
        { return _M_h.insert(std::forward<_Pair>(__x)); }
# 425 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      iterator
      insert(const_iterator __hint, const value_type& __x)
      { return _M_h.insert(__hint, __x); }

      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
 iterator
 insert(const_iterator __hint, _Pair&& __x)
 { return _M_h.insert(__hint, std::forward<_Pair>(__x)); }
# 446 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_h.insert(__first, __last); }
# 458 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      void
      insert(initializer_list<value_type> __l)
      { _M_h.insert(__l); }
# 476 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_h.erase(__position); }


      iterator
      erase(iterator __it)
      { return _M_h.erase(__it); }
# 498 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_h.erase(__x); }
# 516 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_h.erase(__first, __last); }







      void
      clear() noexcept
      { _M_h.clear(); }
# 539 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      void
      swap(unordered_map& __x)
      noexcept( noexcept(_M_h.swap(__x._M_h)) )
      { _M_h.swap(__x._M_h); }





      hasher
      hash_function() const
      { return _M_h.hash_function(); }



      key_equal
      key_eq() const
      { return _M_h.key_eq(); }
# 572 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_h.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_h.find(__x); }
# 590 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_h.count(__x); }
# 603 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_h.equal_range(__x); }

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_h.equal_range(__x); }
# 625 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      { return _M_h[__k]; }

      mapped_type&
      operator[](key_type&& __k)
      { return _M_h[std::move(__k)]; }
# 642 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      mapped_type&
      at(const key_type& __k)
      { return _M_h.at(__k); }

      const mapped_type&
      at(const key_type& __k) const
      { return _M_h.at(__k); }





      size_type
      bucket_count() const noexcept
      { return _M_h.bucket_count(); }


      size_type
      max_bucket_count() const noexcept
      { return _M_h.max_bucket_count(); }






      size_type
      bucket_size(size_type __n) const
      { return _M_h.bucket_size(__n); }






      size_type
      bucket(const key_type& __key) const
      { return _M_h.bucket(__key); }







      local_iterator
      begin(size_type __n)
      { return _M_h.begin(__n); }
# 698 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      const_local_iterator
      begin(size_type __n) const
      { return _M_h.begin(__n); }

      const_local_iterator
      cbegin(size_type __n) const
      { return _M_h.cbegin(__n); }
# 713 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      local_iterator
      end(size_type __n)
      { return _M_h.end(__n); }
# 724 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      const_local_iterator
      end(size_type __n) const
      { return _M_h.end(__n); }

      const_local_iterator
      cend(size_type __n) const
      { return _M_h.cend(__n); }





      float
      load_factor() const noexcept
      { return _M_h.load_factor(); }



      float
      max_load_factor() const noexcept
      { return _M_h.max_load_factor(); }





      void
      max_load_factor(float __z)
      { _M_h.max_load_factor(__z); }
# 761 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      void
      rehash(size_type __n)
      { _M_h.rehash(__n); }
# 772 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      void
      reserve(size_type __n)
      { _M_h.reserve(__n); }

      template<typename _Key1, typename _Tp1, typename _Hash1, typename _Pred1,
        typename _Alloc1>
        friend bool
      operator==(const unordered_map<_Key1, _Tp1, _Hash1, _Pred1, _Alloc1>&,
   const unordered_map<_Key1, _Tp1, _Hash1, _Pred1, _Alloc1>&);
    };
# 806 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
  template<class _Key, class _Tp,
    class _Hash = hash<_Key>,
    class _Pred = std::equal_to<_Key>,
    class _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class unordered_multimap
    {
      typedef __ummap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc> _Hashtable;
      _Hashtable _M_h;

    public:



      typedef typename _Hashtable::key_type key_type;
      typedef typename _Hashtable::value_type value_type;
      typedef typename _Hashtable::mapped_type mapped_type;
      typedef typename _Hashtable::hasher hasher;
      typedef typename _Hashtable::key_equal key_equal;
      typedef typename _Hashtable::allocator_type allocator_type;




      typedef typename _Hashtable::pointer pointer;
      typedef typename _Hashtable::const_pointer const_pointer;
      typedef typename _Hashtable::reference reference;
      typedef typename _Hashtable::const_reference const_reference;
      typedef typename _Hashtable::iterator iterator;
      typedef typename _Hashtable::const_iterator const_iterator;
      typedef typename _Hashtable::local_iterator local_iterator;
      typedef typename _Hashtable::const_local_iterator const_local_iterator;
      typedef typename _Hashtable::size_type size_type;
      typedef typename _Hashtable::difference_type difference_type;
# 850 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      explicit
      unordered_multimap(size_type __n = 10,
    const hasher& __hf = hasher(),
    const key_equal& __eql = key_equal(),
    const allocator_type& __a = allocator_type())
      : _M_h(__n, __hf, __eql, __a)
      { }
# 871 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      template<typename _InputIterator>
 unordered_multimap(_InputIterator __f, _InputIterator __l,
      size_type __n = 0,
      const hasher& __hf = hasher(),
      const key_equal& __eql = key_equal(),
      const allocator_type& __a = allocator_type())
 : _M_h(__f, __l, __n, __hf, __eql, __a)
 { }


      unordered_multimap(const unordered_multimap&) = default;


      unordered_multimap(unordered_multimap&&) = default;





      explicit
      unordered_multimap(const allocator_type& __a)
 : _M_h(__a)
      { }






      unordered_multimap(const unordered_multimap& __ummap,
    const allocator_type& __a)
 : _M_h(__ummap._M_h, __a)
      { }






      unordered_multimap(unordered_multimap&& __ummap,
    const allocator_type& __a)
 : _M_h(std::move(__ummap._M_h), __a)
      { }
# 926 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      unordered_multimap(initializer_list<value_type> __l,
    size_type __n = 0,
    const hasher& __hf = hasher(),
    const key_equal& __eql = key_equal(),
    const allocator_type& __a = allocator_type())
 : _M_h(__l, __n, __hf, __eql, __a)
      { }


      unordered_multimap&
      operator=(const unordered_multimap&) = default;


      unordered_multimap&
      operator=(unordered_multimap&&) = default;
# 953 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      unordered_multimap&
      operator=(initializer_list<value_type> __l)
      {
 _M_h = __l;
 return *this;
      }



      allocator_type
      get_allocator() const noexcept
      { return _M_h.get_allocator(); }




      bool
      empty() const noexcept
      { return _M_h.empty(); }


      size_type
      size() const noexcept
      { return _M_h.size(); }


      size_type
      max_size() const noexcept
      { return _M_h.max_size(); }







      iterator
      begin() noexcept
      { return _M_h.begin(); }






      const_iterator
      begin() const noexcept
      { return _M_h.begin(); }

      const_iterator
      cbegin() const noexcept
      { return _M_h.begin(); }






      iterator
      end() noexcept
      { return _M_h.end(); }






      const_iterator
      end() const noexcept
      { return _M_h.end(); }

      const_iterator
      cend() const noexcept
      { return _M_h.end(); }
# 1046 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_h.emplace(std::forward<_Args>(__args)...); }
# 1072 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 { return _M_h.emplace_hint(__pos, std::forward<_Args>(__args)...); }
# 1087 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_h.insert(__x); }

      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
 iterator
 insert(_Pair&& __x)
        { return _M_h.insert(std::forward<_Pair>(__x)); }
# 1119 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      iterator
      insert(const_iterator __hint, const value_type& __x)
      { return _M_h.insert(__hint, __x); }

      template<typename _Pair, typename = typename
        std::enable_if<std::is_constructible<value_type,
          _Pair&&>::value>::type>
 iterator
 insert(const_iterator __hint, _Pair&& __x)
        { return _M_h.insert(__hint, std::forward<_Pair>(__x)); }
# 1140 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_h.insert(__first, __last); }
# 1153 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      void
      insert(initializer_list<value_type> __l)
      { _M_h.insert(__l); }
# 1171 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      iterator
      erase(const_iterator __position)
      { return _M_h.erase(__position); }


      iterator
      erase(iterator __it)
      { return _M_h.erase(__it); }
# 1192 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_h.erase(__x); }
# 1211 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_h.erase(__first, __last); }







      void
      clear() noexcept
      { _M_h.clear(); }
# 1235 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      void
      swap(unordered_multimap& __x)
      noexcept( noexcept(_M_h.swap(__x._M_h)) )
      { _M_h.swap(__x._M_h); }





      hasher
      hash_function() const
      { return _M_h.hash_function(); }



      key_equal
      key_eq() const
      { return _M_h.key_eq(); }
# 1268 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_h.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_h.find(__x); }







      size_type
      count(const key_type& __x) const
      { return _M_h.count(__x); }
# 1293 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_h.equal_range(__x); }

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_h.equal_range(__x); }





      size_type
      bucket_count() const noexcept
      { return _M_h.bucket_count(); }


      size_type
      max_bucket_count() const noexcept
      { return _M_h.max_bucket_count(); }






      size_type
      bucket_size(size_type __n) const
      { return _M_h.bucket_size(__n); }






      size_type
      bucket(const key_type& __key) const
      { return _M_h.bucket(__key); }







      local_iterator
      begin(size_type __n)
      { return _M_h.begin(__n); }
# 1349 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      const_local_iterator
      begin(size_type __n) const
      { return _M_h.begin(__n); }

      const_local_iterator
      cbegin(size_type __n) const
      { return _M_h.cbegin(__n); }
# 1364 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      local_iterator
      end(size_type __n)
      { return _M_h.end(__n); }
# 1375 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      const_local_iterator
      end(size_type __n) const
      { return _M_h.end(__n); }

      const_local_iterator
      cend(size_type __n) const
      { return _M_h.cend(__n); }





      float
      load_factor() const noexcept
      { return _M_h.load_factor(); }



      float
      max_load_factor() const noexcept
      { return _M_h.max_load_factor(); }





      void
      max_load_factor(float __z)
      { _M_h.max_load_factor(__z); }
# 1412 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      void
      rehash(size_type __n)
      { _M_h.rehash(__n); }
# 1423 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/unordered_map.h" 3
      void
      reserve(size_type __n)
      { _M_h.reserve(__n); }

      template<typename _Key1, typename _Tp1, typename _Hash1, typename _Pred1,
        typename _Alloc1>
        friend bool
 operator==(const unordered_multimap<_Key1, _Tp1,
         _Hash1, _Pred1, _Alloc1>&,
     const unordered_multimap<_Key1, _Tp1,
         _Hash1, _Pred1, _Alloc1>&);
    };

  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
    inline void
    swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
  unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { __x.swap(__y); }

  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
    inline void
    swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
  unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { __x.swap(__y); }

  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
    inline bool
    operator==(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
        const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { return __x._M_h._M_equal(__y._M_h); }

  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
    inline bool
    operator!=(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
        const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { return !(__x == __y); }

  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
    inline bool
    operator==(const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
        const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { return __x._M_h._M_equal(__y._M_h); }

  template<class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
    inline bool
    operator!=(const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
        const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
    { return !(__x == __y); }


}
# 49 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/unordered_map" 2 3
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp" 2








namespace RAJA
{

namespace cuda
{



struct PinnedAllocator {


  void* malloc(size_t nbytes)
  {
    void* ptr;
    { ::RAJA::cudaAssert((cudaHostAlloc(&ptr, nbytes, 0x02)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp", 53); };
    return ptr;
  }


  bool free(void* ptr)
  {
    { ::RAJA::cudaAssert((cudaFreeHost(ptr)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp", 60); };
    return true;
  }
};


struct DeviceAllocator {


  void* malloc(size_t nbytes)
  {
    void* ptr;
    { ::RAJA::cudaAssert((cudaMalloc(&ptr, nbytes)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp", 72); };
    return ptr;
  }


  bool free(void* ptr)
  {
    { ::RAJA::cudaAssert((cudaFree(ptr)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp", 79); };
    return true;
  }
};



struct DeviceZeroedAllocator {


  void* malloc(size_t nbytes)
  {
    void* ptr;
    { ::RAJA::cudaAssert((cudaMalloc(&ptr, nbytes)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp", 92); };
    { ::RAJA::cudaAssert((cudaMemset(ptr, 0, nbytes)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp", 93); };
    return ptr;
  }


  bool free(void* ptr)
  {
    { ::RAJA::cudaAssert((cudaFree(ptr)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp", 100); };
    return true;
  }
};

using device_mempool_type = basic_mempool::MemPool<DeviceAllocator>;
using device_zeroed_mempool_type =
    basic_mempool::MemPool<DeviceZeroedAllocator>;
using pinned_mempool_type = basic_mempool::MemPool<PinnedAllocator>;

namespace detail
{


struct cudaInfo {
  cuda_dim_t gridDim{0, 0, 0};
  cuda_dim_t blockDim{0, 0, 0};
  cudaStream_t stream = 0;
  bool setup_reducers = false;




};


template <typename T>
class SetterResetter
{
public:
  SetterResetter(T& val, T new_val) : m_val(val), m_old_val(val)
  {
    m_val = new_val;
  }
  SetterResetter(const SetterResetter&) = delete;
  ~SetterResetter() { m_val = m_old_val; }

private:
  T& m_val;
  T m_old_val;
};

extern cudaInfo g_status;

extern cudaInfo tl_status;




extern std::unordered_map<cudaStream_t, bool> g_stream_info_map;

}


inline __attribute__((always_inline))
void synchronize()
{



  bool synchronize = false;
  for (auto& val : detail::g_stream_info_map) {
    if (!val.second) {
      synchronize = true;
      val.second = true;
    }
  }
  if (synchronize) {
    { ::RAJA::cudaAssert((cudaDeviceSynchronize()), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp", 168); };
  }
}


inline __attribute__((always_inline))
void synchronize(cudaStream_t stream)
{



  auto iter = detail::g_stream_info_map.find(stream);
  if (iter != detail::g_stream_info_map.end()) {
    if (!iter->second) {
      iter->second = true;
      { ::RAJA::cudaAssert((cudaStreamSynchronize(stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp", 183); };
    }
  } else {
    fprintf(stderr, "Cannot synchronize unknown stream.\n");
    std::abort();
  }
}


inline __attribute__((always_inline))
void launch(cudaStream_t stream)
{



  auto iter = detail::g_stream_info_map.find(stream);
  if (iter != detail::g_stream_info_map.end()) {
    iter->second = false;
  } else {
    detail::g_stream_info_map.emplace(stream, false);
  }
}


inline __attribute__((always_inline))
void launch(const void* func, cuda_dim_t gridDim, cuda_dim_t blockDim, void** args, size_t shmem, cudaStream_t stream)
{
  { ::RAJA::cudaAssert((cudaLaunchKernel(func, gridDim, blockDim, args, shmem, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp", 210); };
  launch(stream);
}


inline __attribute__((always_inline))
void peekAtLastError() { { ::RAJA::cudaAssert((cudaPeekAtLastError()), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp", 216); }; }


inline __attribute__((always_inline))
bool setupReducers() { return detail::tl_status.setup_reducers; }


inline __attribute__((always_inline))
cuda_dim_t currentGridDim() { return detail::tl_status.gridDim; }


inline __attribute__((always_inline))
cuda_dim_t currentBlockDim() { return detail::tl_status.blockDim; }


inline __attribute__((always_inline))
cudaStream_t currentStream() { return detail::tl_status.stream; }


template <typename LOOP_BODY>
inline __attribute__((always_inline)) typename std::remove_reference<LOOP_BODY>::type make_launch_body(
    cuda_dim_t gridDim,
    cuda_dim_t blockDim,
    size_t ,
    cudaStream_t stream,
    LOOP_BODY&& loop_body)
{
  detail::SetterResetter<bool> setup_reducers_srer(
      detail::tl_status.setup_reducers, true);

  detail::tl_status.stream = stream;
  detail::tl_status.gridDim = gridDim;
  detail::tl_status.blockDim = blockDim;

  using return_type = typename std::remove_reference<LOOP_BODY>::type;
  return return_type(std::forward<LOOP_BODY>(loop_body));
}

inline __attribute__((always_inline))
cudaDeviceProp get_device_prop()
{
  int device;
  { ::RAJA::cudaAssert((cudaGetDevice(&device)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp", 258); };
  cudaDeviceProp prop;
  { ::RAJA::cudaAssert((cudaGetDeviceProperties(&prop, device)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/MemUtils_CUDA.hpp", 260); };
  return prop;
}

inline __attribute__((always_inline))
cudaDeviceProp& device_prop()
{
  static cudaDeviceProp prop = get_device_prop();
  return prop;
}

}

}
# 39 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/forall.hpp" 2







namespace RAJA
{

namespace policy
{

namespace cuda
{

namespace impl
{
# 65 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/forall.hpp"
inline __attribute__((always_inline))
cuda_dim_t getGridDim(cuda_dim_member_t len, cuda_dim_t blockDim)
{
  cuda_dim_member_t block_size = blockDim.x * blockDim.y * blockDim.z;

  cuda_dim_member_t gridSize = (len + block_size - 1) / block_size;

  return {gridSize, 1, 1};
}
# 82 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/forall.hpp"
__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int getGlobalIdx_1D_1D()
{
  unsigned int blockId = blockIdx.x;
  unsigned int threadId = blockId * blockDim.x + threadIdx.x;
  return threadId;
}
__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int getGlobalNumThreads_1D_1D()
{
  unsigned int numThreads = blockDim.x * gridDim.x;
  return numThreads;
}
# 101 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/forall.hpp"
__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int getGlobalIdx_3D_3D()
{
  unsigned int blockId =
      blockIdx.x + blockIdx.y * gridDim.x + gridDim.x * gridDim.y * blockIdx.z;
  unsigned int threadId = blockId * (blockDim.x * blockDim.y * blockDim.z) +
                          (threadIdx.z * (blockDim.x * blockDim.y)) +
                          (threadIdx.y * blockDim.x) + threadIdx.x;
  return threadId;
}
__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int getGlobalNumThreads_3D_3D()
{
  unsigned int numThreads =
      blockDim.x * blockDim.y * blockDim.z * gridDim.x * gridDim.y * gridDim.z;
  return numThreads;
}
# 132 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/forall.hpp"
template <size_t BlockSize,
          typename Iterator,
          typename LOOP_BODY,
          typename IndexType>
__attribute__((launch_bounds(BlockSize, 1))) __attribute__((global))
    void forall_cuda_kernel(LOOP_BODY loop_body,
                            const Iterator idx,
                            IndexType length)
{
  using RAJA::internal::thread_privatize;
  auto privatizer = thread_privatize(loop_body);
  auto& body = privatizer.get_priv();
  auto ii = static_cast<IndexType>(getGlobalIdx_1D_1D());
  if (ii < length) {
    body(idx[ii]);
  }
}

}
# 160 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/forall.hpp"
template <typename Iterable, typename LoopBody, size_t BlockSize, bool Async>
inline __attribute__((always_inline)) resources::EventProxy<resources::Cuda> forall_impl(resources::Cuda &cuda_res,
                                                    cuda_exec<BlockSize, Async>,
                                                    Iterable&& iter,
                                                    LoopBody&& loop_body)
{
  using Iterator = camp::decay<decltype(std::begin(iter))>;
  using LOOP_BODY = camp::decay<LoopBody>;
  using IndexType = camp::decay<decltype(std::distance(std::begin(iter), std::end(iter)))>;

  auto func = impl::forall_cuda_kernel<BlockSize, Iterator, LOOP_BODY, IndexType>;

  cudaStream_t stream = cuda_res.get_stream();




  Iterator begin = std::begin(iter);
  Iterator end = std::end(iter);
  IndexType len = std::distance(begin, end);


  if (len > 0 && BlockSize > 0) {




    cuda_dim_t blockSize{BlockSize, 1, 1};
    cuda_dim_t gridSize = impl::getGridDim(static_cast<cuda_dim_member_t>(len), blockSize);

                 ;




    size_t shmem = 0;






    {



      LOOP_BODY body = RAJA::cuda::make_launch_body(
          gridSize, blockSize, shmem, stream, std::forward<LoopBody>(loop_body));




      void *args[] = {(void*)&body, (void*)&begin, (void*)&len};
      RAJA::cuda::launch((const void*)func, gridSize, blockSize, args, shmem, stream);
    }

    if (!Async) { RAJA::cuda::synchronize(stream); }

               ;
  }

  return resources::EventProxy<resources::Cuda>(&cuda_res);
}
# 243 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/forall.hpp"
template <typename LoopBody,
          size_t BlockSize,
          bool Async,
          typename... SegmentTypes>
inline __attribute__((always_inline)) resources::EventProxy<resources::Cuda> forall_impl(resources::Cuda &r,
                                                    ExecPolicy<seq_segit, cuda_exec<BlockSize, Async>>,
                                                    const TypedIndexSet<SegmentTypes...>& iset,
                                                    LoopBody&& loop_body)
{
  int num_seg = iset.getNumSegments();
  for (int isi = 0; isi < num_seg; ++isi) {
    iset.segmentCall(r,
                     isi,
                     detail::CallForall(),
                     cuda_exec<BlockSize, true>(),
                     loop_body);
  }

  if (!Async) RAJA::cuda::synchronize();
  return resources::EventProxy<resources::Cuda>(&r);
}

}

}

}
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/reduce.hpp" 1
# 33 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/reduce.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/SoAArray.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/SoAArray.hpp"
namespace RAJA
{

namespace detail
{







template <typename T, size_t size>
class SoAArray
{
  using value_type = T;

public:
  __attribute__((host)) __attribute__((device)) value_type get(size_t i) const { return mem[i]; }
  __attribute__((host)) __attribute__((device)) void set(size_t i, value_type val) { mem[i] = val; }

private:
  value_type mem[size];
};




template <typename T, typename IndexType, bool doing_min, size_t size>
class SoAArray< ::RAJA::reduce::detail::ValueLoc<T, IndexType, doing_min>, size>
{
  using value_type = ::RAJA::reduce::detail::ValueLoc<T, IndexType, doing_min>;
  using first_type = T;
  using second_type = IndexType;

public:
  __attribute__((host)) __attribute__((device)) value_type get(size_t i) const
  {
    return value_type(mem[i], mem_idx[i]);
  }
  __attribute__((host)) __attribute__((device)) void set(size_t i, value_type val)
  {
    mem[i] = val;
    mem_idx[i] = val.getLoc();
  }

private:
  first_type mem[size];
  second_type mem_idx[size];
};

}

}
# 34 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/reduce.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/SoAPtr.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/SoAPtr.hpp"
namespace RAJA
{

namespace detail
{
# 39 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/SoAPtr.hpp"
template <typename T,
          typename mempool = RAJA::basic_mempool::MemPool<
              RAJA::basic_mempool::generic_allocator> >
class SoAPtr
{
  using value_type = T;

public:
  SoAPtr() = default;
  explicit SoAPtr(size_t size)
      : mem(mempool::getInstance().template malloc<value_type>(size))
  {
  }

  SoAPtr& allocate(size_t size)
  {
    mem = mempool::getInstance().template malloc<value_type>(size);
    return *this;
  }

  SoAPtr& deallocate()
  {
    mempool::getInstance().free(mem);
    mem = nullptr;
    return *this;
  }

  __attribute__((host)) __attribute__((device)) bool allocated() const { return mem != nullptr; }

  __attribute__((host)) __attribute__((device)) value_type get(size_t i) const { return mem[i]; }
  __attribute__((host)) __attribute__((device)) void set(size_t i, value_type val) { mem[i] = val; }

private:
  value_type* mem = nullptr;
};




template <typename T, typename IndexType, bool doing_min, typename mempool>
class SoAPtr<RAJA::reduce::detail::ValueLoc<T, IndexType, doing_min>, mempool>
{
  using value_type = RAJA::reduce::detail::ValueLoc<T, IndexType, doing_min>;
  using first_type = T;
  using second_type = IndexType;

public:
  SoAPtr() = default;
  explicit SoAPtr(size_t size)
      : mem(mempool::getInstance().template malloc<first_type>(size)),
        mem_idx(mempool::getInstance().template malloc<second_type>(size))
  {
  }

  SoAPtr& allocate(size_t size)
  {
    mem = mempool::getInstance().template malloc<first_type>(size);
    mem_idx = mempool::getInstance().template malloc<second_type>(size);
    return *this;
  }

  SoAPtr& deallocate()
  {
    mempool::getInstance().free(mem);
    mem = nullptr;
    mempool::getInstance().free(mem_idx);
    mem_idx = nullptr;
    return *this;
  }

  __attribute__((host)) __attribute__((device)) bool allocated() const { return mem != nullptr; }

  __attribute__((host)) __attribute__((device)) value_type get(size_t i) const
  {
    return value_type(mem[i], mem_idx[i]);
  }
  __attribute__((host)) __attribute__((device)) void set(size_t i, value_type val)
  {
    mem[i] = val;
    mem_idx[i] = val.getLoc();
  }

private:
  first_type* mem = nullptr;
  second_type* mem_idx = nullptr;
};

}

}
# 35 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/reduce.hpp" 2
# 47 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/reduce.hpp"
namespace RAJA
{

namespace reduce
{

namespace cuda
{

template <typename Combiner>
struct atomic;

template <typename T>
struct atomic<sum<T>> {
  __attribute__((device)) inline __attribute__((always_inline)) void operator()(T& val, const T v)
  {
    RAJA::atomicAdd<T>(RAJA::cuda_atomic{}, &val, v);
  }
};

template <typename T>
struct atomic<min<T>> {
  __attribute__((device)) inline __attribute__((always_inline)) void operator()(T& val, const T v)
  {
    RAJA::atomicMin<T>(RAJA::cuda_atomic{}, &val, v);
  }
};

template <typename T>
struct atomic<max<T>> {
  __attribute__((device)) inline __attribute__((always_inline)) void operator()(T& val, const T v)
  {
    RAJA::atomicMax<T>(RAJA::cuda_atomic{}, &val, v);
  }
};

template <typename T>
struct cuda_atomic_available {
  static constexpr const bool value =
      (std::is_integral<T>::value && (4 == sizeof(T) || 8 == sizeof(T))) ||
      std::is_same<T, float>::value || std::is_same<T, double>::value;
};

}

}

namespace cuda
{

namespace impl
{





template <typename T,
          size_t min_integer_type_size = 1,
          size_t max_integer_type_size = sizeof(long long)>
union AsIntegerArray {

  static_assert(min_integer_type_size <= max_integer_type_size,
                "incompatible min and max integer type size");
  using integer_type = typename std::conditional<
      ((alignof(T) >= alignof(long long) &&
        sizeof(long long) <= max_integer_type_size) ||
       sizeof(long) < min_integer_type_size),
      long long,
      typename std::conditional<
          ((alignof(T) >= alignof(long) &&
            sizeof(long) <= max_integer_type_size) ||
           sizeof(int) < min_integer_type_size),
          long,
          typename std::conditional<
              ((alignof(T) >= alignof(int) &&
                sizeof(int) <= max_integer_type_size) ||
               sizeof(short) < min_integer_type_size),
              int,
              typename std::conditional<
                  ((alignof(T) >= alignof(short) &&
                    sizeof(short) <= max_integer_type_size) ||
                   sizeof(char) < min_integer_type_size),
                  short,
                  typename std::conditional<
                      ((alignof(T) >= alignof(char) &&
                        sizeof(char) <= max_integer_type_size)),
                      char,
                      void>::type>::type>::type>::type>::type;
  static_assert(!std::is_same<integer_type, void>::value,
                "could not find a compatible integer type");
  static_assert(sizeof(integer_type) >= min_integer_type_size,
                "integer_type smaller than min integer type size");
  static_assert(sizeof(integer_type) <= max_integer_type_size,
                "integer_type greater than max integer type size");

  static constexpr size_t num_integer_type =
      (sizeof(T) + sizeof(integer_type) - 1) / sizeof(integer_type);

  T value;
  integer_type array[num_integer_type];

  __attribute__((host)) __attribute__((device)) constexpr AsIntegerArray(T value_) : value(value_){};

  __attribute__((host)) __attribute__((device)) constexpr size_t array_size() const
  {
    return num_integer_type;
  }
};


constexpr const size_t min_shfl_int_type_size = sizeof(int);

constexpr const size_t max_shfl_int_type_size = sizeof(long long);
# 175 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/reduce.hpp"
template <typename T>
__attribute__((device)) inline __attribute__((always_inline)) T shfl_xor_sync(T var, int laneMask)
{
  AsIntegerArray<T, min_shfl_int_type_size, max_shfl_int_type_size> u(var);

  for (size_t i = 0; i < u.array_size(); ++i) {

    u.array[i] = ::__shfl_xor_sync(0xffffffffu, u.array[i], laneMask);



  }
  return u.value;
}

template <typename T>
__attribute__((device)) inline __attribute__((always_inline)) T shfl_sync(T var, int srcLane)
{
  AsIntegerArray<T, min_shfl_int_type_size, max_shfl_int_type_size> u(var);

  for (size_t i = 0; i < u.array_size(); ++i) {

    u.array[i] = ::__shfl_sync(0xffffffffu, u.array[i], srcLane);



  }
  return u.value;
}



template <>
__attribute__((device)) inline __attribute__((always_inline)) int shfl_xor_sync<int>(int var, int laneMask)
{
  return ::__shfl_xor_sync(0xffffffffu, var, laneMask);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) unsigned int shfl_xor_sync<unsigned int>(unsigned int var, int laneMask)
{
  return ::__shfl_xor_sync(0xffffffffu, var, laneMask);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) long shfl_xor_sync<long>(long var, int laneMask)
{
  return ::__shfl_xor_sync(0xffffffffu, var, laneMask);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) unsigned long shfl_xor_sync<unsigned long>(unsigned long var, int laneMask)
{
  return ::__shfl_xor_sync(0xffffffffu, var, laneMask);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) long long shfl_xor_sync<long long>(long long var, int laneMask)
{
  return ::__shfl_xor_sync(0xffffffffu, var, laneMask);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) unsigned long long shfl_xor_sync<unsigned long long>(unsigned long long var, int laneMask)
{
  return ::__shfl_xor_sync(0xffffffffu, var, laneMask);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) float shfl_xor_sync<float>(float var, int laneMask)
{
  return ::__shfl_xor_sync(0xffffffffu, var, laneMask);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) double shfl_xor_sync<double>(double var, int laneMask)
{
  return ::__shfl_xor_sync(0xffffffffu, var, laneMask);
}
# 274 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/reduce.hpp"
template <>
__attribute__((device)) inline __attribute__((always_inline)) int shfl_sync<int>(int var, int srcLane)
{
  return ::__shfl_sync(0xffffffffu, var, srcLane);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) unsigned int shfl_sync<unsigned int>(unsigned int var, int srcLane)
{
  return ::__shfl_sync(0xffffffffu, var, srcLane);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) long shfl_sync<long>(long var, int srcLane)
{
  return ::__shfl_sync(0xffffffffu, var, srcLane);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) unsigned long shfl_sync<unsigned long>(unsigned long var, int srcLane)
{
  return ::__shfl_sync(0xffffffffu, var, srcLane);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) long long shfl_sync<long long>(long long var, int srcLane)
{
  return ::__shfl_sync(0xffffffffu, var, srcLane);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) unsigned long long shfl_sync<unsigned long long>(unsigned long long var, int srcLane)
{
  return ::__shfl_sync(0xffffffffu, var, srcLane);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) float shfl_sync<float>(float var, int srcLane)
{
  return ::__shfl_sync(0xffffffffu, var, srcLane);
}

template <>
__attribute__((device)) inline __attribute__((always_inline)) double shfl_sync<double>(double var, int srcLane)
{
  return ::__shfl_sync(0xffffffffu, var, srcLane);
}
# 339 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/reduce.hpp"
template <typename Combiner, typename T>
__attribute__((device)) inline __attribute__((always_inline)) T warp_reduce(T val, T )
{
  int numThreads = blockDim.x * blockDim.y * blockDim.z;

  int threadId = threadIdx.x + blockDim.x * threadIdx.y +
                 (blockDim.x * blockDim.y) * threadIdx.z;

  T temp = val;

  if (numThreads % policy::cuda::WARP_SIZE == 0) {


    for (int i = 1; i < policy::cuda::WARP_SIZE; i *= 2) {
      T rhs = shfl_xor_sync(temp, i);
      Combiner{}(temp, rhs);
    }

  } else {


    for (int i = 1; i < policy::cuda::WARP_SIZE; i *= 2) {
      int srcLane = threadId ^ i;
      T rhs = shfl_sync(temp, srcLane);

      if (srcLane < numThreads) {
        Combiner{}(temp, rhs);
      }
    }
  }

  return temp;
}


template <typename Combiner, typename T>
__attribute__((device)) inline __attribute__((always_inline)) T block_reduce(T val, T identity)
{
  int numThreads = blockDim.x * blockDim.y * blockDim.z;

  int threadId = threadIdx.x + blockDim.x * threadIdx.y +
                 (blockDim.x * blockDim.y) * threadIdx.z;

  int warpId = threadId % policy::cuda::WARP_SIZE;
  int warpNum = threadId / policy::cuda::WARP_SIZE;

  T temp = val;

  if (numThreads % policy::cuda::WARP_SIZE == 0) {


    for (int i = 1; i < policy::cuda::WARP_SIZE; i *= 2) {
      T rhs = shfl_xor_sync(temp, i);
      Combiner{}(temp, rhs);
    }

  } else {


    for (int i = 1; i < policy::cuda::WARP_SIZE; i *= 2) {
      int srcLane = threadId ^ i;
      T rhs = shfl_sync(temp, srcLane);

      if (srcLane < numThreads) {
        Combiner{}(temp, rhs);
      }
    }
  }


  if (numThreads > policy::cuda::WARP_SIZE) {


    __attribute__((shared)) unsigned char tmpsd[sizeof(RAJA::detail::SoAArray<T, policy::cuda::MAX_WARPS>)];



    RAJA::detail::SoAArray<T, policy::cuda::MAX_WARPS> * sd = reinterpret_cast<RAJA::detail::SoAArray<T, policy::cuda::MAX_WARPS> *>(tmpsd);


    if (warpId == 0) {
      sd->set(warpNum, temp);
    }

    __syncthreads();

    if (warpNum == 0) {


      if (warpId * policy::cuda::WARP_SIZE < numThreads) {
        temp = sd->get(warpId);
      } else {
        temp = identity;
      }

      for (int i = 1; i < policy::cuda::WARP_SIZE; i *= 2) {
        T rhs = shfl_xor_sync(temp, i);
        Combiner{}(temp, rhs);
      }
    }

    __syncthreads();
  }

  return temp;
}




template <typename Combiner, typename T, typename TempIterator>
__attribute__((device)) inline __attribute__((always_inline)) bool grid_reduce(T& val,
                                         T identity,
                                         TempIterator device_mem,
                                         unsigned int* device_count)
{
  int numBlocks = gridDim.x * gridDim.y * gridDim.z;
  int numThreads = blockDim.x * blockDim.y * blockDim.z;
  unsigned int wrap_around = numBlocks - 1;

  int blockId = blockIdx.x + gridDim.x * blockIdx.y +
                (gridDim.x * gridDim.y) * blockIdx.z;

  int threadId = threadIdx.x + blockDim.x * threadIdx.y +
                 (blockDim.x * blockDim.y) * threadIdx.z;

  T temp = block_reduce<Combiner>(val, identity);


  bool lastBlock = false;
  if (threadId == 0) {
    device_mem.set(blockId, temp);

    __threadfence();

    unsigned int old_count = ::atomicInc(device_count, wrap_around);
    lastBlock = (old_count == wrap_around);
  }


  lastBlock = __syncthreads_or(lastBlock);


  if (lastBlock) {
    temp = identity;

    for (int i = threadId; i < numBlocks; i += numThreads) {
      Combiner{}(temp, device_mem.get(i));
    }

    temp = block_reduce<Combiner>(temp, identity);


    if (threadId == 0) {
      val = temp;
    }
  }

  return lastBlock && threadId == 0;
}




template <typename Combiner, typename T>
__attribute__((device)) inline __attribute__((always_inline)) bool grid_reduce_atomic(T& val,
                                                T identity,
                                                T* device_mem,
                                                unsigned int* device_count)
{
  int numBlocks = gridDim.x * gridDim.y * gridDim.z;
  unsigned int wrap_around = numBlocks + 1;

  int threadId = threadIdx.x + blockDim.x * threadIdx.y +
                 (blockDim.x * blockDim.y) * threadIdx.z;


  if (threadId == 0) {
    unsigned int old_val = ::atomicCAS(device_count, 0u, 1u);
    if (old_val == 0u) {
      device_mem[0] = identity;
      __threadfence();
      ::atomicAdd(device_count, 1u);
    }
  }

  T temp = block_reduce<Combiner>(val, identity);


  bool lastBlock = false;
  if (threadId == 0) {

    while (static_cast<volatile unsigned int*>(device_count)[0] < 2u)
      ;
    __threadfence();
    RAJA::reduce::cuda::atomic<Combiner>{}(device_mem[0], temp);
    __threadfence();

    unsigned int old_count = ::atomicInc(device_count, wrap_around);
    lastBlock = (old_count == wrap_around);


    if (lastBlock) {
      val = device_mem[0];
    }
  }

  return lastBlock;
}

}



template <typename T>
class PinnedTally
{
public:

  struct Node {
    Node* next;
    T value;
  };

  struct StreamNode {
    StreamNode* next;
    cudaStream_t stream;
    Node* node_list;
  };


  class StreamIterator
  {
  public:
    StreamIterator() = delete;

    StreamIterator(StreamNode* sn) : m_sn(sn) {}

    const StreamIterator& operator++()
    {
      m_sn = m_sn->next;
      return *this;
    }

    StreamIterator operator++(int)
    {
      StreamIterator ret = *this;
      this->operator++();
      return ret;
    }

    cudaStream_t& operator*() { return m_sn->stream; }

    bool operator==(const StreamIterator& rhs) const
    {
      return m_sn == rhs.m_sn;
    }

    bool operator!=(const StreamIterator& rhs) const
    {
      return !this->operator==(rhs);
    }

  private:
    StreamNode* m_sn;
  };


  class StreamNodeIterator
  {
  public:
    StreamNodeIterator() = delete;

    StreamNodeIterator(StreamNode* sn, Node* n) : m_sn(sn), m_n(n) {}

    const StreamNodeIterator& operator++()
    {
      if (m_n->next) {
        m_n = m_n->next;
      } else if (m_sn->next) {
        m_sn = m_sn->next;
        m_n = m_sn->node_list;
      } else {
        m_sn = nullptr;
        m_n = nullptr;
      }
      return *this;
    }

    StreamNodeIterator operator++(int)
    {
      StreamNodeIterator ret = *this;
      this->operator++();
      return ret;
    }

    T& operator*() { return m_n->value; }

    bool operator==(const StreamNodeIterator& rhs) const
    {
      return m_n == rhs.m_n;
    }

    bool operator!=(const StreamNodeIterator& rhs) const
    {
      return !this->operator==(rhs);
    }

  private:
    StreamNode* m_sn;
    Node* m_n;
  };

  PinnedTally() : stream_list(nullptr) {}

  PinnedTally(const PinnedTally&) = delete;


  StreamIterator streamBegin() { return {stream_list}; }


  StreamIterator streamEnd() { return {nullptr}; }


  StreamNodeIterator begin()
  {
    return {stream_list, stream_list ? stream_list->node_list : nullptr};
  }


  StreamNodeIterator end() { return {nullptr, nullptr}; }


  T* new_value(cudaStream_t stream)
  {



    StreamNode* sn = stream_list;
    while (sn) {
      if (sn->stream == stream) break;
      sn = sn->next;
    }
    if (!sn) {
      sn = (StreamNode*)malloc(sizeof(StreamNode));
      sn->next = stream_list;
      sn->stream = stream;
      sn->node_list = nullptr;
      stream_list = sn;
    }
    Node* n = cuda::pinned_mempool_type::getInstance().template malloc<Node>(1);
    n->next = sn->node_list;
    sn->node_list = n;
    return &n->value;
  }


  void synchronize_streams()
  {
    auto end = streamEnd();
    for (auto s = streamBegin(); s != end; ++s) {
      synchronize(*s);
    }
  }


  void free_list()
  {
    while (stream_list) {
      StreamNode* s = stream_list;
      while (s->node_list) {
        Node* n = s->node_list;
        s->node_list = n->next;
        cuda::pinned_mempool_type::getInstance().free(n);
      }
      stream_list = s->next;
      free(s);
    }
  }

  ~PinnedTally() { free_list(); }





private:
  StreamNode* stream_list;
};
# 739 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/reduce.hpp"
template <typename Combiner, typename T>
struct Reduce_Data {

  mutable T value;
  T identity;
  unsigned int* device_count;
  RAJA::detail::SoAPtr<T, device_mempool_type> device;
  bool own_device_ptr;

  Reduce_Data() : Reduce_Data(T(), T()){};






  Reduce_Data(T initValue, T identity_)
      : value{initValue},
        identity{identity_},
        device_count{nullptr},
        device{},
        own_device_ptr{false}
  {
  }

  void reset(T initValue, T identity_ = T())
  {
    value = initValue;
    identity = identity_;
    device_count = nullptr;
    own_device_ptr = false;
  }

  __attribute__((host)) __attribute__((device))
  Reduce_Data(const Reduce_Data& other)
      : value{other.identity},
        identity{other.identity},
        device_count{other.device_count},
        device{other.device},
        own_device_ptr{false}
  {
  }



  void init_grid_val(T* output) { *output = identity; }


  __attribute__((device))
  void grid_reduce(T* output)
  {
    T temp = value;

    if (impl::grid_reduce<Combiner>(temp, identity, device, device_count)) {
      *output = temp;
    }
  }



  bool setupForDevice()
  {
    bool act = !device.allocated() && setupReducers();
    if (act) {
      cuda_dim_t gridDim = currentGridDim();
      size_t numBlocks = gridDim.x * gridDim.y * gridDim.z;
      device.allocate(numBlocks);
      device_count = device_zeroed_mempool_type::getInstance()
                         .template malloc<unsigned int>(1);
      own_device_ptr = true;
    }
    return act;
  }



  bool teardownForDevice()
  {
    bool act = own_device_ptr;
    if (act) {
      device.deallocate();
      device_zeroed_mempool_type::getInstance().free(device_count);
      device_count = nullptr;
      own_device_ptr = false;
    }
    return act;
  }
};



template <typename Combiner, typename T>
struct ReduceAtomic_Data {

  mutable T value;
  T identity;
  unsigned int* device_count;
  T* device;
  bool own_device_ptr;

  ReduceAtomic_Data() : ReduceAtomic_Data(T(), T()){};

  ReduceAtomic_Data(T initValue, T identity_)
      : value{initValue},
        identity{identity_},
        device_count{nullptr},
        device{nullptr},
        own_device_ptr{false}
  {
  }

  void reset(T initValue, T identity_ = Combiner::identity())
  {
    value = initValue;
    identity = identity_;
    device_count = nullptr;
    device = nullptr;
    own_device_ptr = false;
  }

  __attribute__((host)) __attribute__((device))
  ReduceAtomic_Data(const ReduceAtomic_Data& other)
      : value{other.identity},
        identity{other.identity},
        device_count{other.device_count},
        device{other.device},
        own_device_ptr{false}
  {
  }



  void init_grid_val(T* output) { *output = identity; }


  __attribute__((device))
  void grid_reduce(T* output)
  {
    T temp = value;

    if (impl::grid_reduce_atomic<Combiner>(
            temp, identity, device, device_count)) {
      *output = temp;
    }
  }



  bool setupForDevice()
  {
    bool act = !device && setupReducers();
    if (act) {
      device = device_mempool_type::getInstance().template malloc<T>(1);
      device_count = device_zeroed_mempool_type::getInstance()
                         .template malloc<unsigned int>(1);
      own_device_ptr = true;
    }
    return act;
  }



  bool teardownForDevice()
  {
    bool act = own_device_ptr;
    if (act) {
      device_mempool_type::getInstance().free(device);
      device = nullptr;
      device_zeroed_mempool_type::getInstance().free(device_count);
      device_count = nullptr;
      own_device_ptr = false;
    }
    return act;
  }
};


template <typename Combiner, typename T, bool maybe_atomic>
class Reduce
{
public:
  Reduce() : Reduce(T(), Combiner::identity()) {}



  explicit Reduce(T init_val, T identity_ = Combiner::identity())
      : parent{this},
        tally_or_val_ptr{new PinnedTally<T>},
        val(init_val, identity_)
  {
  }

  void reset(T in_val, T identity_ = Combiner::identity())
  {
    operator T();
    val = reduce_data_type(in_val, identity_);
  }




  __attribute__((host)) __attribute__((device))
  Reduce(const Reduce& other)



      : parent{&other},

        tally_or_val_ptr{other.tally_or_val_ptr},
        val(other.val)
  {
# 960 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/reduce.hpp"
  }



  __attribute__((host)) __attribute__((device))
  ~Reduce()
  {
# 984 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/reduce.hpp"
    if (!parent->parent) {
      val.grid_reduce(tally_or_val_ptr.val_ptr);
    } else {
      parent->combine(val.value);
    }

  }


  operator T()
  {
    auto n = tally_or_val_ptr.list->begin();
    auto end = tally_or_val_ptr.list->end();
    if (n != end) {
      tally_or_val_ptr.list->synchronize_streams();
      for (; n != end; ++n) {
        Combiner{}(val.value, *n);
      }
      tally_or_val_ptr.list->free_list();
    }
    return val.value;
  }

  T get() { return operator T(); }


  __attribute__((host)) __attribute__((device))
  void combine(T other) const { Combiner{}(val.value, other); }




  T& local() const { return val.value; }

  T get_combined() const { return val.value; }

private:
  const Reduce* parent;



  union tally_u {
    PinnedTally<T>* list;
    T* val_ptr;
    constexpr tally_u(PinnedTally<T>* l) : list(l){};
    constexpr tally_u(T* v_ptr) : val_ptr(v_ptr){};
  };

  tally_u tally_or_val_ptr;


  using reduce_data_type = typename std::conditional<
      maybe_atomic && RAJA::reduce::cuda::cuda_atomic_available<T>::value,
      cuda::ReduceAtomic_Data<Combiner, T>,
      cuda::Reduce_Data<Combiner, T>>::type;


  reduce_data_type val;
};

}


template <bool maybe_atomic, typename T>
class ReduceSum<cuda_reduce_base<maybe_atomic>, T>
    : public cuda::Reduce<RAJA::reduce::sum<T>, T, maybe_atomic>
{

public:
  using Base = cuda::Reduce<RAJA::reduce::sum<T>, T, maybe_atomic>;
  using Base::Base;

  __attribute__((host)) __attribute__((device))
  const ReduceSum& operator+=(T rhs) const
  {
    this->combine(rhs);
    return *this;
  }
};


template <bool maybe_atomic, typename T>
class ReduceBitOr<cuda_reduce_base<maybe_atomic>, T>
    : public cuda::Reduce<RAJA::reduce::or_bit<T>, T, maybe_atomic>
{

public:
  using Base = cuda::Reduce<RAJA::reduce::or_bit<T>, T, maybe_atomic>;
  using Base::Base;

  __attribute__((host)) __attribute__((device))
  const ReduceBitOr& operator|=(T rhs) const
  {
    this->combine(rhs);
    return *this;
  }
};


template <bool maybe_atomic, typename T>
class ReduceBitAnd<cuda_reduce_base<maybe_atomic>, T>
    : public cuda::Reduce<RAJA::reduce::and_bit<T>, T, maybe_atomic>
{

public:
  using Base = cuda::Reduce<RAJA::reduce::and_bit<T>, T, maybe_atomic>;
  using Base::Base;

  __attribute__((host)) __attribute__((device))
  const ReduceBitAnd& operator&=(T rhs) const
  {
    this->combine(rhs);
    return *this;
  }
};


template <bool maybe_atomic, typename T>
class ReduceMin<cuda_reduce_base<maybe_atomic>, T>
    : public cuda::Reduce<RAJA::reduce::min<T>, T, maybe_atomic>
{

public:
  using Base = cuda::Reduce<RAJA::reduce::min<T>, T, maybe_atomic>;
  using Base::Base;

  __attribute__((host)) __attribute__((device))
  const ReduceMin& min(T rhs) const
  {
    this->combine(rhs);
    return *this;
  }
};


template <bool maybe_atomic, typename T>
class ReduceMax<cuda_reduce_base<maybe_atomic>, T>
    : public cuda::Reduce<RAJA::reduce::max<T>, T, maybe_atomic>
{

public:
  using Base = cuda::Reduce<RAJA::reduce::max<T>, T, maybe_atomic>;
  using Base::Base;

  __attribute__((host)) __attribute__((device))
  const ReduceMax& max(T rhs) const
  {
    this->combine(rhs);
    return *this;
  }
};


template <bool maybe_atomic, typename T, typename IndexType>
class ReduceMinLoc<cuda_reduce_base<maybe_atomic>, T, IndexType>
    : public cuda::Reduce<RAJA::reduce::min<RAJA::reduce::detail::ValueLoc<T, IndexType>>,
                          RAJA::reduce::detail::ValueLoc<T, IndexType>,
                          maybe_atomic>
{

public:
  using value_type = RAJA::reduce::detail::ValueLoc<T, IndexType>;
  using Base = cuda::
      Reduce<RAJA::reduce::min<value_type>, value_type, maybe_atomic>;
  using Base::Base;


  ReduceMinLoc(T init_val, IndexType init_idx)
      : Base(value_type(init_val, init_idx))
  {
  }

  __attribute__((host)) __attribute__((device))
  const ReduceMinLoc& minloc(T rhs, IndexType loc) const
  {
    this->combine(value_type(rhs, loc));
    return *this;
  }


  IndexType getLoc() { return Base::get().getLoc(); }


  operator T() { return Base::get(); }


  T get() { return Base::get(); }
};


template <bool maybe_atomic, typename T, typename IndexType>
class ReduceMaxLoc<cuda_reduce_base<maybe_atomic>, T, IndexType>
    : public cuda::
          Reduce<RAJA::reduce::max<RAJA::reduce::detail::ValueLoc<T, IndexType, false>>,
                 RAJA::reduce::detail::ValueLoc<T, IndexType, false>,
                 maybe_atomic>
{
public:
  using value_type = RAJA::reduce::detail::ValueLoc<T, IndexType, false>;
  using Base = cuda::
      Reduce<RAJA::reduce::max<value_type>, value_type, maybe_atomic>;
  using Base::Base;


  ReduceMaxLoc(T init_val, IndexType init_idx)
      : Base(value_type(init_val, init_idx))
  {
  }

  __attribute__((host)) __attribute__((device))
  const ReduceMaxLoc& maxloc(T rhs, IndexType loc) const
  {
    this->combine(value_type(rhs, loc));
    return *this;
  }


  IndexType getLoc() { return Base::get().getLoc(); }


  operator T() { return Base::get(); }


  T get() { return Base::get(); }
};

}
# 34 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp" 1
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_scan.cuh" 1 3
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_scan.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh" 1 3
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_scan.cuh" 1 3
# 38 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_scan.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/single_pass_scan_operators.cuh" 1 3
# 38 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/single_pass_scan_operators.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_load.cuh" 1 3
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_load.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_ptx.cuh" 1 3
# 37 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_ptx.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 1 3
# 38 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cfloat" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cfloat" 3
# 39 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 2 3


# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 1 3
# 112 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
struct __half;
struct __half2;
# 124 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((host)) __attribute__((device)) __inline__ __half __float2half(const float a);
# 134 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((host)) __attribute__((device)) __inline__ __half __float2half_rn(const float a);
# 144 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((host)) __attribute__((device)) __inline__ __half __float2half_rz(const float a);
# 154 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((host)) __attribute__((device)) __inline__ __half __float2half_rd(const float a);
# 164 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((host)) __attribute__((device)) __inline__ __half __float2half_ru(const float a);
# 173 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((host)) __attribute__((device)) __inline__ float __half2float(const __half a);
# 185 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((host)) __attribute__((device)) __inline__ __half2 __float2half2_rn(const float a);
# 199 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((host)) __attribute__((device)) __inline__ __half2 __floats2half2_rn(const float a, const float b);
# 209 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((host)) __attribute__((device)) __inline__ float __low2float(const __half2 a);
# 219 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((host)) __attribute__((device)) __inline__ float __high2float(const __half2 a);
# 235 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((host)) __attribute__((device)) __inline__ __half2 __float22half2_rn(const float2 a);
# 245 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((host)) __attribute__((device)) __inline__ float2 __half22float2(const __half2 a);
# 255 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ int __half2int_rn(__half h);
# 265 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ int __half2int_rz(__half h);
# 275 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ int __half2int_rd(__half h);
# 285 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ int __half2int_ru(__half h);
# 296 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __int2half_rn(int i);
# 306 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __int2half_rz(int i);
# 316 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __int2half_rd(int i);
# 326 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __int2half_ru(int i);
# 338 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ short int __half2short_rn(__half h);
# 348 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ short int __half2short_rz(__half h);
# 358 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ short int __half2short_rd(__half h);
# 368 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ short int __half2short_ru(__half h);
# 380 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __short2half_rn(short int i);
# 390 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __short2half_rz(short int i);
# 400 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __short2half_rd(short int i);
# 410 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __short2half_ru(short int i);
# 421 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ unsigned int __half2uint_rn(__half h);
# 431 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ unsigned int __half2uint_rz(__half h);
# 441 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ unsigned int __half2uint_rd(__half h);
# 451 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ unsigned int __half2uint_ru(__half h);
# 462 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __uint2half_rn(unsigned int i);
# 472 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __uint2half_rz(unsigned int i);
# 482 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __uint2half_rd(unsigned int i);
# 492 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __uint2half_ru(unsigned int i);
# 504 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ unsigned short int __half2ushort_rn(__half h);
# 515 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ unsigned short int __half2ushort_rz(__half h);
# 525 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ unsigned short int __half2ushort_rd(__half h);
# 535 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ unsigned short int __half2ushort_ru(__half h);
# 547 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __ushort2half_rn(unsigned short int i);
# 558 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __ushort2half_rz(unsigned short int i);
# 568 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __ushort2half_rd(unsigned short int i);
# 578 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __ushort2half_ru(unsigned short int i);
# 590 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ unsigned long long int __half2ull_rn(__half h);
# 601 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ unsigned long long int __half2ull_rz(__half h);
# 611 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ unsigned long long int __half2ull_rd(__half h);
# 621 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ unsigned long long int __half2ull_ru(__half h);
# 633 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __ull2half_rn(unsigned long long int i);
# 644 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __ull2half_rz(unsigned long long int i);
# 654 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __ull2half_rd(unsigned long long int i);
# 664 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __ull2half_ru(unsigned long long int i);
# 676 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ long long int __half2ll_rn(__half h);
# 686 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ long long int __half2ll_rz(__half h);
# 696 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ long long int __half2ll_rd(__half h);
# 706 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ long long int __half2ll_ru(__half h);
# 718 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __ll2half_rn(long long int i);
# 728 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __ll2half_rz(long long int i);
# 738 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __ll2half_rd(long long int i);
# 748 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __ll2half_ru(long long int i);
# 759 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half htrunc(const __half h);
# 768 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hceil(const __half h);
# 777 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hfloor(const __half h);
# 789 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hrint(const __half h);
# 800 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2trunc(const __half2 h);
# 811 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2ceil(const __half2 h);
# 822 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2floor(const __half2 h);
# 835 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2rint(const __half2 h);
# 846 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __half2half2(const __half a);
# 856 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __lowhigh2highlow(const __half2 a);
# 869 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __lows2half2(const __half2 a, const __half2 b);
# 882 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __highs2half2(const __half2 a, const __half2 b);
# 891 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __high2half(const __half2 a);
# 900 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __low2half(const __half2 a);
# 910 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ int __hisinf(const __half a);
# 922 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __halves2half2(const __half a, const __half b);
# 933 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __low2half2(const __half2 a);
# 944 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __high2half2(const __half2 a);
# 955 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ short int __half_as_short(const __half h);
# 965 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ unsigned short int __half_as_ushort(const __half h);
# 975 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __short_as_half(const short int i);
# 985 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __ushort_as_half(const unsigned short int i);
# 1008 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl""() is not valid on compute_70 and above, and should be replaced with ""__shfl""_sync()." "To continue using ""__shfl""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) __half2 __shfl(__half2 var, int delta, int width = 32);
static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_up""() is not valid on compute_70 and above, and should be replaced with ""__shfl_up""_sync()." "To continue using ""__shfl_up""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) __half2 __shfl_up(__half2 var, unsigned int delta, int width = 32);
static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_down""() is not valid on compute_70 and above, and should be replaced with ""__shfl_down""_sync()." "To continue using ""__shfl_down""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70.")))__half2 __shfl_down(__half2 var, unsigned int delta, int width = 32);
static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_xor""() is not valid on compute_70 and above, and should be replaced with ""__shfl_xor""_sync()." "To continue using ""__shfl_xor""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) __half2 __shfl_xor(__half2 var, int delta, int width = 32);
static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl""() is not valid on compute_70 and above, and should be replaced with ""__shfl""_sync()." "To continue using ""__shfl""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) __half __shfl(__half var, int delta, int width = 32);
static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_up""() is not valid on compute_70 and above, and should be replaced with ""__shfl_up""_sync()." "To continue using ""__shfl_up""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) __half __shfl_up(__half var, unsigned int delta, int width = 32);
static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_down""() is not valid on compute_70 and above, and should be replaced with ""__shfl_down""_sync()." "To continue using ""__shfl_down""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) __half __shfl_down(__half var, unsigned int delta, int width = 32);
static __attribute__((device)) __inline__ __attribute__((deprecated("__shfl_xor""() is not valid on compute_70 and above, and should be replaced with ""__shfl_xor""_sync()." "To continue using ""__shfl_xor""(), specify virtual architecture compute_60 when targeting sm_70 and above, for example, using the pair of compiler options: -arch=compute_60 -code=sm_70."))) __half __shfl_xor(__half var, int delta, int width = 32);

static __attribute__((device)) __inline__ __half2 __shfl_sync(unsigned mask, __half2 var, int delta, int width = 32);
static __attribute__((device)) __inline__ __half2 __shfl_up_sync(unsigned mask, __half2 var, unsigned int delta, int width = 32);
static __attribute__((device)) __inline__ __half2 __shfl_down_sync(unsigned mask, __half2 var, unsigned int delta, int width = 32);
static __attribute__((device)) __inline__ __half2 __shfl_xor_sync(unsigned mask, __half2 var, int delta, int width = 32);
static __attribute__((device)) __inline__ __half __shfl_sync(unsigned mask, __half var, int delta, int width = 32);
static __attribute__((device)) __inline__ __half __shfl_up_sync(unsigned mask, __half var, unsigned int delta, int width = 32);
static __attribute__((device)) __inline__ __half __shfl_down_sync(unsigned mask, __half var, unsigned int delta, int width = 32);
static __attribute__((device)) __inline__ __half __shfl_xor_sync(unsigned mask, __half var, int delta, int width = 32);
# 1033 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __ldg(const __half2 *ptr);
static __attribute__((device)) __inline__ __half __ldg(const __half *ptr);
static __attribute__((device)) __inline__ __half2 __ldcg(const __half2 *ptr);
static __attribute__((device)) __inline__ __half __ldcg(const __half *ptr);
static __attribute__((device)) __inline__ __half2 __ldca(const __half2 *ptr);
static __attribute__((device)) __inline__ __half __ldca(const __half *ptr);
static __attribute__((device)) __inline__ __half2 __ldcs(const __half2 *ptr);
static __attribute__((device)) __inline__ __half __ldcs(const __half *ptr);
# 1055 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __heq2(const __half2 a, const __half2 b);
# 1067 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hne2(const __half2 a, const __half2 b);
# 1079 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hle2(const __half2 a, const __half2 b);
# 1091 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hge2(const __half2 a, const __half2 b);
# 1103 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hlt2(const __half2 a, const __half2 b);
# 1115 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hgt2(const __half2 a, const __half2 b);
# 1127 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hequ2(const __half2 a, const __half2 b);
# 1139 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hneu2(const __half2 a, const __half2 b);
# 1151 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hleu2(const __half2 a, const __half2 b);
# 1163 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hgeu2(const __half2 a, const __half2 b);
# 1175 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hltu2(const __half2 a, const __half2 b);
# 1187 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hgtu2(const __half2 a, const __half2 b);
# 1197 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hisnan2(const __half2 a);
# 1207 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hadd2(const __half2 a, const __half2 b);
# 1218 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hsub2(const __half2 a, const __half2 b);
# 1229 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hmul2(const __half2 a, const __half2 b);
# 1239 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __h2div(const __half2 a, const __half2 b);
# 1252 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hadd2_sat(const __half2 a, const __half2 b);
# 1265 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hsub2_sat(const __half2 a, const __half2 b);
# 1278 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hmul2_sat(const __half2 a, const __half2 b);
# 1291 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hfma2(const __half2 a, const __half2 b, const __half2 c);
# 1305 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hfma2_sat(const __half2 a, const __half2 b, const __half2 c);
# 1315 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 __hneg2(const __half2 a);
# 1325 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __hadd(const __half a, const __half b);
# 1335 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __hsub(const __half a, const __half b);
# 1345 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __hmul(const __half a, const __half b);
# 1355 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __hdiv(const __half a, const __half b);
# 1366 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __hadd_sat(const __half a, const __half b);
# 1379 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __hsub_sat(const __half a, const __half b);
# 1392 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __hmul_sat(const __half a, const __half b);
# 1404 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __hfma(const __half a, const __half b, const __half c);
# 1418 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __hfma_sat(const __half a, const __half b, const __half c);
# 1427 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half __hneg(const __half a);
# 1441 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hbeq2(const __half2 a, const __half2 b);
# 1455 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hbne2(const __half2 a, const __half2 b);
# 1469 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hble2(const __half2 a, const __half2 b);
# 1483 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hbge2(const __half2 a, const __half2 b);
# 1497 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hblt2(const __half2 a, const __half2 b);
# 1511 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hbgt2(const __half2 a, const __half2 b);
# 1525 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hbequ2(const __half2 a, const __half2 b);
# 1539 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hbneu2(const __half2 a, const __half2 b);
# 1553 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hbleu2(const __half2 a, const __half2 b);
# 1569 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hbgeu2(const __half2 a, const __half2 b);
# 1583 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hbltu2(const __half2 a, const __half2 b);
# 1599 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hbgtu2(const __half2 a, const __half2 b);
# 1609 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __heq(const __half a, const __half b);
# 1619 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hne(const __half a, const __half b);
# 1629 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hle(const __half a, const __half b);
# 1639 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hge(const __half a, const __half b);
# 1649 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hlt(const __half a, const __half b);
# 1659 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hgt(const __half a, const __half b);
# 1670 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hequ(const __half a, const __half b);
# 1681 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hneu(const __half a, const __half b);
# 1692 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hleu(const __half a, const __half b);
# 1703 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hgeu(const __half a, const __half b);
# 1714 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hltu(const __half a, const __half b);
# 1725 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hgtu(const __half a, const __half b);
# 1734 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ bool __hisnan(const __half a);
# 1743 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hsqrt(const __half a);
# 1754 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hrsqrt(const __half a);
# 1763 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hrcp(const __half a);
# 1773 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hlog(const __half a);
# 1783 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hlog2(const __half a);
# 1793 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hlog10(const __half a);
# 1804 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hexp(const __half a);
# 1815 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hexp2(const __half a);
# 1826 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hexp10(const __half a);
# 1835 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hcos(const __half a);
# 1844 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half hsin(const __half a);
# 1854 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2sqrt(const __half2 a);
# 1865 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2rsqrt(const __half2 a);
# 1875 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2rcp(const __half2 a);
# 1886 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2log(const __half2 a);
# 1897 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2log2(const __half2 a);
# 1908 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2log10(const __half2 a);
# 1919 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2exp(const __half2 a);
# 1930 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2exp2(const __half2 a);
# 1941 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2exp10(const __half2 a);
# 1951 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2cos(const __half2 a);
# 1960 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
static __attribute__((device)) __inline__ __half2 h2sin(const __half2 a);





static __attribute__((device)) __inline__ __half2 atomicAdd(__half2 *address, __half2 val);
# 1978 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 3
# 1 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 1 3
# 120 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
typedef struct __attribute__((aligned(2))) {
    unsigned short x;
} __half_raw;

typedef struct __attribute__((aligned(4))) {
    unsigned short x, y;
} __half2_raw;
# 147 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
struct __attribute__((aligned(2))) __half {
protected:
    unsigned short __x;

public:

    __half() = default;





    __attribute__((host)) __attribute__((device)) __half(const __half_raw &hr) : __x(hr.x) { }
    __attribute__((host)) __attribute__((device)) __half &operator=(const __half_raw &hr) { __x = hr.x; return *this; }
    __attribute__((host)) __attribute__((device)) volatile __half &operator=(const __half_raw &hr) volatile { __x = hr.x; return *this; }
    __attribute__((host)) __attribute__((device)) volatile __half &operator=(const volatile __half_raw &hr) volatile { __x = hr.x; return *this; }
    __attribute__((host)) __attribute__((device)) operator __half_raw() const { __half_raw ret; ret.x = __x; return ret; }
    __attribute__((host)) __attribute__((device)) operator volatile __half_raw() const volatile { __half_raw ret; ret.x = __x; return ret; }




    __attribute__((host)) __attribute__((device)) __half(float f) { __x = __float2half(f).__x; }
    __attribute__((host)) __attribute__((device)) __half(double f) { __x = __float2half(static_cast<float>(f)).__x; }

    __attribute__((host)) __attribute__((device)) operator float() const { return __half2float(*this); }
    __attribute__((host)) __attribute__((device)) __half &operator=(float f) { __x = __float2half(f).__x; return *this; }


    __attribute__((host)) __attribute__((device)) __half &operator=(double f) { __x = __float2half(static_cast<float>(f)).__x; return *this; }





    __attribute__((device)) __half(short val) { __x = __short2half_rn(val).__x; }
    __attribute__((device)) __half(unsigned short val) { __x = __ushort2half_rn(val).__x; }
    __attribute__((device)) __half(int val) { __x = __int2half_rn(val).__x; }
    __attribute__((device)) __half(unsigned int val) { __x = __uint2half_rn(val).__x; }
    __attribute__((device)) __half(long long val) { __x = __ll2half_rn(val).__x; }
    __attribute__((device)) __half(unsigned long long val) { __x = __ull2half_rn(val).__x; }


    __attribute__((device)) operator short() const { return __half2short_rn(*this); }
    __attribute__((device)) __half &operator=(short val) { __x = __short2half_rn(val).__x; return *this; }

    __attribute__((device)) operator unsigned short() const { return __half2ushort_rn(*this); }
    __attribute__((device)) __half &operator=(unsigned short val) { __x = __ushort2half_rn(val).__x; return *this; }

    __attribute__((device)) operator int() const { return __half2int_rn(*this); }
    __attribute__((device)) __half &operator=(int val) { __x = __int2half_rn(val).__x; return *this; }

    __attribute__((device)) operator unsigned int() const { return __half2uint_rn(*this); }
    __attribute__((device)) __half &operator=(unsigned int val) { __x = __uint2half_rn(val).__x; return *this; }

    __attribute__((device)) operator long long() const { return __half2ll_rn(*this); }
    __attribute__((device)) __half &operator=(long long val) { __x = __ll2half_rn(val).__x; return *this; }

    __attribute__((device)) operator unsigned long long() const { return __half2ull_rn(*this); }
    __attribute__((device)) __half &operator=(unsigned long long val) { __x = __ull2half_rn(val).__x; return *this; }


    __attribute__((device)) operator bool() const { return (__x & 0x7FFF) != 0; }


};
# 221 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
__attribute__((device)) __inline__ __attribute__((always_inline)) __half operator+(const __half &lh, const __half &rh) { return __hadd(lh, rh); }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half operator-(const __half &lh, const __half &rh) { return __hsub(lh, rh); }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half operator*(const __half &lh, const __half &rh) { return __hmul(lh, rh); }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half operator/(const __half &lh, const __half &rh) { return __hdiv(lh, rh); }

__attribute__((device)) __inline__ __attribute__((always_inline)) __half &operator+=(__half &lh, const __half &rh) { lh = __hadd(lh, rh); return lh; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half &operator-=(__half &lh, const __half &rh) { lh = __hsub(lh, rh); return lh; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half &operator*=(__half &lh, const __half &rh) { lh = __hmul(lh, rh); return lh; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half &operator/=(__half &lh, const __half &rh) { lh = __hdiv(lh, rh); return lh; }


__attribute__((device)) __inline__ __attribute__((always_inline)) __half &operator++(__half &h) { __half_raw one; one.x = 0x3C00; h += one; return h; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half &operator--(__half &h) { __half_raw one; one.x = 0x3C00; h -= one; return h; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half operator++(__half &h, int) { __half ret = h; __half_raw one; one.x = 0x3C00; h += one; return ret; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half operator--(__half &h, int) { __half ret = h; __half_raw one; one.x = 0x3C00; h -= one; return ret; }


__attribute__((device)) __inline__ __attribute__((always_inline)) __half operator+(const __half &h) { return h; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half operator-(const __half &h) { return __hneg(h); }


__attribute__((device)) __inline__ __attribute__((always_inline)) bool operator==(const __half &lh, const __half &rh) { return __heq(lh, rh); }
__attribute__((device)) __inline__ __attribute__((always_inline)) bool operator!=(const __half &lh, const __half &rh) { return __hne(lh, rh); }
__attribute__((device)) __inline__ __attribute__((always_inline)) bool operator> (const __half &lh, const __half &rh) { return __hgt(lh, rh); }
__attribute__((device)) __inline__ __attribute__((always_inline)) bool operator< (const __half &lh, const __half &rh) { return __hlt(lh, rh); }
__attribute__((device)) __inline__ __attribute__((always_inline)) bool operator>=(const __half &lh, const __half &rh) { return __hge(lh, rh); }
__attribute__((device)) __inline__ __attribute__((always_inline)) bool operator<=(const __half &lh, const __half &rh) { return __hle(lh, rh); }





struct __attribute__((aligned(4))) __half2 {
    __half x, y;


public:

    __half2() = default;
    __attribute__((host)) __attribute__((device)) __half2(__half2 &&src) { *(reinterpret_cast<unsigned int *>(&(*this))) = std::move(*(reinterpret_cast<const unsigned int *>(&(src)))); }
    __attribute__((host)) __attribute__((device)) __half2 &operator=(__half2 &&src) { *(reinterpret_cast<unsigned int *>(&(*this))) = std::move(*(reinterpret_cast<const unsigned int *>(&(src)))); return *this; }



    __attribute__((host)) __attribute__((device)) __half2(const __half &a, const __half &b) : x(a), y(b) { }
    __attribute__((host)) __attribute__((device)) __half2(const __half2 &src) { *(reinterpret_cast<unsigned int *>(&(*this))) = *(reinterpret_cast<const unsigned int *>(&(src))); }
    __attribute__((host)) __attribute__((device)) __half2 &operator=(const __half2 &src) { *(reinterpret_cast<unsigned int *>(&(*this))) = *(reinterpret_cast<const unsigned int *>(&(src))); return *this; }


    __attribute__((host)) __attribute__((device)) __half2(const __half2_raw &h2r ) { *(reinterpret_cast<unsigned int *>(&(*this))) = *(reinterpret_cast<const unsigned int *>(&(h2r))); }
    __attribute__((host)) __attribute__((device)) __half2 &operator=(const __half2_raw &h2r) { *(reinterpret_cast<unsigned int *>(&(*this))) = *(reinterpret_cast<const unsigned int *>(&(h2r))); return *this; }
    __attribute__((host)) __attribute__((device)) operator __half2_raw() const { __half2_raw ret; *(reinterpret_cast<unsigned int *>(&(ret))) = *(reinterpret_cast<const unsigned int *>(&(*this))); return ret; }
};







__attribute__((device)) __inline__ __attribute__((always_inline)) __half2 operator+(const __half2 &lh, const __half2 &rh) { return __hadd2(lh, rh); }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half2 operator-(const __half2 &lh, const __half2 &rh) { return __hsub2(lh, rh); }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half2 operator*(const __half2 &lh, const __half2 &rh) { return __hmul2(lh, rh); }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half2 operator/(const __half2 &lh, const __half2 &rh) { return __h2div(lh, rh); }

__attribute__((device)) __inline__ __attribute__((always_inline)) __half2& operator+=(__half2 &lh, const __half2 &rh) { lh = __hadd2(lh, rh); return lh; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half2& operator-=(__half2 &lh, const __half2 &rh) { lh = __hsub2(lh, rh); return lh; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half2& operator*=(__half2 &lh, const __half2 &rh) { lh = __hmul2(lh, rh); return lh; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half2& operator/=(__half2 &lh, const __half2 &rh) { lh = __h2div(lh, rh); return lh; }

__attribute__((device)) __inline__ __attribute__((always_inline)) __half2 &operator++(__half2 &h) { __half2_raw one; one.x = 0x3C00; one.y = 0x3C00; h = __hadd2(h, one); return h; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half2 &operator--(__half2 &h) { __half2_raw one; one.x = 0x3C00; one.y = 0x3C00; h = __hsub2(h, one); return h; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half2 operator++(__half2 &h, int) { __half2 ret = h; __half2_raw one; one.x = 0x3C00; one.y = 0x3C00; h = __hadd2(h, one); return ret; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half2 operator--(__half2 &h, int) { __half2 ret = h; __half2_raw one; one.x = 0x3C00; one.y = 0x3C00; h = __hsub2(h, one); return ret; }

__attribute__((device)) __inline__ __attribute__((always_inline)) __half2 operator+(const __half2 &h) { return h; }
__attribute__((device)) __inline__ __attribute__((always_inline)) __half2 operator-(const __half2 &h) { return __hneg2(h); }

__attribute__((device)) __inline__ __attribute__((always_inline)) bool operator==(const __half2 &lh, const __half2 &rh) { __half2 res = __heq2(lh, rh); return (res.x && res.y); }
__attribute__((device)) __inline__ __attribute__((always_inline)) bool operator!=(const __half2 &lh, const __half2 &rh) { __half2 res = __hne2(lh, rh); return (res.x && res.y); }
__attribute__((device)) __inline__ __attribute__((always_inline)) bool operator>(const __half2 &lh, const __half2 &rh) { __half2 res = __hgt2(lh, rh); return (res.x && res.y); }
__attribute__((device)) __inline__ __attribute__((always_inline)) bool operator<(const __half2 &lh, const __half2 &rh) { __half2 res = __hlt2(lh, rh); return (res.x && res.y); }
__attribute__((device)) __inline__ __attribute__((always_inline)) bool operator>=(const __half2 &lh, const __half2 &rh) { __half2 res = __hge2(lh, rh); return (res.x && res.y); }
__attribute__((device)) __inline__ __attribute__((always_inline)) bool operator<=(const __half2 &lh, const __half2 &rh) { __half2 res = __hle2(lh, rh); return (res.x && res.y); }
# 325 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
static unsigned short __internal_float2half(float f, unsigned int &sign, unsigned int &remainder)
{
    unsigned int x, u, shift, exponent, mantissa;
    memcpy(&x, &f, sizeof(f));
    u = (x & 0x7fffffffU);
    sign = ((x >> 16) & 0x8000U);

    if (u >= 0x7f800000U) {
        remainder = 0;
        return static_cast<unsigned short>((u == 0x7f800000U) ? (sign | 0x7c00U) : 0x7fffU);
    }

    if (u > 0x477fefffU) {
        remainder = 0x80000000U;
        return static_cast<unsigned short>(sign | 0x7bffU);
    }

    if (u >= 0x38800000U) {
        remainder = u << 19;
        u -= 0x38000000U;
        return static_cast<unsigned short>(sign | (u >> 13));
    }

    if (u < 0x33000001U) {
        remainder = u;
        return static_cast<unsigned short>(sign);
    }

    exponent = u >> 23;
    mantissa = (u & 0x7fffffU);
    shift = 0x7eU - exponent;
    mantissa |= 0x800000U;
    remainder = mantissa << (32 - shift);
    return static_cast<unsigned short>(sign | (mantissa >> shift));
}


static __attribute__((host)) __attribute__((device)) __inline__ __half __float2half(const float f)
{
    __half val;

    asm("{  cvt.rn.f16.f32 %0, %1;}\n" : "=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "f"(f));
# 375 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
    return val;
}
static __attribute__((host)) __attribute__((device)) __inline__ __half __float2half_rn(const float f)
{
    __half val;

    asm("{  cvt.rn.f16.f32 %0, %1;}\n" : "=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "f"(f));
# 390 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
    return val;
}
static __attribute__((host)) __attribute__((device)) __inline__ __half __float2half_rz(const float f)
{
    __half val;

    asm("{  cvt.rz.f16.f32 %0, %1;}\n" : "=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "f"(f));






    return val;
}
static __attribute__((host)) __attribute__((device)) __inline__ __half __float2half_rd(const float f)
{
    __half val;

    asm("{  cvt.rm.f16.f32 %0, %1;}\n" : "=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "f"(f));
# 418 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
    return val;
}
static __attribute__((host)) __attribute__((device)) __inline__ __half __float2half_ru(const float f)
{
    __half val;

    asm("{  cvt.rp.f16.f32 %0, %1;}\n" : "=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "f"(f));
# 433 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
    return val;
}
static __attribute__((host)) __attribute__((device)) __inline__ __half2 __float2half2_rn(const float f)
{
    __half2 val;

    asm("{.reg .f16 low;\n"
        "  cvt.rn.f16.f32 low, %1;\n"
        "  mov.b32 %0, {low,low};}\n" : "=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "f"(f));



    return val;
}
static __attribute__((host)) __attribute__((device)) __inline__ __half2 __floats2half2_rn(const float f1, const float f2)
{
    __half2 val;

    asm("{.reg .f16 low,high;\n"
        "  cvt.rn.f16.f32 low, %1;\n"
        "  cvt.rn.f16.f32 high, %2;\n"
        "  mov.b32 %0, {low,high};}\n" : "=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "f"(f1), "f"(f2));



    return val;
}


static float __internal_half2float(unsigned short h)
{
    unsigned int sign = ((h >> 15) & 1);
    unsigned int exponent = ((h >> 10) & 0x1f);
    unsigned int mantissa = ((h & 0x3ff) << 13);
    float f;
    if (exponent == 0x1fU) {
        mantissa = (mantissa ? (sign = 0, 0x7fffffU) : 0);
        exponent = 0xffU;
    } else if (!exponent) {
        if (mantissa) {
            unsigned int msb;
            exponent = 0x71U;
            do {
                msb = (mantissa & 0x400000U);
                mantissa <<= 1;
                --exponent;
            } while (!msb);
            mantissa &= 0x7fffffU;
        }
    } else {
        exponent += 0x70U;
    }
    unsigned int u = ((sign << 31) | (exponent << 23) | mantissa);
    memcpy(&f, &u, sizeof(u));
    return f;
}


static __attribute__((host)) __attribute__((device)) __inline__ float __half2float(const __half h)
{
    float val;

    asm("{  cvt.f32.f16 %0, %1;}\n" : "=f"(val) : "h"(*(reinterpret_cast<const unsigned short *>(&(h)))));



    return val;
}
static __attribute__((host)) __attribute__((device)) __inline__ float __low2float(const __half2 l)
{
    float val;

    asm("{.reg .f16 low,high;\n"
        "  mov.b32 {low,high},%1;\n"
        "  cvt.f32.f16 %0, low;}\n" : "=f"(val) : "r"(*(reinterpret_cast<const unsigned int *>(&(l)))));



    return val;
}
static __attribute__((host)) __attribute__((device)) __inline__ float __high2float(const __half2 l)
{
    float val;

    asm("{.reg .f16 low,high;\n"
        "  mov.b32 {low,high},%1;\n"
        "  cvt.f32.f16 %0, high;}\n" : "=f"(val) : "r"(*(reinterpret_cast<const unsigned int *>(&(l)))));



    return val;
}





static __inline__ __attribute__((host)) __attribute__((device)) __half2 make_half2(__half x, __half y)
{
    __half2 t; t.x = x; t.y = y; return t;
}




static __attribute__((host)) __attribute__((device)) __inline__ __half2 __float22half2_rn(const float2 f)
{
    __half2 val = __floats2half2_rn(f.x, f.y);
    return val;
}
static __attribute__((host)) __attribute__((device)) __inline__ float2 __half22float2(const __half2 l)
{
    float hi_float;
    float lo_float;

    asm("{.reg .f16 low,high;\n"
        "  mov.b32 {low,high},%1;\n"
        "  cvt.f32.f16 %0, low;}\n" : "=f"(lo_float) : "r"(*(reinterpret_cast<const unsigned int *>(&(l)))));

    asm("{.reg .f16 low,high;\n"
        "  mov.b32 {low,high},%1;\n"
        "  cvt.f32.f16 %0, high;}\n" : "=f"(hi_float) : "r"(*(reinterpret_cast<const unsigned int *>(&(l)))));




    return make_float2(lo_float, hi_float);
}
static __attribute__((device)) __inline__ int __half2int_rn(__half h)
{
    int i;
    asm("cvt.rni.s32.f16 %0, %1;" : "=r"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ int __half2int_rz(__half h)
{
    int i;
    asm("cvt.rzi.s32.f16 %0, %1;" : "=r"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ int __half2int_rd(__half h)
{
    int i;
    asm("cvt.rmi.s32.f16 %0, %1;" : "=r"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ int __half2int_ru(__half h)
{
    int i;
    asm("cvt.rpi.s32.f16 %0, %1;" : "=r"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ __half __int2half_rn(int i)
{
    __half h;
    asm("cvt.rn.f16.s32 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "r"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __int2half_rz(int i)
{
    __half h;
    asm("cvt.rz.f16.s32 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "r"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __int2half_rd(int i)
{
    __half h;
    asm("cvt.rm.f16.s32 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "r"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __int2half_ru(int i)
{
    __half h;
    asm("cvt.rp.f16.s32 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "r"(i));
    return h;
}

static __attribute__((device)) __inline__ short int __half2short_rn(__half h)
{
    short int i;
    asm("cvt.rni.s16.f16 %0, %1;" : "=h"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ short int __half2short_rz(__half h)
{
    short int i;
    asm("cvt.rzi.s16.f16 %0, %1;" : "=h"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ short int __half2short_rd(__half h)
{
    short int i;
    asm("cvt.rmi.s16.f16 %0, %1;" : "=h"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ short int __half2short_ru(__half h)
{
    short int i;
    asm("cvt.rpi.s16.f16 %0, %1;" : "=h"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ __half __short2half_rn(short int i)
{
    __half h;
    asm("cvt.rn.f16.s16 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "h"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __short2half_rz(short int i)
{
    __half h;
    asm("cvt.rz.f16.s16 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "h"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __short2half_rd(short int i)
{
    __half h;
    asm("cvt.rm.f16.s16 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "h"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __short2half_ru(short int i)
{
    __half h;
    asm("cvt.rp.f16.s16 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "h"(i));
    return h;
}

static __attribute__((device)) __inline__ unsigned int __half2uint_rn(__half h)
{
    unsigned int i;
    asm("cvt.rni.u32.f16 %0, %1;" : "=r"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ unsigned int __half2uint_rz(__half h)
{
    unsigned int i;
    asm("cvt.rzi.u32.f16 %0, %1;" : "=r"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ unsigned int __half2uint_rd(__half h)
{
    unsigned int i;
    asm("cvt.rmi.u32.f16 %0, %1;" : "=r"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ unsigned int __half2uint_ru(__half h)
{
    unsigned int i;
    asm("cvt.rpi.u32.f16 %0, %1;" : "=r"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ __half __uint2half_rn(unsigned int i)
{
    __half h;
    asm("cvt.rn.f16.u32 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "r"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __uint2half_rz(unsigned int i)
{
    __half h;
    asm("cvt.rz.f16.u32 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "r"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __uint2half_rd(unsigned int i)
{
    __half h;
    asm("cvt.rm.f16.u32 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "r"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __uint2half_ru(unsigned int i)
{
    __half h;
    asm("cvt.rp.f16.u32 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "r"(i));
    return h;
}

static __attribute__((device)) __inline__ unsigned short int __half2ushort_rn(__half h)
{
    unsigned short int i;
    asm("cvt.rni.u16.f16 %0, %1;" : "=h"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ unsigned short int __half2ushort_rz(__half h)
{
    unsigned short int i;
    asm("cvt.rzi.u16.f16 %0, %1;" : "=h"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ unsigned short int __half2ushort_rd(__half h)
{
    unsigned short int i;
    asm("cvt.rmi.u16.f16 %0, %1;" : "=h"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ unsigned short int __half2ushort_ru(__half h)
{
    unsigned short int i;
    asm("cvt.rpi.u16.f16 %0, %1;" : "=h"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ __half __ushort2half_rn(unsigned short int i)
{
    __half h;
    asm("cvt.rn.f16.u16 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "h"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __ushort2half_rz(unsigned short int i)
{
    __half h;
    asm("cvt.rz.f16.u16 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "h"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __ushort2half_rd(unsigned short int i)
{
    __half h;
    asm("cvt.rm.f16.u16 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "h"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __ushort2half_ru(unsigned short int i)
{
    __half h;
    asm("cvt.rp.f16.u16 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "h"(i));
    return h;
}

static __attribute__((device)) __inline__ unsigned long long int __half2ull_rn(__half h)
{
    unsigned long long int i;
    asm("cvt.rni.u64.f16 %0, %1;" : "=l"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ unsigned long long int __half2ull_rz(__half h)
{
    unsigned long long int i;
    asm("cvt.rzi.u64.f16 %0, %1;" : "=l"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ unsigned long long int __half2ull_rd(__half h)
{
    unsigned long long int i;
    asm("cvt.rmi.u64.f16 %0, %1;" : "=l"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ unsigned long long int __half2ull_ru(__half h)
{
    unsigned long long int i;
    asm("cvt.rpi.u64.f16 %0, %1;" : "=l"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ __half __ull2half_rn(unsigned long long int i)
{
    __half h;
    asm("cvt.rn.f16.u64 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "l"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __ull2half_rz(unsigned long long int i)
{
    __half h;
    asm("cvt.rz.f16.u64 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "l"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __ull2half_rd(unsigned long long int i)
{
    __half h;
    asm("cvt.rm.f16.u64 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "l"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __ull2half_ru(unsigned long long int i)
{
    __half h;
    asm("cvt.rp.f16.u64 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "l"(i));
    return h;
}

static __attribute__((device)) __inline__ long long int __half2ll_rn(__half h)
{
    long long int i;
    asm("cvt.rni.s64.f16 %0, %1;" : "=l"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ long long int __half2ll_rz(__half h)
{
    long long int i;
    asm("cvt.rzi.s64.f16 %0, %1;" : "=l"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ long long int __half2ll_rd(__half h)
{
    long long int i;
    asm("cvt.rmi.s64.f16 %0, %1;" : "=l"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ long long int __half2ll_ru(__half h)
{
    long long int i;
    asm("cvt.rpi.s64.f16 %0, %1;" : "=l"(i) : "h"(*(reinterpret_cast<unsigned short *>(&(h)))));
    return i;
}
static __attribute__((device)) __inline__ __half __ll2half_rn(long long int i)
{
    __half h;
    asm("cvt.rn.f16.s64 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "l"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __ll2half_rz(long long int i)
{
    __half h;
    asm("cvt.rz.f16.s64 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "l"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __ll2half_rd(long long int i)
{
    __half h;
    asm("cvt.rm.f16.s64 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "l"(i));
    return h;
}
static __attribute__((device)) __inline__ __half __ll2half_ru(long long int i)
{
    __half h;
    asm("cvt.rp.f16.s64 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(h)))) : "l"(i));
    return h;
}

static __attribute__((device)) __inline__ __half htrunc(const __half h)
{
    __half r;
    asm("cvt.rzi.f16.f16 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(r)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(h)))));
    return r;
}
static __attribute__((device)) __inline__ __half hceil(const __half h)
{
    __half r;
    asm("cvt.rpi.f16.f16 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(r)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(h)))));
    return r;
}
static __attribute__((device)) __inline__ __half hfloor(const __half h)
{
    __half r;
    asm("cvt.rmi.f16.f16 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(r)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(h)))));
    return r;
}
static __attribute__((device)) __inline__ __half hrint(const __half h)
{
    __half r;
    asm("cvt.rni.f16.f16 %0, %1;" : "=h"(*(reinterpret_cast<unsigned short *>(&(r)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(h)))));
    return r;
}

static __attribute__((device)) __inline__ __half2 h2trunc(const __half2 h)
{
    __half2 val;
    asm("{.reg .f16 low,high;\n"
        "  mov.b32 {low,high}, %1;\n"
        "  cvt.rzi.f16.f16 low, low;\n"
        "  cvt.rzi.f16.f16 high, high;\n"
        "  mov.b32 %0, {low,high};}\n" : "=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(h)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 h2ceil(const __half2 h)
{
    __half2 val;
    asm("{.reg .f16 low,high;\n"
        "  mov.b32 {low,high}, %1;\n"
        "  cvt.rpi.f16.f16 low, low;\n"
        "  cvt.rpi.f16.f16 high, high;\n"
        "  mov.b32 %0, {low,high};}\n" : "=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(h)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 h2floor(const __half2 h)
{
    __half2 val;
    asm("{.reg .f16 low,high;\n"
        "  mov.b32 {low,high}, %1;\n"
        "  cvt.rmi.f16.f16 low, low;\n"
        "  cvt.rmi.f16.f16 high, high;\n"
        "  mov.b32 %0, {low,high};}\n" : "=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(h)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 h2rint(const __half2 h)
{
    __half2 val;
    asm("{.reg .f16 low,high;\n"
        "  mov.b32 {low,high}, %1;\n"
        "  cvt.rni.f16.f16 low, low;\n"
        "  cvt.rni.f16.f16 high, high;\n"
        "  mov.b32 %0, {low,high};}\n" : "=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(h)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 __lows2half2(const __half2 l, const __half2 h)
{
    __half2 val;
    asm("{.reg .f16 alow,ahigh,blow,bhigh;\n"
        "  mov.b32 {alow,ahigh}, %1;\n"
        "  mov.b32 {blow,bhigh}, %2;\n"
        "  mov.b32 %0, {alow,blow};}\n" : "=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(l)))), "r"(*(reinterpret_cast<const unsigned int *>(&(h)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 __highs2half2(const __half2 l, const __half2 h)
{
    __half2 val;
    asm("{.reg .f16 alow,ahigh,blow,bhigh;\n"
        "  mov.b32 {alow,ahigh}, %1;\n"
        "  mov.b32 {blow,bhigh}, %2;\n"
        "  mov.b32 %0, {ahigh,bhigh};}\n" : "=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(l)))), "r"(*(reinterpret_cast<const unsigned int *>(&(h)))));
    return val;
}
static __attribute__((device)) __inline__ __half __low2half(const __half2 h)
{
    __half ret;
    asm("{.reg .f16 low,high;\n"
        " mov.b32 {low,high}, %1;\n"
        " mov.b16 %0, low;}" : "=h"(*(reinterpret_cast<unsigned short *>(&(ret)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(h)))));
    return ret;
}
static __attribute__((device)) __inline__ int __hisinf(const __half a)
{
    if (*(reinterpret_cast<const unsigned short *>(&(a))) == 0xFC00)
        return -1;
    if (*(reinterpret_cast<const unsigned short *>(&(a))) == 0x7C00)
        return 1;
    return 0;
}
static __attribute__((device)) __inline__ __half2 __low2half2(const __half2 l)
{
    __half2 val;
    asm("{.reg .f16 low,high;\n"
        "  mov.b32 {low,high}, %1;\n"
        "  mov.b32 %0, {low,low};}\n" : "=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(l)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 __high2half2(const __half2 l)
{
    __half2 val;
    asm("{.reg .f16 low,high;\n"
        "  mov.b32 {low,high}, %1;\n"
        "  mov.b32 %0, {high,high};}\n" : "=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(l)))));
    return val;
}
static __attribute__((device)) __inline__ __half __high2half(const __half2 h)
{
    __half ret;
    asm("{.reg .f16 low,high;\n"
        " mov.b32 {low,high}, %1;\n"
        " mov.b16 %0, high;}" : "=h"(*(reinterpret_cast<unsigned short *>(&(ret)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(h)))));
    return ret;
}
static __attribute__((device)) __inline__ __half2 __halves2half2(const __half l, const __half h)
{
    __half2 val;
    asm("{  mov.b32 %0, {%1,%2};}\n"
        : "=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(l)))), "h"(*(reinterpret_cast<const unsigned short *>(&(h)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 __half2half2(const __half lh)
{
    __half2 val;
    asm("{  mov.b32 %0, {%1,%1};}\n"
        : "=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(lh)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 __lowhigh2highlow(const __half2 lh)
{
    __half2 val;
    asm("{.reg .f16 low,high;\n"
        "  mov.b32 {low,high}, %1;\n"
        "  mov.b32 %0, {high,low};}\n" : "=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(lh)))));
    return val;
}
static __attribute__((device)) __inline__ short int __half_as_short(const __half h)
{
    return (short int)*(reinterpret_cast<const unsigned short *>(&(h)));
}
static __attribute__((device)) __inline__ unsigned short int __half_as_ushort(const __half h)
{
    return *(reinterpret_cast<const unsigned short *>(&(h)));
}
static __attribute__((device)) __inline__ __half __short_as_half(const short int i)
{
    __half h;
    *(reinterpret_cast<unsigned short *>(&(h))) = (unsigned short int)i;
    return h;
}
static __attribute__((device)) __inline__ __half __ushort_as_half(const unsigned short int i)
{
    __half h;
    *(reinterpret_cast<unsigned short *>(&(h))) = i;
    return h;
}
# 1039 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
static __attribute__((device)) __inline__ __half2 __shfl(__half2 var, int delta, int width)
{
    int warpSize;
    asm("{mov.u32 %0, WARP_SZ;\n}" : "=r"(warpSize));
    int c = ((warpSize - width) << 8) | 0x1f;
    do { __half2 r; asm("{""shfl.idx.b32"" %0,%1,%2,%3;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(r)))): "r"(*(reinterpret_cast<const unsigned int *>(&(var)))), "r"(delta), "r"(c)); return r; } while(0);
}
static __attribute__((device)) __inline__ __half2 __shfl_up(__half2 var, unsigned int delta, int width)
{
    int warpSize;
    asm("{mov.u32 %0, WARP_SZ;\n}" : "=r"(warpSize));
    int c = (warpSize - width) << 8;
    do { __half2 r; asm("{""shfl.up.b32"" %0,%1,%2,%3;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(r)))): "r"(*(reinterpret_cast<const unsigned int *>(&(var)))), "r"(delta), "r"(c)); return r; } while(0);
}
static __attribute__((device)) __inline__ __half2 __shfl_down(__half2 var, unsigned int delta, int width)
{
    int warpSize;
    asm("{mov.u32 %0, WARP_SZ;\n}" : "=r"(warpSize));
    int c = ((warpSize - width) << 8) | 0x1f;
    do { __half2 r; asm("{""shfl.down.b32"" %0,%1,%2,%3;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(r)))): "r"(*(reinterpret_cast<const unsigned int *>(&(var)))), "r"(delta), "r"(c)); return r; } while(0);
}
static __attribute__((device)) __inline__ __half2 __shfl_xor(__half2 var, int delta, int width)
{
    int warpSize;
    asm("{mov.u32 %0, WARP_SZ;\n}" : "=r"(warpSize));
    int c = ((warpSize - width) << 8) | 0x1f;
    do { __half2 r; asm("{""shfl.bfly.b32"" %0,%1,%2,%3;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(r)))): "r"(*(reinterpret_cast<const unsigned int *>(&(var)))), "r"(delta), "r"(c)); return r; } while(0);
}

static __attribute__((device)) __inline__ __half2 __shfl_sync(unsigned mask, __half2 var, int delta, int width)
{
    int warpSize;
    asm("{mov.u32 %0, WARP_SZ;\n}" : "=r"(warpSize));
    int c = ((warpSize - width) << 8) | 0x1f;
    do { __half2 r; asm("{""shfl.sync.idx.b32"" %0,%1,%2,%3,%4;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(r)))): "r"(*(reinterpret_cast<const unsigned int *>(&(var)))), "r"(delta), "r"(c), "r"(mask)); return r; } while(0);
}
static __attribute__((device)) __inline__ __half2 __shfl_up_sync(unsigned mask, __half2 var, unsigned int delta, int width)
{
    int warpSize;
    asm("{mov.u32 %0, WARP_SZ;\n}" : "=r"(warpSize));
    int c = (warpSize - width) << 8;
    do { __half2 r; asm("{""shfl.sync.up.b32"" %0,%1,%2,%3,%4;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(r)))): "r"(*(reinterpret_cast<const unsigned int *>(&(var)))), "r"(delta), "r"(c), "r"(mask)); return r; } while(0);
}
static __attribute__((device)) __inline__ __half2 __shfl_down_sync(unsigned mask, __half2 var, unsigned int delta, int width)
{
    int warpSize;
    asm("{mov.u32 %0, WARP_SZ;\n}" : "=r"(warpSize));
    int c = ((warpSize - width) << 8) | 0x1f;
    do { __half2 r; asm("{""shfl.sync.down.b32"" %0,%1,%2,%3,%4;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(r)))): "r"(*(reinterpret_cast<const unsigned int *>(&(var)))), "r"(delta), "r"(c), "r"(mask)); return r; } while(0);
}
static __attribute__((device)) __inline__ __half2 __shfl_xor_sync(unsigned mask, __half2 var, int delta, int width)
{
    int warpSize;
    asm("{mov.u32 %0, WARP_SZ;\n}" : "=r"(warpSize));
    int c = ((warpSize - width) << 8) | 0x1f;
    do { __half2 r; asm("{""shfl.sync.bfly.b32"" %0,%1,%2,%3,%4;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(r)))): "r"(*(reinterpret_cast<const unsigned int *>(&(var)))), "r"(delta), "r"(c), "r"(mask)); return r; } while(0);
}




static __attribute__((device)) __inline__ __half __shfl(__half var, int delta, int width)
{
    __half2 temp1 = __halves2half2(var, var);
    __half2 temp2 = __shfl(temp1, delta, width);
    return __low2half(temp2);
}
static __attribute__((device)) __inline__ __half __shfl_up(__half var, unsigned int delta, int width)
{
    __half2 temp1 = __halves2half2(var, var);
    __half2 temp2 = __shfl_up(temp1, delta, width);
    return __low2half(temp2);
}
static __attribute__((device)) __inline__ __half __shfl_down(__half var, unsigned int delta, int width)
{
    __half2 temp1 = __halves2half2(var, var);
    __half2 temp2 = __shfl_down(temp1, delta, width);
    return __low2half(temp2);
}
static __attribute__((device)) __inline__ __half __shfl_xor(__half var, int delta, int width)
{
    __half2 temp1 = __halves2half2(var, var);
    __half2 temp2 = __shfl_xor(temp1, delta, width);
    return __low2half(temp2);
}

static __attribute__((device)) __inline__ __half __shfl_sync(unsigned mask, __half var, int delta, int width)
{
    __half2 temp1 = __halves2half2(var, var);
    __half2 temp2 = __shfl_sync(mask, temp1, delta, width);
    return __low2half(temp2);
}
static __attribute__((device)) __inline__ __half __shfl_up_sync(unsigned mask, __half var, unsigned int delta, int width)
{
    __half2 temp1 = __halves2half2(var, var);
    __half2 temp2 = __shfl_up_sync(mask, temp1, delta, width);
    return __low2half(temp2);
}
static __attribute__((device)) __inline__ __half __shfl_down_sync(unsigned mask, __half var, unsigned int delta, int width)
{
    __half2 temp1 = __halves2half2(var, var);
    __half2 temp2 = __shfl_down_sync(mask, temp1, delta, width);
    return __low2half(temp2);
}
static __attribute__((device)) __inline__ __half __shfl_xor_sync(unsigned mask, __half var, int delta, int width)
{
    __half2 temp1 = __halves2half2(var, var);
    __half2 temp2 = __shfl_xor_sync(mask, temp1, delta, width);
    return __low2half(temp2);
}
# 1161 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
static __attribute__((device)) __inline__ __half2 __ldg(const __half2 *ptr)
{
    __half2 ret;
    asm ("ld.global.nc.b32 %0, [%1];" : "=r"(*(reinterpret_cast<unsigned int *>(&(ret)))) : "l"(ptr));
    return ret;
}
static __attribute__((device)) __inline__ __half __ldg(const __half *ptr)
{
    __half ret;
    asm ("ld.global.nc.b16 %0, [%1];" : "=h"(*(reinterpret_cast<unsigned short *>(&(ret)))) : "l"(ptr));
    return ret;
}
static __attribute__((device)) __inline__ __half2 __ldcg(const __half2 *ptr)
{
    __half2 ret;
    asm ("ld.global.cg.b32 %0, [%1];" : "=r"(*(reinterpret_cast<unsigned int *>(&(ret)))) : "l"(ptr));
    return ret;
}
static __attribute__((device)) __inline__ __half __ldcg(const __half *ptr)
{
    __half ret;
    asm ("ld.global.cg.b16 %0, [%1];" : "=h"(*(reinterpret_cast<unsigned short *>(&(ret)))) : "l"(ptr));
    return ret;
}
static __attribute__((device)) __inline__ __half2 __ldca(const __half2 *ptr)
{
    __half2 ret;
    asm ("ld.global.ca.b32 %0, [%1];" : "=r"(*(reinterpret_cast<unsigned int *>(&(ret)))) : "l"(ptr));
    return ret;
}
static __attribute__((device)) __inline__ __half __ldca(const __half *ptr)
{
    __half ret;
    asm ("ld.global.ca.b16 %0, [%1];" : "=h"(*(reinterpret_cast<unsigned short *>(&(ret)))) : "l"(ptr));
    return ret;
}
static __attribute__((device)) __inline__ __half2 __ldcs(const __half2 *ptr)
{
    __half2 ret;
    asm ("ld.global.cs.b32 %0, [%1];" : "=r"(*(reinterpret_cast<unsigned int *>(&(ret)))) : "l"(ptr));
    return ret;
}
static __attribute__((device)) __inline__ __half __ldcs(const __half *ptr)
{
    __half ret;
    asm ("ld.global.cs.b16 %0, [%1];" : "=h"(*(reinterpret_cast<unsigned short *>(&(ret)))) : "l"(ptr));
    return ret;
}
# 1221 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
static __attribute__((device)) __inline__ __half2 __heq2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.eq"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hne2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.ne"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hle2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.le"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hge2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.ge"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hlt2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.lt"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hgt2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.gt"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hequ2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.equ"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hneu2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.neu"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hleu2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.leu"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hgeu2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.geu"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hltu2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.ltu"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hgtu2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.gtu"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
# 1279 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
static __attribute__((device)) __inline__ bool __hbeq2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.eq"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); if (*(reinterpret_cast<const unsigned int *>(&(val))) == 0x3C003C00) return true; else return false; } while(0);
}
static __attribute__((device)) __inline__ bool __hbne2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.ne"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); if (*(reinterpret_cast<const unsigned int *>(&(val))) == 0x3C003C00) return true; else return false; } while(0);
}
static __attribute__((device)) __inline__ bool __hble2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.le"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); if (*(reinterpret_cast<const unsigned int *>(&(val))) == 0x3C003C00) return true; else return false; } while(0);
}
static __attribute__((device)) __inline__ bool __hbge2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.ge"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); if (*(reinterpret_cast<const unsigned int *>(&(val))) == 0x3C003C00) return true; else return false; } while(0);
}
static __attribute__((device)) __inline__ bool __hblt2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.lt"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); if (*(reinterpret_cast<const unsigned int *>(&(val))) == 0x3C003C00) return true; else return false; } while(0);
}
static __attribute__((device)) __inline__ bool __hbgt2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.gt"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); if (*(reinterpret_cast<const unsigned int *>(&(val))) == 0x3C003C00) return true; else return false; } while(0);
}
static __attribute__((device)) __inline__ bool __hbequ2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.equ"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); if (*(reinterpret_cast<const unsigned int *>(&(val))) == 0x3C003C00) return true; else return false; } while(0);
}
static __attribute__((device)) __inline__ bool __hbneu2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.neu"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); if (*(reinterpret_cast<const unsigned int *>(&(val))) == 0x3C003C00) return true; else return false; } while(0);
}
static __attribute__((device)) __inline__ bool __hbleu2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.leu"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); if (*(reinterpret_cast<const unsigned int *>(&(val))) == 0x3C003C00) return true; else return false; } while(0);
}
static __attribute__((device)) __inline__ bool __hbgeu2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.geu"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); if (*(reinterpret_cast<const unsigned int *>(&(val))) == 0x3C003C00) return true; else return false; } while(0);
}
static __attribute__((device)) __inline__ bool __hbltu2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.ltu"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); if (*(reinterpret_cast<const unsigned int *>(&(val))) == 0x3C003C00) return true; else return false; } while(0);
}
static __attribute__((device)) __inline__ bool __hbgtu2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{ ""set.gtu"".f16x2.f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); if (*(reinterpret_cast<const unsigned int *>(&(val))) == 0x3C003C00) return true; else return false; } while(0);
}
# 1339 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
static __attribute__((device)) __inline__ bool __heq(const __half a, const __half b)
{
    do { unsigned short val; asm( "{ .reg .pred __$temp3;\n" "  setp.""eq"".f16  __$temp3, %1, %2;\n" "  selp.u16 %0, 1, 0, __$temp3;}" : "=h"(val) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))), "h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val ? true : false; } while(0);
}
static __attribute__((device)) __inline__ bool __hne(const __half a, const __half b)
{
    do { unsigned short val; asm( "{ .reg .pred __$temp3;\n" "  setp.""ne"".f16  __$temp3, %1, %2;\n" "  selp.u16 %0, 1, 0, __$temp3;}" : "=h"(val) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))), "h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val ? true : false; } while(0);
}
static __attribute__((device)) __inline__ bool __hle(const __half a, const __half b)
{
    do { unsigned short val; asm( "{ .reg .pred __$temp3;\n" "  setp.""le"".f16  __$temp3, %1, %2;\n" "  selp.u16 %0, 1, 0, __$temp3;}" : "=h"(val) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))), "h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val ? true : false; } while(0);
}
static __attribute__((device)) __inline__ bool __hge(const __half a, const __half b)
{
    do { unsigned short val; asm( "{ .reg .pred __$temp3;\n" "  setp.""ge"".f16  __$temp3, %1, %2;\n" "  selp.u16 %0, 1, 0, __$temp3;}" : "=h"(val) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))), "h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val ? true : false; } while(0);
}
static __attribute__((device)) __inline__ bool __hlt(const __half a, const __half b)
{
    do { unsigned short val; asm( "{ .reg .pred __$temp3;\n" "  setp.""lt"".f16  __$temp3, %1, %2;\n" "  selp.u16 %0, 1, 0, __$temp3;}" : "=h"(val) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))), "h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val ? true : false; } while(0);
}
static __attribute__((device)) __inline__ bool __hgt(const __half a, const __half b)
{
    do { unsigned short val; asm( "{ .reg .pred __$temp3;\n" "  setp.""gt"".f16  __$temp3, %1, %2;\n" "  selp.u16 %0, 1, 0, __$temp3;}" : "=h"(val) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))), "h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val ? true : false; } while(0);
}
static __attribute__((device)) __inline__ bool __hequ(const __half a, const __half b)
{
    do { unsigned short val; asm( "{ .reg .pred __$temp3;\n" "  setp.""equ"".f16  __$temp3, %1, %2;\n" "  selp.u16 %0, 1, 0, __$temp3;}" : "=h"(val) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))), "h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val ? true : false; } while(0);
}
static __attribute__((device)) __inline__ bool __hneu(const __half a, const __half b)
{
    do { unsigned short val; asm( "{ .reg .pred __$temp3;\n" "  setp.""neu"".f16  __$temp3, %1, %2;\n" "  selp.u16 %0, 1, 0, __$temp3;}" : "=h"(val) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))), "h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val ? true : false; } while(0);
}
static __attribute__((device)) __inline__ bool __hleu(const __half a, const __half b)
{
    do { unsigned short val; asm( "{ .reg .pred __$temp3;\n" "  setp.""leu"".f16  __$temp3, %1, %2;\n" "  selp.u16 %0, 1, 0, __$temp3;}" : "=h"(val) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))), "h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val ? true : false; } while(0);
}
static __attribute__((device)) __inline__ bool __hgeu(const __half a, const __half b)
{
    do { unsigned short val; asm( "{ .reg .pred __$temp3;\n" "  setp.""geu"".f16  __$temp3, %1, %2;\n" "  selp.u16 %0, 1, 0, __$temp3;}" : "=h"(val) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))), "h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val ? true : false; } while(0);
}
static __attribute__((device)) __inline__ bool __hltu(const __half a, const __half b)
{
    do { unsigned short val; asm( "{ .reg .pred __$temp3;\n" "  setp.""ltu"".f16  __$temp3, %1, %2;\n" "  selp.u16 %0, 1, 0, __$temp3;}" : "=h"(val) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))), "h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val ? true : false; } while(0);
}
static __attribute__((device)) __inline__ bool __hgtu(const __half a, const __half b)
{
    do { unsigned short val; asm( "{ .reg .pred __$temp3;\n" "  setp.""gtu"".f16  __$temp3, %1, %2;\n" "  selp.u16 %0, 1, 0, __$temp3;}" : "=h"(val) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))), "h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val ? true : false; } while(0);
}
# 1398 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
static __attribute__((device)) __inline__ __half2 __hadd2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{""add"".f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hsub2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{""sub"".f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hmul2(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{""mul"".f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hadd2_sat(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{""add.sat"".f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hsub2_sat(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{""sub.sat"".f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hmul2_sat(const __half2 a, const __half2 b)
{
    do { __half2 val; asm( "{""mul.sat"".f16x2 %0,%1,%2;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b))))); return val; } while(0);
}







static __attribute__((device)) __inline__ __half2 __hfma2(const __half2 a, const __half2 b, const __half2 c)
{
    do { __half2 val; asm( "{""fma.rn"".f16x2 %0,%1,%2,%3;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b)))),"r"(*(reinterpret_cast<const unsigned int *>(&(c))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half2 __hfma2_sat(const __half2 a, const __half2 b, const __half2 c)
{
    do { __half2 val; asm( "{""fma.rn.sat"".f16x2 %0,%1,%2,%3;\n}" :"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))),"r"(*(reinterpret_cast<const unsigned int *>(&(b)))),"r"(*(reinterpret_cast<const unsigned int *>(&(c))))); return val; } while(0);
}

static __attribute__((device)) __inline__ __half2 __h2div(__half2 a, __half2 b) {
    __half ha, hb;

    ha = __low2half(a);
    hb = __low2half(b);

    __half v1 = __hdiv(ha, hb);

    ha = __high2half(a);
    hb = __high2half(b);

    __half v2 = __hdiv(ha, hb);

    return __halves2half2(v1, v2);
}
# 1462 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
static __attribute__((device)) __inline__ __half __hadd(const __half a, const __half b)
{
    do { __half val; asm( "{""add"".f16 %0,%1,%2;\n}" :"=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))),"h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half __hsub(const __half a, const __half b)
{
    do { __half val; asm( "{""sub"".f16 %0,%1,%2;\n}" :"=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))),"h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half __hmul(const __half a, const __half b)
{
    do { __half val; asm( "{""mul"".f16 %0,%1,%2;\n}" :"=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))),"h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half __hadd_sat(const __half a, const __half b)
{
    do { __half val; asm( "{""add.sat"".f16 %0,%1,%2;\n}" :"=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))),"h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half __hsub_sat(const __half a, const __half b)
{
    do { __half val; asm( "{""sub.sat"".f16 %0,%1,%2;\n}" :"=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))),"h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half __hmul_sat(const __half a, const __half b)
{
    do { __half val; asm( "{""mul.sat"".f16 %0,%1,%2;\n}" :"=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))),"h"(*(reinterpret_cast<const unsigned short *>(&(b))))); return val; } while(0);
}







static __attribute__((device)) __inline__ __half __hfma(const __half a, const __half b, const __half c)
{
    do { __half val; asm( "{""fma.rn"".f16 %0,%1,%2,%3;\n}" :"=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))),"h"(*(reinterpret_cast<const unsigned short *>(&(b)))),"h"(*(reinterpret_cast<const unsigned short *>(&(c))))); return val; } while(0);
}
static __attribute__((device)) __inline__ __half __hfma_sat(const __half a, const __half b, const __half c)
{
    do { __half val; asm( "{""fma.rn.sat"".f16 %0,%1,%2,%3;\n}" :"=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))),"h"(*(reinterpret_cast<const unsigned short *>(&(b)))),"h"(*(reinterpret_cast<const unsigned short *>(&(c))))); return val; } while(0);
}

static __attribute__((device)) __inline__ __half __hdiv(__half a, __half b) {
    __half v, abs, den;
    *(reinterpret_cast<unsigned short *>(&(den))) = 0x008F;
    float fa, fb, fv, rcp;

    fa = __half2float(a);
    fb = __half2float(b);

    asm("{rcp.approx.f32 %0, %1;\n}" :"=f"(rcp) : "f"(fb));

    fv = rcp * fa;

    v = __float2half(fv);
    *(reinterpret_cast<unsigned short *>(&(abs))) = (unsigned short)(((unsigned int)*(reinterpret_cast<const unsigned short *>(&(v)))) & 0x00007FFF);
    if (__hlt(abs, den) && (!(*(reinterpret_cast<const unsigned short *>(&(abs))) == 0x0000))) {
        float err = __fmaf_rn(-fb, fv, fa);
        fv = __fmaf_rn(rcp, err, fv);
        v = __float2half(fv);
    }
    return v;
}
# 1566 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
static __attribute__((device)) __inline__ __attribute__((always_inline)) float __float_simpl_sinf(float);
static __attribute__((device)) __inline__ __attribute__((always_inline)) float __float_simpl_cosf(float);
static __attribute__((device)) __inline__ __half __hsin_internal(const __half a) {
    float f = __half2float(a);
    f = __float_simpl_sinf(f);
    return __float2half_rn(f);
}
static __attribute__((device)) __inline__ __half hsin(const __half a) {
    __half r = __hsin_internal(a);
    asm("{\n\t"
        "  .reg.b16 i,r,t;     \n\t"
        "  mov.b16 r, %0;      \n\t"
        "  mov.b16 i, %1;      \n\t"
        "  mov.b16 t, 0x8000;  \n\t"
        "  and.b16 t,r,t;      \n\t"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0X32B3"";\n" "  mov.b16 ulp,""0x0800"";\n" "  set.eq.f16.f16 p,""i"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0X5CB0"";\n" "  mov.b16 ulp,""0x1000"";\n" "  set.eq.f16.f16 p,""i"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0XB2B3"";\n" "  mov.b16 ulp,""0x8800"";\n" "  set.eq.f16.f16 p,""i"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0XDCB0"";\n" "  mov.b16 ulp,""0x9000"";\n" "  set.eq.f16.f16 p,""i"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "  or.b16  r,r,t;      \n\t"
        "  mov.b16 %0, r;      \n"
        "}\n" : "+h"(*(reinterpret_cast<unsigned short *>(&(r)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))));
    return r;
}
static __attribute__((device)) __inline__ __half2 h2sin(const __half2 a) {
    __half l = __low2half(a);
    __half h = __high2half(a);
    __half2 r = __halves2half2(__hsin_internal(l), __hsin_internal(h));
    asm("{\n\t"
        "  .reg.b32 i,r,t;             \n\t"
        "  mov.b32 r, %0;              \n\t"
        "  mov.b32 i, %1;              \n\t"
        "  and.b32 t, r, 0x80008000;   \n\t"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0X32B332B3"";\n" "  mov.b32 ulp,""0x08000800"";\n" "  set.eq.f16x2.f16x2 p,""i"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0X5CB05CB0"";\n" "  mov.b32 ulp,""0x10001000"";\n" "  set.eq.f16x2.f16x2 p,""i"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0XB2B3B2B3"";\n" "  mov.b32 ulp,""0x88008800"";\n" "  set.eq.f16x2.f16x2 p,""i"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0XDCB0DCB0"";\n" "  mov.b32 ulp,""0x90009000"";\n" "  set.eq.f16x2.f16x2 p,""i"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "  or.b32  r, r, t;            \n\t"
        "  mov.b32 %0, r;              \n"
        "}\n" : "+r"(*(reinterpret_cast<unsigned int *>(&(r)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))));
    return r;
}
static __attribute__((device)) __inline__ __half __hcos_internal(const __half a) {
    float f = __half2float(a);
    f = __float_simpl_cosf(f);
    return __float2half_rn(f);
}
static __attribute__((device)) __inline__ __half hcos(const __half a) {
    __half r = __hcos_internal(a);
    asm("{\n\t"
        "  .reg.b16 i,r;        \n\t"
        "  mov.b16 r, %0;       \n\t"
        "  mov.b16 i, %1;       \n\t"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0X2B7C"";\n" "  mov.b16 ulp,""0x1000"";\n" "  set.eq.f16.f16 p,""i"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0XAB7C"";\n" "  mov.b16 ulp,""0x1000"";\n" "  set.eq.f16.f16 p,""i"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "  mov.b16 %0, r;       \n"
        "}\n" : "+h"(*(reinterpret_cast<unsigned short *>(&(r)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))));
    return r;
}
static __attribute__((device)) __inline__ __half2 h2cos(const __half2 a) {
    __half l = __low2half(a);
    __half h = __high2half(a);
    __half2 r = __halves2half2(__hcos_internal(l), __hcos_internal(h));
    asm("{\n\t"
        "  .reg.b32 i,r;   \n\t"
        "  mov.b32 r, %0;  \n\t"
        "  mov.b32 i, %1;  \n\t"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0X2B7C2B7C"";\n" "  mov.b32 ulp,""0x10001000"";\n" "  set.eq.f16x2.f16x2 p,""i"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0XAB7CAB7C"";\n" "  mov.b32 ulp,""0x10001000"";\n" "  set.eq.f16x2.f16x2 p,""i"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "  mov.b32 %0, r;  \n"
        "}\n" : "+r"(*(reinterpret_cast<unsigned int *>(&(r)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))));
    return r;
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) float __internal_trig_reduction_kernel(float a, int *quadrant)
{
    float j, t;
    int q;
    q = __float2int_rn(a * 0.636619772f);
    j = (float)q;
    t = __fmaf_rn(-j, 1.5707962512969971e+000f, a);
    t = __fmaf_rn(-j, 7.5497894158615964e-008f, t);
    *quadrant = q;
    return t;
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) float __internal_sin_cos_kernel(float x, int i)
{
    float x2, z;
    x2 = x*x;

    if (i & 1) {
        z = 2.44331571e-5f;
        z = __fmaf_rn(z, x2, -1.38873163e-3f);
    }
    else {
        z = -1.95152959e-4f;
        z = __fmaf_rn(z, x2, 8.33216087e-3f);
    }
    if (i & 1) {
        z = __fmaf_rn(z, x2, 4.16666457e-2f);
        z = __fmaf_rn(z, x2, -5.00000000e-1f);
    }
    else {
        z = __fmaf_rn(z, x2, -1.66666546e-1f);
        z = __fmaf_rn(z, x2, 0.0f);
    }
    x = __fmaf_rn(z, x, x);
    if (i & 1) x = __fmaf_rn(z, x2, 1.0f);
    if (i & 2) x = __fmaf_rn(x, -1.0f, 0.0f);
    return x;
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) float __float_simpl_sinf(float a)
{
    float z;
    int i;
    if (isinf(a)) {
        a = a * 0.0f;
    }
    a = __internal_trig_reduction_kernel(a, &i);
    z = __internal_sin_cos_kernel(a, i);
    return z;
}
static __attribute__((device)) __inline__ __attribute__((always_inline)) float __float_simpl_cosf(float a)
{
    float z;
    int i;
    if (isinf(a)) {
        a = a * 0.0f;
    }
    a = __internal_trig_reduction_kernel(a, &i);
    i++;
    z = __internal_sin_cos_kernel(a, i);
    return z;
}
static __attribute__((device)) __inline__ __half hexp(const __half a) {
    __half val;
    asm("{.reg.b32         f, C;           \n"
        " .reg.b16         h,r;            \n"
        "  mov.b16         h,%1;           \n"
        "  cvt.f32.f16     f,h;            \n"
        "  mov.b32         C, 0x3fb8aa3b;  \n"
        "  mul.f32         f,f,C;          \n"
        "  ex2.approx.f32      f,f;        \n"
        "  cvt.rn.f16.f32      r,f;        \n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0X1F79"";\n" "  mov.b16 ulp,""0x9400"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0X25CF"";\n" "  mov.b16 ulp,""0x9400"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0XC13B"";\n" "  mov.b16 ulp,""0x0400"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0XC1EF"";\n" "  mov.b16 ulp,""0x0200"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "  mov.b16         %0,r;           \n"
        "}": "=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 h2exp(const __half2 a) {
    __half2 val;
    asm("{.reg.b16         hl, hu;         \n"
        " .reg.b32         h,r,fl,fu, C;   \n"
        "  mov.b32         {hl, hu}, %1;   \n"
        "  mov.b32         h, %1;          \n"
        "  cvt.f32.f16     fl, hl;         \n"
        "  cvt.f32.f16     fu, hu;         \n"
        "  mov.b32         C, 0x3fb8aa3b;  \n"
        "  mul.f32         fl,fl,C;        \n"
        "  mul.f32         fu,fu,C;        \n"
        "  ex2.approx.f32      fl, fl;     \n"
        "  ex2.approx.f32      fu, fu;     \n"
        "  cvt.rn.f16.f32      hl, fl;     \n"
        "  cvt.rn.f16.f32      hu, fu;     \n"
        "  mov.b32         r, {hl, hu};    \n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0X1F791F79"";\n" "  mov.b32 ulp,""0x94009400"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0X25CF25CF"";\n" "  mov.b32 ulp,""0x94009400"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0XC13BC13B"";\n" "  mov.b32 ulp,""0x04000400"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0XC1EFC1EF"";\n" "  mov.b32 ulp,""0x02000200"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "  mov.b32         %0, r;  \n"
        "}":"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))));
    return val;
}
static __attribute__((device)) __inline__ __half hexp2(const __half a) {
    __half val;
    asm("{.reg.b32         f, ULP;         \n"
        " .reg.b16         r;              \n"
        "  mov.b16         r,%1;           \n"
        "  cvt.f32.f16     f,r;            \n"
        "  ex2.approx.f32      f,f;        \n"
        "  mov.b32         ULP, 0x33800000;\n"
        "  fma.rn.f32      f,f,ULP,f;      \n"
        "  cvt.rn.f16.f32      r,f;        \n"
        "  mov.b16         %0,r;           \n"
        "}": "=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 h2exp2(const __half2 a) {
    __half2 val;
    asm("{.reg.b16         hl, hu;         \n"
        " .reg.b32         fl, fu, ULP;    \n"
        "  mov.b32         {hl, hu}, %1;   \n"
        "  cvt.f32.f16     fl, hl;         \n"
        "  cvt.f32.f16     fu, hu;         \n"
        "  ex2.approx.f32      fl, fl;     \n"
        "  ex2.approx.f32      fu, fu;     \n"
        "  mov.b32         ULP, 0x33800000;\n"
        "  fma.rn.f32      fl,fl,ULP,fl;   \n"
        "  fma.rn.f32      fu,fu,ULP,fu;   \n"
        "  cvt.rn.f16.f32      hl, fl;     \n"
        "  cvt.rn.f16.f32      hu, fu;     \n"
        "  mov.b32         %0, {hl, hu};   \n"
        "}":"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))));
    return val;
}
static __attribute__((device)) __inline__ __half hexp10(const __half a) {
    __half val;
    asm("{.reg.b16         h,r;            \n"
        " .reg.b32         f, C;           \n"
        "  mov.b16         h, %1;          \n"
        "  cvt.f32.f16     f, h;           \n"
        "  mov.b32         C, 0x40549A78;  \n"
        "  mul.f32         f,f,C;          \n"
        "  ex2.approx.f32      f, f;       \n"
        "  cvt.rn.f16.f32      r, f;       \n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0x34DE"";\n" "  mov.b16 ulp,""0x9800"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0x9766"";\n" "  mov.b16 ulp,""0x9000"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0x9972"";\n" "  mov.b16 ulp,""0x1000"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0xA5C4"";\n" "  mov.b16 ulp,""0x1000"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0xBF0A"";\n" "  mov.b16 ulp,""0x8100"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "  mov.b16         %0, r;          \n"
        "}":"=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 h2exp10(const __half2 a) {
    __half2 val;
    asm("{.reg.b16         hl, hu;         \n"
        " .reg.b32         h,r,fl,fu, C;   \n"
        "  mov.b32         {hl, hu}, %1;   \n"
        "  mov.b32         h, %1;          \n"
        "  cvt.f32.f16     fl, hl;         \n"
        "  cvt.f32.f16     fu, hu;         \n"
        "  mov.b32         C, 0x40549A78;  \n"
        "  mul.f32         fl,fl,C;        \n"
        "  mul.f32         fu,fu,C;        \n"
        "  ex2.approx.f32      fl, fl;     \n"
        "  ex2.approx.f32      fu, fu;     \n"
        "  cvt.rn.f16.f32      hl, fl;     \n"
        "  cvt.rn.f16.f32      hu, fu;     \n"
        "  mov.b32         r, {hl, hu};    \n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0x34DE34DE"";\n" "  mov.b32 ulp,""0x98009800"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0x97669766"";\n" "  mov.b32 ulp,""0x90009000"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0x99729972"";\n" "  mov.b32 ulp,""0x10001000"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0xA5C4A5C4"";\n" "  mov.b32 ulp,""0x10001000"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0xBF0ABF0A"";\n" "  mov.b32 ulp,""0x81008100"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "  mov.b32         %0, r;  \n"
        "}":"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))));
    return val;
}
static __attribute__((device)) __inline__ __half hlog2(const __half a) {
    __half val;
    asm("{.reg.b16         h, r;           \n"
        " .reg.b32         f;              \n"
        "  mov.b16         h, %1;          \n"
        "  cvt.f32.f16     f, h;           \n"
        "  lg2.approx.f32      f, f;       \n"
        "  cvt.rn.f16.f32      r, f;       \n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0xA2E2"";\n" "  mov.b16 ulp,""0x8080"";\n" "  set.eq.f16.f16 p,""r"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0xBF46"";\n" "  mov.b16 ulp,""0x9400"";\n" "  set.eq.f16.f16 p,""r"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "  mov.b16         %0, r;          \n"
        "}":"=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 h2log2(const __half2 a) {
    __half2 val;
    asm("{.reg.b16         hl, hu;         \n"
        " .reg.b32         fl, fu, r, p;   \n"
        "  mov.b32         {hl, hu}, %1;   \n"
        "  cvt.f32.f16     fl, hl;         \n"
        "  cvt.f32.f16     fu, hu;         \n"
        "  lg2.approx.f32      fl, fl;     \n"
        "  lg2.approx.f32      fu, fu;     \n"
        "  cvt.rn.f16.f32      hl, fl;     \n"
        "  cvt.rn.f16.f32      hu, fu;     \n"
        "  mov.b32         r, {hl, hu};    \n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0xA2E2A2E2"";\n" "  mov.b32 ulp,""0x80808080"";\n" "  set.eq.f16x2.f16x2 p,""r"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0xBF46BF46"";\n" "  mov.b32 ulp,""0x94009400"";\n" "  set.eq.f16x2.f16x2 p,""r"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "  mov.b32         %0, r;          \n"
        "}":"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))));
    return val;
}
static __attribute__((device)) __inline__ __half hlog(const __half a) {
    __half val;
    asm("{.reg.b32         f, C;           \n"
        " .reg.b16         r,h;            \n"
        "  mov.b16         h,%1;           \n"
        "  cvt.f32.f16     f,h;            \n"
        "  lg2.approx.f32      f,f;        \n"
        "  mov.b32         C, 0x3f317218;  \n"
        "  mul.f32         f,f,C;          \n"
        "  cvt.rn.f16.f32      r,f;        \n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0X160D"";\n" "  mov.b16 ulp,""0x9C00"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0X3BFE"";\n" "  mov.b16 ulp,""0x8010"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0X3C0B"";\n" "  mov.b16 ulp,""0x8080"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0X6051"";\n" "  mov.b16 ulp,""0x1C00"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "  mov.b16         %0,r;           \n"
        "}": "=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 h2log(const __half2 a) {
    __half2 val;
    asm("{.reg.b16         hl, hu;             \n"
        " .reg.b32         r, fl, fu, C, h;    \n"
        "  mov.b32         {hl, hu}, %1;       \n"
        "  mov.b32         h, %1;              \n"
        "  cvt.f32.f16     fl, hl;             \n"
        "  cvt.f32.f16     fu, hu;             \n"
        "  lg2.approx.f32      fl, fl;         \n"
        "  lg2.approx.f32      fu, fu;         \n"
        "  mov.b32         C, 0x3f317218;      \n"
        "  mul.f32         fl,fl,C;            \n"
        "  mul.f32         fu,fu,C;            \n"
        "  cvt.rn.f16.f32      hl, fl;         \n"
        "  cvt.rn.f16.f32      hu, fu;         \n"
        "  mov.b32         r, {hl, hu};        \n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0X160D160D"";\n" "  mov.b32 ulp,""0x9C009C00"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0X3BFE3BFE"";\n" "  mov.b32 ulp,""0x80108010"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0X3C0B3C0B"";\n" "  mov.b32 ulp,""0x80808080"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0X60516051"";\n" "  mov.b32 ulp,""0x1C001C00"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "  mov.b32         %0, r;              \n"
        "}":"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))));
    return val;
}
static __attribute__((device)) __inline__ __half hlog10(const __half a) {
    __half val;
    asm("{.reg.b16         h, r;           \n"
        " .reg.b32         f, C;           \n"
        "  mov.b16         h, %1;          \n"
        "  cvt.f32.f16     f, h;           \n"
        "  lg2.approx.f32      f, f;       \n"
        "  mov.b32         C, 0x3E9A209B;  \n"
        "  mul.f32         f,f,C;          \n"
        "  cvt.rn.f16.f32      r, f;       \n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0x338F"";\n" "  mov.b16 ulp,""0x1000"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0x33F8"";\n" "  mov.b16 ulp,""0x9000"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0x57E1"";\n" "  mov.b16 ulp,""0x9800"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b16 spc, ulp, p;\n" "  mov.b16 spc,""0x719D"";\n" "  mov.b16 ulp,""0x9C00"";\n" "  set.eq.f16.f16 p,""h"", spc;\n" "  fma.rn.f16 ""r"",p,ulp,""r"";\n}\n"
        "  mov.b16         %0, r;          \n"
        "}":"=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))));
    return val;
}
static __attribute__((device)) __inline__ __half2 h2log10(const __half2 a) {
    __half2 val;
    asm("{.reg.b16         hl, hu;             \n"
        " .reg.b32         r, fl, fu, C, h;    \n"
        "  mov.b32         {hl, hu}, %1;       \n"
        "  mov.b32         h, %1;              \n"
        "  cvt.f32.f16     fl, hl;             \n"
        "  cvt.f32.f16     fu, hu;             \n"
        "  lg2.approx.f32      fl, fl;         \n"
        "  lg2.approx.f32      fu, fu;         \n"
        "  mov.b32         C, 0x3E9A209B;      \n"
        "  mul.f32         fl,fl,C;            \n"
        "  mul.f32         fu,fu,C;            \n"
        "  cvt.rn.f16.f32      hl, fl;         \n"
        "  cvt.rn.f16.f32      hu, fu;         \n"
        "  mov.b32         r, {hl, hu};        \n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0x338F338F"";\n" "  mov.b32 ulp,""0x10001000"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0x33F833F8"";\n" "  mov.b32 ulp,""0x90009000"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0x57E157E1"";\n" "  mov.b32 ulp,""0x98009800"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,""0x719D719D"";\n" "  mov.b32 ulp,""0x9C009C00"";\n" "  set.eq.f16x2.f16x2 p,""h"", spc;\n" "  fma.rn.f16x2 ""r"",p,ulp,""r"";\n}\n"
        "  mov.b32         %0, r;              \n"
        "}":"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))));
    return val;
}


static __attribute__((device)) __inline__ __half2 h2rcp(const __half2 a) {
    do { __half2 val; asm("{.reg.b16         hl, hu;         \n" " .reg.b32         fl, fu;         \n" "  mov.b32         {hl, hu}, %1;   \n" "  cvt.f32.f16     fl, hl;         \n" "  cvt.f32.f16     fu, hu;         \n" "  ""rcp"".approx.f32   fl, fl;     \n" "  ""rcp"".approx.f32   fu, fu;     \n" "  cvt.rn.f16.f32      hl, fl;     \n" "  cvt.rn.f16.f32      hu, fu;     \n" "  mov.b32         %0, {hl, hu};   \n" "}":"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a))))); return val;} while(0);
}
static __attribute__((device)) __inline__ __half hrcp(const __half a) {
    do { __half val; asm("{.reg.b32         f;        \n" " .reg.b16         r;        \n" "  mov.b16         r,%1;     \n" "  cvt.f32.f16     f,r;      \n" "  ""rcp"".approx.f32   f,f;  \n" "  cvt.rn.f16.f32      r,f;  \n" "  mov.b16         %0,r;     \n" "}": "=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a))))); return val;} while(0);
}
static __attribute__((device)) __inline__ __half2 h2rsqrt(const __half2 a) {
    do { __half2 val; asm("{.reg.b16         hl, hu;         \n" " .reg.b32         fl, fu;         \n" "  mov.b32         {hl, hu}, %1;   \n" "  cvt.f32.f16     fl, hl;         \n" "  cvt.f32.f16     fu, hu;         \n" "  ""rsqrt"".approx.f32   fl, fl;     \n" "  ""rsqrt"".approx.f32   fu, fu;     \n" "  cvt.rn.f16.f32      hl, fl;     \n" "  cvt.rn.f16.f32      hu, fu;     \n" "  mov.b32         %0, {hl, hu};   \n" "}":"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a))))); return val;} while(0);
}
static __attribute__((device)) __inline__ __half hrsqrt(const __half a) {
    do { __half val; asm("{.reg.b32         f;        \n" " .reg.b16         r;        \n" "  mov.b16         r,%1;     \n" "  cvt.f32.f16     f,r;      \n" "  ""rsqrt"".approx.f32   f,f;  \n" "  cvt.rn.f16.f32      r,f;  \n" "  mov.b16         %0,r;     \n" "}": "=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a))))); return val;} while(0);
}
static __attribute__((device)) __inline__ __half2 h2sqrt(const __half2 a) {
    do { __half2 val; asm("{.reg.b16         hl, hu;         \n" " .reg.b32         fl, fu;         \n" "  mov.b32         {hl, hu}, %1;   \n" "  cvt.f32.f16     fl, hl;         \n" "  cvt.f32.f16     fu, hu;         \n" "  ""sqrt"".approx.f32   fl, fl;     \n" "  ""sqrt"".approx.f32   fu, fu;     \n" "  cvt.rn.f16.f32      hl, fl;     \n" "  cvt.rn.f16.f32      hu, fu;     \n" "  mov.b32         %0, {hl, hu};   \n" "}":"=r"(*(reinterpret_cast<unsigned int *>(&(val)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a))))); return val;} while(0);
}
static __attribute__((device)) __inline__ __half hsqrt(const __half a) {
    do { __half val; asm("{.reg.b32         f;        \n" " .reg.b16         r;        \n" "  mov.b16         r,%1;     \n" "  cvt.f32.f16     f,r;      \n" "  ""sqrt"".approx.f32   f,f;  \n" "  cvt.rn.f16.f32      r,f;  \n" "  mov.b16         %0,r;     \n" "}": "=h"(*(reinterpret_cast<unsigned short *>(&(val)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a))))); return val;} while(0);
}


static __attribute__((device)) __inline__ __half2 __hisnan2(const __half2 a)
{
    __half2 r;
    asm("{set.nan.f16x2.f16x2 %0,%1,%2;\n}"
        :"=r"(*(reinterpret_cast<unsigned int *>(&(r)))) : "r"(*(reinterpret_cast<const unsigned int *>(&(a)))), "r"(*(reinterpret_cast<const unsigned int *>(&(a)))));
    return r;
}
static __attribute__((device)) __inline__ bool __hisnan(const __half a)
{
    __half r;
    asm("{set.nan.f16.f16 %0,%1,%2;\n}"
        :"=h"(*(reinterpret_cast<unsigned short *>(&(r)))) : "h"(*(reinterpret_cast<const unsigned short *>(&(a)))), "h"(*(reinterpret_cast<const unsigned short *>(&(a)))));
    if (*(reinterpret_cast<const unsigned short *>(&(r))) == 0)
        return false;
    else return true;
}
static __attribute__((device)) __inline__ __half2 __hneg2(const __half2 a)
{
    __half2 zero = __float2half2_rn(0.0);
    return __hsub2(zero, a);
}
static __attribute__((device)) __inline__ __half __hneg(const __half a)
{
    __half zero;
    zero = __float2half(0.0);
    return __hsub(zero, a);
}
# 1992 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
static __attribute__((device)) __inline__ __half2 atomicAdd(__half2 *address, __half2 val) {
    __half2 r;
    asm volatile ("{ atom.add.noftz.f16x2 %0,[%1],%2; }\n"
                  : "=r"(*(reinterpret_cast<unsigned int *>(&(r)))) : "l"(address), "r"(*(reinterpret_cast<const unsigned int *>(&(val))))
                  : "memory");
   return r;
}
# 2020 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.hpp" 3
typedef __half half;
typedef __half2 half2;
# 1979 "/usr/tce/packages/cuda/cuda-9.2.148/include/cuda_fp16.h" 2 3
# 42 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 2 3


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_macro.cuh" 1 3
# 35 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_macro.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_namespace.cuh" 1 3
# 36 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_macro.cuh" 2 3





namespace cub {
# 102 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_macro.cuh" 3
}
# 45 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_arch.cuh" 1 3
# 42 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_arch.cuh" 3
namespace cub {
# 150 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_arch.cuh" 3
}
# 46 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 2 3








namespace cub {
# 71 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <bool IF, typename ThenType, typename ElseType>
struct If
{

    typedef ThenType Type;
};



template <typename ThenType, typename ElseType>
struct If<false, ThenType, ElseType>
{
    typedef ElseType Type;
};
# 97 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <typename A, typename B>
struct Equals
{
    enum {
        VALUE = 0,
        NEGATE = 1
    };
};



template <typename A>
struct Equals <A, A>
{
    enum {
        VALUE = 1,
        NEGATE = 0
    };
};
# 131 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <int N, int CURRENT_VAL = N, int COUNT = 0>
struct Log2
{

    enum { VALUE = Log2<N, (CURRENT_VAL >> 1), COUNT + 1>::VALUE };
};



template <int N, int COUNT>
struct Log2<N, 0, COUNT>
{
    enum {VALUE = (1 << (COUNT - 1) < N) ?
        COUNT :
        COUNT - 1 };
};







template <int N>
struct PowerOfTwo
{
    enum { VALUE = ((N & (N - 1)) == 0) };
};
# 169 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <typename Tp>
struct IsPointer
{
    enum { VALUE = 0 };
};



template <typename Tp>
struct IsPointer<Tp*>
{
    enum { VALUE = 1 };
};
# 194 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <typename Tp>
struct IsVolatile
{
    enum { VALUE = 0 };
};



template <typename Tp>
struct IsVolatile<Tp volatile>
{
    enum { VALUE = 1 };
};
# 221 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <typename Tp, typename Up = Tp>
struct RemoveQualifiers
{

    typedef Up Type;
};



template <typename Tp, typename Up>
struct RemoveQualifiers<Tp, volatile Up>
{
    typedef Up Type;
};

template <typename Tp, typename Up>
struct RemoveQualifiers<Tp, const Up>
{
    typedef Up Type;
};

template <typename Tp, typename Up>
struct RemoveQualifiers<Tp, const volatile Up>
{
    typedef Up Type;
};
# 256 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
struct NullType
{


    template <typename T>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) NullType& operator =(const T&) { return *this; }

    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) bool operator ==(const NullType&) { return true; }

    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) bool operator !=(const NullType&) { return false; }


};





template <int A>
struct Int2Type
{
   enum {VALUE = A};
};
# 289 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <typename T>
struct AlignBytes
{
    struct Pad
    {
        T val;
        char byte;
    };

    enum
    {

        ALIGN_BYTES = sizeof(Pad) - sizeof(T)
    };


    typedef T Type;
};
# 316 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <> struct AlignBytes<short4> { enum { ALIGN_BYTES = 8 }; typedef __attribute__((aligned(8))) short4 Type; };
template <> struct AlignBytes<ushort4> { enum { ALIGN_BYTES = 8 }; typedef __attribute__((aligned(8))) ushort4 Type; };
template <> struct AlignBytes<int2> { enum { ALIGN_BYTES = 8 }; typedef __attribute__((aligned(8))) int2 Type; };
template <> struct AlignBytes<uint2> { enum { ALIGN_BYTES = 8 }; typedef __attribute__((aligned(8))) uint2 Type; };
template <> struct AlignBytes<long long> { enum { ALIGN_BYTES = 8 }; typedef __attribute__((aligned(8))) long long Type; };
template <> struct AlignBytes<unsigned long long> { enum { ALIGN_BYTES = 8 }; typedef __attribute__((aligned(8))) unsigned long long Type; };
template <> struct AlignBytes<float2> { enum { ALIGN_BYTES = 8 }; typedef __attribute__((aligned(8))) float2 Type; };
template <> struct AlignBytes<double> { enum { ALIGN_BYTES = 8 }; typedef __attribute__((aligned(8))) double Type; };




    template <> struct AlignBytes<long2> { enum { ALIGN_BYTES = 16 }; typedef __attribute__((aligned(16))) long2 Type; };
    template <> struct AlignBytes<ulong2> { enum { ALIGN_BYTES = 16 }; typedef __attribute__((aligned(16))) ulong2 Type; };

template <> struct AlignBytes<int4> { enum { ALIGN_BYTES = 16 }; typedef __attribute__((aligned(16))) int4 Type; };
template <> struct AlignBytes<uint4> { enum { ALIGN_BYTES = 16 }; typedef __attribute__((aligned(16))) uint4 Type; };
template <> struct AlignBytes<float4> { enum { ALIGN_BYTES = 16 }; typedef __attribute__((aligned(16))) float4 Type; };
template <> struct AlignBytes<long4> { enum { ALIGN_BYTES = 16 }; typedef __attribute__((aligned(16))) long4 Type; };
template <> struct AlignBytes<ulong4> { enum { ALIGN_BYTES = 16 }; typedef __attribute__((aligned(16))) ulong4 Type; };
template <> struct AlignBytes<longlong2> { enum { ALIGN_BYTES = 16 }; typedef __attribute__((aligned(16))) longlong2 Type; };
template <> struct AlignBytes<ulonglong2> { enum { ALIGN_BYTES = 16 }; typedef __attribute__((aligned(16))) ulonglong2 Type; };
template <> struct AlignBytes<double2> { enum { ALIGN_BYTES = 16 }; typedef __attribute__((aligned(16))) double2 Type; };
template <> struct AlignBytes<longlong4> { enum { ALIGN_BYTES = 16 }; typedef __attribute__((aligned(16))) longlong4 Type; };
template <> struct AlignBytes<ulonglong4> { enum { ALIGN_BYTES = 16 }; typedef __attribute__((aligned(16))) ulonglong4 Type; };
template <> struct AlignBytes<double4> { enum { ALIGN_BYTES = 16 }; typedef __attribute__((aligned(16))) double4 Type; };

template <typename T> struct AlignBytes<volatile T> : AlignBytes<T> {};
template <typename T> struct AlignBytes<const T> : AlignBytes<T> {};
template <typename T> struct AlignBytes<const volatile T> : AlignBytes<T> {};



template <typename T>
struct UnitWord
{
    enum {
        ALIGN_BYTES = AlignBytes<T>::ALIGN_BYTES
    };

    template <typename Unit>
    struct IsMultiple
    {
        enum {
            UNIT_ALIGN_BYTES = AlignBytes<Unit>::ALIGN_BYTES,
            IS_MULTIPLE = (sizeof(T) % sizeof(Unit) == 0) && (ALIGN_BYTES % UNIT_ALIGN_BYTES == 0)
        };
    };


    typedef typename If<IsMultiple<int>::IS_MULTIPLE,
        unsigned int,
        typename If<IsMultiple<short>::IS_MULTIPLE,
            unsigned short,
            unsigned char>::Type>::Type ShuffleWord;


    typedef typename If<IsMultiple<long long>::IS_MULTIPLE,
        unsigned long long,
        ShuffleWord>::Type VolatileWord;


    typedef typename If<IsMultiple<longlong2>::IS_MULTIPLE,
        ulonglong2,
        VolatileWord>::Type DeviceWord;


    typedef typename If<IsMultiple<int4>::IS_MULTIPLE,
        uint4,
        typename If<IsMultiple<int2>::IS_MULTIPLE,
            uint2,
            ShuffleWord>::Type>::Type TextureWord;
};



template <>
struct UnitWord <float2>
{
    typedef int ShuffleWord;




    typedef unsigned long long VolatileWord;
    typedef unsigned long long DeviceWord;

    typedef float2 TextureWord;
};


template <>
struct UnitWord <float4>
{
    typedef int ShuffleWord;




    typedef unsigned long long VolatileWord;
    typedef ulonglong2 DeviceWord;

    typedef float4 TextureWord;
};



template <>
struct UnitWord <char2>
{
    typedef unsigned short ShuffleWord;




    typedef unsigned short VolatileWord;
    typedef unsigned short DeviceWord;

    typedef unsigned short TextureWord;
};


template <typename T> struct UnitWord<volatile T> : UnitWord<T> {};
template <typename T> struct UnitWord<const T> : UnitWord<T> {};
template <typename T> struct UnitWord<const volatile T> : UnitWord<T> {};
# 454 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <typename T, int vec_elements> struct CubVector;



enum
{

    MAX_VEC_ELEMENTS = 4,
};





template <typename T>
struct CubVector<T, 1>
{
    T x;

    typedef T BaseType;
    typedef CubVector<T, 1> Type;
};




template <typename T>
struct CubVector<T, 2>
{
    T x;
    T y;

    typedef T BaseType;
    typedef CubVector<T, 2> Type;
};




template <typename T>
struct CubVector<T, 3>
{
    T x;
    T y;
    T z;

    typedef T BaseType;
    typedef CubVector<T, 3> Type;
};




template <typename T>
struct CubVector<T, 4>
{
    T x;
    T y;
    T z;
    T w;

    typedef T BaseType;
    typedef CubVector<T, 4> Type;
};
# 604 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template<> struct CubVector<char, 1> : char1 { typedef char BaseType; typedef char1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<char, 2> : char2 { typedef char BaseType; typedef char2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<char, 3> : char3 { typedef char BaseType; typedef char3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<char, 4> : char4 { typedef char BaseType; typedef char4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
template<> struct CubVector<signed char, 1> : char1 { typedef signed char BaseType; typedef char1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<signed char, 2> : char2 { typedef signed char BaseType; typedef char2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<signed char, 3> : char3 { typedef signed char BaseType; typedef char3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<signed char, 4> : char4 { typedef signed char BaseType; typedef char4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
template<> struct CubVector<short, 1> : short1 { typedef short BaseType; typedef short1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<short, 2> : short2 { typedef short BaseType; typedef short2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<short, 3> : short3 { typedef short BaseType; typedef short3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<short, 4> : short4 { typedef short BaseType; typedef short4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
template<> struct CubVector<int, 1> : int1 { typedef int BaseType; typedef int1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<int, 2> : int2 { typedef int BaseType; typedef int2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<int, 3> : int3 { typedef int BaseType; typedef int3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<int, 4> : int4 { typedef int BaseType; typedef int4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
template<> struct CubVector<long, 1> : long1 { typedef long BaseType; typedef long1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<long, 2> : long2 { typedef long BaseType; typedef long2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<long, 3> : long3 { typedef long BaseType; typedef long3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<long, 4> : long4 { typedef long BaseType; typedef long4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
template<> struct CubVector<long long, 1> : longlong1 { typedef long long BaseType; typedef longlong1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<long long, 2> : longlong2 { typedef long long BaseType; typedef longlong2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<long long, 3> : longlong3 { typedef long long BaseType; typedef longlong3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<long long, 4> : longlong4 { typedef long long BaseType; typedef longlong4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
template<> struct CubVector<unsigned char, 1> : uchar1 { typedef unsigned char BaseType; typedef uchar1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<unsigned char, 2> : uchar2 { typedef unsigned char BaseType; typedef uchar2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<unsigned char, 3> : uchar3 { typedef unsigned char BaseType; typedef uchar3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<unsigned char, 4> : uchar4 { typedef unsigned char BaseType; typedef uchar4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
template<> struct CubVector<unsigned short, 1> : ushort1 { typedef unsigned short BaseType; typedef ushort1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<unsigned short, 2> : ushort2 { typedef unsigned short BaseType; typedef ushort2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<unsigned short, 3> : ushort3 { typedef unsigned short BaseType; typedef ushort3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<unsigned short, 4> : ushort4 { typedef unsigned short BaseType; typedef ushort4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
template<> struct CubVector<unsigned int, 1> : uint1 { typedef unsigned int BaseType; typedef uint1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<unsigned int, 2> : uint2 { typedef unsigned int BaseType; typedef uint2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<unsigned int, 3> : uint3 { typedef unsigned int BaseType; typedef uint3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<unsigned int, 4> : uint4 { typedef unsigned int BaseType; typedef uint4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
template<> struct CubVector<unsigned long, 1> : ulong1 { typedef unsigned long BaseType; typedef ulong1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<unsigned long, 2> : ulong2 { typedef unsigned long BaseType; typedef ulong2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<unsigned long, 3> : ulong3 { typedef unsigned long BaseType; typedef ulong3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<unsigned long, 4> : ulong4 { typedef unsigned long BaseType; typedef ulong4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
template<> struct CubVector<unsigned long long, 1> : ulonglong1 { typedef unsigned long long BaseType; typedef ulonglong1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<unsigned long long, 2> : ulonglong2 { typedef unsigned long long BaseType; typedef ulonglong2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<unsigned long long, 3> : ulonglong3 { typedef unsigned long long BaseType; typedef ulonglong3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<unsigned long long, 4> : ulonglong4 { typedef unsigned long long BaseType; typedef ulonglong4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
template<> struct CubVector<float, 1> : float1 { typedef float BaseType; typedef float1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<float, 2> : float2 { typedef float BaseType; typedef float2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<float, 3> : float3 { typedef float BaseType; typedef float3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<float, 4> : float4 { typedef float BaseType; typedef float4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
template<> struct CubVector<double, 1> : double1 { typedef double BaseType; typedef double1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<double, 2> : double2 { typedef double BaseType; typedef double2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<double, 3> : double3 { typedef double BaseType; typedef double3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<double, 4> : double4 { typedef double BaseType; typedef double4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
template<> struct CubVector<bool, 1> : uchar1 { typedef bool BaseType; typedef uchar1 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; return retval; } }; template<> struct CubVector<bool, 2> : uchar2 { typedef bool BaseType; typedef uchar2 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; return retval; } }; template<> struct CubVector<bool, 3> : uchar3 { typedef bool BaseType; typedef uchar3 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; return retval; } }; template<> struct CubVector<bool, 4> : uchar4 { typedef bool BaseType; typedef uchar4 Type; __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator+(const CubVector &other) const { CubVector retval; retval.x = x + other.x; retval.y = y + other.y; retval.z = z + other.z; retval.w = w + other.w; return retval; } __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CubVector operator-(const CubVector &other) const { CubVector retval; retval.x = x - other.x; retval.y = y - other.y; retval.z = z - other.z; retval.w = w - other.w; return retval; } };
# 633 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <typename T>
struct Uninitialized
{

    typedef typename UnitWord<T>::DeviceWord DeviceWord;

    enum
    {
        WORDS = sizeof(T) / sizeof(DeviceWord)
    };


    DeviceWord storage[WORDS];


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) T& Alias()
    {
        return reinterpret_cast<T&>(*this);
    }
};





template <
    typename _Key,
    typename _Value




    >
struct KeyValuePair
{
    typedef _Key Key;
    typedef _Value Value;

    Key key;
    Value value;


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    KeyValuePair() {}


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    KeyValuePair(Key const& key, Value const& value) : key(key), value(value) {}


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) bool operator !=(const KeyValuePair &b)
    {
        return (value != b.value) || (key != b.key);
    }
};
# 769 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <typename T, int COUNT>
struct ArrayWrapper
{


    T array[COUNT];


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) ArrayWrapper() {}
};
# 790 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <typename T>
struct DoubleBuffer
{

    T *d_buffers[2];


    int selector;


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) DoubleBuffer()
    {
        selector = 0;
        d_buffers[0] = __null;
        d_buffers[1] = __null;
    }


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) DoubleBuffer(
        T *d_current,
        T *d_alternate)
    {
        selector = 0;
        d_buffers[0] = d_current;
        d_buffers[1] = d_alternate;
    }


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) T* Current() { return d_buffers[selector]; }


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) T* Alternate() { return d_buffers[selector ^ 1]; }

};
# 858 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <bool Condition, class T = void>
struct EnableIf
{

    typedef T Type;
};


template <class T>
struct EnableIf<false, T> {};
# 878 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
template <typename T, typename BinaryOp>
struct BinaryOpHasIdxParam
{
private:






    template <typename BinaryOpT, bool (BinaryOpT::*)(const T &a, const T &b, int idx) const> struct SFINAE5 {};
    template <typename BinaryOpT, bool (BinaryOpT::*)(const T &a, const T &b, int idx)> struct SFINAE6 {};
    template <typename BinaryOpT, bool (BinaryOpT::*)(T a, T b, int idx) const> struct SFINAE7 {};
    template <typename BinaryOpT, bool (BinaryOpT::*)(T a, T b, int idx)> struct SFINAE8 {};






    template <typename BinaryOpT> __attribute__((host)) __attribute__((device)) static char Test(SFINAE5<BinaryOpT, &BinaryOpT::operator()> *);
    template <typename BinaryOpT> __attribute__((host)) __attribute__((device)) static char Test(SFINAE6<BinaryOpT, &BinaryOpT::operator()> *);
    template <typename BinaryOpT> __attribute__((host)) __attribute__((device)) static char Test(SFINAE7<BinaryOpT, &BinaryOpT::operator()> *);
    template <typename BinaryOpT> __attribute__((host)) __attribute__((device)) static char Test(SFINAE8<BinaryOpT, &BinaryOpT::operator()> *);

    template <typename BinaryOpT> static int Test(...);

public:


    static const bool HAS_PARAM = sizeof(Test<BinaryOp>(__null)) == sizeof(char);
};
# 928 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_type.cuh" 3
enum Category
{
    NOT_A_NUMBER,
    SIGNED_INTEGER,
    UNSIGNED_INTEGER,
    FLOATING_POINT
};





template <Category _CATEGORY, bool _PRIMITIVE, bool _NULL_TYPE, typename _UnsignedBits, typename T>
struct BaseTraits
{

    static const Category CATEGORY = _CATEGORY;
    enum
    {
        PRIMITIVE = _PRIMITIVE,
        NULL_TYPE = _NULL_TYPE,
    };
};





template <typename _UnsignedBits, typename T>
struct BaseTraits<UNSIGNED_INTEGER, true, false, _UnsignedBits, T>
{
    typedef _UnsignedBits UnsignedBits;

    static const Category CATEGORY = UNSIGNED_INTEGER;
    static const UnsignedBits LOWEST_KEY = UnsignedBits(0);
    static const UnsignedBits MAX_KEY = UnsignedBits(-1);

    enum
    {
        PRIMITIVE = true,
        NULL_TYPE = false,
    };


    static __attribute__((device)) __inline__ __attribute__((always_inline)) UnsignedBits TwiddleIn(UnsignedBits key)
    {
        return key;
    }

    static __attribute__((device)) __inline__ __attribute__((always_inline)) UnsignedBits TwiddleOut(UnsignedBits key)
    {
        return key;
    }

    static __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) T Max()
    {
        UnsignedBits retval = MAX_KEY;
        return reinterpret_cast<T&>(retval);
    }

    static __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) T Lowest()
    {
        UnsignedBits retval = LOWEST_KEY;
        return reinterpret_cast<T&>(retval);
    }
};





template <typename _UnsignedBits, typename T>
struct BaseTraits<SIGNED_INTEGER, true, false, _UnsignedBits, T>
{
    typedef _UnsignedBits UnsignedBits;

    static const Category CATEGORY = SIGNED_INTEGER;
    static const UnsignedBits HIGH_BIT = UnsignedBits(1) << ((sizeof(UnsignedBits) * 8) - 1);
    static const UnsignedBits LOWEST_KEY = HIGH_BIT;
    static const UnsignedBits MAX_KEY = UnsignedBits(-1) ^ HIGH_BIT;

    enum
    {
        PRIMITIVE = true,
        NULL_TYPE = false,
    };

    static __attribute__((device)) __inline__ __attribute__((always_inline)) UnsignedBits TwiddleIn(UnsignedBits key)
    {
        return key ^ HIGH_BIT;
    };

    static __attribute__((device)) __inline__ __attribute__((always_inline)) UnsignedBits TwiddleOut(UnsignedBits key)
    {
        return key ^ HIGH_BIT;
    };

    static __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) T Max()
    {
        UnsignedBits retval = MAX_KEY;
        return reinterpret_cast<T&>(retval);
    }

    static __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) T Lowest()
    {
        UnsignedBits retval = LOWEST_KEY;
        return reinterpret_cast<T&>(retval);
    }
};

template <typename _T>
struct FpLimits;

template <>
struct FpLimits<float>
{
    static __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) float Max() {
        return 3.40282347e+38F;
    }

    static __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) float Lowest() {
        return 3.40282347e+38F * float(-1);
    }
};

template <>
struct FpLimits<double>
{
    static __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) double Max() {
        return 1.7976931348623157e+308;
    }

    static __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) double Lowest() {
        return 1.7976931348623157e+308 * double(-1);
    }
};



template <>
struct FpLimits<__half>
{
    static __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) __half Max() {
        unsigned short max_word = 0x7BFF;
        return reinterpret_cast<__half&>(max_word);
    }

    static __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) __half Lowest() {
        unsigned short lowest_word = 0xFBFF;
        return reinterpret_cast<__half&>(lowest_word);
    }
};






template <typename _UnsignedBits, typename T>
struct BaseTraits<FLOATING_POINT, true, false, _UnsignedBits, T>
{
    typedef _UnsignedBits UnsignedBits;

    static const Category CATEGORY = FLOATING_POINT;
    static const UnsignedBits HIGH_BIT = UnsignedBits(1) << ((sizeof(UnsignedBits) * 8) - 1);
    static const UnsignedBits LOWEST_KEY = UnsignedBits(-1);
    static const UnsignedBits MAX_KEY = UnsignedBits(-1) ^ HIGH_BIT;

    enum
    {
        PRIMITIVE = true,
        NULL_TYPE = false,
    };

    static __attribute__((device)) __inline__ __attribute__((always_inline)) UnsignedBits TwiddleIn(UnsignedBits key)
    {
        UnsignedBits mask = (key & HIGH_BIT) ? UnsignedBits(-1) : HIGH_BIT;
        return key ^ mask;
    };

    static __attribute__((device)) __inline__ __attribute__((always_inline)) UnsignedBits TwiddleOut(UnsignedBits key)
    {
        UnsignedBits mask = (key & HIGH_BIT) ? HIGH_BIT : UnsignedBits(-1);
        return key ^ mask;
    };

    static __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) T Max() {
        return FpLimits<T>::Max();
    }

    static __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) T Lowest() {
        return FpLimits<T>::Lowest();
    }
};





template <typename T> struct NumericTraits : BaseTraits<NOT_A_NUMBER, false, false, T, T> {};

template <> struct NumericTraits<NullType> : BaseTraits<NOT_A_NUMBER, false, true, NullType, NullType> {};

template <> struct NumericTraits<char> : BaseTraits<(std::numeric_limits<char>::is_signed) ? SIGNED_INTEGER : UNSIGNED_INTEGER, true, false, unsigned char, char> {};
template <> struct NumericTraits<signed char> : BaseTraits<SIGNED_INTEGER, true, false, unsigned char, signed char> {};
template <> struct NumericTraits<short> : BaseTraits<SIGNED_INTEGER, true, false, unsigned short, short> {};
template <> struct NumericTraits<int> : BaseTraits<SIGNED_INTEGER, true, false, unsigned int, int> {};
template <> struct NumericTraits<long> : BaseTraits<SIGNED_INTEGER, true, false, unsigned long, long> {};
template <> struct NumericTraits<long long> : BaseTraits<SIGNED_INTEGER, true, false, unsigned long long, long long> {};

template <> struct NumericTraits<unsigned char> : BaseTraits<UNSIGNED_INTEGER, true, false, unsigned char, unsigned char> {};
template <> struct NumericTraits<unsigned short> : BaseTraits<UNSIGNED_INTEGER, true, false, unsigned short, unsigned short> {};
template <> struct NumericTraits<unsigned int> : BaseTraits<UNSIGNED_INTEGER, true, false, unsigned int, unsigned int> {};
template <> struct NumericTraits<unsigned long> : BaseTraits<UNSIGNED_INTEGER, true, false, unsigned long, unsigned long> {};
template <> struct NumericTraits<unsigned long long> : BaseTraits<UNSIGNED_INTEGER, true, false, unsigned long long, unsigned long long> {};

template <> struct NumericTraits<float> : BaseTraits<FLOATING_POINT, true, false, unsigned int, float> {};
template <> struct NumericTraits<double> : BaseTraits<FLOATING_POINT, true, false, unsigned long long, double> {};

    template <> struct NumericTraits<__half> : BaseTraits<FLOATING_POINT, true, false, unsigned short, __half> {};


template <> struct NumericTraits<bool> : BaseTraits<UNSIGNED_INTEGER, true, false, typename UnitWord<bool>::VolatileWord, bool> {};






template <typename T>
struct Traits : NumericTraits<typename RemoveQualifiers<T>::Type> {};







}
# 38 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_ptx.cuh" 2 3


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_debug.cuh" 1 3
# 47 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_debug.cuh" 3
namespace cub {
# 68 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_debug.cuh" 3
__attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) cudaError_t Debug(
    cudaError_t error,
    const char* filename,
    int line)
{
    (void)filename;
    (void)line;
# 86 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_debug.cuh" 3
    return error;
}
# 144 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_debug.cuh" 3
}
# 41 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_ptx.cuh" 2 3






namespace cub {
# 87 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_ptx.cuh" 3
__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int SHR_ADD(
    unsigned int x,
    unsigned int shift,
    unsigned int addend)
{
    unsigned int ret;

    asm ("vshr.u32.u32.u32.clamp.add %0, %1, %2, %3;" :
        "=r"(ret) : "r"(x), "r"(shift), "r"(addend));



    return ret;
}





__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int SHL_ADD(
    unsigned int x,
    unsigned int shift,
    unsigned int addend)
{
    unsigned int ret;

    asm ("vshl.u32.u32.u32.clamp.add %0, %1, %2, %3;" :
        "=r"(ret) : "r"(x), "r"(shift), "r"(addend));



    return ret;
}






template <typename UnsignedBits, int BYTE_LEN>
__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int BFE(
    UnsignedBits source,
    unsigned int bit_start,
    unsigned int num_bits,
    Int2Type<BYTE_LEN> )
{
    unsigned int bits;

    asm ("bfe.u32 %0, %1, %2, %3;" : "=r"(bits) : "r"((unsigned int) source), "r"(bit_start), "r"(num_bits));




    return bits;
}





template <typename UnsignedBits>
__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int BFE(
    UnsignedBits source,
    unsigned int bit_start,
    unsigned int num_bits,
    Int2Type<8> )
{
    const unsigned long long MASK = (1ull << num_bits) - 1;
    return (source >> bit_start) & MASK;
}






template <typename UnsignedBits>
__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int BFE(
    UnsignedBits source,
    unsigned int bit_start,
    unsigned int num_bits)
{
    return BFE(source, bit_start, num_bits, Int2Type<sizeof(UnsignedBits)>());
}





__attribute__((device)) __inline__ __attribute__((always_inline)) void BFI(
    unsigned int &ret,
    unsigned int x,
    unsigned int y,
    unsigned int bit_start,
    unsigned int num_bits)
{

    asm ("bfi.b32 %0, %1, %2, %3, %4;" :
        "=r"(ret) : "r"(y), "r"(x), "r"(bit_start), "r"(num_bits));






}





__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int IADD3(unsigned int x, unsigned int y, unsigned int z)
{

    asm ("vadd.u32.u32.u32.add %0, %1, %2, %3;" : "=r"(x) : "r"(x), "r"(y), "r"(z));



    return x;
}
# 235 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_ptx.cuh" 3
__attribute__((device)) __inline__ __attribute__((always_inline)) int PRMT(unsigned int a, unsigned int b, unsigned int index)
{
    int ret;
    asm ("prmt.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(a), "r"(b), "r"(index));
    return ret;
}






__attribute__((device)) __inline__ __attribute__((always_inline)) void BAR(int count)
{
    asm volatile("bar.sync 1, %0;" : : "r"(count));
}




__attribute__((device)) __inline__ __attribute__((always_inline)) void CTA_SYNC()
{
    __syncthreads();
}





__attribute__((device)) __inline__ __attribute__((always_inline)) int CTA_SYNC_AND(int p)
{
    return __syncthreads_and(p);
}





__attribute__((device)) __inline__ __attribute__((always_inline)) void WARP_SYNC(unsigned int member_mask)
{

    __syncwarp(member_mask);

}





__attribute__((device)) __inline__ __attribute__((always_inline)) int WARP_ANY(int predicate, unsigned int member_mask)
{

    return __any_sync(member_mask, predicate);



}





__attribute__((device)) __inline__ __attribute__((always_inline)) int WARP_ALL(int predicate, unsigned int member_mask)
{

    return __all_sync(member_mask, predicate);



}





__attribute__((device)) __inline__ __attribute__((always_inline)) int WARP_BALLOT(int predicate, unsigned int member_mask)
{

    return __ballot_sync(member_mask, predicate);



}




__attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int SHFL_UP_SYNC(unsigned int word, int src_offset, int flags, unsigned int member_mask)
{

    asm volatile("shfl.sync.up.b32 %0, %1, %2, %3, %4;"
        : "=r"(word) : "r"(word), "r"(src_offset), "r"(flags), "r"(member_mask));




    return word;
}




__attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int SHFL_DOWN_SYNC(unsigned int word, int src_offset, int flags, unsigned int member_mask)
{

    asm volatile("shfl.sync.down.b32 %0, %1, %2, %3, %4;"
        : "=r"(word) : "r"(word), "r"(src_offset), "r"(flags), "r"(member_mask));




    return word;
}




__attribute__((device)) __inline__ __attribute__((always_inline))
unsigned int SHFL_IDX_SYNC(unsigned int word, int src_lane, int flags, unsigned int member_mask)
{

    asm volatile("shfl.sync.idx.b32 %0, %1, %2, %3, %4;"
        : "=r"(word) : "r"(word), "r"(src_lane), "r"(flags), "r"(member_mask));




    return word;
}




__attribute__((device)) __inline__ __attribute__((always_inline)) float FMUL_RZ(float a, float b)
{
    float d;
    asm ("mul.rz.f32 %0, %1, %2;" : "=f"(d) : "f"(a), "f"(b));
    return d;
}





__attribute__((device)) __inline__ __attribute__((always_inline)) float FFMA_RZ(float a, float b, float c)
{
    float d;
    asm ("fma.rz.f32 %0, %1, %2, %3;" : "=f"(d) : "f"(a), "f"(b), "f"(c));
    return d;
}






__attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadExit() {
    asm volatile("exit;");
}





__attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadTrap() {
    asm volatile("trap;");
}





__attribute__((device)) __inline__ __attribute__((always_inline)) int RowMajorTid(int block_dim_x, int block_dim_y, int block_dim_z)
{
    return ((block_dim_z == 1) ? 0 : (threadIdx.z * block_dim_x * block_dim_y)) +
            ((block_dim_y == 1) ? 0 : (threadIdx.y * block_dim_x)) +
            threadIdx.x;
}





__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int LaneId()
{
    unsigned int ret;
    asm ("mov.u32 %0, %%laneid;" : "=r"(ret) );
    return ret;
}





__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int WarpId()
{
    unsigned int ret;
    asm ("mov.u32 %0, %%warpid;" : "=r"(ret) );
    return ret;
}




__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int LaneMaskLt()
{
    unsigned int ret;
    asm ("mov.u32 %0, %%lanemask_lt;" : "=r"(ret) );
    return ret;
}




__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int LaneMaskLe()
{
    unsigned int ret;
    asm ("mov.u32 %0, %%lanemask_le;" : "=r"(ret) );
    return ret;
}




__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int LaneMaskGt()
{
    unsigned int ret;
    asm ("mov.u32 %0, %%lanemask_gt;" : "=r"(ret) );
    return ret;
}




__attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int LaneMaskGe()
{
    unsigned int ret;
    asm ("mov.u32 %0, %%lanemask_ge;" : "=r"(ret) );
    return ret;
}
# 514 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_ptx.cuh" 3
template <
    int LOGICAL_WARP_THREADS,
    typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ShuffleUp(
    T input,
    int src_offset,
    int first_thread,
    unsigned int member_mask)
{

    enum {
        SHFL_C = (32 - LOGICAL_WARP_THREADS) << 8
    };

    typedef typename UnitWord<T>::ShuffleWord ShuffleWord;

    const int WORDS = (sizeof(T) + sizeof(ShuffleWord) - 1) / sizeof(ShuffleWord);

    T output;
    ShuffleWord *output_alias = reinterpret_cast<ShuffleWord *>(&output);
    ShuffleWord *input_alias = reinterpret_cast<ShuffleWord *>(&input);

    unsigned int shuffle_word;
    shuffle_word = SHFL_UP_SYNC((unsigned int)input_alias[0], src_offset, first_thread | SHFL_C, member_mask);
    output_alias[0] = shuffle_word;

#pragma unroll
 for (int WORD = 1; WORD < WORDS; ++WORD)
    {
        shuffle_word = SHFL_UP_SYNC((unsigned int)input_alias[WORD], src_offset, first_thread | SHFL_C, member_mask);
        output_alias[WORD] = shuffle_word;
    }

    return output;
}
# 582 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_ptx.cuh" 3
template <
    int LOGICAL_WARP_THREADS,
    typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ShuffleDown(
    T input,
    int src_offset,
    int last_thread,
    unsigned int member_mask)
{

    enum {
        SHFL_C = (32 - LOGICAL_WARP_THREADS) << 8
    };

    typedef typename UnitWord<T>::ShuffleWord ShuffleWord;

    const int WORDS = (sizeof(T) + sizeof(ShuffleWord) - 1) / sizeof(ShuffleWord);

    T output;
    ShuffleWord *output_alias = reinterpret_cast<ShuffleWord *>(&output);
    ShuffleWord *input_alias = reinterpret_cast<ShuffleWord *>(&input);

    unsigned int shuffle_word;
    shuffle_word = SHFL_DOWN_SYNC((unsigned int)input_alias[0], src_offset, last_thread | SHFL_C, member_mask);
    output_alias[0] = shuffle_word;

#pragma unroll
 for (int WORD = 1; WORD < WORDS; ++WORD)
    {
        shuffle_word = SHFL_DOWN_SYNC((unsigned int)input_alias[WORD], src_offset, last_thread | SHFL_C, member_mask);
        output_alias[WORD] = shuffle_word;
    }

    return output;
}
# 653 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_ptx.cuh" 3
template <
    int LOGICAL_WARP_THREADS,
    typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ShuffleIndex(
    T input,
    int src_lane,
    unsigned int member_mask)
{

    enum {
        SHFL_C = ((32 - LOGICAL_WARP_THREADS) << 8) | (LOGICAL_WARP_THREADS - 1)
    };

    typedef typename UnitWord<T>::ShuffleWord ShuffleWord;

    const int WORDS = (sizeof(T) + sizeof(ShuffleWord) - 1) / sizeof(ShuffleWord);

    T output;
    ShuffleWord *output_alias = reinterpret_cast<ShuffleWord *>(&output);
    ShuffleWord *input_alias = reinterpret_cast<ShuffleWord *>(&input);

    unsigned int shuffle_word;
    shuffle_word = SHFL_IDX_SYNC((unsigned int)input_alias[0],
                                 src_lane,
                                 SHFL_C,
                                 member_mask);

    output_alias[0] = shuffle_word;

#pragma unroll
 for (int WORD = 1; WORD < WORDS; ++WORD)
    {
        shuffle_word = SHFL_IDX_SYNC((unsigned int)input_alias[WORD],
                                     src_lane,
                                     SHFL_C,
                                     member_mask);

        output_alias[WORD] = shuffle_word;
    }

    return output;
}







template <int LABEL_BITS>
inline __attribute__((device)) unsigned int MatchAny(unsigned int label)
{
    unsigned int retval;


#pragma unroll
 for (int BIT = 0; BIT < LABEL_BITS; ++BIT)
    {
        unsigned int mask;
        unsigned int current_bit = 1 << BIT;
        asm ("{\n"
            "    .reg .pred p;\n"
            "    and.b32 %0, %1, %2;"
            "    setp.eq.u32 p, %0, %2;\n"

            "    vote.ballot.sync.b32 %0, p, 0xffffffff;\n"



            "    @!p not.b32 %0, %0;\n"
            "}\n" : "=r"(mask) : "r"(label), "r"(current_bit));


        retval = (BIT == 0) ? mask : retval & mask;
    }

    return retval;
# 738 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_ptx.cuh" 3
}
# 757 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../util_ptx.cuh" 3
}
# 41 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_load.cuh" 2 3







namespace cub {
# 62 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_load.cuh" 3
enum CacheLoadModifier
{
    LOAD_DEFAULT,
    LOAD_CA,
    LOAD_CG,
    LOAD_CS,
    LOAD_CV,
    LOAD_LDG,
    LOAD_VOLATILE,
};
# 107 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_load.cuh" 3
template <
    CacheLoadModifier MODIFIER,
    typename InputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) typename std::iterator_traits<InputIteratorT>::value_type ThreadLoad(InputIteratorT itr);
# 120 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_load.cuh" 3
template <int COUNT, int MAX>
struct IterateThreadLoad
{
    template <CacheLoadModifier MODIFIER, typename T>
    static __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(T const *ptr, T *vals)
    {
        vals[COUNT] = ThreadLoad<MODIFIER>(ptr + COUNT);
        IterateThreadLoad<COUNT + 1, MAX>::template Load<MODIFIER>(ptr, vals);
    }

    template <typename InputIteratorT, typename T>
    static __attribute__((device)) __inline__ __attribute__((always_inline)) void Dereference(InputIteratorT itr, T *vals)
    {
        vals[COUNT] = itr[COUNT];
        IterateThreadLoad<COUNT + 1, MAX>::Dereference(itr, vals);
    }
};



template <int MAX>
struct IterateThreadLoad<MAX, MAX>
{
    template <CacheLoadModifier MODIFIER, typename T>
    static __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(T const * , T * ) {}

    template <typename InputIteratorT, typename T>
    static __attribute__((device)) __inline__ __attribute__((always_inline)) void Dereference(InputIteratorT , T * ) {}
};
# 279 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_load.cuh" 3
    template<> __attribute__((device)) __inline__ __attribute__((always_inline)) uint4 ThreadLoad<LOAD_CA, uint4 const *>(uint4 const *ptr) { uint4 retval; asm volatile ("ld.""ca"".v4.u32 {%0, %1, %2, %3}, [%4];" : "=r"(retval.x), "=r"(retval.y), "=r"(retval.z), "=r"(retval.w) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) ulonglong2 ThreadLoad<LOAD_CA, ulonglong2 const *>(ulonglong2 const *ptr) { ulonglong2 retval; asm volatile ("ld.""ca"".v2.u64 {%0, %1}, [%2];" : "=l"(retval.x), "=l"(retval.y) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) ushort4 ThreadLoad<LOAD_CA, ushort4 const *>(ushort4 const *ptr) { ushort4 retval; asm volatile ("ld.""ca"".v4.u16 {%0, %1, %2, %3}, [%4];" : "=h"(retval.x), "=h"(retval.y), "=h"(retval.z), "=h"(retval.w) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) uint2 ThreadLoad<LOAD_CA, uint2 const *>(uint2 const *ptr) { uint2 retval; asm volatile ("ld.""ca"".v2.u32 {%0, %1}, [%2];" : "=r"(retval.x), "=r"(retval.y) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long ThreadLoad<LOAD_CA, unsigned long long const *>(unsigned long long const *ptr) { unsigned long long retval; asm volatile ("ld.""ca"".u64 %0, [%1];" : "=l"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int ThreadLoad<LOAD_CA, unsigned int const *>(unsigned int const *ptr) { unsigned int retval; asm volatile ("ld.""ca"".u32 %0, [%1];" : "=r"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned short ThreadLoad<LOAD_CA, unsigned short const *>(unsigned short const *ptr) { unsigned short retval; asm volatile ("ld.""ca"".u16 %0, [%1];" : "=h"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned char ThreadLoad<LOAD_CA, unsigned char const *>(unsigned char const *ptr) { unsigned short retval; asm volatile ( "{" "   .reg .u8 datum;" "    ld.""ca"".u8 datum, [%1];" "    cvt.u16.u8 %0, datum;" "}" : "=h"(retval) : "l"(ptr)); return (unsigned char) retval; }
    template<> __attribute__((device)) __inline__ __attribute__((always_inline)) uint4 ThreadLoad<LOAD_CG, uint4 const *>(uint4 const *ptr) { uint4 retval; asm volatile ("ld.""cg"".v4.u32 {%0, %1, %2, %3}, [%4];" : "=r"(retval.x), "=r"(retval.y), "=r"(retval.z), "=r"(retval.w) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) ulonglong2 ThreadLoad<LOAD_CG, ulonglong2 const *>(ulonglong2 const *ptr) { ulonglong2 retval; asm volatile ("ld.""cg"".v2.u64 {%0, %1}, [%2];" : "=l"(retval.x), "=l"(retval.y) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) ushort4 ThreadLoad<LOAD_CG, ushort4 const *>(ushort4 const *ptr) { ushort4 retval; asm volatile ("ld.""cg"".v4.u16 {%0, %1, %2, %3}, [%4];" : "=h"(retval.x), "=h"(retval.y), "=h"(retval.z), "=h"(retval.w) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) uint2 ThreadLoad<LOAD_CG, uint2 const *>(uint2 const *ptr) { uint2 retval; asm volatile ("ld.""cg"".v2.u32 {%0, %1}, [%2];" : "=r"(retval.x), "=r"(retval.y) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long ThreadLoad<LOAD_CG, unsigned long long const *>(unsigned long long const *ptr) { unsigned long long retval; asm volatile ("ld.""cg"".u64 %0, [%1];" : "=l"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int ThreadLoad<LOAD_CG, unsigned int const *>(unsigned int const *ptr) { unsigned int retval; asm volatile ("ld.""cg"".u32 %0, [%1];" : "=r"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned short ThreadLoad<LOAD_CG, unsigned short const *>(unsigned short const *ptr) { unsigned short retval; asm volatile ("ld.""cg"".u16 %0, [%1];" : "=h"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned char ThreadLoad<LOAD_CG, unsigned char const *>(unsigned char const *ptr) { unsigned short retval; asm volatile ( "{" "   .reg .u8 datum;" "    ld.""cg"".u8 datum, [%1];" "    cvt.u16.u8 %0, datum;" "}" : "=h"(retval) : "l"(ptr)); return (unsigned char) retval; }
    template<> __attribute__((device)) __inline__ __attribute__((always_inline)) uint4 ThreadLoad<LOAD_CS, uint4 const *>(uint4 const *ptr) { uint4 retval; asm volatile ("ld.""cs"".v4.u32 {%0, %1, %2, %3}, [%4];" : "=r"(retval.x), "=r"(retval.y), "=r"(retval.z), "=r"(retval.w) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) ulonglong2 ThreadLoad<LOAD_CS, ulonglong2 const *>(ulonglong2 const *ptr) { ulonglong2 retval; asm volatile ("ld.""cs"".v2.u64 {%0, %1}, [%2];" : "=l"(retval.x), "=l"(retval.y) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) ushort4 ThreadLoad<LOAD_CS, ushort4 const *>(ushort4 const *ptr) { ushort4 retval; asm volatile ("ld.""cs"".v4.u16 {%0, %1, %2, %3}, [%4];" : "=h"(retval.x), "=h"(retval.y), "=h"(retval.z), "=h"(retval.w) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) uint2 ThreadLoad<LOAD_CS, uint2 const *>(uint2 const *ptr) { uint2 retval; asm volatile ("ld.""cs"".v2.u32 {%0, %1}, [%2];" : "=r"(retval.x), "=r"(retval.y) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long ThreadLoad<LOAD_CS, unsigned long long const *>(unsigned long long const *ptr) { unsigned long long retval; asm volatile ("ld.""cs"".u64 %0, [%1];" : "=l"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int ThreadLoad<LOAD_CS, unsigned int const *>(unsigned int const *ptr) { unsigned int retval; asm volatile ("ld.""cs"".u32 %0, [%1];" : "=r"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned short ThreadLoad<LOAD_CS, unsigned short const *>(unsigned short const *ptr) { unsigned short retval; asm volatile ("ld.""cs"".u16 %0, [%1];" : "=h"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned char ThreadLoad<LOAD_CS, unsigned char const *>(unsigned char const *ptr) { unsigned short retval; asm volatile ( "{" "   .reg .u8 datum;" "    ld.""cs"".u8 datum, [%1];" "    cvt.u16.u8 %0, datum;" "}" : "=h"(retval) : "l"(ptr)); return (unsigned char) retval; }
    template<> __attribute__((device)) __inline__ __attribute__((always_inline)) uint4 ThreadLoad<LOAD_CV, uint4 const *>(uint4 const *ptr) { uint4 retval; asm volatile ("ld.""cv"".v4.u32 {%0, %1, %2, %3}, [%4];" : "=r"(retval.x), "=r"(retval.y), "=r"(retval.z), "=r"(retval.w) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) ulonglong2 ThreadLoad<LOAD_CV, ulonglong2 const *>(ulonglong2 const *ptr) { ulonglong2 retval; asm volatile ("ld.""cv"".v2.u64 {%0, %1}, [%2];" : "=l"(retval.x), "=l"(retval.y) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) ushort4 ThreadLoad<LOAD_CV, ushort4 const *>(ushort4 const *ptr) { ushort4 retval; asm volatile ("ld.""cv"".v4.u16 {%0, %1, %2, %3}, [%4];" : "=h"(retval.x), "=h"(retval.y), "=h"(retval.z), "=h"(retval.w) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) uint2 ThreadLoad<LOAD_CV, uint2 const *>(uint2 const *ptr) { uint2 retval; asm volatile ("ld.""cv"".v2.u32 {%0, %1}, [%2];" : "=r"(retval.x), "=r"(retval.y) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long ThreadLoad<LOAD_CV, unsigned long long const *>(unsigned long long const *ptr) { unsigned long long retval; asm volatile ("ld.""cv"".u64 %0, [%1];" : "=l"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int ThreadLoad<LOAD_CV, unsigned int const *>(unsigned int const *ptr) { unsigned int retval; asm volatile ("ld.""cv"".u32 %0, [%1];" : "=r"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned short ThreadLoad<LOAD_CV, unsigned short const *>(unsigned short const *ptr) { unsigned short retval; asm volatile ("ld.""cv"".u16 %0, [%1];" : "=h"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned char ThreadLoad<LOAD_CV, unsigned char const *>(unsigned char const *ptr) { unsigned short retval; asm volatile ( "{" "   .reg .u8 datum;" "    ld.""cv"".u8 datum, [%1];" "    cvt.u16.u8 %0, datum;" "}" : "=h"(retval) : "l"(ptr)); return (unsigned char) retval; }
# 292 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_load.cuh" 3
    template<> __attribute__((device)) __inline__ __attribute__((always_inline)) uint4 ThreadLoad<LOAD_LDG, uint4 const *>(uint4 const *ptr) { uint4 retval; asm volatile ("ld.""global.nc"".v4.u32 {%0, %1, %2, %3}, [%4];" : "=r"(retval.x), "=r"(retval.y), "=r"(retval.z), "=r"(retval.w) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) ulonglong2 ThreadLoad<LOAD_LDG, ulonglong2 const *>(ulonglong2 const *ptr) { ulonglong2 retval; asm volatile ("ld.""global.nc"".v2.u64 {%0, %1}, [%2];" : "=l"(retval.x), "=l"(retval.y) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) ushort4 ThreadLoad<LOAD_LDG, ushort4 const *>(ushort4 const *ptr) { ushort4 retval; asm volatile ("ld.""global.nc"".v4.u16 {%0, %1, %2, %3}, [%4];" : "=h"(retval.x), "=h"(retval.y), "=h"(retval.z), "=h"(retval.w) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) uint2 ThreadLoad<LOAD_LDG, uint2 const *>(uint2 const *ptr) { uint2 retval; asm volatile ("ld.""global.nc"".v2.u32 {%0, %1}, [%2];" : "=r"(retval.x), "=r"(retval.y) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long ThreadLoad<LOAD_LDG, unsigned long long const *>(unsigned long long const *ptr) { unsigned long long retval; asm volatile ("ld.""global.nc"".u64 %0, [%1];" : "=l"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int ThreadLoad<LOAD_LDG, unsigned int const *>(unsigned int const *ptr) { unsigned int retval; asm volatile ("ld.""global.nc"".u32 %0, [%1];" : "=r"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned short ThreadLoad<LOAD_LDG, unsigned short const *>(unsigned short const *ptr) { unsigned short retval; asm volatile ("ld.""global.nc"".u16 %0, [%1];" : "=h"(retval) : "l"(ptr)); return retval; } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned char ThreadLoad<LOAD_LDG, unsigned char const *>(unsigned char const *ptr) { unsigned short retval; asm volatile ( "{" "   .reg .u8 datum;" "    ld.""global.nc"".u8 datum, [%1];" "    cvt.u16.u8 %0, datum;" "}" : "=h"(retval) : "l"(ptr)); return (unsigned char) retval; }
# 311 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_load.cuh" 3
template <typename InputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) typename std::iterator_traits<InputIteratorT>::value_type ThreadLoad(
    InputIteratorT itr,
    Int2Type<LOAD_DEFAULT> ,
    Int2Type<false> )
{
    return *itr;
}





template <typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadLoad(
    T *ptr,
    Int2Type<LOAD_DEFAULT> ,
    Int2Type<true> )
{
    return *ptr;
}





template <typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadLoadVolatilePointer(
    T *ptr,
    Int2Type<true> )
{
    T retval = *reinterpret_cast<volatile T*>(ptr);
    return retval;
}





template <typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadLoadVolatilePointer(
    T *ptr,
    Int2Type<false> )
{
    typedef typename UnitWord<T>::VolatileWord VolatileWord;

    const int VOLATILE_MULTIPLE = sizeof(T) / sizeof(VolatileWord);
# 368 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_load.cuh" 3
    T retval;
    VolatileWord *words = reinterpret_cast<VolatileWord*>(&retval);
    IterateThreadLoad<0, VOLATILE_MULTIPLE>::Dereference(
        reinterpret_cast<volatile VolatileWord*>(ptr),
        words);
    return retval;
}





template <typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadLoad(
    T *ptr,
    Int2Type<LOAD_VOLATILE> ,
    Int2Type<true> )
{

    return ThreadLoadVolatilePointer(ptr, Int2Type<Traits<T>::PRIMITIVE>());
}





template <typename T, int MODIFIER>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadLoad(
    T const *ptr,
    Int2Type<MODIFIER> ,
    Int2Type<true> )
{
    typedef typename UnitWord<T>::DeviceWord DeviceWord;

    const int DEVICE_MULTIPLE = sizeof(T) / sizeof(DeviceWord);

    DeviceWord words[DEVICE_MULTIPLE];

    IterateThreadLoad<0, DEVICE_MULTIPLE>::template Load<CacheLoadModifier(MODIFIER)>(
        reinterpret_cast<DeviceWord*>(const_cast<T*>(ptr)),
        words);

    return *reinterpret_cast<T*>(words);
}





template <
    CacheLoadModifier MODIFIER,
    typename InputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) typename std::iterator_traits<InputIteratorT>::value_type ThreadLoad(InputIteratorT itr)
{

    return ThreadLoad(
        itr,
        Int2Type<MODIFIER>(),
        Int2Type<IsPointer<InputIteratorT>::VALUE>());
}
# 437 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_load.cuh" 3
}
# 39 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/single_pass_scan_operators.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_store.cuh" 1 3
# 46 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_store.cuh" 3
namespace cub {
# 61 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_store.cuh" 3
enum CacheStoreModifier
{
    STORE_DEFAULT,
    STORE_WB,
    STORE_CG,
    STORE_CS,
    STORE_WT,
    STORE_VOLATILE,
};
# 110 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_store.cuh" 3
template <
    CacheStoreModifier MODIFIER,
    typename OutputIteratorT,
    typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore(OutputIteratorT itr, T val);
# 124 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_store.cuh" 3
template <int COUNT, int MAX>
struct IterateThreadStore
{
    template <CacheStoreModifier MODIFIER, typename T>
    static __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(T *ptr, T *vals)
    {
        ThreadStore<MODIFIER>(ptr + COUNT, vals[COUNT]);
        IterateThreadStore<COUNT + 1, MAX>::template Store<MODIFIER>(ptr, vals);
    }

    template <typename OutputIteratorT, typename T>
    static __attribute__((device)) __inline__ __attribute__((always_inline)) void Dereference(OutputIteratorT ptr, T *vals)
    {
        ptr[COUNT] = vals[COUNT];
        IterateThreadStore<COUNT + 1, MAX>::Dereference(ptr, vals);
    }

};


template <int MAX>
struct IterateThreadStore<MAX, MAX>
{
    template <CacheStoreModifier MODIFIER, typename T>
    static __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(T * , T * ) {}

    template <typename OutputIteratorT, typename T>
    static __attribute__((device)) __inline__ __attribute__((always_inline)) void Dereference(OutputIteratorT , T * ) {}
};
# 267 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_store.cuh" 3
    template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WB, uint4*, uint4>(uint4* ptr, uint4 val) { asm volatile ("st.""wb"".v4.u32 [%0], {%1, %2, %3, %4};" : : "l"(ptr), "r"(val.x), "r"(val.y), "r"(val.z), "r"(val.w)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WB, ulonglong2*, ulonglong2>(ulonglong2* ptr, ulonglong2 val) { asm volatile ("st.""wb"".v2.u64 [%0], {%1, %2};" : : "l"(ptr), "l"(val.x), "l"(val.y)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WB, ushort4*, ushort4>(ushort4* ptr, ushort4 val) { asm volatile ("st.""wb"".v4.u16 [%0], {%1, %2, %3, %4};" : : "l"(ptr), "h"(val.x), "h"(val.y), "h"(val.z), "h"(val.w)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WB, uint2*, uint2>(uint2* ptr, uint2 val) { asm volatile ("st.""wb"".v2.u32 [%0], {%1, %2};" : : "l"(ptr), "r"(val.x), "r"(val.y)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WB, unsigned long long*, unsigned long long>(unsigned long long* ptr, unsigned long long val) { asm volatile ("st.""wb"".u64 [%0], %1;" : : "l"(ptr), "l"(val)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WB, unsigned int*, unsigned int>(unsigned int* ptr, unsigned int val) { asm volatile ("st.""wb"".u32 [%0], %1;" : : "l"(ptr), "r"(val)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WB, unsigned short*, unsigned short>(unsigned short* ptr, unsigned short val) { asm volatile ("st.""wb"".u16 [%0], %1;" : : "l"(ptr), "h"(val)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WB, unsigned char*, unsigned char>(unsigned char* ptr, unsigned char val) { asm volatile ( "{" "   .reg .u8 datum;" "   cvt.u8.u16 datum, %1;" "   st.""wb"".u8 [%0], datum;" "}" : : "l"(ptr), "h"((unsigned short) val)); }
    template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CG, uint4*, uint4>(uint4* ptr, uint4 val) { asm volatile ("st.""cg"".v4.u32 [%0], {%1, %2, %3, %4};" : : "l"(ptr), "r"(val.x), "r"(val.y), "r"(val.z), "r"(val.w)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CG, ulonglong2*, ulonglong2>(ulonglong2* ptr, ulonglong2 val) { asm volatile ("st.""cg"".v2.u64 [%0], {%1, %2};" : : "l"(ptr), "l"(val.x), "l"(val.y)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CG, ushort4*, ushort4>(ushort4* ptr, ushort4 val) { asm volatile ("st.""cg"".v4.u16 [%0], {%1, %2, %3, %4};" : : "l"(ptr), "h"(val.x), "h"(val.y), "h"(val.z), "h"(val.w)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CG, uint2*, uint2>(uint2* ptr, uint2 val) { asm volatile ("st.""cg"".v2.u32 [%0], {%1, %2};" : : "l"(ptr), "r"(val.x), "r"(val.y)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CG, unsigned long long*, unsigned long long>(unsigned long long* ptr, unsigned long long val) { asm volatile ("st.""cg"".u64 [%0], %1;" : : "l"(ptr), "l"(val)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CG, unsigned int*, unsigned int>(unsigned int* ptr, unsigned int val) { asm volatile ("st.""cg"".u32 [%0], %1;" : : "l"(ptr), "r"(val)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CG, unsigned short*, unsigned short>(unsigned short* ptr, unsigned short val) { asm volatile ("st.""cg"".u16 [%0], %1;" : : "l"(ptr), "h"(val)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CG, unsigned char*, unsigned char>(unsigned char* ptr, unsigned char val) { asm volatile ( "{" "   .reg .u8 datum;" "   cvt.u8.u16 datum, %1;" "   st.""cg"".u8 [%0], datum;" "}" : : "l"(ptr), "h"((unsigned short) val)); }
    template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CS, uint4*, uint4>(uint4* ptr, uint4 val) { asm volatile ("st.""cs"".v4.u32 [%0], {%1, %2, %3, %4};" : : "l"(ptr), "r"(val.x), "r"(val.y), "r"(val.z), "r"(val.w)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CS, ulonglong2*, ulonglong2>(ulonglong2* ptr, ulonglong2 val) { asm volatile ("st.""cs"".v2.u64 [%0], {%1, %2};" : : "l"(ptr), "l"(val.x), "l"(val.y)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CS, ushort4*, ushort4>(ushort4* ptr, ushort4 val) { asm volatile ("st.""cs"".v4.u16 [%0], {%1, %2, %3, %4};" : : "l"(ptr), "h"(val.x), "h"(val.y), "h"(val.z), "h"(val.w)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CS, uint2*, uint2>(uint2* ptr, uint2 val) { asm volatile ("st.""cs"".v2.u32 [%0], {%1, %2};" : : "l"(ptr), "r"(val.x), "r"(val.y)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CS, unsigned long long*, unsigned long long>(unsigned long long* ptr, unsigned long long val) { asm volatile ("st.""cs"".u64 [%0], %1;" : : "l"(ptr), "l"(val)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CS, unsigned int*, unsigned int>(unsigned int* ptr, unsigned int val) { asm volatile ("st.""cs"".u32 [%0], %1;" : : "l"(ptr), "r"(val)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CS, unsigned short*, unsigned short>(unsigned short* ptr, unsigned short val) { asm volatile ("st.""cs"".u16 [%0], %1;" : : "l"(ptr), "h"(val)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_CS, unsigned char*, unsigned char>(unsigned char* ptr, unsigned char val) { asm volatile ( "{" "   .reg .u8 datum;" "   cvt.u8.u16 datum, %1;" "   st.""cs"".u8 [%0], datum;" "}" : : "l"(ptr), "h"((unsigned short) val)); }
    template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WT, uint4*, uint4>(uint4* ptr, uint4 val) { asm volatile ("st.""wt"".v4.u32 [%0], {%1, %2, %3, %4};" : : "l"(ptr), "r"(val.x), "r"(val.y), "r"(val.z), "r"(val.w)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WT, ulonglong2*, ulonglong2>(ulonglong2* ptr, ulonglong2 val) { asm volatile ("st.""wt"".v2.u64 [%0], {%1, %2};" : : "l"(ptr), "l"(val.x), "l"(val.y)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WT, ushort4*, ushort4>(ushort4* ptr, ushort4 val) { asm volatile ("st.""wt"".v4.u16 [%0], {%1, %2, %3, %4};" : : "l"(ptr), "h"(val.x), "h"(val.y), "h"(val.z), "h"(val.w)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WT, uint2*, uint2>(uint2* ptr, uint2 val) { asm volatile ("st.""wt"".v2.u32 [%0], {%1, %2};" : : "l"(ptr), "r"(val.x), "r"(val.y)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WT, unsigned long long*, unsigned long long>(unsigned long long* ptr, unsigned long long val) { asm volatile ("st.""wt"".u64 [%0], %1;" : : "l"(ptr), "l"(val)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WT, unsigned int*, unsigned int>(unsigned int* ptr, unsigned int val) { asm volatile ("st.""wt"".u32 [%0], %1;" : : "l"(ptr), "r"(val)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WT, unsigned short*, unsigned short>(unsigned short* ptr, unsigned short val) { asm volatile ("st.""wt"".u16 [%0], %1;" : : "l"(ptr), "h"(val)); } template<> __attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore<STORE_WT, unsigned char*, unsigned char>(unsigned char* ptr, unsigned char val) { asm volatile ( "{" "   .reg .u8 datum;" "   cvt.u8.u16 datum, %1;" "   st.""wt"".u8 [%0], datum;" "}" : : "l"(ptr), "h"((unsigned short) val)); }
# 291 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_store.cuh" 3
template <typename OutputIteratorT, typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore(
    OutputIteratorT itr,
    T val,
    Int2Type<STORE_DEFAULT> ,
    Int2Type<false> )
{
    *itr = val;
}





template <typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore(
    T *ptr,
    T val,
    Int2Type<STORE_DEFAULT> ,
    Int2Type<true> )
{
    *ptr = val;
}





template <typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStoreVolatilePtr(
    T *ptr,
    T val,
    Int2Type<true> )
{
    *reinterpret_cast<volatile T*>(ptr) = val;
}





template <typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStoreVolatilePtr(
    T *ptr,
    T val,
    Int2Type<false> )
{

    typedef typename UnitWord<T>::VolatileWord VolatileWord;
    typedef typename UnitWord<T>::ShuffleWord ShuffleWord;

    const int VOLATILE_MULTIPLE = sizeof(T) / sizeof(VolatileWord);
    const int SHUFFLE_MULTIPLE = sizeof(T) / sizeof(ShuffleWord);

    VolatileWord words[VOLATILE_MULTIPLE];

#pragma unroll
 for (int i = 0; i < SHUFFLE_MULTIPLE; ++i)
        reinterpret_cast<ShuffleWord*>(words)[i] = reinterpret_cast<ShuffleWord*>(&val)[i];

    IterateThreadStore<0, VOLATILE_MULTIPLE>::template Dereference(
        reinterpret_cast<volatile VolatileWord*>(ptr),
        words);
}





template <typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore(
    T *ptr,
    T val,
    Int2Type<STORE_VOLATILE> ,
    Int2Type<true> )
{
    ThreadStoreVolatilePtr(ptr, val, Int2Type<Traits<T>::PRIMITIVE>());
}





template <typename T, int MODIFIER>
__attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore(
    T *ptr,
    T val,
    Int2Type<MODIFIER> ,
    Int2Type<true> )
{

    typedef typename UnitWord<T>::DeviceWord DeviceWord;
    typedef typename UnitWord<T>::ShuffleWord ShuffleWord;

    const int DEVICE_MULTIPLE = sizeof(T) / sizeof(DeviceWord);
    const int SHUFFLE_MULTIPLE = sizeof(T) / sizeof(ShuffleWord);

    DeviceWord words[DEVICE_MULTIPLE];

#pragma unroll
 for (int i = 0; i < SHUFFLE_MULTIPLE; ++i)
        reinterpret_cast<ShuffleWord*>(words)[i] = reinterpret_cast<ShuffleWord*>(&val)[i];

    IterateThreadStore<0, DEVICE_MULTIPLE>::template Store<CacheStoreModifier(MODIFIER)>(
        reinterpret_cast<DeviceWord*>(ptr),
        words);
}





template <CacheStoreModifier MODIFIER, typename OutputIteratorT, typename T>
__attribute__((device)) __inline__ __attribute__((always_inline)) void ThreadStore(OutputIteratorT itr, T val)
{
    ThreadStore(
        itr,
        val,
        Int2Type<MODIFIER>(),
        Int2Type<IsPointer<OutputIteratorT>::VALUE>());
}
# 421 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/thread_store.cuh" 3
}
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/single_pass_scan_operators.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 1 3
# 36 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_shfl.cuh" 1 3
# 36 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_shfl.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/../../thread/thread_operators.cuh" 1 3
# 48 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/../../thread/thread_operators.cuh" 3
namespace cub {
# 59 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/../../thread/thread_operators.cuh" 3
struct Equality
{

    template <typename T>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) bool operator()(const T &a, const T &b) const
    {
        return a == b;
    }
};





struct Inequality
{

    template <typename T>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) bool operator()(const T &a, const T &b) const
    {
        return a != b;
    }
};





template <typename EqualityOp>
struct InequalityWrapper
{

    EqualityOp op;


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    InequalityWrapper(EqualityOp op) : op(op) {}


    template <typename T>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) bool operator()(const T &a, const T &b)
    {
        return !op(a, b);
    }
};





struct Sum
{

    template <typename T>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) T operator()(const T &a, const T &b) const
    {
        return a + b;
    }
};





struct Max
{

    template <typename T>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) T operator()(const T &a, const T &b) const
    {
        return (((b) > (a)) ? (b) : (a));
    }
};





struct ArgMax
{

    template <typename T, typename OffsetT>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) KeyValuePair<OffsetT, T> operator()(
        const KeyValuePair<OffsetT, T> &a,
        const KeyValuePair<OffsetT, T> &b) const
    {



        if ((b.value > a.value) || ((a.value == b.value) && (b.key < a.key)))
            return b;
        return a;
    }
};





struct Min
{

    template <typename T>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) T operator()(const T &a, const T &b) const
    {
        return (((b) < (a)) ? (b) : (a));
    }
};





struct ArgMin
{

    template <typename T, typename OffsetT>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) KeyValuePair<OffsetT, T> operator()(
        const KeyValuePair<OffsetT, T> &a,
        const KeyValuePair<OffsetT, T> &b) const
    {



        if ((b.value < a.value) || ((a.value == b.value) && (b.key < a.key)))
            return b;
        return a;
    }
};





template <typename B>
struct CastOp
{

    template <typename A>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) B operator()(const A &a) const
    {
        return (B) a;
    }
};





template <typename ScanOp>
class SwizzleScanOp
{
private:


    ScanOp scan_op;

public:


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    SwizzleScanOp(ScanOp scan_op) : scan_op(scan_op) {}


    template <typename T>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    T operator()(const T &a, const T &b)
    {
      T _a(a);
      T _b(b);

      return scan_op(_b, _a);
    }
};
# 251 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/../../thread/thread_operators.cuh" 3
template <typename ReductionOpT>
struct ReduceBySegmentOp
{

    ReductionOpT op;


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) ReduceBySegmentOp() {}


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) ReduceBySegmentOp(ReductionOpT op) : op(op) {}


    template <typename KeyValuePairT>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) KeyValuePairT operator()(
        const KeyValuePairT &first,
        const KeyValuePairT &second)
    {
        KeyValuePairT retval;
        retval.key = first.key + second.key;
        retval.value = (second.key) ?
                second.value :
                op(first.value, second.value);
        return retval;
    }
};



template <typename ReductionOpT>
struct ReduceByKeyOp
{

    ReductionOpT op;


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) ReduceByKeyOp() {}


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) ReduceByKeyOp(ReductionOpT op) : op(op) {}


    template <typename KeyValuePairT>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) KeyValuePairT operator()(
        const KeyValuePairT &first,
        const KeyValuePairT &second)
    {
        KeyValuePairT retval = second;

        if (first.key == second.key)
            retval.value = op(first.value, retval.value);

        return retval;
    }
};
# 316 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/../../thread/thread_operators.cuh" 3
}
# 37 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_shfl.cuh" 2 3
# 46 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_shfl.cuh" 3
namespace cub {







template <
    typename T,
    int LOGICAL_WARP_THREADS,
    int PTX_ARCH>
struct WarpReduceShfl
{




    enum
    {

        IS_ARCH_WARP = (LOGICAL_WARP_THREADS == (1 << (5))),


        STEPS = Log2<LOGICAL_WARP_THREADS>::VALUE,


        LOGICAL_WARPS = (1 << (5)) / LOGICAL_WARP_THREADS,


        SHFL_C = ((1 << (5)) - LOGICAL_WARP_THREADS) << 8

    };

    template <typename S>
    struct IsInteger
    {
        enum {

            IS_SMALL_UNSIGNED = (Traits<S>::CATEGORY == UNSIGNED_INTEGER) && (sizeof(S) <= sizeof(unsigned int))
        };
    };



    typedef NullType TempStorage;







    unsigned int lane_id;


    unsigned int warp_id;


    unsigned int member_mask;







    __attribute__((device)) __inline__ __attribute__((always_inline)) WarpReduceShfl(
        TempStorage & )
    {
        lane_id = LaneId();
        warp_id = 0;
        member_mask = 0xffffffffu >> ((1 << (5)) - LOGICAL_WARP_THREADS);

        if (!IS_ARCH_WARP)
        {
            warp_id = lane_id / LOGICAL_WARP_THREADS;
            lane_id = lane_id % LOGICAL_WARP_THREADS;
            member_mask = member_mask << (warp_id * LOGICAL_WARP_THREADS);
        }
    }







    __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int ReduceStep(
        unsigned int input,
        cub::Sum ,
        int last_lane,
        int offset)
    {
        unsigned int output;
        int shfl_c = last_lane | SHFL_C;



        asm volatile(
            "{"
            "  .reg .u32 r0;"
            "  .reg .pred p;"
            "  shfl.sync.down.b32 r0|p, %1, %2, %3, %5;"
            "  @p add.u32 r0, r0, %4;"
            "  mov.u32 %0, r0;"
            "}"
            : "=r"(output) : "r"(input), "r"(offset), "r"(shfl_c), "r"(input), "r"(member_mask));
# 166 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_shfl.cuh" 3
        return output;
    }



    __attribute__((device)) __inline__ __attribute__((always_inline)) float ReduceStep(
        float input,
        cub::Sum ,
        int last_lane,
        int offset)
    {
        float output;
        int shfl_c = last_lane | SHFL_C;



        asm volatile(
            "{"
            "  .reg .f32 r0;"
            "  .reg .pred p;"
            "  shfl.sync.down.b32 r0|p, %1, %2, %3, %5;"
            "  @p add.f32 r0, r0, %4;"
            "  mov.f32 %0, r0;"
            "}"
            : "=f"(output) : "f"(input), "r"(offset), "r"(shfl_c), "f"(input), "r"(member_mask));
# 203 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_shfl.cuh" 3
        return output;
    }



    __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long ReduceStep(
        unsigned long long input,
        cub::Sum ,
        int last_lane,
        int offset)
    {
        unsigned long long output;
        int shfl_c = last_lane | SHFL_C;


        asm volatile(
            "{"
            "  .reg .u32 lo;"
            "  .reg .u32 hi;"
            "  .reg .pred p;"
            "  mov.b64 {lo, hi}, %1;"
            "  shfl.sync.down.b32 lo|p, lo, %2, %3, %4;"
            "  shfl.sync.down.b32 hi|p, hi, %2, %3, %4;"
            "  mov.b64 %0, {lo, hi};"
            "  @p add.u64 %0, %0, %1;"
            "}"
            : "=l"(output) : "l"(input), "r"(offset), "r"(shfl_c), "r"(member_mask));
# 245 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_shfl.cuh" 3
        return output;
    }



    __attribute__((device)) __inline__ __attribute__((always_inline)) long long ReduceStep(
        long long input,
        cub::Sum ,
        int last_lane,
        int offset)
    {
        long long output;
        int shfl_c = last_lane | SHFL_C;



        asm volatile(
            "{"
            "  .reg .u32 lo;"
            "  .reg .u32 hi;"
            "  .reg .pred p;"
            "  mov.b64 {lo, hi}, %1;"
            "  shfl.sync.down.b32 lo|p, lo, %2, %3, %4;"
            "  shfl.sync.down.b32 hi|p, hi, %2, %3, %4;"
            "  mov.b64 %0, {lo, hi};"
            "  @p add.s64 %0, %0, %1;"
            "}"
            : "=l"(output) : "l"(input), "r"(offset), "r"(shfl_c), "r"(member_mask));
# 288 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_shfl.cuh" 3
        return output;
    }



    __attribute__((device)) __inline__ __attribute__((always_inline)) double ReduceStep(
        double input,
        cub::Sum ,
        int last_lane,
        int offset)
    {
        double output;
        int shfl_c = last_lane | SHFL_C;



        asm volatile(
            "{"
            "  .reg .u32 lo;"
            "  .reg .u32 hi;"
            "  .reg .pred p;"
            "  .reg .f64 r0;"
            "  mov.b64 %0, %1;"
            "  mov.b64 {lo, hi}, %1;"
            "  shfl.sync.down.b32 lo|p, lo, %2, %3, %4;"
            "  shfl.sync.down.b32 hi|p, hi, %2, %3, %4;"
            "  mov.b64 r0, {lo, hi};"
            "  @p add.f64 %0, %0, r0;"
            "}"
            : "=d"(output) : "d"(input), "r"(offset), "r"(shfl_c), "r"(member_mask));
# 335 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_shfl.cuh" 3
        return output;
    }



    template <typename ValueT, typename KeyT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) KeyValuePair<KeyT, ValueT> ReduceStep(
        KeyValuePair<KeyT, ValueT> input,
        SwizzleScanOp<ReduceByKeyOp<cub::Sum> > ,
        int last_lane,
        int offset)
    {
        KeyValuePair<KeyT, ValueT> output;

        KeyT other_key = ShuffleDown<LOGICAL_WARP_THREADS>(input.key, offset, last_lane, member_mask);

        output.key = input.key;
        output.value = ReduceStep(
            input.value,
            cub::Sum(),
            last_lane,
            offset,
            Int2Type<IsInteger<ValueT>::IS_SMALL_UNSIGNED>());

        if (input.key != other_key)
            output.value = input.value;

        return output;
    }




    template <typename ValueT, typename OffsetT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) KeyValuePair<OffsetT, ValueT> ReduceStep(
        KeyValuePair<OffsetT, ValueT> input,
        SwizzleScanOp<ReduceBySegmentOp<cub::Sum> > ,
        int last_lane,
        int offset)
    {
        KeyValuePair<OffsetT, ValueT> output;

        output.value = ReduceStep(input.value, cub::Sum(), last_lane, offset, Int2Type<IsInteger<ValueT>::IS_SMALL_UNSIGNED>());
        output.key = ReduceStep(input.key, cub::Sum(), last_lane, offset, Int2Type<IsInteger<OffsetT>::IS_SMALL_UNSIGNED>());

        if (input.key > 0)
            output.value = input.value;

        return output;
    }



    template <typename _T, typename ReductionOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) _T ReduceStep(
        _T input,
        ReductionOp reduction_op,
        int last_lane,
        int offset)
    {
        _T output = input;

        _T temp = ShuffleDown<LOGICAL_WARP_THREADS>(output, offset, last_lane, member_mask);


        if (offset + lane_id <= last_lane)
            output = reduction_op(input, temp);

        return output;
    }



    template <typename _T, typename ReductionOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) _T ReduceStep(
        _T input,
        ReductionOp reduction_op,
        int last_lane,
        int offset,
        Int2Type<true> )
    {
        return ReduceStep(input, reduction_op, last_lane, offset);
    }



    template <typename _T, typename ReductionOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) _T ReduceStep(
        _T input,
        ReductionOp reduction_op,
        int last_lane,
        int offset,
        Int2Type<false> )
    {
        return ReduceStep(input, reduction_op, last_lane, offset);
    }






    template <typename ReductionOp, int STEP>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ReduceStep(
        T& input,
        ReductionOp reduction_op,
        int last_lane,
        Int2Type<STEP> )
    {
        input = ReduceStep(input, reduction_op, last_lane, 1 << STEP, Int2Type<IsInteger<T>::IS_SMALL_UNSIGNED>());

        ReduceStep(input, reduction_op, last_lane, Int2Type<STEP + 1>());
    }

    template <typename ReductionOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ReduceStep(
        T& ,
        ReductionOp ,
        int ,
        Int2Type<STEPS> )
    {}







    template <
        bool ALL_LANES_VALID,
        typename ReductionOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T Reduce(
        T input,
        int valid_items,
        ReductionOp reduction_op)
    {
        int last_lane = (ALL_LANES_VALID) ?
                            LOGICAL_WARP_THREADS - 1 :
                            valid_items - 1;

        T output = input;
# 485 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_shfl.cuh" 3
        ReduceStep(output, reduction_op, last_lane, Int2Type<0>());

        return output;
    }



    template <
        bool HEAD_SEGMENTED,
        typename FlagT,
        typename ReductionOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T SegmentedReduce(
        T input,
        FlagT flag,
        ReductionOp reduction_op)
    {

        int warp_flags = WARP_BALLOT(flag, member_mask);


        if (HEAD_SEGMENTED)
            warp_flags >>= 1;


        warp_flags &= LaneMaskGe();


        if (!IS_ARCH_WARP)
        {
            warp_flags = (warp_flags & member_mask) >> (warp_id * LOGICAL_WARP_THREADS);
        }


        warp_flags |= 1u << (LOGICAL_WARP_THREADS - 1);


        int last_lane = __clz(__brev(warp_flags));

        T output = input;
# 533 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_shfl.cuh" 3
        ReduceStep(output, reduction_op, last_lane, Int2Type<0>());

        return output;
    }
};


}
# 37 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_smem.cuh" 1 3
# 46 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_smem.cuh" 3
namespace cub {




template <
    typename T,
    int LOGICAL_WARP_THREADS,
    int PTX_ARCH>
struct WarpReduceSmem
{




    enum
    {

        IS_ARCH_WARP = (LOGICAL_WARP_THREADS == (1 << (5))),


        IS_POW_OF_TWO = PowerOfTwo<LOGICAL_WARP_THREADS>::VALUE,


        STEPS = Log2<LOGICAL_WARP_THREADS>::VALUE,


        HALF_WARP_THREADS = 1 << (STEPS - 1),


        WARP_SMEM_ELEMENTS = LOGICAL_WARP_THREADS + HALF_WARP_THREADS,


        UNSET = 0x0,
        SET = 0x1,
        SEEN = 0x2,
    };


    typedef unsigned char SmemFlag;


    struct _TempStorage
    {
        T reduce[WARP_SMEM_ELEMENTS];
        SmemFlag flags[WARP_SMEM_ELEMENTS];
    };


    struct TempStorage : Uninitialized<_TempStorage> {};






    _TempStorage &temp_storage;
    unsigned int lane_id;
    unsigned int member_mask;







    __attribute__((device)) __inline__ __attribute__((always_inline)) WarpReduceSmem(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias()),

        lane_id(IS_ARCH_WARP ?
            LaneId() :
            LaneId() % LOGICAL_WARP_THREADS),

        member_mask((0xffffffff >> (32 - LOGICAL_WARP_THREADS)) << ((IS_ARCH_WARP || !IS_POW_OF_TWO ) ?
            0 :
            ((LaneId() / LOGICAL_WARP_THREADS) * LOGICAL_WARP_THREADS)))
    {}
# 137 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_smem.cuh" 3
    template <
        bool ALL_LANES_VALID,
        typename ReductionOp,
        int STEP>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T ReduceStep(
        T input,
        int valid_items,
        ReductionOp reduction_op,
        Int2Type<STEP> )
    {
        const int OFFSET = 1 << STEP;


        ThreadStore<STORE_VOLATILE>(&temp_storage.reduce[lane_id], input);

        WARP_SYNC(member_mask);


        if ((ALL_LANES_VALID && IS_POW_OF_TWO) || ((lane_id + OFFSET) < valid_items))
        {
            T peer_addend = ThreadLoad<LOAD_VOLATILE>(&temp_storage.reduce[lane_id + OFFSET]);
            input = reduction_op(input, peer_addend);
        }

        WARP_SYNC(member_mask);

        return ReduceStep<ALL_LANES_VALID>(input, valid_items, reduction_op, Int2Type<STEP + 1>());
    }





    template <
        bool ALL_LANES_VALID,
        typename ReductionOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T ReduceStep(
        T input,
        int valid_items,
        ReductionOp ,
        Int2Type<STEPS> )
    {
        return input;
    }
# 191 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_smem.cuh" 3
    template <
        bool HEAD_SEGMENTED,
        typename FlagT,
        typename ReductionOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T SegmentedReduce(
        T input,
        FlagT flag,
        ReductionOp reduction_op,
        Int2Type<true> )
    {

        int warp_flags = WARP_BALLOT(flag, member_mask);

        if (!HEAD_SEGMENTED)
            warp_flags <<= 1;


        warp_flags &= LaneMaskGt();


        if (!IS_ARCH_WARP)
        {
            warp_flags >>= (LaneId() / LOGICAL_WARP_THREADS) * LOGICAL_WARP_THREADS;
        }


        int next_flag = __clz(__brev(warp_flags));


        if (LOGICAL_WARP_THREADS != 32)
            next_flag = (((LOGICAL_WARP_THREADS) < (next_flag)) ? (LOGICAL_WARP_THREADS) : (next_flag));

#pragma unroll
 for (int STEP = 0; STEP < STEPS; STEP++)
        {
            const int OFFSET = 1 << STEP;


            ThreadStore<STORE_VOLATILE>(&temp_storage.reduce[lane_id], input);

            WARP_SYNC(member_mask);


            if (OFFSET + lane_id < next_flag)
            {
                T peer_addend = ThreadLoad<LOAD_VOLATILE>(&temp_storage.reduce[lane_id + OFFSET]);
                input = reduction_op(input, peer_addend);
            }

            WARP_SYNC(member_mask);
        }

        return input;
    }





    template <
        bool HEAD_SEGMENTED,
        typename FlagT,
        typename ReductionOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T SegmentedReduce(
        T input,
        FlagT flag,
        ReductionOp reduction_op,
        Int2Type<false> )
    {
        enum
        {
            UNSET = 0x0,
            SET = 0x1,
            SEEN = 0x2,
        };


        volatile SmemFlag *flag_storage = temp_storage.flags;

        SmemFlag flag_status = (flag) ? SET : UNSET;

        for (int STEP = 0; STEP < STEPS; STEP++)
        {
            const int OFFSET = 1 << STEP;


            ThreadStore<STORE_VOLATILE>(&temp_storage.reduce[lane_id], input);

            WARP_SYNC(member_mask);


            T peer_addend = ThreadLoad<LOAD_VOLATILE>(&temp_storage.reduce[lane_id + OFFSET]);

            WARP_SYNC(member_mask);


            flag_storage[lane_id] = flag_status;


            SmemFlag peer_flag_status = flag_storage[lane_id + OFFSET];


            if (lane_id < LOGICAL_WARP_THREADS - OFFSET)
            {
                if (HEAD_SEGMENTED)
                {

                    if ((flag_status & SEEN) == 0)
                    {

                        if (peer_flag_status & SET)
                        {

                            flag_status |= SEEN;
                        }
                        else
                        {

                            input = reduction_op(input, peer_addend);
                        }


                        flag_status |= (peer_flag_status & SEEN);
                    }
                }
                else
                {

                    if (!flag_status)
                    {
                        input = reduction_op(input, peer_addend);
                        flag_status |= peer_flag_status;
                    }

                }
            }
        }

        return input;
    }
# 340 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_reduce_smem.cuh" 3
    template <
        bool ALL_LANES_VALID,
        typename ReductionOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T Reduce(
        T input,
        int valid_items,
        ReductionOp reduction_op)
    {
        return ReduceStep<ALL_LANES_VALID>(input, valid_items, reduction_op, Int2Type<0>());
    }





    template <
        bool HEAD_SEGMENTED,
        typename FlagT,
        typename ReductionOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T SegmentedReduce(
        T input,
        FlagT flag,
        ReductionOp reduction_op)
    {
        return SegmentedReduce<HEAD_SEGMENTED>(input, flag, reduction_op, Int2Type<(PTX_ARCH >= 200)>());
    }


};


}
# 38 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 2 3
# 47 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 3
namespace cub {
# 137 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 3
template <
    typename T,
    int LOGICAL_WARP_THREADS = (1 << (5)),
    int PTX_ARCH = 700>
class WarpReduce
{
private:





    enum
    {

        IS_ARCH_WARP = (LOGICAL_WARP_THREADS == (1 << (5))),


        IS_POW_OF_TWO = PowerOfTwo<LOGICAL_WARP_THREADS>::VALUE,
    };

public:




    typedef typename If<(PTX_ARCH >= 300) && (IS_POW_OF_TWO),
        WarpReduceShfl<T, LOGICAL_WARP_THREADS, PTX_ARCH>,
        WarpReduceSmem<T, LOGICAL_WARP_THREADS, PTX_ARCH> >::Type InternalWarpReduce;




private:


    typedef typename InternalWarpReduce::TempStorage _TempStorage;







    _TempStorage &temp_storage;






public:


    struct TempStorage : Uninitialized<_TempStorage> {};
# 203 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) WarpReduce(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias())
    {}
# 251 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) T Sum(
        T input)
    {
        return InternalWarpReduce(temp_storage).template Reduce<true>(input, LOGICAL_WARP_THREADS, cub::Sum());
    }
# 295 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) T Sum(
        T input,
        int valid_items)
    {

        return InternalWarpReduce(temp_storage).template Reduce<false>(input, valid_items, cub::Sum());
    }
# 342 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 3
    template <
        typename FlagT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T HeadSegmentedSum(
        T input,
        FlagT head_flag)
    {
        return HeadSegmentedReduce(input, head_flag, cub::Sum());
    }
# 389 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 3
    template <
        typename FlagT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T TailSegmentedSum(
        T input,
        FlagT tail_flag)
    {
        return TailSegmentedReduce(input, tail_flag, cub::Sum());
    }
# 444 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 3
    template <typename ReductionOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T Reduce(
        T input,
        ReductionOp reduction_op)
    {
        return InternalWarpReduce(temp_storage).template Reduce<true>(input, LOGICAL_WARP_THREADS, reduction_op);
    }
# 493 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 3
    template <typename ReductionOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T Reduce(
        T input,
        ReductionOp reduction_op,
        int valid_items)
    {
        return InternalWarpReduce(temp_storage).template Reduce<false>(input, valid_items, reduction_op);
    }
# 542 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 3
    template <
        typename ReductionOp,
        typename FlagT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T HeadSegmentedReduce(
        T input,
        FlagT head_flag,
        ReductionOp reduction_op)
    {
        return InternalWarpReduce(temp_storage).template SegmentedReduce<true>(input, head_flag, reduction_op);
    }
# 593 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/warp_reduce.cuh" 3
    template <
        typename ReductionOp,
        typename FlagT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T TailSegmentedReduce(
        T input,
        FlagT tail_flag,
        ReductionOp reduction_op)
    {
        return InternalWarpReduce(temp_storage).template SegmentedReduce<false>(input, tail_flag, reduction_op);
    }




};



}
# 41 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/single_pass_scan_operators.cuh" 2 3

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../util_device.cuh" 1 3
# 46 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../util_device.cuh" 3
namespace cub {
# 60 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../util_device.cuh" 3
template <int ALLOCATIONS>
__attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
cudaError_t AliasTemporaries(
    void *d_temp_storage,
    size_t &temp_storage_bytes,
    void* (&allocations)[ALLOCATIONS],
    size_t (&allocation_sizes)[ALLOCATIONS])
{
    const int ALIGN_BYTES = 256;
    const int ALIGN_MASK = ~(ALIGN_BYTES - 1);


    size_t allocation_offsets[ALLOCATIONS];
    size_t bytes_needed = 0;
    for (int i = 0; i < ALLOCATIONS; ++i)
    {
        size_t allocation_bytes = (allocation_sizes[i] + ALIGN_BYTES - 1) & ALIGN_MASK;
        allocation_offsets[i] = bytes_needed;
        bytes_needed += allocation_bytes;
    }
    bytes_needed += ALIGN_BYTES - 1;


    if (!d_temp_storage)
    {
        temp_storage_bytes = bytes_needed;
        return cudaSuccess;
    }


    if (temp_storage_bytes < bytes_needed)
    {
        return cub::Debug((cudaError_t) (cudaErrorInvalidValue), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../util_device.cuh", 92);
    }


    d_temp_storage = (void *) ((size_t(d_temp_storage) + ALIGN_BYTES - 1) & ALIGN_MASK);
    for (int i = 0; i < ALLOCATIONS; ++i)
    {
        allocations[i] = static_cast<char*>(d_temp_storage) + allocation_offsets[i];
    }

    return cudaSuccess;
}





template <typename T>
__attribute__((global)) void EmptyKernel(void) { }







__attribute__((host)) __inline__ __attribute__((always_inline)) cudaError_t PtxVersion(int &ptx_version)
{
    struct Dummy
    {

        typedef void (*EmptyKernelPtr)();


        __attribute__((host)) __inline__ __attribute__((always_inline))
        EmptyKernelPtr Empty()
        {
            return EmptyKernel<void>;
        }
    };



    (void)ptx_version;


    return cudaErrorInvalidConfiguration;
# 159 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../util_device.cuh" 3
}





__attribute__((host)) __inline__ __attribute__((always_inline)) cudaError_t SmVersion(int &sm_version, int device_ordinal)
{

    (void)sm_version;
    (void)device_ordinal;


    return cudaErrorInvalidConfiguration;
# 190 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../util_device.cuh" 3
}







__attribute__((host)) __inline__ __attribute__((always_inline))
static cudaError_t SyncStream(cudaStream_t stream)
{



    (void)stream;

    return cudaDeviceSynchronize();

}
# 242 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../util_device.cuh" 3
template <typename KernelPtr>
__attribute__((host)) __inline__ __attribute__((always_inline))
cudaError_t MaxSmOccupancy(
    int &max_sm_occupancy,
    KernelPtr kernel_ptr,
    int block_threads,
    int dynamic_smem_bytes = 0)
{

    (void)dynamic_smem_bytes;
    (void)block_threads;
    (void)kernel_ptr;
    (void)max_sm_occupancy;


    return cub::Debug((cudaError_t) (cudaErrorInvalidConfiguration), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../util_device.cuh", 257);
# 268 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../util_device.cuh" 3
}
# 278 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../util_device.cuh" 3
struct KernelConfig
{
    int block_threads;
    int items_per_thread;
    int tile_size;
    int sm_occupancy;

    __attribute__((host)) __inline__ __attribute__((always_inline))
    KernelConfig() : block_threads(0), items_per_thread(0), tile_size(0), sm_occupancy(0) {}

    template <typename AgentPolicyT, typename KernelPtrT>
    __attribute__((host)) __inline__ __attribute__((always_inline))
    cudaError_t Init(KernelPtrT kernel_ptr)
    {
        block_threads = AgentPolicyT::BLOCK_THREADS;
        items_per_thread = AgentPolicyT::ITEMS_PER_THREAD;
        tile_size = block_threads * items_per_thread;
        cudaError_t retval = MaxSmOccupancy(sm_occupancy, kernel_ptr, block_threads);
        return retval;
    }
};




template <int PTX_VERSION, typename PolicyT, typename PrevPolicyT>
struct ChainedPolicy
{

   typedef typename If<(700 < PTX_VERSION), typename PrevPolicyT::ActivePolicy, PolicyT>::Type ActivePolicy;


   template <typename FunctorT>
   __attribute__((host)) __inline__ __attribute__((always_inline))
   static cudaError_t Invoke(int ptx_version, FunctorT &op)
   {
       if (ptx_version < PTX_VERSION) {
           return PrevPolicyT::Invoke(ptx_version, op);
       }
       return op.template Invoke<PolicyT>();
   }
};


template <int PTX_VERSION, typename PolicyT>
struct ChainedPolicy<PTX_VERSION, PolicyT, PolicyT>
{

    typedef PolicyT ActivePolicy;


    template <typename FunctorT>
    __attribute__((host)) __inline__ __attribute__((always_inline))
    static cudaError_t Invoke(int , FunctorT &op) {
        return op.template Invoke<PolicyT>();
    }
};
# 346 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../util_device.cuh" 3
}
# 43 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/single_pass_scan_operators.cuh" 2 3






namespace cub {
# 62 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/single_pass_scan_operators.cuh" 3
template <
    typename T,
    typename ScanOpT>
struct BlockScanRunningPrefixOp
{
    ScanOpT op;
    T running_total;


    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockScanRunningPrefixOp(ScanOpT op)
    :
        op(op)
    {}


    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockScanRunningPrefixOp(
        T starting_prefix,
        ScanOpT op)
    :
        op(op),
        running_total(starting_prefix)
    {}




    __attribute__((device)) __inline__ __attribute__((always_inline)) T operator()(
        const T &block_aggregate)
    {
        T retval = running_total;
        running_total = op(running_total, block_aggregate);
        return retval;
    }
};
# 105 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/single_pass_scan_operators.cuh" 3
enum ScanTileStatus
{
    SCAN_TILE_OOB,
    SCAN_TILE_INVALID = 99,
    SCAN_TILE_PARTIAL,
    SCAN_TILE_INCLUSIVE,
};





template <
    typename T,
    bool SINGLE_WORD = Traits<T>::PRIMITIVE>
struct ScanTileState;







template <typename T>
struct ScanTileState<T, true>
{

    typedef typename If<(sizeof(T) == 8),
        long long,
        typename If<(sizeof(T) == 4),
            int,
            typename If<(sizeof(T) == 2),
                short,
                char>::Type>::Type>::Type StatusWord;



    typedef typename If<(sizeof(T) == 8),
        longlong2,
        typename If<(sizeof(T) == 4),
            int2,
            typename If<(sizeof(T) == 2),
                int,
                uchar2>::Type>::Type>::Type TxnWord;



    struct TileDescriptor
    {
        StatusWord status;
        T value;
    };



    enum
    {
        TILE_STATUS_PADDING = (1 << (5)),
    };



    TxnWord *d_tile_descriptors;


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    ScanTileState()
    :
        d_tile_descriptors(__null)
    {}



    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    cudaError_t Init(
        int ,
        void *d_temp_storage,
        size_t )
    {
        d_tile_descriptors = reinterpret_cast<TxnWord*>(d_temp_storage);
        return cudaSuccess;
    }





    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    static cudaError_t AllocationSize(
        int num_tiles,
        size_t &temp_storage_bytes)
    {
        temp_storage_bytes = (num_tiles + TILE_STATUS_PADDING) * sizeof(TileDescriptor);
        return cudaSuccess;
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void InitializeStatus(int num_tiles)
    {
        int tile_idx = (blockIdx.x * blockDim.x) + threadIdx.x;

        TxnWord val = TxnWord();
        TileDescriptor *descriptor = reinterpret_cast<TileDescriptor*>(&val);

        if (tile_idx < num_tiles)
        {

            descriptor->status = StatusWord(SCAN_TILE_INVALID);
            d_tile_descriptors[TILE_STATUS_PADDING + tile_idx] = val;
        }

        if ((blockIdx.x == 0) && (threadIdx.x < TILE_STATUS_PADDING))
        {

            descriptor->status = StatusWord(SCAN_TILE_OOB);
            d_tile_descriptors[threadIdx.x] = val;
        }
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void SetInclusive(int tile_idx, T tile_inclusive)
    {
        TileDescriptor tile_descriptor;
        tile_descriptor.status = SCAN_TILE_INCLUSIVE;
        tile_descriptor.value = tile_inclusive;

        TxnWord alias;
        *reinterpret_cast<TileDescriptor*>(&alias) = tile_descriptor;
        ThreadStore<STORE_CG>(d_tile_descriptors + TILE_STATUS_PADDING + tile_idx, alias);
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void SetPartial(int tile_idx, T tile_partial)
    {
        TileDescriptor tile_descriptor;
        tile_descriptor.status = SCAN_TILE_PARTIAL;
        tile_descriptor.value = tile_partial;

        TxnWord alias;
        *reinterpret_cast<TileDescriptor*>(&alias) = tile_descriptor;
        ThreadStore<STORE_CG>(d_tile_descriptors + TILE_STATUS_PADDING + tile_idx, alias);
    }




    __attribute__((device)) __inline__ __attribute__((always_inline)) void WaitForValid(
        int tile_idx,
        StatusWord &status,
        T &value)
    {
        TileDescriptor tile_descriptor;
        do
        {
            __threadfence_block();
            TxnWord alias = ThreadLoad<LOAD_CG>(d_tile_descriptors + TILE_STATUS_PADDING + tile_idx);
            tile_descriptor = reinterpret_cast<TileDescriptor&>(alias);

        } while (WARP_ANY((tile_descriptor.status == SCAN_TILE_INVALID), 0xffffffff));

        status = tile_descriptor.status;
        value = tile_descriptor.value;
    }

};







template <typename T>
struct ScanTileState<T, false>
{

    typedef char StatusWord;


    enum
    {
        TILE_STATUS_PADDING = (1 << (5)),
    };


    StatusWord *d_tile_status;
    T *d_tile_partial;
    T *d_tile_inclusive;


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    ScanTileState()
    :
        d_tile_status(__null),
        d_tile_partial(__null),
        d_tile_inclusive(__null)
    {}



    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    cudaError_t Init(
        int num_tiles,
        void *d_temp_storage,
        size_t temp_storage_bytes)
    {
        cudaError_t error = cudaSuccess;
        do
        {
            void* allocations[3];
            size_t allocation_sizes[3];

            allocation_sizes[0] = (num_tiles + TILE_STATUS_PADDING) * sizeof(StatusWord);
            allocation_sizes[1] = (num_tiles + TILE_STATUS_PADDING) * sizeof(Uninitialized<T>);
            allocation_sizes[2] = (num_tiles + TILE_STATUS_PADDING) * sizeof(Uninitialized<T>);


            if (cub::Debug((cudaError_t) (error = AliasTemporaries(d_temp_storage, temp_storage_bytes, allocations, allocation_sizes)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/single_pass_scan_operators.cuh", 331)) break;


            d_tile_status = reinterpret_cast<StatusWord*>(allocations[0]);
            d_tile_partial = reinterpret_cast<T*>(allocations[1]);
            d_tile_inclusive = reinterpret_cast<T*>(allocations[2]);
        }
        while (0);

        return error;
    }





    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    static cudaError_t AllocationSize(
        int num_tiles,
        size_t &temp_storage_bytes)
    {

        size_t allocation_sizes[3];
        allocation_sizes[0] = (num_tiles + TILE_STATUS_PADDING) * sizeof(StatusWord);
        allocation_sizes[1] = (num_tiles + TILE_STATUS_PADDING) * sizeof(Uninitialized<T>);
        allocation_sizes[2] = (num_tiles + TILE_STATUS_PADDING) * sizeof(Uninitialized<T>);


        void* allocations[3];
        return cub::Debug((cudaError_t) (AliasTemporaries(__null, temp_storage_bytes, allocations, allocation_sizes)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/single_pass_scan_operators.cuh", 360);
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void InitializeStatus(int num_tiles)
    {
        int tile_idx = (blockIdx.x * blockDim.x) + threadIdx.x;
        if (tile_idx < num_tiles)
        {

            d_tile_status[TILE_STATUS_PADDING + tile_idx] = StatusWord(SCAN_TILE_INVALID);
        }

        if ((blockIdx.x == 0) && (threadIdx.x < TILE_STATUS_PADDING))
        {

            d_tile_status[threadIdx.x] = StatusWord(SCAN_TILE_OOB);
        }
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void SetInclusive(int tile_idx, T tile_inclusive)
    {

        ThreadStore<STORE_CG>(d_tile_inclusive + TILE_STATUS_PADDING + tile_idx, tile_inclusive);


        __threadfence();


        ThreadStore<STORE_CG>(d_tile_status + TILE_STATUS_PADDING + tile_idx, StatusWord(SCAN_TILE_INCLUSIVE));
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void SetPartial(int tile_idx, T tile_partial)
    {

        ThreadStore<STORE_CG>(d_tile_partial + TILE_STATUS_PADDING + tile_idx, tile_partial);


        __threadfence();


        ThreadStore<STORE_CG>(d_tile_status + TILE_STATUS_PADDING + tile_idx, StatusWord(SCAN_TILE_PARTIAL));
    }




    __attribute__((device)) __inline__ __attribute__((always_inline)) void WaitForValid(
        int tile_idx,
        StatusWord &status,
        T &value)
    {
        do {
            status = ThreadLoad<LOAD_CG>(d_tile_status + TILE_STATUS_PADDING + tile_idx);

            __threadfence();

        } while (status == SCAN_TILE_INVALID);

        if (status == StatusWord(SCAN_TILE_PARTIAL))
            value = ThreadLoad<LOAD_CG>(d_tile_partial + TILE_STATUS_PADDING + tile_idx);
        else
            value = ThreadLoad<LOAD_CG>(d_tile_inclusive + TILE_STATUS_PADDING + tile_idx);
    }
};
# 446 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/single_pass_scan_operators.cuh" 3
template <
    typename ValueT,
    typename KeyT,
    bool SINGLE_WORD = (Traits<ValueT>::PRIMITIVE) && (sizeof(ValueT) + sizeof(KeyT) < 16)>
struct ReduceByKeyScanTileState;






template <
    typename ValueT,
    typename KeyT>
struct ReduceByKeyScanTileState<ValueT, KeyT, false> :
    ScanTileState<KeyValuePair<KeyT, ValueT> >
{
    typedef ScanTileState<KeyValuePair<KeyT, ValueT> > SuperClass;


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    ReduceByKeyScanTileState() : SuperClass() {}
};






template <
    typename ValueT,
    typename KeyT>
struct ReduceByKeyScanTileState<ValueT, KeyT, true>
{
    typedef KeyValuePair<KeyT, ValueT>KeyValuePairT;


    enum
    {
        PAIR_SIZE = sizeof(ValueT) + sizeof(KeyT),
        TXN_WORD_SIZE = 1 << Log2<PAIR_SIZE + 1>::VALUE,
        STATUS_WORD_SIZE = TXN_WORD_SIZE - PAIR_SIZE,

        TILE_STATUS_PADDING = (1 << (5)),
    };


    typedef typename If<(STATUS_WORD_SIZE == 8),
        long long,
        typename If<(STATUS_WORD_SIZE == 4),
            int,
            typename If<(STATUS_WORD_SIZE == 2),
                short,
                char>::Type>::Type>::Type StatusWord;


    typedef typename If<(TXN_WORD_SIZE == 16),
        longlong2,
        typename If<(TXN_WORD_SIZE == 8),
            long long,
            int>::Type>::Type TxnWord;


    struct TileDescriptorBigStatus
    {
        KeyT key;
        ValueT value;
        StatusWord status;
    };


    struct TileDescriptorLittleStatus
    {
        ValueT value;
        StatusWord status;
        KeyT key;
    };


    typedef typename If<
            (sizeof(ValueT) == sizeof(KeyT)),
            TileDescriptorBigStatus,
            TileDescriptorLittleStatus>::Type
        TileDescriptor;



    TxnWord *d_tile_descriptors;



    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    ReduceByKeyScanTileState()
    :
        d_tile_descriptors(__null)
    {}



    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    cudaError_t Init(
        int ,
        void *d_temp_storage,
        size_t )
    {
        d_tile_descriptors = reinterpret_cast<TxnWord*>(d_temp_storage);
        return cudaSuccess;
    }





    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    static cudaError_t AllocationSize(
        int num_tiles,
        size_t &temp_storage_bytes)
    {
        temp_storage_bytes = (num_tiles + TILE_STATUS_PADDING) * sizeof(TileDescriptor);
        return cudaSuccess;
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void InitializeStatus(int num_tiles)
    {
        int tile_idx = (blockIdx.x * blockDim.x) + threadIdx.x;
        TxnWord val = TxnWord();
        TileDescriptor *descriptor = reinterpret_cast<TileDescriptor*>(&val);

        if (tile_idx < num_tiles)
        {

            descriptor->status = StatusWord(SCAN_TILE_INVALID);
            d_tile_descriptors[TILE_STATUS_PADDING + tile_idx] = val;
        }

        if ((blockIdx.x == 0) && (threadIdx.x < TILE_STATUS_PADDING))
        {

            descriptor->status = StatusWord(SCAN_TILE_OOB);
            d_tile_descriptors[threadIdx.x] = val;
        }
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void SetInclusive(int tile_idx, KeyValuePairT tile_inclusive)
    {
        TileDescriptor tile_descriptor;
        tile_descriptor.status = SCAN_TILE_INCLUSIVE;
        tile_descriptor.value = tile_inclusive.value;
        tile_descriptor.key = tile_inclusive.key;

        TxnWord alias;
        *reinterpret_cast<TileDescriptor*>(&alias) = tile_descriptor;
        ThreadStore<STORE_CG>(d_tile_descriptors + TILE_STATUS_PADDING + tile_idx, alias);
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void SetPartial(int tile_idx, KeyValuePairT tile_partial)
    {
        TileDescriptor tile_descriptor;
        tile_descriptor.status = SCAN_TILE_PARTIAL;
        tile_descriptor.value = tile_partial.value;
        tile_descriptor.key = tile_partial.key;

        TxnWord alias;
        *reinterpret_cast<TileDescriptor*>(&alias) = tile_descriptor;
        ThreadStore<STORE_CG>(d_tile_descriptors + TILE_STATUS_PADDING + tile_idx, alias);
    }




    __attribute__((device)) __inline__ __attribute__((always_inline)) void WaitForValid(
        int tile_idx,
        StatusWord &status,
        KeyValuePairT &value)
    {
# 648 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/single_pass_scan_operators.cuh" 3
        TileDescriptor tile_descriptor;
        do
        {
            __threadfence_block();
            TxnWord alias = ThreadLoad<LOAD_CG>(d_tile_descriptors + TILE_STATUS_PADDING + tile_idx);
            tile_descriptor = reinterpret_cast<TileDescriptor&>(alias);

        } while (WARP_ANY((tile_descriptor.status == SCAN_TILE_INVALID), 0xffffffff));

        status = tile_descriptor.status;
        value.value = tile_descriptor.value;
        value.key = tile_descriptor.key;
    }

};
# 675 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/single_pass_scan_operators.cuh" 3
template <
    typename T,
    typename ScanOpT,
    typename ScanTileStateT,
    int PTX_ARCH = 700>
struct TilePrefixCallbackOp
{

    typedef WarpReduce<T, (1 << (5)), PTX_ARCH> WarpReduceT;


    struct _TempStorage
    {
        typename WarpReduceT::TempStorage warp_reduce;
        T exclusive_prefix;
        T inclusive_prefix;
        T block_aggregate;
    };


    struct TempStorage : Uninitialized<_TempStorage> {};


    typedef typename ScanTileStateT::StatusWord StatusWord;


    _TempStorage& temp_storage;
    ScanTileStateT& tile_status;
    ScanOpT scan_op;
    int tile_idx;
    T exclusive_prefix;
    T inclusive_prefix;


    __attribute__((device)) __inline__ __attribute__((always_inline))
    TilePrefixCallbackOp(
        ScanTileStateT &tile_status,
        TempStorage &temp_storage,
        ScanOpT scan_op,
        int tile_idx)
    :
        temp_storage(temp_storage.Alias()),
        tile_status(tile_status),
        scan_op(scan_op),
        tile_idx(tile_idx) {}



    __attribute__((device)) __inline__ __attribute__((always_inline))
    void ProcessWindow(
        int predecessor_idx,
        StatusWord &predecessor_status,
        T &window_aggregate)
    {
        T value;
        tile_status.WaitForValid(predecessor_idx, predecessor_status, value);




        int tail_flag = (predecessor_status == StatusWord(SCAN_TILE_INCLUSIVE));
        window_aggregate = WarpReduceT(temp_storage.warp_reduce).TailSegmentedReduce(
            value,
            tail_flag,
            SwizzleScanOp<ScanOpT>(scan_op));
    }



    __attribute__((device)) __inline__ __attribute__((always_inline))
    T operator()(T block_aggregate)
    {


        if (threadIdx.x == 0)
        {
            temp_storage.block_aggregate = block_aggregate;
            tile_status.SetPartial(tile_idx, block_aggregate);
        }

        int predecessor_idx = tile_idx - threadIdx.x - 1;
        StatusWord predecessor_status;
        T window_aggregate;


        ProcessWindow(predecessor_idx, predecessor_status, window_aggregate);


        exclusive_prefix = window_aggregate;


        while (WARP_ALL((predecessor_status != StatusWord(SCAN_TILE_INCLUSIVE)), 0xffffffff))
        {
            predecessor_idx -= (1 << (5));


            ProcessWindow(predecessor_idx, predecessor_status, window_aggregate);
            exclusive_prefix = scan_op(window_aggregate, exclusive_prefix);
        }


        if (threadIdx.x == 0)
        {
            inclusive_prefix = scan_op(exclusive_prefix, block_aggregate);
            tile_status.SetInclusive(tile_idx, inclusive_prefix);

            temp_storage.exclusive_prefix = exclusive_prefix;
            temp_storage.inclusive_prefix = inclusive_prefix;
        }


        return exclusive_prefix;
    }


    __attribute__((device)) __inline__ __attribute__((always_inline))
    T GetExclusivePrefix()
    {
        return temp_storage.exclusive_prefix;
    }


    __attribute__((device)) __inline__ __attribute__((always_inline))
    T GetInclusivePrefix()
    {
        return temp_storage.inclusive_prefix;
    }


    __attribute__((device)) __inline__ __attribute__((always_inline))
    T GetBlockAggregate()
    {
        return temp_storage.block_aggregate;
    }

};


}
# 39 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_scan.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 1 3
# 38 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 1 3
# 46 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
namespace cub {
# 108 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
template <
    typename InputT,
    int BLOCK_DIM_X,
    int ITEMS_PER_THREAD,
    bool WARP_TIME_SLICING = false,
    int BLOCK_DIM_Y = 1,
    int BLOCK_DIM_Z = 1,
    int PTX_ARCH = 700>
class BlockExchange
{
private:






    enum
    {

        BLOCK_THREADS = BLOCK_DIM_X * BLOCK_DIM_Y * BLOCK_DIM_Z,

        LOG_WARP_THREADS = (5),
        WARP_THREADS = 1 << LOG_WARP_THREADS,
        WARPS = (BLOCK_THREADS + WARP_THREADS - 1) / WARP_THREADS,

        LOG_SMEM_BANKS = ((PTX_ARCH >= 200) ? (5) : (4)),
        SMEM_BANKS = 1 << LOG_SMEM_BANKS,

        TILE_ITEMS = BLOCK_THREADS * ITEMS_PER_THREAD,

        TIME_SLICES = (WARP_TIME_SLICING) ? WARPS : 1,

        TIME_SLICED_THREADS = (WARP_TIME_SLICING) ? (((WARP_THREADS) < (BLOCK_THREADS)) ? (WARP_THREADS) : (BLOCK_THREADS)) : BLOCK_THREADS,
        TIME_SLICED_ITEMS = TIME_SLICED_THREADS * ITEMS_PER_THREAD,

        WARP_TIME_SLICED_THREADS = (((WARP_THREADS) < (BLOCK_THREADS)) ? (WARP_THREADS) : (BLOCK_THREADS)),
        WARP_TIME_SLICED_ITEMS = WARP_TIME_SLICED_THREADS * ITEMS_PER_THREAD,


        INSERT_PADDING = (ITEMS_PER_THREAD > 4) && (PowerOfTwo<ITEMS_PER_THREAD>::VALUE),
        PADDING_ITEMS = (INSERT_PADDING) ? (TIME_SLICED_ITEMS >> LOG_SMEM_BANKS) : 0,
    };






    struct __attribute__((aligned(16))) _TempStorage
    {
        InputT buff[TIME_SLICED_ITEMS + PADDING_ITEMS];
    };

public:


    struct TempStorage : Uninitialized<_TempStorage> {};

private:







    _TempStorage &temp_storage;


    unsigned int linear_tid;
    unsigned int lane_id;
    unsigned int warp_id;
    unsigned int warp_offset;







    __attribute__((device)) __inline__ __attribute__((always_inline)) _TempStorage& PrivateStorage()
    {
        __attribute__((shared)) _TempStorage private_storage;
        return private_storage;
    }





    template <typename OutputT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void BlockedToStriped(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        Int2Type<false> )
    {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = (linear_tid * ITEMS_PER_THREAD) + ITEM;
            if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
            temp_storage.buff[item_offset] = input_items[ITEM];
        }

        CTA_SYNC();

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = int(ITEM * BLOCK_THREADS) + linear_tid;
            if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
            output_items[ITEM] = temp_storage.buff[item_offset];
        }
    }





    template <typename OutputT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void BlockedToStriped(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        Int2Type<true> )
    {
        InputT temp_items[ITEMS_PER_THREAD];

#pragma unroll
 for (int SLICE = 0; SLICE < TIME_SLICES; SLICE++)
        {
            const int SLICE_OFFSET = SLICE * TIME_SLICED_ITEMS;
            const int SLICE_OOB = SLICE_OFFSET + TIME_SLICED_ITEMS;

            CTA_SYNC();

            if (warp_id == SLICE)
            {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
                {
                    int item_offset = (lane_id * ITEMS_PER_THREAD) + ITEM;
                    if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
                    temp_storage.buff[item_offset] = input_items[ITEM];
                }
            }

            CTA_SYNC();

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
            {

                const int STRIP_OFFSET = ITEM * BLOCK_THREADS;
                const int STRIP_OOB = STRIP_OFFSET + BLOCK_THREADS;

                if ((SLICE_OFFSET < STRIP_OOB) && (SLICE_OOB > STRIP_OFFSET))
                {
                    int item_offset = STRIP_OFFSET + linear_tid - SLICE_OFFSET;
                    if ((item_offset >= 0) && (item_offset < TIME_SLICED_ITEMS))
                    {
                        if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
                        temp_items[ITEM] = temp_storage.buff[item_offset];
                    }
                }
            }
        }


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            output_items[ITEM] = temp_items[ITEM];
        }
    }





    template <typename OutputT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void BlockedToWarpStriped(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        Int2Type<false> )
    {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = warp_offset + ITEM + (lane_id * ITEMS_PER_THREAD);
            if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
            temp_storage.buff[item_offset] = input_items[ITEM];
        }

        WARP_SYNC(0xffffffff);

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = warp_offset + (ITEM * WARP_TIME_SLICED_THREADS) + lane_id;
            if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
            output_items[ITEM] = temp_storage.buff[item_offset];
        }
    }




    template <typename OutputT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void BlockedToWarpStriped(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        Int2Type<true> )
    {
        if (warp_id == 0)
        {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
            {
                int item_offset = ITEM + (lane_id * ITEMS_PER_THREAD);
                if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
                temp_storage.buff[item_offset] = input_items[ITEM];
            }

            WARP_SYNC(0xffffffff);

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
            {
                int item_offset = (ITEM * WARP_TIME_SLICED_THREADS) + lane_id;
                if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
                output_items[ITEM] = temp_storage.buff[item_offset];
            }
        }

#pragma unroll
 for (unsigned int SLICE = 1; SLICE < TIME_SLICES; ++SLICE)
        {
            CTA_SYNC();

            if (warp_id == SLICE)
            {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
                {
                    int item_offset = ITEM + (lane_id * ITEMS_PER_THREAD);
                    if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
                    temp_storage.buff[item_offset] = input_items[ITEM];
                }

                WARP_SYNC(0xffffffff);

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
                {
                    int item_offset = (ITEM * WARP_TIME_SLICED_THREADS) + lane_id;
                    if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
                    output_items[ITEM] = temp_storage.buff[item_offset];
                }
            }
        }
    }





    template <typename OutputT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void StripedToBlocked(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        Int2Type<false> )
    {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = int(ITEM * BLOCK_THREADS) + linear_tid;
            if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
            temp_storage.buff[item_offset] = input_items[ITEM];
        }

        CTA_SYNC();


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = (linear_tid * ITEMS_PER_THREAD) + ITEM;
            if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
            output_items[ITEM] = temp_storage.buff[item_offset];
        }
    }





    template <typename OutputT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void StripedToBlocked(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        Int2Type<true> )
    {

        InputT temp_items[ITEMS_PER_THREAD];

#pragma unroll
 for (int SLICE = 0; SLICE < TIME_SLICES; SLICE++)
        {
            const int SLICE_OFFSET = SLICE * TIME_SLICED_ITEMS;
            const int SLICE_OOB = SLICE_OFFSET + TIME_SLICED_ITEMS;

            CTA_SYNC();

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
            {

                const int STRIP_OFFSET = ITEM * BLOCK_THREADS;
                const int STRIP_OOB = STRIP_OFFSET + BLOCK_THREADS;

                if ((SLICE_OFFSET < STRIP_OOB) && (SLICE_OOB > STRIP_OFFSET))
                {
                    int item_offset = STRIP_OFFSET + linear_tid - SLICE_OFFSET;
                    if ((item_offset >= 0) && (item_offset < TIME_SLICED_ITEMS))
                    {
                        if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
                        temp_storage.buff[item_offset] = input_items[ITEM];
                    }
                }
            }

            CTA_SYNC();

            if (warp_id == SLICE)
            {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
                {
                    int item_offset = (lane_id * ITEMS_PER_THREAD) + ITEM;
                    if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
                    temp_items[ITEM] = temp_storage.buff[item_offset];
                }
            }
        }


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            output_items[ITEM] = temp_items[ITEM];
        }
    }





    template <typename OutputT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void WarpStripedToBlocked(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        Int2Type<false> )
    {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = warp_offset + (ITEM * WARP_TIME_SLICED_THREADS) + lane_id;
            if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
            temp_storage.buff[item_offset] = input_items[ITEM];
        }

        WARP_SYNC(0xffffffff);

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = warp_offset + ITEM + (lane_id * ITEMS_PER_THREAD);
            if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
            output_items[ITEM] = temp_storage.buff[item_offset];
        }
    }





    template <typename OutputT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void WarpStripedToBlocked(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        Int2Type<true> )
    {
#pragma unroll
 for (unsigned int SLICE = 0; SLICE < TIME_SLICES; ++SLICE)
        {
            CTA_SYNC();

            if (warp_id == SLICE)
            {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
                {
                    int item_offset = (ITEM * WARP_TIME_SLICED_THREADS) + lane_id;
                    if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
                    temp_storage.buff[item_offset] = input_items[ITEM];
                }

                WARP_SYNC(0xffffffff);

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
                {
                    int item_offset = ITEM + (lane_id * ITEMS_PER_THREAD);
                    if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
                    output_items[ITEM] = temp_storage.buff[item_offset];
                }
            }
        }
    }





    template <typename OutputT, typename OffsetT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterToBlocked(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        OffsetT ranks[ITEMS_PER_THREAD],
        Int2Type<false> )
    {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = ranks[ITEM];
            if (INSERT_PADDING) item_offset = SHR_ADD(item_offset, LOG_SMEM_BANKS, item_offset);
            temp_storage.buff[item_offset] = input_items[ITEM];
        }

        CTA_SYNC();

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = (linear_tid * ITEMS_PER_THREAD) + ITEM;
            if (INSERT_PADDING) item_offset = SHR_ADD(item_offset, LOG_SMEM_BANKS, item_offset);
            output_items[ITEM] = temp_storage.buff[item_offset];
        }
    }




    template <typename OutputT, typename OffsetT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterToBlocked(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        OffsetT ranks[ITEMS_PER_THREAD],
        Int2Type<true> )
    {
        InputT temp_items[ITEMS_PER_THREAD];

#pragma unroll
 for (int SLICE = 0; SLICE < TIME_SLICES; SLICE++)
        {
            CTA_SYNC();

            const int SLICE_OFFSET = TIME_SLICED_ITEMS * SLICE;

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
            {
                int item_offset = ranks[ITEM] - SLICE_OFFSET;
                if ((item_offset >= 0) && (item_offset < WARP_TIME_SLICED_ITEMS))
                {
                    if (INSERT_PADDING) item_offset = SHR_ADD(item_offset, LOG_SMEM_BANKS, item_offset);
                    temp_storage.buff[item_offset] = input_items[ITEM];
                }
            }

            CTA_SYNC();

            if (warp_id == SLICE)
            {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
                {
                    int item_offset = (lane_id * ITEMS_PER_THREAD) + ITEM;
                    if (INSERT_PADDING) item_offset = SHR_ADD(item_offset, LOG_SMEM_BANKS, item_offset);
                    temp_items[ITEM] = temp_storage.buff[item_offset];
                }
            }
        }


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            output_items[ITEM] = temp_items[ITEM];
        }
    }





    template <typename OutputT, typename OffsetT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterToStriped(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        OffsetT ranks[ITEMS_PER_THREAD],
        Int2Type<false> )
    {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = ranks[ITEM];
            if (INSERT_PADDING) item_offset = SHR_ADD(item_offset, LOG_SMEM_BANKS, item_offset);
            temp_storage.buff[item_offset] = input_items[ITEM];
        }

        CTA_SYNC();

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = int(ITEM * BLOCK_THREADS) + linear_tid;
            if (INSERT_PADDING) item_offset = SHR_ADD(item_offset, LOG_SMEM_BANKS, item_offset);
            output_items[ITEM] = temp_storage.buff[item_offset];
        }
    }





    template <typename OutputT, typename OffsetT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterToStriped(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        OffsetT ranks[ITEMS_PER_THREAD],
        Int2Type<true> )
    {
        InputT temp_items[ITEMS_PER_THREAD];

#pragma unroll
 for (int SLICE = 0; SLICE < TIME_SLICES; SLICE++)
        {
            const int SLICE_OFFSET = SLICE * TIME_SLICED_ITEMS;
            const int SLICE_OOB = SLICE_OFFSET + TIME_SLICED_ITEMS;

            CTA_SYNC();

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
            {
                int item_offset = ranks[ITEM] - SLICE_OFFSET;
                if ((item_offset >= 0) && (item_offset < WARP_TIME_SLICED_ITEMS))
                {
                    if (INSERT_PADDING) item_offset = SHR_ADD(item_offset, LOG_SMEM_BANKS, item_offset);
                    temp_storage.buff[item_offset] = input_items[ITEM];
                }
            }

            CTA_SYNC();

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
            {

                const int STRIP_OFFSET = ITEM * BLOCK_THREADS;
                const int STRIP_OOB = STRIP_OFFSET + BLOCK_THREADS;

                if ((SLICE_OFFSET < STRIP_OOB) && (SLICE_OOB > STRIP_OFFSET))
                {
                    int item_offset = STRIP_OFFSET + linear_tid - SLICE_OFFSET;
                    if ((item_offset >= 0) && (item_offset < TIME_SLICED_ITEMS))
                    {
                        if (INSERT_PADDING) item_offset += item_offset >> LOG_SMEM_BANKS;
                        temp_items[ITEM] = temp_storage.buff[item_offset];
                    }
                }
            }
        }


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            output_items[ITEM] = temp_items[ITEM];
        }
    }


public:
# 713 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockExchange()
    :
        temp_storage(PrivateStorage()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z)),
        warp_id((WARPS == 1) ? 0 : linear_tid / WARP_THREADS),
        lane_id(LaneId()),
        warp_offset(warp_id * WARP_TIME_SLICED_ITEMS)
    {}





    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockExchange(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z)),
        lane_id(LaneId()),
        warp_id((WARPS == 1) ? 0 : linear_tid / WARP_THREADS),
        warp_offset(warp_id * WARP_TIME_SLICED_ITEMS)
    {}
# 779 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
    template <typename OutputT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void StripedToBlocked(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD])
    {
        StripedToBlocked(input_items, output_items, Int2Type<WARP_TIME_SLICING>());
    }
# 828 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
    template <typename OutputT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void BlockedToStriped(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD])
    {
        BlockedToStriped(input_items, output_items, Int2Type<WARP_TIME_SLICING>());
    }
# 876 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
    template <typename OutputT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void WarpStripedToBlocked(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD])
    {
        WarpStripedToBlocked(input_items, output_items, Int2Type<WARP_TIME_SLICING>());
    }
# 927 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
    template <typename OutputT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void BlockedToWarpStriped(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD])
    {
        BlockedToWarpStriped(input_items, output_items, Int2Type<WARP_TIME_SLICING>());
    }
# 952 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
    template <typename OutputT, typename OffsetT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterToBlocked(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        OffsetT ranks[ITEMS_PER_THREAD])
    {
        ScatterToBlocked(input_items, output_items, ranks, Int2Type<WARP_TIME_SLICING>());
    }
# 971 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
    template <typename OutputT, typename OffsetT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterToStriped(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        OffsetT ranks[ITEMS_PER_THREAD])
    {
        ScatterToStriped(input_items, output_items, ranks, Int2Type<WARP_TIME_SLICING>());
    }
# 990 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
    template <typename OutputT, typename OffsetT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterToStripedGuarded(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        OffsetT ranks[ITEMS_PER_THREAD])
    {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = ranks[ITEM];
            if (INSERT_PADDING) item_offset = SHR_ADD(item_offset, LOG_SMEM_BANKS, item_offset);
            if (ranks[ITEM] >= 0)
                temp_storage.buff[item_offset] = input_items[ITEM];
        }

        CTA_SYNC();

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = int(ITEM * BLOCK_THREADS) + linear_tid;
            if (INSERT_PADDING) item_offset = SHR_ADD(item_offset, LOG_SMEM_BANKS, item_offset);
            output_items[ITEM] = temp_storage.buff[item_offset];
        }
    }
# 1028 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
    template <typename OutputT, typename OffsetT, typename ValidFlag>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterToStripedFlagged(
        InputT input_items[ITEMS_PER_THREAD],
        OutputT output_items[ITEMS_PER_THREAD],
        OffsetT ranks[ITEMS_PER_THREAD],
        ValidFlag is_valid[ITEMS_PER_THREAD])
    {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = ranks[ITEM];
            if (INSERT_PADDING) item_offset = SHR_ADD(item_offset, LOG_SMEM_BANKS, item_offset);
            if (is_valid[ITEM])
                temp_storage.buff[item_offset] = input_items[ITEM];
        }

        CTA_SYNC();

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = int(ITEM * BLOCK_THREADS) + linear_tid;
            if (INSERT_PADDING) item_offset = SHR_ADD(item_offset, LOG_SMEM_BANKS, item_offset);
            output_items[ITEM] = temp_storage.buff[item_offset];
        }
    }
# 1063 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void StripedToBlocked(
        InputT items[ITEMS_PER_THREAD])
    {
        StripedToBlocked(items, items);
    }

    __attribute__((device)) __inline__ __attribute__((always_inline)) void BlockedToStriped(
        InputT items[ITEMS_PER_THREAD])
    {
        BlockedToStriped(items, items);
    }

    __attribute__((device)) __inline__ __attribute__((always_inline)) void WarpStripedToBlocked(
        InputT items[ITEMS_PER_THREAD])
    {
        WarpStripedToBlocked(items, items);
    }

    __attribute__((device)) __inline__ __attribute__((always_inline)) void BlockedToWarpStriped(
        InputT items[ITEMS_PER_THREAD])
    {
        BlockedToWarpStriped(items, items);
    }

    template <typename OffsetT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterToBlocked(
        InputT items[ITEMS_PER_THREAD],
        OffsetT ranks[ITEMS_PER_THREAD])
    {
        ScatterToBlocked(items, items, ranks);
    }

    template <typename OffsetT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterToStriped(
        InputT items[ITEMS_PER_THREAD],
        OffsetT ranks[ITEMS_PER_THREAD])
    {
        ScatterToStriped(items, items, ranks);
    }

    template <typename OffsetT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterToStripedGuarded(
        InputT items[ITEMS_PER_THREAD],
        OffsetT ranks[ITEMS_PER_THREAD])
    {
        ScatterToStripedGuarded(items, items, ranks);
    }

    template <typename OffsetT, typename ValidFlag>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterToStripedFlagged(
        InputT items[ITEMS_PER_THREAD],
        OffsetT ranks[ITEMS_PER_THREAD],
        ValidFlag is_valid[ITEMS_PER_THREAD])
    {
        ScatterToStriped(items, items, ranks, is_valid);
    }




};





template <
    typename T,
    int ITEMS_PER_THREAD,
    int LOGICAL_WARP_THREADS = (1 << (5)),
    int PTX_ARCH = 700>
class WarpExchange
{
private:






    enum
    {

        IS_ARCH_WARP = (LOGICAL_WARP_THREADS == (1 << (5))),

        WARP_ITEMS = (ITEMS_PER_THREAD * LOGICAL_WARP_THREADS) + 1,

        LOG_SMEM_BANKS = ((PTX_ARCH >= 200) ? (5) : (4)),
        SMEM_BANKS = 1 << LOG_SMEM_BANKS,


        INSERT_PADDING = (ITEMS_PER_THREAD > 4) && (PowerOfTwo<ITEMS_PER_THREAD>::VALUE),
        PADDING_ITEMS = (INSERT_PADDING) ? (WARP_ITEMS >> LOG_SMEM_BANKS) : 0,
    };






    struct _TempStorage
    {
        T buff[WARP_ITEMS + PADDING_ITEMS];
    };

public:


    struct TempStorage : Uninitialized<_TempStorage> {};

private:






    _TempStorage &temp_storage;
    int lane_id;

public:






    __attribute__((device)) __inline__ __attribute__((always_inline)) WarpExchange(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias()),
        lane_id(IS_ARCH_WARP ?
            LaneId() :
            LaneId() % LOGICAL_WARP_THREADS)
    {}
# 1212 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
    template <typename OffsetT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterToStriped(
        T items[ITEMS_PER_THREAD],
        OffsetT ranks[ITEMS_PER_THREAD])
    {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            if (INSERT_PADDING) ranks[ITEM] = SHR_ADD(ranks[ITEM], LOG_SMEM_BANKS, ranks[ITEM]);
            temp_storage.buff[ranks[ITEM]] = items[ITEM];
        }

        WARP_SYNC(0xffffffff);

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        {
            int item_offset = (ITEM * LOGICAL_WARP_THREADS) + lane_id;
            if (INSERT_PADDING) item_offset = SHR_ADD(item_offset, LOG_SMEM_BANKS, item_offset);
            items[ITEM] = temp_storage.buff[item_offset];
        }
    }

};
# 1246 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_exchange.cuh" 3
}
# 39 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/../iterator/cache_modified_input_iterator.cuh" 1 3
# 55 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/../iterator/cache_modified_input_iterator.cuh" 3
namespace cub {
# 103 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/../iterator/cache_modified_input_iterator.cuh" 3
template <
    CacheLoadModifier MODIFIER,
    typename ValueType,
    typename OffsetT = ptrdiff_t>
class CacheModifiedInputIterator
{
public:


    typedef CacheModifiedInputIterator self_type;
    typedef OffsetT difference_type;
    typedef ValueType value_type;
    typedef ValueType* pointer;
    typedef ValueType reference;
# 127 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/../iterator/cache_modified_input_iterator.cuh" 3
    typedef std::random_access_iterator_tag iterator_category;



public:


    ValueType* ptr;


    template <typename QualifiedValueType>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) CacheModifiedInputIterator(
        QualifiedValueType* ptr)
    :
        ptr(const_cast<typename RemoveQualifiers<QualifiedValueType>::Type *>(ptr))
    {}


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) self_type operator++(int)
    {
        self_type retval = *this;
        ptr++;
        return retval;
    }


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) self_type operator++()
    {
        ptr++;
        return *this;
    }


    __attribute__((device)) __inline__ __attribute__((always_inline)) reference operator*() const
    {
        return ThreadLoad<MODIFIER>(ptr);
    }


    template <typename Distance>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) self_type operator+(Distance n) const
    {
        self_type retval(ptr + n);
        return retval;
    }


    template <typename Distance>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) self_type& operator+=(Distance n)
    {
        ptr += n;
        return *this;
    }


    template <typename Distance>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) self_type operator-(Distance n) const
    {
        self_type retval(ptr - n);
        return retval;
    }


    template <typename Distance>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) self_type& operator-=(Distance n)
    {
        ptr -= n;
        return *this;
    }


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) difference_type operator-(self_type other) const
    {
        return ptr - other.ptr;
    }


    template <typename Distance>
    __attribute__((device)) __inline__ __attribute__((always_inline)) reference operator[](Distance n) const
    {
        return ThreadLoad<MODIFIER>(ptr + n);
    }


    __attribute__((device)) __inline__ __attribute__((always_inline)) pointer operator->()
    {
        return &ThreadLoad<MODIFIER>(ptr);
    }


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) bool operator==(const self_type& rhs)
    {
        return (ptr == rhs.ptr);
    }


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) bool operator!=(const self_type& rhs)
    {
        return (ptr != rhs.ptr);
    }


    friend std::ostream& operator<<(std::ostream& os, const self_type& )
    {
        return os;
    }
};





}
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 2 3
# 49 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
namespace cub {
# 72 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
template <
    typename InputT,
    int ITEMS_PER_THREAD,
    typename InputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void LoadDirectBlocked(
    int linear_tid,
    InputIteratorT block_itr,
    InputT (&items)[ITEMS_PER_THREAD])
{
    InputIteratorT thread_itr = block_itr + (linear_tid * ITEMS_PER_THREAD);


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        items[ITEM] = thread_itr[ITEM];
    }
}
# 101 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
template <
    typename InputT,
    int ITEMS_PER_THREAD,
    typename InputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void LoadDirectBlocked(
    int linear_tid,
    InputIteratorT block_itr,
    InputT (&items)[ITEMS_PER_THREAD],
    int valid_items)
{
    InputIteratorT thread_itr = block_itr + (linear_tid * ITEMS_PER_THREAD);

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        if ((linear_tid * ITEMS_PER_THREAD) + ITEM < valid_items)
        {
            items[ITEM] = thread_itr[ITEM];
        }
    }
}
# 133 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
template <
    typename InputT,
    typename DefaultT,
    int ITEMS_PER_THREAD,
    typename InputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void LoadDirectBlocked(
    int linear_tid,
    InputIteratorT block_itr,
    InputT (&items)[ITEMS_PER_THREAD],
    int valid_items,
    DefaultT oob_default)
{
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        items[ITEM] = oob_default;

    LoadDirectBlocked(linear_tid, block_itr, items, valid_items);
}







template <
    CacheLoadModifier MODIFIER,
    typename T,
    int ITEMS_PER_THREAD>
__attribute__((device)) __inline__ __attribute__((always_inline)) void InternalLoadDirectBlockedVectorized(
    int linear_tid,
    T *block_ptr,
    T (&items)[ITEMS_PER_THREAD])
{

    typedef typename UnitWord<T>::DeviceWord DeviceWord;

    enum
    {
        TOTAL_WORDS = sizeof(items) / sizeof(DeviceWord),

        VECTOR_SIZE = (TOTAL_WORDS % 4 == 0) ?
            4 :
            (TOTAL_WORDS % 2 == 0) ?
                2 :
                1,

        VECTORS_PER_THREAD = TOTAL_WORDS / VECTOR_SIZE,
    };


    typedef typename CubVector<DeviceWord, VECTOR_SIZE>::Type Vector;


    Vector vec_items[VECTORS_PER_THREAD];


    Vector* vec_ptr = reinterpret_cast<Vector*>(block_ptr) + (linear_tid * VECTORS_PER_THREAD);


#pragma unroll
 for (int ITEM = 0; ITEM < VECTORS_PER_THREAD; ITEM++)
    {
        vec_items[ITEM] = ThreadLoad<MODIFIER>(vec_ptr + ITEM);
    }


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        items[ITEM] = *(reinterpret_cast<T*>(vec_items) + ITEM);
    }
}
# 224 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
template <
    typename T,
    int ITEMS_PER_THREAD>
__attribute__((device)) __inline__ __attribute__((always_inline)) void LoadDirectBlockedVectorized(
    int linear_tid,
    T *block_ptr,
    T (&items)[ITEMS_PER_THREAD])
{
    InternalLoadDirectBlockedVectorized<LOAD_DEFAULT>(linear_tid, block_ptr, items);
}
# 253 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
template <
    int BLOCK_THREADS,
    typename InputT,
    int ITEMS_PER_THREAD,
    typename InputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void LoadDirectStriped(
    int linear_tid,
    InputIteratorT block_itr,
    InputT (&items)[ITEMS_PER_THREAD])
{
    InputIteratorT thread_itr = block_itr + linear_tid;

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        items[ITEM] = thread_itr[ITEM * BLOCK_THREADS];
    }
}
# 283 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
template <
    int BLOCK_THREADS,
    typename InputT,
    int ITEMS_PER_THREAD,
    typename InputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void LoadDirectStriped(
    int linear_tid,
    InputIteratorT block_itr,
    InputT (&items)[ITEMS_PER_THREAD],
    int valid_items)
{
    InputIteratorT thread_itr = block_itr + linear_tid;

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        if (linear_tid + (ITEM * BLOCK_THREADS) < valid_items)
        {
            items[ITEM] = thread_itr[ITEM * BLOCK_THREADS];
        }
    }
}
# 317 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
template <
    int BLOCK_THREADS,
    typename InputT,
    typename DefaultT,
    int ITEMS_PER_THREAD,
    typename InputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void LoadDirectStriped(
    int linear_tid,
    InputIteratorT block_itr,
    InputT (&items)[ITEMS_PER_THREAD],
    int valid_items,
    DefaultT oob_default)
{
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        items[ITEM] = oob_default;

    LoadDirectStriped<BLOCK_THREADS>(linear_tid, block_itr, items, valid_items);
}
# 358 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
template <
    typename InputT,
    int ITEMS_PER_THREAD,
    typename InputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void LoadDirectWarpStriped(
    int linear_tid,
    InputIteratorT block_itr,
    InputT (&items)[ITEMS_PER_THREAD])
{
    int tid = linear_tid & ((1 << (5)) - 1);
    int wid = linear_tid >> (5);
    int warp_offset = wid * (1 << (5)) * ITEMS_PER_THREAD;

    InputIteratorT thread_itr = block_itr + warp_offset + tid ;


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        items[ITEM] = thread_itr[(ITEM * (1 << (5)))];
    }
}
# 394 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
template <
    typename InputT,
    int ITEMS_PER_THREAD,
    typename InputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void LoadDirectWarpStriped(
    int linear_tid,
    InputIteratorT block_itr,
    InputT (&items)[ITEMS_PER_THREAD],
    int valid_items)
{
    int tid = linear_tid & ((1 << (5)) - 1);
    int wid = linear_tid >> (5);
    int warp_offset = wid * (1 << (5)) * ITEMS_PER_THREAD;

    InputIteratorT thread_itr = block_itr + warp_offset + tid ;


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        if (warp_offset + tid + (ITEM * (1 << (5))) < valid_items)
        {
            items[ITEM] = thread_itr[(ITEM * (1 << (5)))];
        }
    }
}
# 434 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
template <
    typename InputT,
    typename DefaultT,
    int ITEMS_PER_THREAD,
    typename InputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void LoadDirectWarpStriped(
    int linear_tid,
    InputIteratorT block_itr,
    InputT (&items)[ITEMS_PER_THREAD],
    int valid_items,
    DefaultT oob_default)
{

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
        items[ITEM] = oob_default;

    LoadDirectWarpStriped(linear_tid, block_itr, items, valid_items);
}
# 473 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
enum BlockLoadAlgorithm
{
# 485 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
    BLOCK_LOAD_DIRECT,
# 505 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
    BLOCK_LOAD_VECTORIZE,
# 520 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
    BLOCK_LOAD_TRANSPOSE,
# 541 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
    BLOCK_LOAD_WARP_TRANSPOSE,
# 562 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
    BLOCK_LOAD_WARP_TRANSPOSE_TIMESLICED,
};
# 632 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
template <
    typename InputT,
    int BLOCK_DIM_X,
    int ITEMS_PER_THREAD,
    BlockLoadAlgorithm ALGORITHM = BLOCK_LOAD_DIRECT,
    int BLOCK_DIM_Y = 1,
    int BLOCK_DIM_Z = 1,
    int PTX_ARCH = 700>
class BlockLoad
{
private:






    enum
    {

        BLOCK_THREADS = BLOCK_DIM_X * BLOCK_DIM_Y * BLOCK_DIM_Z,
    };







    template <BlockLoadAlgorithm _POLICY, int DUMMY>
    struct LoadInternal;





    template <int DUMMY>
    struct LoadInternal<BLOCK_LOAD_DIRECT, DUMMY>
    {

        typedef NullType TempStorage;


        int linear_tid;


        __attribute__((device)) __inline__ __attribute__((always_inline)) LoadInternal(
            TempStorage & ,
            int linear_tid)
        :
            linear_tid(linear_tid)
        {}


        template <typename InputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD])
        {
            LoadDirectBlocked(linear_tid, block_itr, items);
        }


        template <typename InputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD],
            int valid_items)
        {
            LoadDirectBlocked(linear_tid, block_itr, items, valid_items);
        }


        template <typename InputIteratorT, typename DefaultT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD],
            int valid_items,
            DefaultT oob_default)
        {
            LoadDirectBlocked(linear_tid, block_itr, items, valid_items, oob_default);
        }

    };





    template <int DUMMY>
    struct LoadInternal<BLOCK_LOAD_VECTORIZE, DUMMY>
    {

        typedef NullType TempStorage;


        int linear_tid;


        __attribute__((device)) __inline__ __attribute__((always_inline)) LoadInternal(
            TempStorage & ,
            int linear_tid)
        :
            linear_tid(linear_tid)
        {}


        template <typename InputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputT *block_ptr,
            InputT (&items)[ITEMS_PER_THREAD])
        {
            InternalLoadDirectBlockedVectorized<LOAD_DEFAULT>(linear_tid, block_ptr, items);
        }


        template <typename InputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            const InputT *block_ptr,
            InputT (&items)[ITEMS_PER_THREAD])
        {
            InternalLoadDirectBlockedVectorized<LOAD_DEFAULT>(linear_tid, block_ptr, items);
        }


        template <
            CacheLoadModifier MODIFIER,
            typename ValueType,
            typename OffsetT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            CacheModifiedInputIterator<MODIFIER, ValueType, OffsetT> block_itr,
            InputT (&items)[ITEMS_PER_THREAD])
        {
            InternalLoadDirectBlockedVectorized<MODIFIER>(linear_tid, block_itr.ptr, items);
        }


        template <typename _InputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            _InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD])
        {
            LoadDirectBlocked(linear_tid, block_itr, items);
        }


        template <typename InputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD],
            int valid_items)
        {
            LoadDirectBlocked(linear_tid, block_itr, items, valid_items);
        }


        template <typename InputIteratorT, typename DefaultT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD],
            int valid_items,
            DefaultT oob_default)
        {
            LoadDirectBlocked(linear_tid, block_itr, items, valid_items, oob_default);
        }

    };





    template <int DUMMY>
    struct LoadInternal<BLOCK_LOAD_TRANSPOSE, DUMMY>
    {

        typedef BlockExchange<InputT, BLOCK_DIM_X, ITEMS_PER_THREAD, false, BLOCK_DIM_Y, BLOCK_DIM_Z, PTX_ARCH> BlockExchange;


        struct _TempStorage : BlockExchange::TempStorage
        {};


        struct TempStorage : Uninitialized<_TempStorage> {};


        _TempStorage &temp_storage;


        int linear_tid;


        __attribute__((device)) __inline__ __attribute__((always_inline)) LoadInternal(
            TempStorage &temp_storage,
            int linear_tid)
        :
            temp_storage(temp_storage.Alias()),
            linear_tid(linear_tid)
        {}


        template <typename InputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD])
        {
            LoadDirectStriped<BLOCK_THREADS>(linear_tid, block_itr, items);
            BlockExchange(temp_storage).StripedToBlocked(items, items);
        }


        template <typename InputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD],
            int valid_items)
        {
            LoadDirectStriped<BLOCK_THREADS>(linear_tid, block_itr, items, valid_items);
            BlockExchange(temp_storage).StripedToBlocked(items, items);
        }


        template <typename InputIteratorT, typename DefaultT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD],
            int valid_items,
            DefaultT oob_default)
        {
            LoadDirectStriped<BLOCK_THREADS>(linear_tid, block_itr, items, valid_items, oob_default);
            BlockExchange(temp_storage).StripedToBlocked(items, items);
        }

    };





    template <int DUMMY>
    struct LoadInternal<BLOCK_LOAD_WARP_TRANSPOSE, DUMMY>
    {
        enum
        {
            WARP_THREADS = (1 << (5))
        };


        typedef int cub_static_assert880[((BLOCK_THREADS % WARP_THREADS == 0)) ? 1 : -1];


        typedef BlockExchange<InputT, BLOCK_DIM_X, ITEMS_PER_THREAD, false, BLOCK_DIM_Y, BLOCK_DIM_Z, PTX_ARCH> BlockExchange;


        struct _TempStorage : BlockExchange::TempStorage
        {};


        struct TempStorage : Uninitialized<_TempStorage> {};


        _TempStorage &temp_storage;


        int linear_tid;


        __attribute__((device)) __inline__ __attribute__((always_inline)) LoadInternal(
            TempStorage &temp_storage,
            int linear_tid)
        :
            temp_storage(temp_storage.Alias()),
            linear_tid(linear_tid)
        {}


        template <typename InputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD])
        {
            LoadDirectWarpStriped(linear_tid, block_itr, items);
            BlockExchange(temp_storage).WarpStripedToBlocked(items, items);
        }


        template <typename InputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD],
            int valid_items)
        {
            LoadDirectWarpStriped(linear_tid, block_itr, items, valid_items);
            BlockExchange(temp_storage).WarpStripedToBlocked(items, items);
        }



        template <typename InputIteratorT, typename DefaultT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD],
            int valid_items,
            DefaultT oob_default)
        {
            LoadDirectWarpStriped(linear_tid, block_itr, items, valid_items, oob_default);
            BlockExchange(temp_storage).WarpStripedToBlocked(items, items);
        }
    };





    template <int DUMMY>
    struct LoadInternal<BLOCK_LOAD_WARP_TRANSPOSE_TIMESLICED, DUMMY>
    {
        enum
        {
            WARP_THREADS = (1 << (5))
        };


        typedef int cub_static_assert955[((BLOCK_THREADS % WARP_THREADS == 0)) ? 1 : -1];


        typedef BlockExchange<InputT, BLOCK_DIM_X, ITEMS_PER_THREAD, true, BLOCK_DIM_Y, BLOCK_DIM_Z, PTX_ARCH> BlockExchange;


        struct _TempStorage : BlockExchange::TempStorage
        {};


        struct TempStorage : Uninitialized<_TempStorage> {};


        _TempStorage &temp_storage;


        int linear_tid;


        __attribute__((device)) __inline__ __attribute__((always_inline)) LoadInternal(
            TempStorage &temp_storage,
            int linear_tid)
        :
            temp_storage(temp_storage.Alias()),
            linear_tid(linear_tid)
        {}


        template <typename InputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD])
        {
            LoadDirectWarpStriped(linear_tid, block_itr, items);
            BlockExchange(temp_storage).WarpStripedToBlocked(items, items);
        }


        template <typename InputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD],
            int valid_items)
        {
            LoadDirectWarpStriped(linear_tid, block_itr, items, valid_items);
            BlockExchange(temp_storage).WarpStripedToBlocked(items, items);
        }



        template <typename InputIteratorT, typename DefaultT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
            InputIteratorT block_itr,
            InputT (&items)[ITEMS_PER_THREAD],
            int valid_items,
            DefaultT oob_default)
        {
            LoadDirectWarpStriped(linear_tid, block_itr, items, valid_items, oob_default);
            BlockExchange(temp_storage).WarpStripedToBlocked(items, items);
        }
    };







    typedef LoadInternal<ALGORITHM, 0> InternalLoad;



    typedef typename InternalLoad::TempStorage _TempStorage;







    __attribute__((device)) __inline__ __attribute__((always_inline)) _TempStorage& PrivateStorage()
    {
        __attribute__((shared)) _TempStorage private_storage;
        return private_storage;
    }







    _TempStorage &temp_storage;


    int linear_tid;

public:


    struct TempStorage : Uninitialized<_TempStorage> {};
# 1066 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockLoad()
    :
        temp_storage(PrivateStorage()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
    {}





    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockLoad(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
    {}
# 1129 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
    template <typename InputIteratorT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
        InputIteratorT block_itr,
        InputT (&items)[ITEMS_PER_THREAD])
    {
        InternalLoad(temp_storage, linear_tid).Load(block_itr, items);
    }
# 1175 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
    template <typename InputIteratorT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
        InputIteratorT block_itr,
        InputT (&items)[ITEMS_PER_THREAD],
        int valid_items)
    {
        InternalLoad(temp_storage, linear_tid).Load(block_itr, items, valid_items);
    }
# 1223 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_load.cuh" 3
    template <typename InputIteratorT, typename DefaultT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Load(
        InputIteratorT block_itr,
        InputT (&items)[ITEMS_PER_THREAD],
        int valid_items,
        DefaultT oob_default)
    {
        InternalLoad(temp_storage, linear_tid).Load(block_itr, items, valid_items, oob_default);
    }




};


}
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_scan.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 1 3
# 48 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
namespace cub {
# 70 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
template <
    typename T,
    int ITEMS_PER_THREAD,
    typename OutputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void StoreDirectBlocked(
    int linear_tid,
    OutputIteratorT block_itr,
    T (&items)[ITEMS_PER_THREAD])
{
    OutputIteratorT thread_itr = block_itr + (linear_tid * ITEMS_PER_THREAD);


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        thread_itr[ITEM] = items[ITEM];
    }
}
# 99 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
template <
    typename T,
    int ITEMS_PER_THREAD,
    typename OutputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void StoreDirectBlocked(
    int linear_tid,
    OutputIteratorT block_itr,
    T (&items)[ITEMS_PER_THREAD],
    int valid_items)
{
    OutputIteratorT thread_itr = block_itr + (linear_tid * ITEMS_PER_THREAD);


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        if (ITEM + (linear_tid * ITEMS_PER_THREAD) < valid_items)
        {
            thread_itr[ITEM] = items[ITEM];
        }
    }
}
# 140 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
template <
    typename T,
    int ITEMS_PER_THREAD>
__attribute__((device)) __inline__ __attribute__((always_inline)) void StoreDirectBlockedVectorized(
    int linear_tid,
    T *block_ptr,
    T (&items)[ITEMS_PER_THREAD])
{
    enum
    {

        MAX_VEC_SIZE = (((ITEMS_PER_THREAD) < (4)) ? (ITEMS_PER_THREAD) : (4)),


        VEC_SIZE = ((((MAX_VEC_SIZE - 1) & MAX_VEC_SIZE) == 0) && ((ITEMS_PER_THREAD % MAX_VEC_SIZE) == 0)) ?
            MAX_VEC_SIZE :
            1,

        VECTORS_PER_THREAD = ITEMS_PER_THREAD / VEC_SIZE,
    };


    typedef typename CubVector<T, VEC_SIZE>::Type Vector;


    Vector *block_ptr_vectors = reinterpret_cast<Vector*>(const_cast<T*>(block_ptr));


    Vector raw_vector[VECTORS_PER_THREAD];
    T *raw_items = reinterpret_cast<T*>(raw_vector);


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        raw_items[ITEM] = items[ITEM];
    }


    StoreDirectBlocked(linear_tid, block_ptr_vectors, raw_vector);
}
# 201 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
template <
    int BLOCK_THREADS,
    typename T,
    int ITEMS_PER_THREAD,
    typename OutputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void StoreDirectStriped(
    int linear_tid,
    OutputIteratorT block_itr,
    T (&items)[ITEMS_PER_THREAD])
{
    OutputIteratorT thread_itr = block_itr + linear_tid;


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        thread_itr[(ITEM * BLOCK_THREADS)] = items[ITEM];
    }
}
# 232 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
template <
    int BLOCK_THREADS,
    typename T,
    int ITEMS_PER_THREAD,
    typename OutputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void StoreDirectStriped(
    int linear_tid,
    OutputIteratorT block_itr,
    T (&items)[ITEMS_PER_THREAD],
    int valid_items)
{
    OutputIteratorT thread_itr = block_itr + linear_tid;


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        if ((ITEM * BLOCK_THREADS) + linear_tid < valid_items)
        {
            thread_itr[(ITEM * BLOCK_THREADS)] = items[ITEM];
        }
    }
}
# 277 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
template <
    typename T,
    int ITEMS_PER_THREAD,
    typename OutputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void StoreDirectWarpStriped(
    int linear_tid,
    OutputIteratorT block_itr,
    T (&items)[ITEMS_PER_THREAD])
{
    int tid = linear_tid & ((1 << (5)) - 1);
    int wid = linear_tid >> (5);
    int warp_offset = wid * (1 << (5)) * ITEMS_PER_THREAD;

    OutputIteratorT thread_itr = block_itr + warp_offset + tid;


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        thread_itr[(ITEM * (1 << (5)))] = items[ITEM];
    }
}
# 313 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
template <
    typename T,
    int ITEMS_PER_THREAD,
    typename OutputIteratorT>
__attribute__((device)) __inline__ __attribute__((always_inline)) void StoreDirectWarpStriped(
    int linear_tid,
    OutputIteratorT block_itr,
    T (&items)[ITEMS_PER_THREAD],
    int valid_items)
{
    int tid = linear_tid & ((1 << (5)) - 1);
    int wid = linear_tid >> (5);
    int warp_offset = wid * (1 << (5)) * ITEMS_PER_THREAD;

    OutputIteratorT thread_itr = block_itr + warp_offset + tid;


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ITEM++)
    {
        if (warp_offset + tid + (ITEM * (1 << (5))) < valid_items)
        {
            thread_itr[(ITEM * (1 << (5)))] = items[ITEM];
        }
    }
}
# 354 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
enum BlockStoreAlgorithm
{
# 366 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
    BLOCK_STORE_DIRECT,
# 386 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
    BLOCK_STORE_VECTORIZE,
# 399 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
    BLOCK_STORE_TRANSPOSE,
# 416 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
    BLOCK_STORE_WARP_TRANSPOSE,
# 435 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
    BLOCK_STORE_WARP_TRANSPOSE_TIMESLICED,

};
# 507 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
template <
    typename T,
    int BLOCK_DIM_X,
    int ITEMS_PER_THREAD,
    BlockStoreAlgorithm ALGORITHM = BLOCK_STORE_DIRECT,
    int BLOCK_DIM_Y = 1,
    int BLOCK_DIM_Z = 1,
    int PTX_ARCH = 700>
class BlockStore
{
private:





    enum
    {

        BLOCK_THREADS = BLOCK_DIM_X * BLOCK_DIM_Y * BLOCK_DIM_Z,
    };







    template <BlockStoreAlgorithm _POLICY, int DUMMY>
    struct StoreInternal;





    template <int DUMMY>
    struct StoreInternal<BLOCK_STORE_DIRECT, DUMMY>
    {

        typedef NullType TempStorage;


        int linear_tid;


        __attribute__((device)) __inline__ __attribute__((always_inline)) StoreInternal(
            TempStorage & ,
            int linear_tid)
        :
            linear_tid(linear_tid)
        {}


        template <typename OutputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(
            OutputIteratorT block_itr,
            T (&items)[ITEMS_PER_THREAD])
        {
            StoreDirectBlocked(linear_tid, block_itr, items);
        }


        template <typename OutputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(
            OutputIteratorT block_itr,
            T (&items)[ITEMS_PER_THREAD],
            int valid_items)
        {
            StoreDirectBlocked(linear_tid, block_itr, items, valid_items);
        }
    };





    template <int DUMMY>
    struct StoreInternal<BLOCK_STORE_VECTORIZE, DUMMY>
    {

        typedef NullType TempStorage;


        int linear_tid;


        __attribute__((device)) __inline__ __attribute__((always_inline)) StoreInternal(
            TempStorage & ,
            int linear_tid)
        :
            linear_tid(linear_tid)
        {}


        __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(
            T *block_ptr,
            T (&items)[ITEMS_PER_THREAD])
        {
            StoreDirectBlockedVectorized(linear_tid, block_ptr, items);
        }


        template <typename OutputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(
            OutputIteratorT block_itr,
            T (&items)[ITEMS_PER_THREAD])
        {
            StoreDirectBlocked(linear_tid, block_itr, items);
        }


        template <typename OutputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(
            OutputIteratorT block_itr,
            T (&items)[ITEMS_PER_THREAD],
            int valid_items)
        {
            StoreDirectBlocked(linear_tid, block_itr, items, valid_items);
        }
    };





    template <int DUMMY>
    struct StoreInternal<BLOCK_STORE_TRANSPOSE, DUMMY>
    {

        typedef BlockExchange<T, BLOCK_DIM_X, ITEMS_PER_THREAD, false, BLOCK_DIM_Y, BLOCK_DIM_Z, PTX_ARCH> BlockExchange;


        struct _TempStorage : BlockExchange::TempStorage
        {

            volatile int valid_items;
        };


        struct TempStorage : Uninitialized<_TempStorage> {};


        _TempStorage &temp_storage;


        int linear_tid;


        __attribute__((device)) __inline__ __attribute__((always_inline)) StoreInternal(
            TempStorage &temp_storage,
            int linear_tid)
        :
            temp_storage(temp_storage.Alias()),
            linear_tid(linear_tid)
        {}


        template <typename OutputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(
            OutputIteratorT block_itr,
            T (&items)[ITEMS_PER_THREAD])
        {
            BlockExchange(temp_storage).BlockedToStriped(items);
            StoreDirectStriped<BLOCK_THREADS>(linear_tid, block_itr, items);
        }


        template <typename OutputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(
            OutputIteratorT block_itr,
            T (&items)[ITEMS_PER_THREAD],
            int valid_items)
        {
            BlockExchange(temp_storage).BlockedToStriped(items);
            if (linear_tid == 0)
                temp_storage.valid_items = valid_items;
            CTA_SYNC();
            StoreDirectStriped<BLOCK_THREADS>(linear_tid, block_itr, items, temp_storage.valid_items);
        }
    };





    template <int DUMMY>
    struct StoreInternal<BLOCK_STORE_WARP_TRANSPOSE, DUMMY>
    {
        enum
        {
            WARP_THREADS = (1 << (5))
        };


        typedef int cub_static_assert701[((BLOCK_THREADS % WARP_THREADS == 0)) ? 1 : -1];


        typedef BlockExchange<T, BLOCK_DIM_X, ITEMS_PER_THREAD, false, BLOCK_DIM_Y, BLOCK_DIM_Z, PTX_ARCH> BlockExchange;


        struct _TempStorage : BlockExchange::TempStorage
        {

            volatile int valid_items;
        };


        struct TempStorage : Uninitialized<_TempStorage> {};


        _TempStorage &temp_storage;


        int linear_tid;


        __attribute__((device)) __inline__ __attribute__((always_inline)) StoreInternal(
            TempStorage &temp_storage,
            int linear_tid)
        :
            temp_storage(temp_storage.Alias()),
            linear_tid(linear_tid)
        {}


        template <typename OutputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(
            OutputIteratorT block_itr,
            T (&items)[ITEMS_PER_THREAD])
        {
            BlockExchange(temp_storage).BlockedToWarpStriped(items);
            StoreDirectWarpStriped(linear_tid, block_itr, items);
        }


        template <typename OutputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(
            OutputIteratorT block_itr,
            T (&items)[ITEMS_PER_THREAD],
            int valid_items)
        {
            BlockExchange(temp_storage).BlockedToWarpStriped(items);
            if (linear_tid == 0)
                temp_storage.valid_items = valid_items;
            CTA_SYNC();
            StoreDirectWarpStriped(linear_tid, block_itr, items, temp_storage.valid_items);
        }
    };





    template <int DUMMY>
    struct StoreInternal<BLOCK_STORE_WARP_TRANSPOSE_TIMESLICED, DUMMY>
    {
        enum
        {
            WARP_THREADS = (1 << (5))
        };


        typedef int cub_static_assert769[((BLOCK_THREADS % WARP_THREADS == 0)) ? 1 : -1];


        typedef BlockExchange<T, BLOCK_DIM_X, ITEMS_PER_THREAD, true, BLOCK_DIM_Y, BLOCK_DIM_Z, PTX_ARCH> BlockExchange;


        struct _TempStorage : BlockExchange::TempStorage
        {

            volatile int valid_items;
        };


        struct TempStorage : Uninitialized<_TempStorage> {};


        _TempStorage &temp_storage;


        int linear_tid;


        __attribute__((device)) __inline__ __attribute__((always_inline)) StoreInternal(
            TempStorage &temp_storage,
            int linear_tid)
        :
            temp_storage(temp_storage.Alias()),
            linear_tid(linear_tid)
        {}


        template <typename OutputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(
            OutputIteratorT block_itr,
            T (&items)[ITEMS_PER_THREAD])
        {
            BlockExchange(temp_storage).BlockedToWarpStriped(items);
            StoreDirectWarpStriped(linear_tid, block_itr, items);
        }


        template <typename OutputIteratorT>
        __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(
            OutputIteratorT block_itr,
            T (&items)[ITEMS_PER_THREAD],
            int valid_items)
        {
            BlockExchange(temp_storage).BlockedToWarpStriped(items);
            if (linear_tid == 0)
                temp_storage.valid_items = valid_items;
            CTA_SYNC();
            StoreDirectWarpStriped(linear_tid, block_itr, items, temp_storage.valid_items);
        }
    };






    typedef StoreInternal<ALGORITHM, 0> InternalStore;



    typedef typename InternalStore::TempStorage _TempStorage;







    __attribute__((device)) __inline__ __attribute__((always_inline)) _TempStorage& PrivateStorage()
    {
        __attribute__((shared)) _TempStorage private_storage;
        return private_storage;
    }







    _TempStorage &temp_storage;


    int linear_tid;

public:



    struct TempStorage : Uninitialized<_TempStorage> {};
# 873 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockStore()
    :
        temp_storage(PrivateStorage()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
    {}





    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockStore(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
    {}
# 938 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
    template <typename OutputIteratorT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(
        OutputIteratorT block_itr,
        T (&items)[ITEMS_PER_THREAD])
    {
        InternalStore(temp_storage, linear_tid).Store(block_itr, items);
    }
# 987 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_store.cuh" 3
    template <typename OutputIteratorT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Store(
        OutputIteratorT block_itr,
        T (&items)[ITEMS_PER_THREAD],
        int valid_items)
    {
        InternalStore(temp_storage, linear_tid).Store(block_itr, items, valid_items);
    }
};


}
# 41 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_scan.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 1 3
# 36 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/block_scan_raking.cuh" 1 3
# 39 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/block_scan_raking.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../block/block_raking_layout.cuh" 1 3
# 46 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../block/block_raking_layout.cuh" 3
namespace cub {
# 63 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../block/block_raking_layout.cuh" 3
template <
    typename T,
    int BLOCK_THREADS,
    int PTX_ARCH = 700>
struct BlockRakingLayout
{




    enum
    {

        SHARED_ELEMENTS = BLOCK_THREADS,


        MAX_RAKING_THREADS = ((((1 << (5))) < (BLOCK_THREADS)) ? ((1 << (5))) : (BLOCK_THREADS)),


        SEGMENT_LENGTH = (SHARED_ELEMENTS + MAX_RAKING_THREADS - 1) / MAX_RAKING_THREADS,


        RAKING_THREADS = (SHARED_ELEMENTS + SEGMENT_LENGTH - 1) / SEGMENT_LENGTH,


        HAS_CONFLICTS = ((1 << ((PTX_ARCH >= 200) ? (5) : (4))) % SEGMENT_LENGTH == 0),


        CONFLICT_DEGREE = (HAS_CONFLICTS) ?
            (MAX_RAKING_THREADS * SEGMENT_LENGTH) / (1 << ((PTX_ARCH >= 200) ? (5) : (4))) :
            1,


        USE_SEGMENT_PADDING = ((SEGMENT_LENGTH & 1) == 0) && (SEGMENT_LENGTH > 2),


        GRID_ELEMENTS = RAKING_THREADS * (SEGMENT_LENGTH + USE_SEGMENT_PADDING),


        UNGUARDED = (SHARED_ELEMENTS % RAKING_THREADS == 0),
    };





    struct __attribute__((aligned(16))) _TempStorage
    {
        T buff[BlockRakingLayout::GRID_ELEMENTS];
    };


    struct TempStorage : Uninitialized<_TempStorage> {};





    static __attribute__((device)) __inline__ __attribute__((always_inline)) T* PlacementPtr(
        TempStorage &temp_storage,
        unsigned int linear_tid)
    {

        unsigned int offset = linear_tid;


        if (USE_SEGMENT_PADDING > 0)
        {
            offset += offset / SEGMENT_LENGTH;
        }


        return temp_storage.Alias().buff + offset;
    }





    static __attribute__((device)) __inline__ __attribute__((always_inline)) T* RakingPtr(
        TempStorage &temp_storage,
        unsigned int linear_tid)
    {
        return temp_storage.Alias().buff + (linear_tid * (SEGMENT_LENGTH + USE_SEGMENT_PADDING));
    }
};

}
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/block_scan_raking.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_reduce.cuh" 1 3
# 43 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_reduce.cuh" 3
namespace cub {


namespace internal {




template <
    int LENGTH,
    typename T,
    typename ReductionOp>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadReduce(
    T* input,
    ReductionOp reduction_op,
    T prefix,
    Int2Type<LENGTH> )
{
    T retval = prefix;

#pragma unroll
 for (int i = 0; i < LENGTH; ++i)
        retval = reduction_op(retval, input[i]);

    return retval;
}
# 78 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_reduce.cuh" 3
template <
    int LENGTH,
    typename T,
    typename ReductionOp>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadReduce(
    T* input,
    ReductionOp reduction_op,
    T prefix)
{
    return ThreadReduce(input, reduction_op, prefix, Int2Type<LENGTH>());
}
# 98 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_reduce.cuh" 3
template <
    int LENGTH,
    typename T,
    typename ReductionOp>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadReduce(
    T* input,
    ReductionOp reduction_op)
{
    T prefix = input[0];
    return ThreadReduce<LENGTH - 1>(input + 1, reduction_op, prefix);
}
# 118 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_reduce.cuh" 3
template <
    int LENGTH,
    typename T,
    typename ReductionOp>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadReduce(
    T (&input)[LENGTH],
    ReductionOp reduction_op,
    T prefix)
{
    return ThreadReduce(input, reduction_op, prefix, Int2Type<LENGTH>());
}
# 138 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_reduce.cuh" 3
template <
    int LENGTH,
    typename T,
    typename ReductionOp>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadReduce(
    T (&input)[LENGTH],
    ReductionOp reduction_op)
{
    return ThreadReduce<LENGTH>((T*) input, reduction_op);
}


}
}
# 41 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/block_scan_raking.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_scan.cuh" 1 3
# 43 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_scan.cuh" 3
namespace cub {


namespace internal {
# 59 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_scan.cuh" 3
template <
    int LENGTH,
    typename T,
    typename ScanOp>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadScanExclusive(
    T inclusive,
    T exclusive,
    T *input,
    T *output,
    ScanOp scan_op,
    Int2Type<LENGTH> )
{
#pragma unroll
 for (int i = 0; i < LENGTH; ++i)
    {
        inclusive = scan_op(exclusive, input[i]);
        output[i] = exclusive;
        exclusive = inclusive;
    }

    return inclusive;
}
# 91 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_scan.cuh" 3
template <
    int LENGTH,
    typename T,
    typename ScanOp>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadScanExclusive(
    T *input,
    T *output,
    ScanOp scan_op,
    T prefix,
    bool apply_prefix = true)
{
    T inclusive = input[0];
    if (apply_prefix)
    {
        inclusive = scan_op(prefix, inclusive);
    }
    output[0] = prefix;
    T exclusive = inclusive;

    return ThreadScanExclusive(inclusive, exclusive, input + 1, output + 1, scan_op, Int2Type<LENGTH - 1>());
}
# 121 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_scan.cuh" 3
template <
    int LENGTH,
    typename T,
    typename ScanOp>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadScanExclusive(
    T (&input)[LENGTH],
    T (&output)[LENGTH],
    ScanOp scan_op,
    T prefix,
    bool apply_prefix = true)
{
    return ThreadScanExclusive<LENGTH>((T*) input, (T*) output, scan_op, prefix, apply_prefix);
}
# 143 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_scan.cuh" 3
template <
    int LENGTH,
    typename T,
    typename ScanOp>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadScanInclusive(
    T inclusive,
    T *input,
    T *output,
    ScanOp scan_op,
    Int2Type<LENGTH> )
{
#pragma unroll
 for (int i = 0; i < LENGTH; ++i)
    {
        inclusive = scan_op(inclusive, input[i]);
        output[i] = inclusive;
    }

    return inclusive;
}
# 172 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_scan.cuh" 3
template <
    int LENGTH,
    typename T,
    typename ScanOp>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadScanInclusive(
    T *input,
    T *output,
    ScanOp scan_op)
{
    T inclusive = input[0];
    output[0] = inclusive;


    return ThreadScanInclusive(inclusive, input + 1, output + 1, scan_op, Int2Type<LENGTH - 1>());
}
# 196 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_scan.cuh" 3
template <
    int LENGTH,
    typename T,
    typename ScanOp>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadScanInclusive(
    T (&input)[LENGTH],
    T (&output)[LENGTH],
    ScanOp scan_op)
{
    return ThreadScanInclusive<LENGTH>((T*) input, (T*) output, scan_op);
}
# 216 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_scan.cuh" 3
template <
    int LENGTH,
    typename T,
    typename ScanOp>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadScanInclusive(
    T *input,
    T *output,
    ScanOp scan_op,
    T prefix,
    bool apply_prefix = true)
{
    T inclusive = input[0];
    if (apply_prefix)
    {
        inclusive = scan_op(prefix, inclusive);
    }
    output[0] = inclusive;


    return ThreadScanInclusive(inclusive, input + 1, output + 1, scan_op, Int2Type<LENGTH - 1>());
}
# 246 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../thread/thread_scan.cuh" 3
template <
    int LENGTH,
    typename T,
    typename ScanOp>
__attribute__((device)) __inline__ __attribute__((always_inline)) T ThreadScanInclusive(
    T (&input)[LENGTH],
    T (&output)[LENGTH],
    ScanOp scan_op,
    T prefix,
    bool apply_prefix = true)
{
    return ThreadScanInclusive<LENGTH>((T*) input, (T*) output, scan_op, prefix, apply_prefix);
}







}
}
# 42 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/block_scan_raking.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 1 3
# 36 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_scan_shfl.cuh" 1 3
# 45 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_scan_shfl.cuh" 3
namespace cub {






template <
    typename T,
    int LOGICAL_WARP_THREADS,
    int PTX_ARCH>
struct WarpScanShfl
{




    enum
    {

        IS_ARCH_WARP = (LOGICAL_WARP_THREADS == (1 << (5))),


        STEPS = Log2<LOGICAL_WARP_THREADS>::VALUE,


        SHFL_C = ((1 << (5)) - LOGICAL_WARP_THREADS) << 8
    };

    template <typename S>
    struct IntegerTraits
    {
        enum {

            IS_SMALL_UNSIGNED = (Traits<S>::CATEGORY == UNSIGNED_INTEGER) && (sizeof(S) <= sizeof(unsigned int))
        };
    };


    struct TempStorage {};







    unsigned int lane_id;


    unsigned int warp_id;


    unsigned int member_mask;






    __attribute__((device)) __inline__ __attribute__((always_inline)) WarpScanShfl(
        TempStorage & )
    {
        lane_id = LaneId();
        warp_id = 0;
        member_mask = 0xffffffffu >> ((1 << (5)) - LOGICAL_WARP_THREADS);

        if (!IS_ARCH_WARP)
        {
            warp_id = lane_id / LOGICAL_WARP_THREADS;
            lane_id = lane_id % LOGICAL_WARP_THREADS;
            member_mask = member_mask << (warp_id * LOGICAL_WARP_THREADS);
        }
    }







    __attribute__((device)) __inline__ __attribute__((always_inline)) int InclusiveScanStep(
        int input,
        cub::Sum ,
        int first_lane,
        int offset)
    {
        int output;
        int shfl_c = first_lane | SHFL_C;



        asm volatile(
            "{"
            "  .reg .s32 r0;"
            "  .reg .pred p;"
            "  shfl.sync.up.b32 r0|p, %1, %2, %3, %5;"
            "  @p add.s32 r0, r0, %4;"
            "  mov.s32 %0, r0;"
            "}"
            : "=r"(output) : "r"(input), "r"(offset), "r"(shfl_c), "r"(input), "r"(member_mask));
# 158 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_scan_shfl.cuh" 3
        return output;
    }


    __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned int InclusiveScanStep(
        unsigned int input,
        cub::Sum ,
        int first_lane,
        int offset)
    {
        unsigned int output;
        int shfl_c = first_lane | SHFL_C;



        asm volatile(
            "{"
            "  .reg .u32 r0;"
            "  .reg .pred p;"
            "  shfl.sync.up.b32 r0|p, %1, %2, %3, %5;"
            "  @p add.u32 r0, r0, %4;"
            "  mov.u32 %0, r0;"
            "}"
            : "=r"(output) : "r"(input), "r"(offset), "r"(shfl_c), "r"(input), "r"(member_mask));
# 194 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_scan_shfl.cuh" 3
        return output;
    }



    __attribute__((device)) __inline__ __attribute__((always_inline)) float InclusiveScanStep(
        float input,
        cub::Sum ,
        int first_lane,
        int offset)
    {
        float output;
        int shfl_c = first_lane | SHFL_C;



        asm volatile(
            "{"
            "  .reg .f32 r0;"
            "  .reg .pred p;"
            "  shfl.sync.up.b32 r0|p, %1, %2, %3, %5;"
            "  @p add.f32 r0, r0, %4;"
            "  mov.f32 %0, r0;"
            "}"
            : "=f"(output) : "f"(input), "r"(offset), "r"(shfl_c), "f"(input), "r"(member_mask));
# 231 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_scan_shfl.cuh" 3
        return output;
    }



    __attribute__((device)) __inline__ __attribute__((always_inline)) unsigned long long InclusiveScanStep(
        unsigned long long input,
        cub::Sum ,
        int first_lane,
        int offset)
    {
        unsigned long long output;
        int shfl_c = first_lane | SHFL_C;



        asm volatile(
            "{"
            "  .reg .u64 r0;"
            "  .reg .u32 lo;"
            "  .reg .u32 hi;"
            "  .reg .pred p;"
            "  mov.b64 {lo, hi}, %1;"
            "  shfl.sync.up.b32 lo|p, lo, %2, %3, %5;"
            "  shfl.sync.up.b32 hi|p, hi, %2, %3, %5;"
            "  mov.b64 r0, {lo, hi};"
            "  @p add.u64 r0, r0, %4;"
            "  mov.u64 %0, r0;"
            "}"
            : "=l"(output) : "l"(input), "r"(offset), "r"(shfl_c), "l"(input), "r"(member_mask));
# 278 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_scan_shfl.cuh" 3
        return output;
    }



    __attribute__((device)) __inline__ __attribute__((always_inline)) long long InclusiveScanStep(
        long long input,
        cub::Sum ,
        int first_lane,
        int offset)
    {
        long long output;
        int shfl_c = first_lane | SHFL_C;



        asm volatile(
            "{"
            "  .reg .s64 r0;"
            "  .reg .u32 lo;"
            "  .reg .u32 hi;"
            "  .reg .pred p;"
            "  mov.b64 {lo, hi}, %1;"
            "  shfl.sync.up.b32 lo|p, lo, %2, %3, %5;"
            "  shfl.sync.up.b32 hi|p, hi, %2, %3, %5;"
            "  mov.b64 r0, {lo, hi};"
            "  @p add.s64 r0, r0, %4;"
            "  mov.s64 %0, r0;"
            "}"
            : "=l"(output) : "l"(input), "r"(offset), "r"(shfl_c), "l"(input), "r"(member_mask));
# 325 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_scan_shfl.cuh" 3
        return output;
    }



    __attribute__((device)) __inline__ __attribute__((always_inline)) double InclusiveScanStep(
        double input,
        cub::Sum ,
        int first_lane,
        int offset)
    {
        double output;
        int shfl_c = first_lane | SHFL_C;



        asm volatile(
            "{"
            "  .reg .u32 lo;"
            "  .reg .u32 hi;"
            "  .reg .pred p;"
            "  .reg .f64 r0;"
            "  mov.b64 %0, %1;"
            "  mov.b64 {lo, hi}, %1;"
            "  shfl.sync.up.b32 lo|p, lo, %2, %3, %4;"
            "  shfl.sync.up.b32 hi|p, hi, %2, %3, %4;"
            "  mov.b64 r0, {lo, hi};"
            "  @p add.f64 %0, %0, r0;"
            "}"
            : "=d"(output) : "d"(input), "r"(offset), "r"(shfl_c), "r"(member_mask));
# 372 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_scan_shfl.cuh" 3
        return output;
    }
# 398 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_scan_shfl.cuh" 3
    template <typename _T, typename ScanOpT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) _T InclusiveScanStep(
        _T input,
        ScanOpT scan_op,
        int first_lane,
        int offset)
    {
        _T temp = ShuffleUp<LOGICAL_WARP_THREADS>(input, offset, first_lane, member_mask);


        _T output = scan_op(temp, input);
        if (static_cast<int>(lane_id) < first_lane + offset)
            output = input;

        return output;
    }



    template <typename _T, typename ScanOpT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) _T InclusiveScanStep(
        _T input,
        ScanOpT scan_op,
        int first_lane,
        int offset,
        Int2Type<true> )
    {
        return InclusiveScanStep(input, scan_op, first_lane, offset);
    }



    template <typename _T, typename ScanOpT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) _T InclusiveScanStep(
        _T input,
        ScanOpT scan_op,
        int first_lane,
        int offset,
        Int2Type<false> )
    {
        return InclusiveScanStep(input, scan_op, first_lane, offset);
    }
# 451 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_scan_shfl.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) T Broadcast(
        T input,
        int src_lane)
    {
        return ShuffleIndex<LOGICAL_WARP_THREADS>(input, src_lane, member_mask);
    }







    template <typename _T, typename ScanOpT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        _T input,
        _T &inclusive_output,
        ScanOpT scan_op)
    {
        inclusive_output = input;


        int segment_first_lane = 0;


#pragma unroll
 for (int STEP = 0; STEP < STEPS; STEP++)
        {
            inclusive_output = InclusiveScanStep(
                inclusive_output,
                scan_op,
                segment_first_lane,
                (1 << STEP),
                Int2Type<IntegerTraits<T>::IS_SMALL_UNSIGNED>());
        }

    }


    template <typename KeyT, typename ValueT, typename ReductionOpT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        KeyValuePair<KeyT, ValueT> input,
        KeyValuePair<KeyT, ValueT> &inclusive_output,
        ReduceByKeyOp<ReductionOpT > scan_op)
    {
        inclusive_output = input;

        KeyT pred_key = ShuffleUp<LOGICAL_WARP_THREADS>(inclusive_output.key, 1, 0, member_mask);

        unsigned int ballot = WARP_BALLOT((pred_key != inclusive_output.key), member_mask);


        ballot = ballot & LaneMaskLe();


        int segment_first_lane = (((31 - __clz(ballot)) > (0)) ? (31 - __clz(ballot)) : (0));


#pragma unroll
 for (int STEP = 0; STEP < STEPS; STEP++)
        {
            inclusive_output.value = InclusiveScanStep(
                inclusive_output.value,
                scan_op.op,
                segment_first_lane,
                (1 << STEP),
                Int2Type<IntegerTraits<T>::IS_SMALL_UNSIGNED>());
        }
    }



    template <typename ScanOpT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &inclusive_output,
        ScanOpT scan_op,
        T &warp_aggregate)
    {
        InclusiveScan(input, inclusive_output, scan_op);


        warp_aggregate = ShuffleIndex<LOGICAL_WARP_THREADS>(inclusive_output, LOGICAL_WARP_THREADS - 1, member_mask);
    }







    template <typename ScanOpT, typename IsIntegerT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Update(
        T ,
        T &inclusive,
        T &exclusive,
        ScanOpT ,
        IsIntegerT )
    {

        exclusive = ShuffleUp<LOGICAL_WARP_THREADS>(inclusive, 1, 0, member_mask);
    }


    __attribute__((device)) __inline__ __attribute__((always_inline)) void Update(
        T input,
        T &inclusive,
        T &exclusive,
        cub::Sum ,
        Int2Type<true> )
    {

        exclusive = inclusive - input;
    }


    template <typename ScanOpT, typename IsIntegerT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Update (
        T ,
        T &inclusive,
        T &exclusive,
        ScanOpT scan_op,
        T initial_value,
        IsIntegerT )
    {
        inclusive = scan_op(initial_value, inclusive);
        exclusive = ShuffleUp<LOGICAL_WARP_THREADS>(inclusive, 1, 0, member_mask);

        if (lane_id == 0)
            exclusive = initial_value;
    }


    __attribute__((device)) __inline__ __attribute__((always_inline)) void Update (
        T input,
        T &inclusive,
        T &exclusive,
        cub::Sum scan_op,
        T initial_value,
        Int2Type<true> )
    {
        inclusive = scan_op(initial_value, inclusive);
        exclusive = inclusive - input;
    }



    template <typename ScanOpT, typename IsIntegerT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Update (
        T input,
        T &inclusive,
        T &exclusive,
        T &warp_aggregate,
        ScanOpT scan_op,
        IsIntegerT is_integer)
    {
        warp_aggregate = ShuffleIndex<LOGICAL_WARP_THREADS>(inclusive, LOGICAL_WARP_THREADS - 1, member_mask);
        Update(input, inclusive, exclusive, scan_op, is_integer);
    }


    template <typename ScanOpT, typename IsIntegerT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Update (
        T input,
        T &inclusive,
        T &exclusive,
        T &warp_aggregate,
        ScanOpT scan_op,
        T initial_value,
        IsIntegerT is_integer)
    {
        warp_aggregate = ShuffleIndex<LOGICAL_WARP_THREADS>(inclusive, LOGICAL_WARP_THREADS - 1, member_mask);
        Update(input, inclusive, exclusive, scan_op, initial_value, is_integer);
    }



};


}
# 37 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_scan_smem.cuh" 1 3
# 46 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_scan_smem.cuh" 3
namespace cub {




template <
    typename T,
    int LOGICAL_WARP_THREADS,
    int PTX_ARCH>
struct WarpScanSmem
{




    enum
    {

        IS_ARCH_WARP = (LOGICAL_WARP_THREADS == (1 << (5))),


        IS_POW_OF_TWO = PowerOfTwo<LOGICAL_WARP_THREADS>::VALUE,


        STEPS = Log2<LOGICAL_WARP_THREADS>::VALUE,


        HALF_WARP_THREADS = 1 << (STEPS - 1),


        WARP_SMEM_ELEMENTS = LOGICAL_WARP_THREADS + HALF_WARP_THREADS,
    };


    typedef typename If<((Equals<T, char>::VALUE || Equals<T, signed char>::VALUE) && (PTX_ARCH < 200)), int, T>::Type CellT;


    typedef CellT _TempStorage[WARP_SMEM_ELEMENTS];


    struct TempStorage : Uninitialized<_TempStorage> {};






    _TempStorage &temp_storage;
    unsigned int lane_id;
    unsigned int member_mask;







    __attribute__((device)) __inline__ __attribute__((always_inline)) WarpScanSmem(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias()),

        lane_id(IS_ARCH_WARP ?
            LaneId() :
            LaneId() % LOGICAL_WARP_THREADS),

        member_mask((0xffffffff >> (32 - LOGICAL_WARP_THREADS)) << ((IS_ARCH_WARP || !IS_POW_OF_TWO ) ?
            0 :
            ((LaneId() / LOGICAL_WARP_THREADS) * LOGICAL_WARP_THREADS)))
    {}







    template <
        bool HAS_IDENTITY,
        int STEP,
        typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScanStep(
        T &partial,
        ScanOp scan_op,
        Int2Type<STEP> )
    {
        const int OFFSET = 1 << STEP;


        ThreadStore<STORE_VOLATILE>(&temp_storage[HALF_WARP_THREADS + lane_id], (CellT) partial);

        WARP_SYNC(member_mask);


        if (HAS_IDENTITY || (lane_id >= OFFSET))
        {
            T addend = (T) ThreadLoad<LOAD_VOLATILE>(&temp_storage[HALF_WARP_THREADS + lane_id - OFFSET]);
            partial = scan_op(addend, partial);
        }
        WARP_SYNC(member_mask);

        ScanStep<HAS_IDENTITY>(partial, scan_op, Int2Type<STEP + 1>());
    }



    template <
        bool HAS_IDENTITY,
        typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScanStep(
        T & ,
        ScanOp ,
        Int2Type<STEPS> )
    {}



    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &output,
        Sum scan_op,
        Int2Type<true> )
    {
        T identity = 0;
        ThreadStore<STORE_VOLATILE>(&temp_storage[lane_id], (CellT) identity);

        WARP_SYNC(member_mask);


        output = input;
        ScanStep<true>(output, scan_op, Int2Type<0>());
    }



    template <typename ScanOp, int IS_PRIMITIVE>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &output,
        ScanOp scan_op,
        Int2Type<IS_PRIMITIVE> )
    {

        output = input;
        ScanStep<false>(output, scan_op, Int2Type<0>());
    }
# 203 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../warp/specializations/warp_scan_smem.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) T Broadcast(
        T input,
        unsigned int src_lane)
    {
        if (lane_id == src_lane)
        {
            ThreadStore<STORE_VOLATILE>(temp_storage, (CellT) input);
        }

        WARP_SYNC(member_mask);

        return (T)ThreadLoad<LOAD_VOLATILE>(temp_storage);
    }







    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &inclusive_output,
        ScanOp scan_op)
    {
        InclusiveScan(input, inclusive_output, scan_op, Int2Type<Traits<T>::PRIMITIVE>());
    }



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &inclusive_output,
        ScanOp scan_op,
        T &warp_aggregate)
    {
        InclusiveScan(input, inclusive_output, scan_op);


        ThreadStore<STORE_VOLATILE>(&temp_storage[HALF_WARP_THREADS + lane_id], (CellT) inclusive_output);

        WARP_SYNC(member_mask);

        warp_aggregate = (T) ThreadLoad<LOAD_VOLATILE>(&temp_storage[WARP_SMEM_ELEMENTS - 1]);

        WARP_SYNC(member_mask);
    }







    template <typename ScanOpT, typename IsIntegerT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Update(
        T ,
        T &inclusive,
        T &exclusive,
        ScanOpT ,
        IsIntegerT )
    {

        ThreadStore<STORE_VOLATILE>(&temp_storage[HALF_WARP_THREADS + lane_id], (CellT) inclusive);

        WARP_SYNC(member_mask);

        exclusive = (T) ThreadLoad<LOAD_VOLATILE>(&temp_storage[HALF_WARP_THREADS + lane_id - 1]);
    }


    __attribute__((device)) __inline__ __attribute__((always_inline)) void Update(
        T input,
        T &inclusive,
        T &exclusive,
        cub::Sum ,
        Int2Type<true> )
    {

        exclusive = inclusive - input;
    }


    template <typename ScanOpT, typename IsIntegerT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Update (
        T ,
        T &inclusive,
        T &exclusive,
        ScanOpT scan_op,
        T initial_value,
        IsIntegerT )
    {
        inclusive = scan_op(initial_value, inclusive);
        ThreadStore<STORE_VOLATILE>(&temp_storage[HALF_WARP_THREADS + lane_id], (CellT) inclusive);

        WARP_SYNC(member_mask);

        exclusive = (T) ThreadLoad<LOAD_VOLATILE>(&temp_storage[HALF_WARP_THREADS + lane_id - 1]);
        if (lane_id == 0)
            exclusive = initial_value;
    }


    __attribute__((device)) __inline__ __attribute__((always_inline)) void Update (
        T input,
        T &inclusive,
        T &exclusive,
        cub::Sum scan_op,
        T initial_value,
        Int2Type<true> )
    {
        inclusive = scan_op(initial_value, inclusive);
        exclusive = inclusive - input;
    }



    template <typename ScanOpT, typename IsIntegerT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Update (
        T ,
        T &inclusive,
        T &exclusive,
        T &warp_aggregate,
        ScanOpT ,
        IsIntegerT )
    {

        ThreadStore<STORE_VOLATILE>(&temp_storage[HALF_WARP_THREADS + lane_id], (CellT) inclusive);

        WARP_SYNC(member_mask);

        exclusive = (T) ThreadLoad<LOAD_VOLATILE>(&temp_storage[HALF_WARP_THREADS + lane_id - 1]);
        warp_aggregate = (T) ThreadLoad<LOAD_VOLATILE>(&temp_storage[WARP_SMEM_ELEMENTS - 1]);
    }


    __attribute__((device)) __inline__ __attribute__((always_inline)) void Update (
        T input,
        T &inclusive,
        T &exclusive,
        T &warp_aggregate,
        cub::Sum ,
        Int2Type<true> )
    {

        ThreadStore<STORE_VOLATILE>(&temp_storage[HALF_WARP_THREADS + lane_id], (CellT) inclusive);

        WARP_SYNC(member_mask);

        warp_aggregate = (T) ThreadLoad<LOAD_VOLATILE>(&temp_storage[WARP_SMEM_ELEMENTS - 1]);
        exclusive = inclusive - input;
    }


    template <typename ScanOpT, typename IsIntegerT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Update (
        T ,
        T &inclusive,
        T &exclusive,
        T &warp_aggregate,
        ScanOpT scan_op,
        T initial_value,
        IsIntegerT )
    {

        ThreadStore<STORE_VOLATILE>(&temp_storage[HALF_WARP_THREADS + lane_id], (CellT) inclusive);

        WARP_SYNC(member_mask);

        warp_aggregate = (T) ThreadLoad<LOAD_VOLATILE>(&temp_storage[WARP_SMEM_ELEMENTS - 1]);

        WARP_SYNC(member_mask);


        inclusive = scan_op(initial_value, inclusive);


        ThreadStore<STORE_VOLATILE>(&temp_storage[HALF_WARP_THREADS + lane_id - 1], (CellT) inclusive);

        WARP_SYNC(member_mask);

        exclusive = (T) ThreadLoad<LOAD_VOLATILE>(&temp_storage[HALF_WARP_THREADS + lane_id - 2]);

        if (lane_id == 0)
            exclusive = initial_value;
    }


};


}
# 38 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 2 3
# 47 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
namespace cub {
# 142 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
template <
    typename T,
    int LOGICAL_WARP_THREADS = (1 << (5)),
    int PTX_ARCH = 700>
class WarpScan
{
private:





    enum
    {

        IS_ARCH_WARP = (LOGICAL_WARP_THREADS == (1 << (5))),


        IS_POW_OF_TWO = ((LOGICAL_WARP_THREADS & (LOGICAL_WARP_THREADS - 1)) == 0),


        IS_INTEGER = ((Traits<T>::CATEGORY == SIGNED_INTEGER) || (Traits<T>::CATEGORY == UNSIGNED_INTEGER))
    };


    typedef typename If<(PTX_ARCH >= 300) && (IS_POW_OF_TWO),
        WarpScanShfl<T, LOGICAL_WARP_THREADS, PTX_ARCH>,
        WarpScanSmem<T, LOGICAL_WARP_THREADS, PTX_ARCH> >::Type InternalWarpScan;


    typedef typename InternalWarpScan::TempStorage _TempStorage;







    _TempStorage &temp_storage;
    unsigned int lane_id;







public:


    struct TempStorage : Uninitialized<_TempStorage> {};
# 203 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) WarpScan(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias()),
        lane_id(IS_ARCH_WARP ?
            LaneId() :
            LaneId() % LOGICAL_WARP_THREADS)
    {}
# 254 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveSum(
        T input,
        T &inclusive_output)
    {
        InclusiveScan(input, inclusive_output, cub::Sum());
    }
# 297 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveSum(
        T input,
        T &inclusive_output,
        T &warp_aggregate)
    {
        InclusiveScan(input, inclusive_output, cub::Sum(), warp_aggregate);
    }
# 349 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveSum(
        T input,
        T &exclusive_output)
    {
        T initial_value = 0;
        ExclusiveScan(input, exclusive_output, initial_value, cub::Sum());
    }
# 394 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveSum(
        T input,
        T &exclusive_output,
        T &warp_aggregate)
    {
        T initial_value = 0;
        ExclusiveScan(input, exclusive_output, initial_value, cub::Sum(), warp_aggregate);
    }
# 446 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &inclusive_output,
        ScanOp scan_op)
    {
        InternalWarpScan(temp_storage).InclusiveScan(input, inclusive_output, scan_op);
    }
# 496 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &inclusive_output,
        ScanOp scan_op,
        T &warp_aggregate)
    {
        InternalWarpScan(temp_storage).InclusiveScan(input, inclusive_output, scan_op, warp_aggregate);
    }
# 550 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &exclusive_output,
        ScanOp scan_op)
    {
        InternalWarpScan internal(temp_storage);

        T inclusive_output;
        internal.InclusiveScan(input, inclusive_output, scan_op);

        internal.Update(
            input,
            inclusive_output,
            exclusive_output,
            scan_op,
            Int2Type<IS_INTEGER>());
    }
# 606 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &exclusive_output,
        T initial_value,
        ScanOp scan_op)
    {
        InternalWarpScan internal(temp_storage);

        T inclusive_output;
        internal.InclusiveScan(input, inclusive_output, scan_op);

        internal.Update(
            input,
            inclusive_output,
            exclusive_output,
            scan_op,
            initial_value,
            Int2Type<IS_INTEGER>());
    }
# 667 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &exclusive_output,
        ScanOp scan_op,
        T &warp_aggregate)
    {
        InternalWarpScan internal(temp_storage);

        T inclusive_output;
        internal.InclusiveScan(input, inclusive_output, scan_op);

        internal.Update(
            input,
            inclusive_output,
            exclusive_output,
            warp_aggregate,
            scan_op,
            Int2Type<IS_INTEGER>());
    }
# 728 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &exclusive_output,
        T initial_value,
        ScanOp scan_op,
        T &warp_aggregate)
    {
        InternalWarpScan internal(temp_storage);

        T inclusive_output;
        internal.InclusiveScan(input, inclusive_output, scan_op);

        internal.Update(
            input,
            inclusive_output,
            exclusive_output,
            warp_aggregate,
            scan_op,
            initial_value,
            Int2Type<IS_INTEGER>());
    }
# 798 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Scan(
        T input,
        T &inclusive_output,
        T &exclusive_output,
        ScanOp scan_op)
    {
        InternalWarpScan internal(temp_storage);

        internal.InclusiveScan(input, inclusive_output, scan_op);

        internal.Update(
            input,
            inclusive_output,
            exclusive_output,
            scan_op,
            Int2Type<IS_INTEGER>());
    }
# 857 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Scan(
        T input,
        T &inclusive_output,
        T &exclusive_output,
        T initial_value,
        ScanOp scan_op)
    {
        InternalWarpScan internal(temp_storage);

        internal.InclusiveScan(input, inclusive_output, scan_op);

        internal.Update(
            input,
            inclusive_output,
            exclusive_output,
            scan_op,
            initial_value,
            Int2Type<IS_INTEGER>());
    }
# 922 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/../../warp/warp_scan.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) T Broadcast(
        T input,
        unsigned int src_lane)
    {
        return InternalWarpScan(temp_storage).Broadcast(input, src_lane);
    }



};



}
# 43 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/block_scan_raking.cuh" 2 3






namespace cub {





template <
    typename T,
    int BLOCK_DIM_X,
    int BLOCK_DIM_Y,
    int BLOCK_DIM_Z,
    bool MEMOIZE,
    int PTX_ARCH>
struct BlockScanRaking
{





    enum
    {

        BLOCK_THREADS = BLOCK_DIM_X * BLOCK_DIM_Y * BLOCK_DIM_Z,
    };


    typedef BlockRakingLayout<T, BLOCK_THREADS, PTX_ARCH> BlockRakingLayout;


    enum
    {

        RAKING_THREADS = BlockRakingLayout::RAKING_THREADS,


        SEGMENT_LENGTH = BlockRakingLayout::SEGMENT_LENGTH,


        WARP_SYNCHRONOUS = (BLOCK_THREADS == RAKING_THREADS),
    };


    typedef WarpScan<T, RAKING_THREADS, PTX_ARCH> WarpScan;


    struct _TempStorage
    {
        typename WarpScan::TempStorage warp_scan;
        typename BlockRakingLayout::TempStorage raking_grid;
        T block_aggregate;
    };



    struct TempStorage : Uninitialized<_TempStorage> {};







    _TempStorage &temp_storage;
    unsigned int linear_tid;
    T cached_segment[SEGMENT_LENGTH];







    template <int ITERATION, typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T GuardedReduce(
        T* raking_ptr,
        ScanOp scan_op,
        T raking_partial,
        Int2Type<ITERATION> )
    {
        if ((BlockRakingLayout::UNGUARDED) || (((linear_tid * SEGMENT_LENGTH) + ITERATION) < BLOCK_THREADS))
        {
            T addend = raking_ptr[ITERATION];
            raking_partial = scan_op(raking_partial, addend);
        }

        return GuardedReduce(raking_ptr, scan_op, raking_partial, Int2Type<ITERATION + 1>());
    }



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T GuardedReduce(
        T* ,
        ScanOp ,
        T raking_partial,
        Int2Type<SEGMENT_LENGTH> )
    {
        return raking_partial;
    }



    template <int ITERATION>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void CopySegment(
        T* out,
        T* in,
        Int2Type<ITERATION> )
    {
        out[ITERATION] = in[ITERATION];
        CopySegment(out, in, Int2Type<ITERATION + 1>());
    }



    __attribute__((device)) __inline__ __attribute__((always_inline)) void CopySegment(
        T* ,
        T* ,
        Int2Type<SEGMENT_LENGTH> )
    {}



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T Upsweep(
        ScanOp scan_op)
    {
        T *smem_raking_ptr = BlockRakingLayout::RakingPtr(temp_storage.raking_grid, linear_tid);


        CopySegment(cached_segment, smem_raking_ptr, Int2Type<0>());

        T raking_partial = cached_segment[0];

        return GuardedReduce(cached_segment, scan_op, raking_partial, Int2Type<1>());
    }



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveDownsweep(
        ScanOp scan_op,
        T raking_partial,
        bool apply_prefix = true)
    {
        T *smem_raking_ptr = BlockRakingLayout::RakingPtr(temp_storage.raking_grid, linear_tid);


        if (!MEMOIZE)
        {
            CopySegment(cached_segment, smem_raking_ptr, Int2Type<0>());
        }

        internal::ThreadScanExclusive(cached_segment, cached_segment, scan_op, raking_partial, apply_prefix);


        CopySegment(smem_raking_ptr, cached_segment, Int2Type<0>());
    }



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveDownsweep(
        ScanOp scan_op,
        T raking_partial,
        bool apply_prefix = true)
    {
        T *smem_raking_ptr = BlockRakingLayout::RakingPtr(temp_storage.raking_grid, linear_tid);


        if (!MEMOIZE)
        {
            CopySegment(cached_segment, smem_raking_ptr, Int2Type<0>());
        }

        internal::ThreadScanInclusive(cached_segment, cached_segment, scan_op, raking_partial, apply_prefix);


        CopySegment(smem_raking_ptr, cached_segment, Int2Type<0>());
    }







    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockScanRaking(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
    {}







    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &exclusive_output,
        ScanOp scan_op)
    {
        if (WARP_SYNCHRONOUS)
        {

            WarpScan(temp_storage.warp_scan).ExclusiveScan(input, exclusive_output, scan_op);
        }
        else
        {

            T *placement_ptr = BlockRakingLayout::PlacementPtr(temp_storage.raking_grid, linear_tid);
            *placement_ptr = input;

            CTA_SYNC();


            if (linear_tid < RAKING_THREADS)
            {

                T upsweep_partial = Upsweep(scan_op);


                T exclusive_partial;
                WarpScan(temp_storage.warp_scan).ExclusiveScan(upsweep_partial, exclusive_partial, scan_op);


                ExclusiveDownsweep(scan_op, exclusive_partial, (linear_tid != 0));
            }

            CTA_SYNC();


            exclusive_output = *placement_ptr;
        }
    }


    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &output,
        const T &initial_value,
        ScanOp scan_op)
    {
        if (WARP_SYNCHRONOUS)
        {

            WarpScan(temp_storage.warp_scan).ExclusiveScan(input, output, initial_value, scan_op);
        }
        else
        {

            T *placement_ptr = BlockRakingLayout::PlacementPtr(temp_storage.raking_grid, linear_tid);
            *placement_ptr = input;

            CTA_SYNC();


            if (linear_tid < RAKING_THREADS)
            {

                T upsweep_partial = Upsweep(scan_op);


                T exclusive_partial;
                WarpScan(temp_storage.warp_scan).ExclusiveScan(upsweep_partial, exclusive_partial, initial_value, scan_op);


                ExclusiveDownsweep(scan_op, exclusive_partial);
            }

            CTA_SYNC();


            output = *placement_ptr;
        }
    }



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &output,
        ScanOp scan_op,
        T &block_aggregate)
    {
        if (WARP_SYNCHRONOUS)
        {

            WarpScan(temp_storage.warp_scan).ExclusiveScan(input, output, scan_op, block_aggregate);
        }
        else
        {

            T *placement_ptr = BlockRakingLayout::PlacementPtr(temp_storage.raking_grid, linear_tid);
            *placement_ptr = input;

            CTA_SYNC();


            if (linear_tid < RAKING_THREADS)
            {

                T upsweep_partial= Upsweep(scan_op);


                T inclusive_partial;
                T exclusive_partial;
                WarpScan(temp_storage.warp_scan).Scan(upsweep_partial, inclusive_partial, exclusive_partial, scan_op);


                ExclusiveDownsweep(scan_op, exclusive_partial, (linear_tid != 0));


                if (linear_tid == RAKING_THREADS - 1)
                    temp_storage.block_aggregate = inclusive_partial;
            }

            CTA_SYNC();


            output = *placement_ptr;


            block_aggregate = temp_storage.block_aggregate;
        }
    }



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &output,
        const T &initial_value,
        ScanOp scan_op,
        T &block_aggregate)
    {
        if (WARP_SYNCHRONOUS)
        {

            WarpScan(temp_storage.warp_scan).ExclusiveScan(input, output, initial_value, scan_op, block_aggregate);
        }
        else
        {

            T *placement_ptr = BlockRakingLayout::PlacementPtr(temp_storage.raking_grid, linear_tid);
            *placement_ptr = input;

            CTA_SYNC();


            if (linear_tid < RAKING_THREADS)
            {

                T upsweep_partial = Upsweep(scan_op);


                T exclusive_partial;
                WarpScan(temp_storage.warp_scan).ExclusiveScan(upsweep_partial, exclusive_partial, initial_value, scan_op, block_aggregate);


                ExclusiveDownsweep(scan_op, exclusive_partial);


                if (linear_tid == 0)
                    temp_storage.block_aggregate = block_aggregate;
            }

            CTA_SYNC();


            output = *placement_ptr;


            block_aggregate = temp_storage.block_aggregate;
        }
    }



    template <
        typename ScanOp,
        typename BlockPrefixCallbackOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &output,
        ScanOp scan_op,
        BlockPrefixCallbackOp &block_prefix_callback_op)
    {
        if (WARP_SYNCHRONOUS)
        {

            T block_aggregate;
            WarpScan warp_scan(temp_storage.warp_scan);
            warp_scan.ExclusiveScan(input, output, scan_op, block_aggregate);


            T block_prefix = block_prefix_callback_op(block_aggregate);
            block_prefix = warp_scan.Broadcast(block_prefix, 0);

            output = scan_op(block_prefix, output);
            if (linear_tid == 0)
                output = block_prefix;
        }
        else
        {

            T *placement_ptr = BlockRakingLayout::PlacementPtr(temp_storage.raking_grid, linear_tid);
            *placement_ptr = input;

            CTA_SYNC();


            if (linear_tid < RAKING_THREADS)
            {
                WarpScan warp_scan(temp_storage.warp_scan);


                T upsweep_partial = Upsweep(scan_op);


                T exclusive_partial, block_aggregate;
                warp_scan.ExclusiveScan(upsweep_partial, exclusive_partial, scan_op, block_aggregate);


                T block_prefix = block_prefix_callback_op(block_aggregate);
                block_prefix = warp_scan.Broadcast(block_prefix, 0);


                T downsweep_prefix = scan_op(block_prefix, exclusive_partial);
                if (linear_tid == 0)
                    downsweep_prefix = block_prefix;


                ExclusiveDownsweep(scan_op, downsweep_prefix);
            }

            CTA_SYNC();


            output = *placement_ptr;
        }
    }







    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &output,
        ScanOp scan_op)
    {
        if (WARP_SYNCHRONOUS)
        {

            WarpScan(temp_storage.warp_scan).InclusiveScan(input, output, scan_op);
        }
        else
        {

            T *placement_ptr = BlockRakingLayout::PlacementPtr(temp_storage.raking_grid, linear_tid);
            *placement_ptr = input;

            CTA_SYNC();


            if (linear_tid < RAKING_THREADS)
            {

                T upsweep_partial = Upsweep(scan_op);


                T exclusive_partial;
                WarpScan(temp_storage.warp_scan).ExclusiveScan(upsweep_partial, exclusive_partial, scan_op);


                InclusiveDownsweep(scan_op, exclusive_partial, (linear_tid != 0));
            }

            CTA_SYNC();


            output = *placement_ptr;
        }
    }



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &output,
        ScanOp scan_op,
        T &block_aggregate)
    {
        if (WARP_SYNCHRONOUS)
        {

            WarpScan(temp_storage.warp_scan).InclusiveScan(input, output, scan_op, block_aggregate);
        }
        else
        {

            T *placement_ptr = BlockRakingLayout::PlacementPtr(temp_storage.raking_grid, linear_tid);
            *placement_ptr = input;

            CTA_SYNC();


            if (linear_tid < RAKING_THREADS)
            {

                T upsweep_partial = Upsweep(scan_op);


                T inclusive_partial;
                T exclusive_partial;
                WarpScan(temp_storage.warp_scan).Scan(upsweep_partial, inclusive_partial, exclusive_partial, scan_op);


                InclusiveDownsweep(scan_op, exclusive_partial, (linear_tid != 0));


                if (linear_tid == RAKING_THREADS - 1)
                    temp_storage.block_aggregate = inclusive_partial;
            }

            CTA_SYNC();


            output = *placement_ptr;


            block_aggregate = temp_storage.block_aggregate;
        }
    }



    template <
        typename ScanOp,
        typename BlockPrefixCallbackOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &output,
        ScanOp scan_op,
        BlockPrefixCallbackOp &block_prefix_callback_op)
    {
        if (WARP_SYNCHRONOUS)
        {

            T block_aggregate;
            WarpScan warp_scan(temp_storage.warp_scan);
            warp_scan.InclusiveScan(input, output, scan_op, block_aggregate);


            T block_prefix = block_prefix_callback_op(block_aggregate);
            block_prefix = warp_scan.Broadcast(block_prefix, 0);


            output = scan_op(block_prefix, output);
        }
        else
        {

            T *placement_ptr = BlockRakingLayout::PlacementPtr(temp_storage.raking_grid, linear_tid);
            *placement_ptr = input;

            CTA_SYNC();


            if (linear_tid < RAKING_THREADS)
            {
                WarpScan warp_scan(temp_storage.warp_scan);


                T upsweep_partial = Upsweep(scan_op);


                T exclusive_partial, block_aggregate;
                warp_scan.ExclusiveScan(upsweep_partial, exclusive_partial, scan_op, block_aggregate);


                T block_prefix = block_prefix_callback_op(block_aggregate);
                block_prefix = warp_scan.Broadcast(block_prefix, 0);


                T downsweep_prefix = scan_op(block_prefix, exclusive_partial);
                if (linear_tid == 0)
                    downsweep_prefix = block_prefix;


                InclusiveDownsweep(scan_op, downsweep_prefix);
            }

            CTA_SYNC();


            output = *placement_ptr;
        }
    }

};


}
# 37 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/block_scan_warp_scans.cuh" 1 3
# 45 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/block_scan_warp_scans.cuh" 3
namespace cub {




template <
    typename T,
    int BLOCK_DIM_X,
    int BLOCK_DIM_Y,
    int BLOCK_DIM_Z,
    int PTX_ARCH>
struct BlockScanWarpScans
{





    enum
    {

        WARP_THREADS = (1 << (5)),


        BLOCK_THREADS = BLOCK_DIM_X * BLOCK_DIM_Y * BLOCK_DIM_Z,


        WARPS = (BLOCK_THREADS + WARP_THREADS - 1) / WARP_THREADS,
    };


    typedef WarpScan<T, WARP_THREADS, PTX_ARCH> WarpScanT;


    typedef WarpScan<T, WARPS, PTX_ARCH> WarpAggregateScan;



    struct __attribute__((aligned(32))) _TempStorage
    {
        T warp_aggregates[WARPS];
        typename WarpScanT::TempStorage warp_scan[WARPS];
        T block_prefix;
    };



    struct TempStorage : Uninitialized<_TempStorage> {};







    _TempStorage &temp_storage;
    unsigned int linear_tid;
    unsigned int warp_id;
    unsigned int lane_id;







    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockScanWarpScans(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z)),
        warp_id((WARPS == 1) ? 0 : linear_tid / WARP_THREADS),
        lane_id(LaneId())
    {}






    template <typename ScanOp, int WARP>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ApplyWarpAggregates(
        T &warp_prefix,
        ScanOp scan_op,
        T &block_aggregate,
        Int2Type<WARP> )
    {
        if (warp_id == WARP)
            warp_prefix = block_aggregate;

        T addend = temp_storage.warp_aggregates[WARP];
        block_aggregate = scan_op(block_aggregate, addend);

        ApplyWarpAggregates(warp_prefix, scan_op, block_aggregate, Int2Type<WARP + 1>());
    }

    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ApplyWarpAggregates(
        T & ,
        ScanOp ,
        T & ,
        Int2Type<WARPS> )
    {}



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T ComputeWarpPrefix(
        ScanOp scan_op,
        T warp_aggregate,
        T &block_aggregate)
    {

        if (lane_id == WARP_THREADS - 1)
            temp_storage.warp_aggregates[warp_id] = warp_aggregate;

        CTA_SYNC();


        T warp_prefix;
        block_aggregate = temp_storage.warp_aggregates[0];


        ApplyWarpAggregates(warp_prefix, scan_op, block_aggregate, Int2Type<1>());
# 181 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/specializations/block_scan_warp_scans.cuh" 3
        return warp_prefix;
    }



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) T ComputeWarpPrefix(
        ScanOp scan_op,
        T warp_aggregate,
        T &block_aggregate,
        const T &initial_value)
    {
        T warp_prefix = ComputeWarpPrefix(scan_op, warp_aggregate, block_aggregate);

        warp_prefix = scan_op(initial_value, warp_prefix);

        if (warp_id == 0)
            warp_prefix = initial_value;

        return warp_prefix;
    }






    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &exclusive_output,
        ScanOp scan_op)
    {

        T block_aggregate;
        ExclusiveScan(input, exclusive_output, scan_op, block_aggregate);
    }



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &exclusive_output,
        const T &initial_value,
        ScanOp scan_op)
    {
        T block_aggregate;
        ExclusiveScan(input, exclusive_output, initial_value, scan_op, block_aggregate);
    }



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &exclusive_output,
        ScanOp scan_op,
        T &block_aggregate)
    {

        T inclusive_output;
        WarpScanT(temp_storage.warp_scan[warp_id]).Scan(input, inclusive_output, exclusive_output, scan_op);


        T warp_prefix = ComputeWarpPrefix(scan_op, inclusive_output, block_aggregate);


        if (warp_id != 0)
        {
            exclusive_output = scan_op(warp_prefix, exclusive_output);
            if (lane_id == 0)
                exclusive_output = warp_prefix;
        }
    }



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &exclusive_output,
        const T &initial_value,
        ScanOp scan_op,
        T &block_aggregate)
    {

        T inclusive_output;
        WarpScanT(temp_storage.warp_scan[warp_id]).Scan(input, inclusive_output, exclusive_output, scan_op);


        T warp_prefix = ComputeWarpPrefix(scan_op, inclusive_output, block_aggregate, initial_value);


        exclusive_output = scan_op(warp_prefix, exclusive_output);
        if (lane_id == 0)
            exclusive_output = warp_prefix;
    }



    template <
        typename ScanOp,
        typename BlockPrefixCallbackOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &exclusive_output,
        ScanOp scan_op,
        BlockPrefixCallbackOp &block_prefix_callback_op)
    {

        T block_aggregate;
        ExclusiveScan(input, exclusive_output, scan_op, block_aggregate);


        if (warp_id == 0)
        {
            T block_prefix = block_prefix_callback_op(block_aggregate);
            if (lane_id == 0)
            {

                temp_storage.block_prefix = block_prefix;
                exclusive_output = block_prefix;
            }
        }

        CTA_SYNC();


        T block_prefix = temp_storage.block_prefix;
        if (linear_tid > 0)
        {
            exclusive_output = scan_op(block_prefix, exclusive_output);
        }
    }







    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &inclusive_output,
        ScanOp scan_op)
    {
        T block_aggregate;
        InclusiveScan(input, inclusive_output, scan_op, block_aggregate);
    }



    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &inclusive_output,
        ScanOp scan_op,
        T &block_aggregate)
    {
        WarpScanT(temp_storage.warp_scan[warp_id]).InclusiveScan(input, inclusive_output, scan_op);


        T warp_prefix = ComputeWarpPrefix(scan_op, inclusive_output, block_aggregate);


        if (warp_id != 0)
        {
            inclusive_output = scan_op(warp_prefix, inclusive_output);
        }
    }



    template <
        typename ScanOp,
        typename BlockPrefixCallbackOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &exclusive_output,
        ScanOp scan_op,
        BlockPrefixCallbackOp &block_prefix_callback_op)
    {
        T block_aggregate;
        InclusiveScan(input, exclusive_output, scan_op, block_aggregate);


        if (warp_id == 0)
        {
            T block_prefix = block_prefix_callback_op(block_aggregate);
            if (lane_id == 0)
            {

                temp_storage.block_prefix = block_prefix;
            }
        }

        CTA_SYNC();


        T block_prefix = temp_storage.block_prefix;
        exclusive_output = scan_op(block_prefix, exclusive_output);
    }


};


}
# 38 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 2 3
# 47 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
namespace cub {
# 57 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
enum BlockScanAlgorithm
{
# 78 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    BLOCK_SCAN_RAKING,
# 88 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    BLOCK_SCAN_RAKING_MEMOIZE,
# 108 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    BLOCK_SCAN_WARP_SCANS,
};
# 186 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
template <
    typename T,
    int BLOCK_DIM_X,
    BlockScanAlgorithm ALGORITHM = BLOCK_SCAN_RAKING,
    int BLOCK_DIM_Y = 1,
    int BLOCK_DIM_Z = 1,
    int PTX_ARCH = 700>
class BlockScan
{
private:






    enum
    {

        BLOCK_THREADS = BLOCK_DIM_X * BLOCK_DIM_Y * BLOCK_DIM_Z,
    };







    static const BlockScanAlgorithm SAFE_ALGORITHM =
        ((ALGORITHM == BLOCK_SCAN_WARP_SCANS) && (BLOCK_THREADS % (1 << (5)) != 0)) ?
            BLOCK_SCAN_RAKING :
            ALGORITHM;

    typedef BlockScanWarpScans<T, BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z, PTX_ARCH> WarpScans;
    typedef BlockScanRaking<T, BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z, (SAFE_ALGORITHM == BLOCK_SCAN_RAKING_MEMOIZE), PTX_ARCH> Raking;


    typedef typename If<(SAFE_ALGORITHM == BLOCK_SCAN_WARP_SCANS),
        WarpScans,
        Raking>::Type InternalBlockScan;


    typedef typename InternalBlockScan::TempStorage _TempStorage;







    _TempStorage &temp_storage;


    unsigned int linear_tid;







    __attribute__((device)) __inline__ __attribute__((always_inline)) _TempStorage& PrivateStorage()
    {
        __attribute__((shared)) _TempStorage private_storage;
        return private_storage;
    }





public:


    struct TempStorage : Uninitialized<_TempStorage> {};
# 271 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockScan()
    :
        temp_storage(PrivateStorage()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
    {}





    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockScan(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
    {}
# 333 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveSum(
        T input,
        T &output)
    {
        T initial_value = 0;
        ExclusiveScan(input, output, initial_value, cub::Sum());
    }
# 380 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveSum(
        T input,
        T &output,
        T &block_aggregate)
    {
        T initial_value = 0;
        ExclusiveScan(input, output, initial_value, cub::Sum(), block_aggregate);
    }
# 464 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <typename BlockPrefixCallbackOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveSum(
        T input,
        T &output,
        BlockPrefixCallbackOp &block_prefix_callback_op)
    {
        ExclusiveScan(input, output, cub::Sum(), block_prefix_callback_op);
    }
# 520 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <int ITEMS_PER_THREAD>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveSum(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD])
    {
        T initial_value = 0;
        ExclusiveScan(input, output, initial_value, cub::Sum());
    }
# 571 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <int ITEMS_PER_THREAD>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveSum(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD],
        T &block_aggregate)
    {

        T initial_value = 0;
        ExclusiveScan(input, output, initial_value, cub::Sum(), block_aggregate);
    }
# 670 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <
        int ITEMS_PER_THREAD,
        typename BlockPrefixCallbackOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveSum(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD],
        BlockPrefixCallbackOp &block_prefix_callback_op)
    {
        ExclusiveScan(input, output, cub::Sum(), block_prefix_callback_op);
    }
# 727 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &output,
        T initial_value,
        ScanOp scan_op)
    {
        InternalBlockScan(temp_storage).ExclusiveScan(input, output, initial_value, scan_op);
    }
# 777 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &output,
        T initial_value,
        ScanOp scan_op,
        T &block_aggregate)
    {
        InternalBlockScan(temp_storage).ExclusiveScan(input, output, initial_value, scan_op, block_aggregate);
    }
# 864 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <
        typename ScanOp,
        typename BlockPrefixCallbackOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &output,
        ScanOp scan_op,
        BlockPrefixCallbackOp &block_prefix_callback_op)
    {
        InternalBlockScan(temp_storage).ExclusiveScan(input, output, scan_op, block_prefix_callback_op);
    }
# 926 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <
        int ITEMS_PER_THREAD,
        typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD],
        T initial_value,
        ScanOp scan_op)
    {

        T thread_prefix = internal::ThreadReduce(input, scan_op);


        ExclusiveScan(thread_prefix, thread_prefix, initial_value, scan_op);


        internal::ThreadScanExclusive(input, output, scan_op, thread_prefix);
    }
# 988 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <
        int ITEMS_PER_THREAD,
        typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD],
        T initial_value,
        ScanOp scan_op,
        T &block_aggregate)
    {

        T thread_prefix = internal::ThreadReduce(input, scan_op);


        ExclusiveScan(thread_prefix, thread_prefix, initial_value, scan_op, block_aggregate);


        internal::ThreadScanExclusive(input, output, scan_op, thread_prefix);
    }
# 1095 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <
        int ITEMS_PER_THREAD,
        typename ScanOp,
        typename BlockPrefixCallbackOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD],
        ScanOp scan_op,
        BlockPrefixCallbackOp &block_prefix_callback_op)
    {

        T thread_prefix = internal::ThreadReduce(input, scan_op);


        ExclusiveScan(thread_prefix, thread_prefix, scan_op, block_prefix_callback_op);


        internal::ThreadScanExclusive(input, output, scan_op, thread_prefix);
    }
# 1135 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &output,
        ScanOp scan_op)
    {
        InternalBlockScan(temp_storage).ExclusiveScan(input, output, scan_op);
    }
# 1155 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T input,
        T &output,
        ScanOp scan_op,
        T &block_aggregate)
    {
        InternalBlockScan(temp_storage).ExclusiveScan(input, output, scan_op, block_aggregate);
    }
# 1184 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <
        int ITEMS_PER_THREAD,
        typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD],
        ScanOp scan_op)
    {

        T thread_partial = internal::ThreadReduce(input, scan_op);


        ExclusiveScan(thread_partial, thread_partial, scan_op);


        internal::ThreadScanExclusive(input, output, scan_op, thread_partial, (linear_tid != 0));
    }
# 1215 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <
        int ITEMS_PER_THREAD,
        typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveScan(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD],
        ScanOp scan_op,
        T &block_aggregate)
    {

        T thread_partial = internal::ThreadReduce(input, scan_op);


        ExclusiveScan(thread_partial, thread_partial, scan_op, block_aggregate);


        internal::ThreadScanExclusive(input, output, scan_op, thread_partial, (linear_tid != 0));
    }
# 1279 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveSum(
        T input,
        T &output)
    {
        InclusiveScan(input, output, cub::Sum());
    }
# 1324 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveSum(
        T input,
        T &output,
        T &block_aggregate)
    {
        InclusiveScan(input, output, cub::Sum(), block_aggregate);
    }
# 1407 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <typename BlockPrefixCallbackOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveSum(
        T input,
        T &output,
        BlockPrefixCallbackOp &block_prefix_callback_op)
    {
        InclusiveScan(input, output, cub::Sum(), block_prefix_callback_op);
    }
# 1462 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <int ITEMS_PER_THREAD>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveSum(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD])
    {
        if (ITEMS_PER_THREAD == 1)
        {
            InclusiveSum(input[0], output[0]);
        }
        else
        {

            Sum scan_op;
            T thread_prefix = internal::ThreadReduce(input, scan_op);


            ExclusiveSum(thread_prefix, thread_prefix);


            internal::ThreadScanInclusive(input, output, scan_op, thread_prefix, (linear_tid != 0));
        }
    }
# 1529 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <int ITEMS_PER_THREAD>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveSum(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD],
        T &block_aggregate)
    {
        if (ITEMS_PER_THREAD == 1)
        {
            InclusiveSum(input[0], output[0], block_aggregate);
        }
        else
        {

            Sum scan_op;
            T thread_prefix = internal::ThreadReduce(input, scan_op);


            ExclusiveSum(thread_prefix, thread_prefix, block_aggregate);


            internal::ThreadScanInclusive(input, output, scan_op, thread_prefix, (linear_tid != 0));
        }
    }
# 1639 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <
        int ITEMS_PER_THREAD,
        typename BlockPrefixCallbackOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveSum(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD],
        BlockPrefixCallbackOp &block_prefix_callback_op)
    {
        if (ITEMS_PER_THREAD == 1)
        {
            InclusiveSum(input[0], output[0], block_prefix_callback_op);
        }
        else
        {

            Sum scan_op;
            T thread_prefix = internal::ThreadReduce(input, scan_op);


            ExclusiveSum(thread_prefix, thread_prefix, block_prefix_callback_op);


            internal::ThreadScanInclusive(input, output, scan_op, thread_prefix);
        }
    }
# 1710 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &output,
        ScanOp scan_op)
    {
        InternalBlockScan(temp_storage).InclusiveScan(input, output, scan_op);
    }
# 1759 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &output,
        ScanOp scan_op,
        T &block_aggregate)
    {
        InternalBlockScan(temp_storage).InclusiveScan(input, output, scan_op, block_aggregate);
    }
# 1845 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <
        typename ScanOp,
        typename BlockPrefixCallbackOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T input,
        T &output,
        ScanOp scan_op,
        BlockPrefixCallbackOp &block_prefix_callback_op)
    {
        InternalBlockScan(temp_storage).InclusiveScan(input, output, scan_op, block_prefix_callback_op);
    }
# 1905 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <
        int ITEMS_PER_THREAD,
        typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD],
        ScanOp scan_op)
    {
        if (ITEMS_PER_THREAD == 1)
        {
            InclusiveScan(input[0], output[0], scan_op);
        }
        else
        {

            T thread_prefix = internal::ThreadReduce(input, scan_op);


            ExclusiveScan(thread_prefix, thread_prefix, scan_op);


            internal::ThreadScanInclusive(input, output, scan_op, thread_prefix, (linear_tid != 0));
        }
    }
# 1975 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <
        int ITEMS_PER_THREAD,
        typename ScanOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD],
        ScanOp scan_op,
        T &block_aggregate)
    {
        if (ITEMS_PER_THREAD == 1)
        {
            InclusiveScan(input[0], output[0], scan_op, block_aggregate);
        }
        else
        {

            T thread_prefix = internal::ThreadReduce(input, scan_op);


            ExclusiveScan(thread_prefix, thread_prefix, scan_op, block_aggregate);


            internal::ThreadScanInclusive(input, output, scan_op, thread_prefix, (linear_tid != 0));
        }
    }
# 2088 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_scan.cuh" 3
    template <
        int ITEMS_PER_THREAD,
        typename ScanOp,
        typename BlockPrefixCallbackOp>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void InclusiveScan(
        T (&input)[ITEMS_PER_THREAD],
        T (&output)[ITEMS_PER_THREAD],
        ScanOp scan_op,
        BlockPrefixCallbackOp &block_prefix_callback_op)
    {
        if (ITEMS_PER_THREAD == 1)
        {
            InclusiveScan(input[0], output[0], scan_op, block_prefix_callback_op);
        }
        else
        {

            T thread_prefix = internal::ThreadReduce(input, scan_op);


            ExclusiveScan(thread_prefix, thread_prefix, scan_op, block_prefix_callback_op);


            internal::ThreadScanInclusive(input, output, scan_op, thread_prefix);
        }
    }




};





}
# 42 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_scan.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../grid/grid_queue.cuh" 1 3
# 43 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../grid/grid_queue.cuh" 3
namespace cub {
# 81 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../grid/grid_queue.cuh" 3
template <typename OffsetT>
class GridQueue
{
private:


    enum
    {
        FILL = 0,
        DRAIN = 1,
    };


    OffsetT *d_counters;

public:


    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    static size_t AllocationSize()
    {
        return sizeof(OffsetT) * 2;
    }



    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) GridQueue()
    :
        d_counters(__null)
    {}



    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) GridQueue(
        void *d_storage)
    :
        d_counters((OffsetT*) d_storage)
    {}



    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) cudaError_t FillAndResetDrain(
        OffsetT fill_size,
        cudaStream_t stream = 0)
    {

        (void)stream;
        d_counters[FILL] = fill_size;
        d_counters[DRAIN] = 0;
        return cudaSuccess;






    }



    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) cudaError_t ResetDrain(cudaStream_t stream = 0)
    {

        (void)stream;
        d_counters[DRAIN] = 0;
        return cudaSuccess;



    }



    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) cudaError_t ResetFill(cudaStream_t stream = 0)
    {

        (void)stream;
        d_counters[FILL] = 0;
        return cudaSuccess;



    }



    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) cudaError_t FillSize(
        OffsetT &fill_size,
        cudaStream_t stream = 0)
    {

        (void)stream;
        fill_size = d_counters[FILL];
        return cudaSuccess;



    }



    __attribute__((device)) __inline__ __attribute__((always_inline)) OffsetT Drain(OffsetT num_items)
    {
        return atomicAdd(d_counters + DRAIN, num_items);
    }



    __attribute__((device)) __inline__ __attribute__((always_inline)) OffsetT Fill(OffsetT num_items)
    {
        return atomicAdd(d_counters + FILL, num_items);
    }
};
# 202 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../grid/grid_queue.cuh" 3
template <typename OffsetT>
__attribute__((global)) void FillAndResetDrainKernel(
    GridQueue<OffsetT> grid_queue,
    OffsetT num_items)
{
    grid_queue.FillAndResetDrain(num_items);
}
# 217 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../grid/grid_queue.cuh" 3
}
# 43 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_scan.cuh" 2 3







namespace cub {
# 60 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_scan.cuh" 3
template <
    int _BLOCK_THREADS,
    int _ITEMS_PER_THREAD,
    BlockLoadAlgorithm _LOAD_ALGORITHM,
    CacheLoadModifier _LOAD_MODIFIER,
    BlockStoreAlgorithm _STORE_ALGORITHM,
    BlockScanAlgorithm _SCAN_ALGORITHM>
struct AgentScanPolicy
{
    enum
    {
        BLOCK_THREADS = _BLOCK_THREADS,
        ITEMS_PER_THREAD = _ITEMS_PER_THREAD,
    };

    static const BlockLoadAlgorithm LOAD_ALGORITHM = _LOAD_ALGORITHM;
    static const CacheLoadModifier LOAD_MODIFIER = _LOAD_MODIFIER;
    static const BlockStoreAlgorithm STORE_ALGORITHM = _STORE_ALGORITHM;
    static const BlockScanAlgorithm SCAN_ALGORITHM = _SCAN_ALGORITHM;
};
# 91 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_scan.cuh" 3
template <
    typename AgentScanPolicyT,
    typename InputIteratorT,
    typename OutputIteratorT,
    typename ScanOpT,
    typename InitValueT,
    typename OffsetT>
struct AgentScan
{





    typedef typename std::iterator_traits<InputIteratorT>::value_type InputT;


    typedef typename If<(Equals<typename std::iterator_traits<OutputIteratorT>::value_type, void>::VALUE),
        typename std::iterator_traits<InputIteratorT>::value_type,
        typename std::iterator_traits<OutputIteratorT>::value_type>::Type OutputT;


    typedef ScanTileState<OutputT> ScanTileStateT;


    typedef typename If<IsPointer<InputIteratorT>::VALUE,
            CacheModifiedInputIterator<AgentScanPolicyT::LOAD_MODIFIER, InputT, OffsetT>,
            InputIteratorT>::Type
        WrappedInputIteratorT;


    enum
    {
        IS_INCLUSIVE = Equals<InitValueT, NullType>::VALUE,
        BLOCK_THREADS = AgentScanPolicyT::BLOCK_THREADS,
        ITEMS_PER_THREAD = AgentScanPolicyT::ITEMS_PER_THREAD,
        TILE_ITEMS = BLOCK_THREADS * ITEMS_PER_THREAD,
    };


    typedef BlockLoad<
            OutputT,
            AgentScanPolicyT::BLOCK_THREADS,
            AgentScanPolicyT::ITEMS_PER_THREAD,
            AgentScanPolicyT::LOAD_ALGORITHM>
        BlockLoadT;


    typedef BlockStore<
            OutputT,
            AgentScanPolicyT::BLOCK_THREADS,
            AgentScanPolicyT::ITEMS_PER_THREAD,
            AgentScanPolicyT::STORE_ALGORITHM>
        BlockStoreT;


    typedef BlockScan<
            OutputT,
            AgentScanPolicyT::BLOCK_THREADS,
            AgentScanPolicyT::SCAN_ALGORITHM>
        BlockScanT;


    typedef TilePrefixCallbackOp<
            OutputT,
            ScanOpT,
            ScanTileStateT>
        TilePrefixCallbackOpT;


    typedef BlockScanRunningPrefixOp<
            OutputT,
            ScanOpT>
        RunningPrefixCallbackOp;


    union _TempStorage
    {
        typename BlockLoadT::TempStorage load;
        typename BlockStoreT::TempStorage store;

        struct
        {
            typename TilePrefixCallbackOpT::TempStorage prefix;
            typename BlockScanT::TempStorage scan;
        };
    };


    struct TempStorage : Uninitialized<_TempStorage> {};






    _TempStorage& temp_storage;
    WrappedInputIteratorT d_in;
    OutputIteratorT d_out;
    ScanOpT scan_op;
    InitValueT init_value;
# 201 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_scan.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline))
    void ScanTile(
        OutputT (&items)[ITEMS_PER_THREAD],
        OutputT init_value,
        ScanOpT scan_op,
        OutputT &block_aggregate,
        Int2Type<false> )
    {
        BlockScanT(temp_storage.scan).ExclusiveScan(items, items, init_value, scan_op, block_aggregate);
        block_aggregate = scan_op(init_value, block_aggregate);
    }





    __attribute__((device)) __inline__ __attribute__((always_inline))
    void ScanTile(
        OutputT (&items)[ITEMS_PER_THREAD],
        InitValueT ,
        ScanOpT scan_op,
        OutputT &block_aggregate,
        Int2Type<true> )
    {
        BlockScanT(temp_storage.scan).InclusiveScan(items, items, scan_op, block_aggregate);
    }





    template <typename PrefixCallback>
    __attribute__((device)) __inline__ __attribute__((always_inline))
    void ScanTile(
        OutputT (&items)[ITEMS_PER_THREAD],
        ScanOpT scan_op,
        PrefixCallback &prefix_op,
        Int2Type<false> )
    {
        BlockScanT(temp_storage.scan).ExclusiveScan(items, items, scan_op, prefix_op);
    }





    template <typename PrefixCallback>
    __attribute__((device)) __inline__ __attribute__((always_inline))
    void ScanTile(
        OutputT (&items)[ITEMS_PER_THREAD],
        ScanOpT scan_op,
        PrefixCallback &prefix_op,
        Int2Type<true> )
    {
        BlockScanT(temp_storage.scan).InclusiveScan(items, items, scan_op, prefix_op);
    }







    __attribute__((device)) __inline__ __attribute__((always_inline))
    AgentScan(
        TempStorage& temp_storage,
        InputIteratorT d_in,
        OutputIteratorT d_out,
        ScanOpT scan_op,
        InitValueT init_value)
    :
        temp_storage(temp_storage.Alias()),
        d_in(d_in),
        d_out(d_out),
        scan_op(scan_op),
        init_value(init_value)
    {}
# 287 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_scan.cuh" 3
    template <bool IS_LAST_TILE>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ConsumeTile(
        OffsetT num_remaining,
        int tile_idx,
        OffsetT tile_offset,
        ScanTileStateT& tile_state)
    {

        OutputT items[ITEMS_PER_THREAD];

        if (IS_LAST_TILE)
            BlockLoadT(temp_storage.load).Load(d_in + tile_offset, items, num_remaining);
        else
            BlockLoadT(temp_storage.load).Load(d_in + tile_offset, items);

        CTA_SYNC();


        if (tile_idx == 0)
        {

            OutputT block_aggregate;
            ScanTile(items, init_value, scan_op, block_aggregate, Int2Type<IS_INCLUSIVE>());
            if ((!IS_LAST_TILE) && (threadIdx.x == 0))
                tile_state.SetInclusive(0, block_aggregate);
        }
        else
        {

            TilePrefixCallbackOpT prefix_op(tile_state, temp_storage.prefix, scan_op, tile_idx);
            ScanTile(items, scan_op, prefix_op, Int2Type<IS_INCLUSIVE>());
        }

        CTA_SYNC();


        if (IS_LAST_TILE)
            BlockStoreT(temp_storage.store).Store(d_out + tile_offset, items, num_remaining);
        else
            BlockStoreT(temp_storage.store).Store(d_out + tile_offset, items);
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void ConsumeRange(
        int num_items,
        ScanTileStateT& tile_state,
        int start_tile)
    {

        int tile_idx = start_tile + blockIdx.x;
        OffsetT tile_offset = OffsetT(TILE_ITEMS) * tile_idx;
        OffsetT num_remaining = num_items - tile_offset;

        if (num_remaining > TILE_ITEMS)
        {

            ConsumeTile<false>(num_remaining, tile_idx, tile_offset, tile_state);
        }
        else if (num_remaining > 0)
        {

            ConsumeTile<true>(num_remaining, tile_idx, tile_offset, tile_state);
        }
    }
# 363 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_scan.cuh" 3
    template <
        bool IS_FIRST_TILE,
        bool IS_LAST_TILE>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ConsumeTile(
        OffsetT tile_offset,
        RunningPrefixCallbackOp& prefix_op,
        int valid_items = TILE_ITEMS)
    {

        OutputT items[ITEMS_PER_THREAD];

        if (IS_LAST_TILE)
            BlockLoadT(temp_storage.load).Load(d_in + tile_offset, items, valid_items);
        else
            BlockLoadT(temp_storage.load).Load(d_in + tile_offset, items);

        CTA_SYNC();


        if (IS_FIRST_TILE)
        {
            OutputT block_aggregate;
            ScanTile(items, init_value, scan_op, block_aggregate, Int2Type<IS_INCLUSIVE>());
            prefix_op.running_total = block_aggregate;
        }
        else
        {
            ScanTile(items, scan_op, prefix_op, Int2Type<IS_INCLUSIVE>());
        }

        CTA_SYNC();


        if (IS_LAST_TILE)
            BlockStoreT(temp_storage.store).Store(d_out + tile_offset, items, valid_items);
        else
            BlockStoreT(temp_storage.store).Store(d_out + tile_offset, items);
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void ConsumeRange(
        OffsetT range_offset,
        OffsetT range_end)
    {
        BlockScanRunningPrefixOp<OutputT, ScanOpT> prefix_op(scan_op);

        if (range_offset + TILE_ITEMS <= range_end)
        {

            ConsumeTile<true, true>(range_offset, prefix_op);
            range_offset += TILE_ITEMS;


            while (range_offset + TILE_ITEMS <= range_end)
            {
                ConsumeTile<false, true>(range_offset, prefix_op);
                range_offset += TILE_ITEMS;
            }


            if (range_offset < range_end)
            {
                int valid_items = range_end - range_offset;
                ConsumeTile<false, false>(range_offset, prefix_op, valid_items);
            }
        }
        else
        {

            int valid_items = range_end - range_offset;
            ConsumeTile<true, false>(range_offset, prefix_op, valid_items);
        }
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void ConsumeRange(
        OffsetT range_offset,
        OffsetT range_end,
        OutputT prefix)
    {
        BlockScanRunningPrefixOp<OutputT, ScanOpT> prefix_op(prefix, scan_op);


        while (range_offset + TILE_ITEMS <= range_end)
        {
            ConsumeTile<true, false>(range_offset, prefix_op);
            range_offset += TILE_ITEMS;
        }


        if (range_offset < range_end)
        {
            int valid_items = range_end - range_offset;
            ConsumeTile<false, false>(range_offset, prefix_op, valid_items);
        }
    }

};


}
# 41 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh" 2 3
# 52 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh" 3
namespace cub {
# 62 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh" 3
template <
    typename ScanTileStateT>
__attribute__((global)) void DeviceScanInitKernel(
    ScanTileStateT tile_state,
    int num_tiles)
{

    tile_state.InitializeStatus(num_tiles);
}




template <
    typename ScanTileStateT,
    typename NumSelectedIteratorT>
__attribute__((global)) void DeviceCompactInitKernel(
    ScanTileStateT tile_state,
    int num_tiles,
    NumSelectedIteratorT d_num_selected_out)
{

    tile_state.InitializeStatus(num_tiles);


    if ((blockIdx.x == 0) && (threadIdx.x == 0))
        *d_num_selected_out = 0;
}





template <
    typename ScanPolicyT,
    typename InputIteratorT,
    typename OutputIteratorT,
    typename ScanTileStateT,
    typename ScanOpT,
    typename InitValueT,
    typename OffsetT>
__attribute__((launch_bounds(int(ScanPolicyT::BLOCK_THREADS))))
__attribute__((global)) void DeviceScanKernel(
    InputIteratorT d_in,
    OutputIteratorT d_out,
    ScanTileStateT tile_state,
    int start_tile,
    ScanOpT scan_op,
    InitValueT init_value,
    OffsetT num_items)
{

    typedef AgentScan<
        ScanPolicyT,
        InputIteratorT,
        OutputIteratorT,
        ScanOpT,
        InitValueT,
        OffsetT> AgentScanT;


    __attribute__((shared)) typename AgentScanT::TempStorage temp_storage;


    AgentScanT(temp_storage, d_in, d_out, scan_op, init_value).ConsumeRange(
        num_items,
        tile_state,
        start_tile);
}
# 143 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh" 3
template <
    typename InputIteratorT,
    typename OutputIteratorT,
    typename ScanOpT,
    typename InitValueT,
    typename OffsetT>
struct DispatchScan
{




    enum
    {
        INIT_KERNEL_THREADS = 128
    };


    typedef typename If<(Equals<typename std::iterator_traits<OutputIteratorT>::value_type, void>::VALUE),
        typename std::iterator_traits<InputIteratorT>::value_type,
        typename std::iterator_traits<OutputIteratorT>::value_type>::Type OutputT;


    typedef ScanTileState<OutputT> ScanTileStateT;







    struct Policy600
    {
        typedef AgentScanPolicy<
            (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128))), ((((sizeof(OutputT) < 4) ? ((15 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128))) / 2 : ((15 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128)))) > (1)) ? ((sizeof(OutputT) < 4) ? ((15 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128))) / 2 : ((15 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128)))) : (1)),
                BLOCK_LOAD_TRANSPOSE,
                LOAD_DEFAULT,
                BLOCK_STORE_TRANSPOSE,
                BLOCK_SCAN_WARP_SCANS>
            ScanPolicyT;
    };



    struct Policy520
    {

        typedef AgentScanPolicy<
                (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128))), ((((sizeof(OutputT) < 4) ? ((12 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128))) / 2 : ((12 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128)))) > (1)) ? ((sizeof(OutputT) < 4) ? ((12 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128))) / 2 : ((12 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128)))) : (1)),
                BLOCK_LOAD_DIRECT,
                LOAD_LDG,
                BLOCK_STORE_WARP_TRANSPOSE,
                BLOCK_SCAN_WARP_SCANS>
            ScanPolicyT;
    };



    struct Policy350
    {

        typedef AgentScanPolicy<
                (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128))), ((((sizeof(OutputT) < 4) ? ((12 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128))) / 2 : ((12 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128)))) > (1)) ? ((sizeof(OutputT) < 4) ? ((12 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128))) / 2 : ((12 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128)))) : (1)),
                BLOCK_LOAD_DIRECT,
                LOAD_LDG,
                BLOCK_STORE_WARP_TRANSPOSE_TIMESLICED,
                BLOCK_SCAN_RAKING>
            ScanPolicyT;
    };


    struct Policy300
    {
        typedef AgentScanPolicy<
                (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (256))), ((((sizeof(OutputT) < 4) ? ((9 * 256 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (256))) / 2 : ((9 * 256 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (256)))) > (1)) ? ((sizeof(OutputT) < 4) ? ((9 * 256 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (256))) / 2 : ((9 * 256 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (256)))) : (1)),
                BLOCK_LOAD_WARP_TRANSPOSE,
                LOAD_DEFAULT,
                BLOCK_STORE_WARP_TRANSPOSE,
                BLOCK_SCAN_WARP_SCANS>
            ScanPolicyT;
    };


    struct Policy200
    {

        typedef AgentScanPolicy<
                (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128))), ((((sizeof(OutputT) < 4) ? ((12 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128))) / 2 : ((12 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128)))) > (1)) ? ((sizeof(OutputT) < 4) ? ((12 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128))) / 2 : ((12 * 128 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (128)))) : (1)),
                BLOCK_LOAD_WARP_TRANSPOSE,
                LOAD_DEFAULT,
                BLOCK_STORE_WARP_TRANSPOSE,
                BLOCK_SCAN_WARP_SCANS>
            ScanPolicyT;
    };


    struct Policy130
    {
        typedef AgentScanPolicy<
                (((((1 << (5)) * ((((96 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((96 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (96)) ? ((1 << (5)) * ((((96 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((96 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (96))), ((((sizeof(OutputT) < 4) ? ((21 * 96 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((96 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((96 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (96)) ? ((1 << (5)) * ((((96 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((96 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (96))) / 2 : ((21 * 96 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((96 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((96 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (96)) ? ((1 << (5)) * ((((96 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((96 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (96)))) > (1)) ? ((sizeof(OutputT) < 4) ? ((21 * 96 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((96 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((96 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (96)) ? ((1 << (5)) * ((((96 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((96 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (96))) / 2 : ((21 * 96 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((96 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((96 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (96)) ? ((1 << (5)) * ((((96 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((96 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (96)))) : (1)),
                BLOCK_LOAD_WARP_TRANSPOSE,
                LOAD_DEFAULT,
                BLOCK_STORE_WARP_TRANSPOSE,
                BLOCK_SCAN_RAKING_MEMOIZE>
            ScanPolicyT;
    };


    struct Policy100
    {
        typedef AgentScanPolicy<
                (((((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (64)) ? ((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (64))), ((((sizeof(OutputT) < 4) ? ((9 * 64 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (64)) ? ((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (64))) / 2 : ((9 * 64 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (64)) ? ((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (64)))) > (1)) ? ((sizeof(OutputT) < 4) ? ((9 * 64 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (64)) ? ((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (64))) / 2 : ((9 * 64 * 4) / (((sizeof(OutputT)) > (4)) ? (sizeof(OutputT)) : (4))) / (((((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) < (64)) ? ((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(OutputT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(OutputT)) : (2))) : (64)))) : (1)),
                BLOCK_LOAD_WARP_TRANSPOSE,
                LOAD_DEFAULT,
                BLOCK_STORE_WARP_TRANSPOSE,
                BLOCK_SCAN_WARP_SCANS>
            ScanPolicyT;
    };







    typedef Policy600 PtxPolicy;
# 291 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh" 3
    struct PtxAgentScanPolicy : PtxPolicy::ScanPolicyT {};
# 301 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh" 3
    template <typename KernelConfig>
    __attribute__((host)) __inline__ __attribute__((always_inline))
    static void InitConfigs(
        int ptx_version,
        KernelConfig &scan_kernel_config)
    {

        (void)ptx_version;


        scan_kernel_config.template Init<PtxAgentScanPolicy>();
# 346 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh" 3
    }





    struct KernelConfig
    {
        int block_threads;
        int items_per_thread;
        int tile_items;

        template <typename PolicyT>
        __attribute__((host)) __inline__ __attribute__((always_inline))
        void Init()
        {
            block_threads = PolicyT::BLOCK_THREADS;
            items_per_thread = PolicyT::ITEMS_PER_THREAD;
            tile_items = block_threads * items_per_thread;
        }
    };
# 377 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh" 3
    template <
        typename ScanInitKernelPtrT,
        typename ScanSweepKernelPtrT>
    __attribute__((host)) __inline__ __attribute__((always_inline))
    static cudaError_t Dispatch(
        void* d_temp_storage,
        size_t& temp_storage_bytes,
        InputIteratorT d_in,
        OutputIteratorT d_out,
        ScanOpT scan_op,
        InitValueT init_value,
        OffsetT num_items,
        cudaStream_t stream,
        bool debug_synchronous,
        int ,
        ScanInitKernelPtrT init_kernel,
        ScanSweepKernelPtrT scan_kernel,
        KernelConfig scan_kernel_config)
    {


        (void)d_temp_storage;
        (void)temp_storage_bytes;
        (void)d_in;
        (void)d_out;
        (void)scan_op;
        (void)init_value;
        (void)num_items;
        (void)stream;
        (void)debug_synchronous;
        (void)init_kernel;
        (void)scan_kernel;
        (void)scan_kernel_config;


        return cub::Debug((cudaError_t) (cudaErrorNotSupported), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh", 412);
# 507 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh" 3
    }





    __attribute__((host)) __inline__ __attribute__((always_inline))
    static cudaError_t Dispatch(
        void* d_temp_storage,
        size_t& temp_storage_bytes,
        InputIteratorT d_in,
        OutputIteratorT d_out,
        ScanOpT scan_op,
        InitValueT init_value,
        OffsetT num_items,
        cudaStream_t stream,
        bool debug_synchronous)
    {
        cudaError error = cudaSuccess;
        do
        {

            int ptx_version;
            if (cub::Debug((cudaError_t) (error = PtxVersion(ptx_version)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh", 530)) break;


            KernelConfig scan_kernel_config;
            InitConfigs(ptx_version, scan_kernel_config);


            if (cub::Debug((cudaError_t) (error = Dispatch( d_temp_storage, temp_storage_bytes, d_in, d_out, scan_op, init_value, num_items, stream, debug_synchronous, ptx_version, DeviceScanInitKernel<ScanTileStateT>, DeviceScanKernel<PtxAgentScanPolicy, InputIteratorT, OutputIteratorT, ScanTileStateT, ScanOpT, InitValueT, OffsetT>, scan_kernel_config)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh", 550)) break;
# 551 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_scan.cuh" 3
        }
        while (0);

        return error;
    }
};



}
# 41 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_scan.cuh" 2 3






namespace cub {
# 89 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_scan.cuh" 3
struct DeviceScan
{
# 145 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_scan.cuh" 3
    template <
        typename InputIteratorT,
        typename OutputIteratorT>
    __attribute__((host))
    static cudaError_t ExclusiveSum(
        void *d_temp_storage,
        size_t &temp_storage_bytes,
        InputIteratorT d_in,
        OutputIteratorT d_out,
        int num_items,
        cudaStream_t stream = 0,
        bool debug_synchronous = false)
    {

        typedef int OffsetT;


        typedef typename If<(Equals<typename std::iterator_traits<OutputIteratorT>::value_type, void>::VALUE),
            typename std::iterator_traits<InputIteratorT>::value_type,
            typename std::iterator_traits<OutputIteratorT>::value_type>::Type OutputT;


        OutputT init_value = 0;

        return DispatchScan<InputIteratorT, OutputIteratorT, Sum, OutputT, OffsetT>::Dispatch(
            d_temp_storage,
            temp_storage_bytes,
            d_in,
            d_out,
            Sum(),
            init_value,
            num_items,
            stream,
            debug_synchronous);
    }
# 237 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_scan.cuh" 3
    template <
        typename InputIteratorT,
        typename OutputIteratorT,
        typename ScanOpT,
        typename InitValueT>
    __attribute__((host))
    static cudaError_t ExclusiveScan(
        void *d_temp_storage,
        size_t &temp_storage_bytes,
        InputIteratorT d_in,
        OutputIteratorT d_out,
        ScanOpT scan_op,
        InitValueT init_value,
        int num_items,
        cudaStream_t stream = 0,
        bool debug_synchronous = false)
    {

        typedef int OffsetT;

        return DispatchScan<InputIteratorT, OutputIteratorT, ScanOpT, InitValueT, OffsetT>::Dispatch(
            d_temp_storage,
            temp_storage_bytes,
            d_in,
            d_out,
            scan_op,
            init_value,
            num_items,
            stream,
            debug_synchronous);
    }
# 319 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_scan.cuh" 3
    template <
        typename InputIteratorT,
        typename OutputIteratorT>
    __attribute__((host))
    static cudaError_t InclusiveSum(
        void* d_temp_storage,
        size_t& temp_storage_bytes,
        InputIteratorT d_in,
        OutputIteratorT d_out,
        int num_items,
        cudaStream_t stream = 0,
        bool debug_synchronous = false)
    {

        typedef int OffsetT;

        return DispatchScan<InputIteratorT, OutputIteratorT, Sum, NullType, OffsetT>::Dispatch(
            d_temp_storage,
            temp_storage_bytes,
            d_in,
            d_out,
            Sum(),
            NullType(),
            num_items,
            stream,
            debug_synchronous);
    }
# 402 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_scan.cuh" 3
    template <
        typename InputIteratorT,
        typename OutputIteratorT,
        typename ScanOpT>
    __attribute__((host))
    static cudaError_t InclusiveScan(
        void *d_temp_storage,
        size_t &temp_storage_bytes,
        InputIteratorT d_in,
        OutputIteratorT d_out,
        ScanOpT scan_op,
        int num_items,
        cudaStream_t stream = 0,
        bool debug_synchronous = false)
    {

        typedef int OffsetT;

        return DispatchScan<InputIteratorT, OutputIteratorT, ScanOpT, NullType, OffsetT>::Dispatch(
            d_temp_storage,
            temp_storage_bytes,
            d_in,
            d_out,
            scan_op,
            NullType(),
            num_items,
            stream,
            debug_synchronous);
    }



};





}
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 1 3
# 39 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/set" 1 3
# 59 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/set" 3


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 1 3
# 64 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 88 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
  template<typename _Key, typename _Compare = std::less<_Key>,
    typename _Alloc = std::allocator<_Key> >
    class set
    {

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:



      typedef _Key key_type;
      typedef _Key value_type;
      typedef _Compare key_compare;
      typedef _Compare value_compare;
      typedef _Alloc allocator_type;


    private:
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Key>::other _Key_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Identity<value_type>,
         key_compare, _Key_alloc_type> _Rep_type;
      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Key_alloc_type> _Alloc_traits;

    public:


      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;



      typedef typename _Rep_type::const_iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::const_reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;






      set()
      : _M_t() { }






      explicit
      set(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a)) { }
# 165 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      template<typename _InputIterator>
 set(_InputIterator __first, _InputIterator __last)
 : _M_t()
 { _M_t._M_insert_unique(__first, __last); }
# 182 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      template<typename _InputIterator>
 set(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Key_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 196 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      set(const set& __x)
      : _M_t(__x._M_t) { }
# 207 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      set(set&& __x)
      noexcept(is_nothrow_copy_constructible<_Compare>::value)
      : _M_t(std::move(__x._M_t)) { }
# 221 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      set(initializer_list<value_type> __l,
   const _Compare& __comp = _Compare(),
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      explicit
      set(const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a)) { }


      set(const set& __x, const allocator_type& __a)
      : _M_t(__x._M_t, _Key_alloc_type(__a)) { }


      set(set&& __x, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__x._M_t), _Key_alloc_type(__a)) { }


      set(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a))
      { _M_t._M_insert_unique(__l.begin(), __l.end()); }


      template<typename _InputIterator>
        set(_InputIterator __first, _InputIterator __last,
     const allocator_type& __a)
 : _M_t(_Compare(), _Key_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 262 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      set&
      operator=(const set& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 278 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      set&
      operator=(set&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_t._M_move_assign(__x._M_t))
   {


     clear();
     insert(std::__make_move_if_noexcept_iterator(__x._M_t.begin()),
     std::__make_move_if_noexcept_iterator(__x._M_t.end()));
     __x.clear();
   }
       return *this;
      }
# 304 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      set&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }





      key_compare
      key_comp() const
      { return _M_t.key_comp(); }

      value_compare
      value_comp() const
      { return _M_t.key_comp(); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }






      iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      iterator
      cend() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }



      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 428 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      void
      swap(set& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      { _M_t.swap(__x._M_t); }
# 450 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      template<typename... _Args>
 std::pair<iterator, bool>
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
# 476 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_unique(__pos,
          std::forward<_Args>(__args)...);
 }
# 498 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      {
 std::pair<typename _Rep_type::iterator, bool> __p =
   _M_t._M_insert_unique(__x);
 return std::pair<iterator, bool>(__p.first, __p.second);
      }


      std::pair<iterator, bool>
      insert(value_type&& __x)
      {
 std::pair<typename _Rep_type::iterator, bool> __p =
   _M_t._M_insert_unique(std::move(__x));
 return std::pair<iterator, bool>(__p.first, __p.second);
      }
# 535 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x)
      { return _M_t._M_insert_unique_(__position, __x); }


      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_unique_(__position, std::move(__x)); }
# 554 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      template<typename _InputIterator>
 void
 insert(_InputIterator __first, _InputIterator __last)
 { _M_t._M_insert_unique(__first, __last); }
# 567 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 588 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }
# 619 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 640 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 668 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      void
      clear() noexcept
      { _M_t.clear(); }
# 682 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
# 700 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 721 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }

      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }
# 737 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }

      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 762 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator==(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);

      template<typename _K1, typename _C1, typename _A1>
 friend bool
 operator<(const set<_K1, _C1, _A1>&, const set<_K1, _C1, _A1>&);
    };
# 791 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator==(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 808 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_set.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<(const set<_Key, _Compare, _Alloc>& __x,
       const set<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>(const set<_Key, _Compare, _Alloc>& __x,
       const set<_Key, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const set<_Key, _Compare, _Alloc>& __x,
        const set<_Key, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline void
    swap(set<_Key, _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 62 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/set" 2 3
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 1 3
# 64 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 90 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
  template <typename _Key, typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<_Key> >
    class multiset
    {

      typedef typename _Alloc::value_type _Alloc_value_type;





    public:

      typedef _Key key_type;
      typedef _Key value_type;
      typedef _Compare key_compare;
      typedef _Compare value_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Key>::other _Key_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Identity<value_type>,
         key_compare, _Key_alloc_type> _Rep_type;

      _Rep_type _M_t;

      typedef __gnu_cxx::__alloc_traits<_Key_alloc_type> _Alloc_traits;

    public:
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;



      typedef typename _Rep_type::const_iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::const_reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;





      multiset()
      : _M_t() { }






      explicit
      multiset(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a)) { }
# 162 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      template<typename _InputIterator>
        multiset(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_equal(__first, __last); }
# 178 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      template<typename _InputIterator>
        multiset(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Key_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 192 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      multiset(const multiset& __x)
      : _M_t(__x._M_t) { }
# 203 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      multiset(multiset&& __x)
      noexcept(is_nothrow_copy_constructible<_Compare>::value)
      : _M_t(std::move(__x._M_t)) { }
# 217 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      multiset(initializer_list<value_type> __l,
        const _Compare& __comp = _Compare(),
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Key_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      explicit
      multiset(const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a)) { }


      multiset(const multiset& __m, const allocator_type& __a)
      : _M_t(__m._M_t, _Key_alloc_type(__a)) { }


      multiset(multiset&& __m, const allocator_type& __a)
      noexcept(is_nothrow_copy_constructible<_Compare>::value
        && _Alloc_traits::_S_always_equal())
      : _M_t(std::move(__m._M_t), _Key_alloc_type(__a)) { }


      multiset(initializer_list<value_type> __l, const allocator_type& __a)
      : _M_t(_Compare(), _Key_alloc_type(__a))
      { _M_t._M_insert_equal(__l.begin(), __l.end()); }


      template<typename _InputIterator>
        multiset(_InputIterator __first, _InputIterator __last,
   const allocator_type& __a)
 : _M_t(_Compare(), _Key_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 258 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      multiset&
      operator=(const multiset& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 274 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      multiset&
      operator=(multiset&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_t._M_move_assign(__x._M_t))
   {


     clear();
     insert(std::__make_move_if_noexcept_iterator(__x._M_t.begin()),
     std::__make_move_if_noexcept_iterator(__x._M_t.end()));
     __x.clear();
   }
 return *this;
      }
# 300 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      multiset&
      operator=(initializer_list<value_type> __l)
      {
 this->clear();
 this->insert(__l.begin(), __l.end());
 return *this;
      }





      key_compare
      key_comp() const
      { return _M_t.key_comp(); }

      value_compare
      value_comp() const
      { return _M_t.key_comp(); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_t.get_allocator()); }






      iterator
      begin() const noexcept
      { return _M_t.begin(); }






      iterator
      end() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      rbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      rend() const noexcept
      { return _M_t.rend(); }







      iterator
      cbegin() const noexcept
      { return _M_t.begin(); }






      iterator
      cend() const noexcept
      { return _M_t.end(); }






      reverse_iterator
      crbegin() const noexcept
      { return _M_t.rbegin(); }






      reverse_iterator
      crend() const noexcept
      { return _M_t.rend(); }



      bool
      empty() const noexcept
      { return _M_t.empty(); }


      size_type
      size() const noexcept
      { return _M_t.size(); }


      size_type
      max_size() const noexcept
      { return _M_t.max_size(); }
# 424 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      void
      swap(multiset& __x)

      noexcept(_Alloc_traits::_S_nothrow_swap())

      { _M_t.swap(__x._M_t); }
# 445 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      template<typename... _Args>
 iterator
 emplace(_Args&&... __args)
 { return _M_t._M_emplace_equal(std::forward<_Args>(__args)...); }
# 471 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      template<typename... _Args>
 iterator
 emplace_hint(const_iterator __pos, _Args&&... __args)
 {
   return _M_t._M_emplace_hint_equal(__pos,
         std::forward<_Args>(__args)...);
 }
# 491 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }


      iterator
      insert(value_type&& __x)
      { return _M_t._M_insert_equal(std::move(__x)); }
# 521 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x)
      { return _M_t._M_insert_equal_(__position, __x); }


      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_t._M_insert_equal_(__position, std::move(__x)); }
# 539 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_equal(__first, __last); }
# 552 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      void
      insert(initializer_list<value_type> __l)
      { this->insert(__l.begin(), __l.end()); }
# 573 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __position)
      { return _M_t.erase(__position); }
# 604 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 625 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      __attribute ((__abi_tag__ ("cxx11")))
      iterator
      erase(const_iterator __first, const_iterator __last)
      { return _M_t.erase(__first, __last); }
# 653 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      void
      clear() noexcept
      { _M_t.clear(); }
# 664 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }
# 682 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }

      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 703 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }

      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }
# 719 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }

      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 744 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }

      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }


      template<typename _K1, typename _C1, typename _A1>
        friend bool
        operator==(const multiset<_K1, _C1, _A1>&,
     const multiset<_K1, _C1, _A1>&);

      template<typename _K1, typename _C1, typename _A1>
        friend bool
        operator< (const multiset<_K1, _C1, _A1>&,
     const multiset<_K1, _C1, _A1>&);
    };
# 775 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 792 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/stl_multiset.h" 3
  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multiset<_Key, _Compare, _Alloc>& __x,
       const multiset<_Key, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multiset<_Key,_Compare,_Alloc>& __x,
       const multiset<_Key,_Compare,_Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multiset<_Key, _Compare, _Alloc>& __x,
        const multiset<_Key, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Compare, typename _Alloc>
    inline void
    swap(multiset<_Key, _Compare, _Alloc>& __x,
  multiset<_Key, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 63 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/set" 2 3
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 2 3


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../host/mutex.cuh" 1 3
# 64 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../host/mutex.cuh" 3
namespace cub {







struct Mutex
{


    std::mutex mtx;

    void Lock()
    {
        mtx.lock();
    }

    void Unlock()
    {
        mtx.unlock();
    }

    void TryLock()
    {
        mtx.try_lock();
    }
# 164 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../thread/../host/mutex.cuh" 3
};




}
# 43 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 2 3






namespace cub {
# 101 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 3
struct CachingDeviceAllocator
{






    static const unsigned int INVALID_BIN = (unsigned int) -1;


    static const size_t INVALID_SIZE = (size_t) -1;




    static const int INVALID_DEVICE_ORDINAL = -1;
# 126 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 3
    struct BlockDescriptor
    {
        void* d_ptr;
        size_t bytes;
        unsigned int bin;
        int device;
        cudaStream_t associated_stream;
        cudaEvent_t ready_event;


        BlockDescriptor(void *d_ptr, int device) :
            d_ptr(d_ptr),
            bytes(0),
            bin(INVALID_BIN),
            device(device),
            associated_stream(0),
            ready_event(0)
        {}


        BlockDescriptor(int device) :
            d_ptr(__null),
            bytes(0),
            bin(INVALID_BIN),
            device(device),
            associated_stream(0),
            ready_event(0)
        {}


        static bool PtrCompare(const BlockDescriptor &a, const BlockDescriptor &b)
        {
            if (a.device == b.device)
                return (a.d_ptr < b.d_ptr);
            else
                return (a.device < b.device);
        }


        static bool SizeCompare(const BlockDescriptor &a, const BlockDescriptor &b)
        {
            if (a.device == b.device)
                return (a.bytes < b.bytes);
            else
                return (a.device < b.device);
        }
    };


    typedef bool (*Compare)(const BlockDescriptor &, const BlockDescriptor &);

    class TotalBytes {
    public:
        size_t free;
        size_t live;
        TotalBytes() { free = live = 0; }
    };


    typedef std::multiset<BlockDescriptor, Compare> CachedBlocks;


    typedef std::multiset<BlockDescriptor, Compare> BusyBlocks;


    typedef std::map<int, TotalBytes> GpuCachedBytes;
# 201 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 3
    static unsigned int IntPow(
        unsigned int base,
        unsigned int exp)
    {
        unsigned int retval = 1;
        while (exp > 0)
        {
            if (exp & 1) {
                retval = retval * base;
            }
            base = base * base;
            exp = exp >> 1;
        }
        return retval;
    }





    void NearestPowerOf(
        unsigned int &power,
        size_t &rounded_bytes,
        unsigned int base,
        size_t value)
    {
        power = 0;
        rounded_bytes = 1;

        if (value * base < value)
        {

            power = sizeof(size_t) * 8;
            rounded_bytes = size_t(0) - 1;
            return;
        }

        while (rounded_bytes < value)
        {
            rounded_bytes *= base;
            power++;
        }
    }






    cub::Mutex mutex;

    unsigned int bin_growth;
    unsigned int min_bin;
    unsigned int max_bin;

    size_t min_bin_bytes;
    size_t max_bin_bytes;
    size_t max_cached_bytes;

    const bool skip_cleanup;
    bool debug;

    GpuCachedBytes cached_bytes;
    CachedBlocks cached_blocks;
    BusyBlocks live_blocks;
# 276 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 3
    CachingDeviceAllocator(
        unsigned int bin_growth,
        unsigned int min_bin = 1,
        unsigned int max_bin = INVALID_BIN,
        size_t max_cached_bytes = INVALID_SIZE,
        bool skip_cleanup = false,
        bool debug = false)
    :
        bin_growth(bin_growth),
        min_bin(min_bin),
        max_bin(max_bin),
        min_bin_bytes(IntPow(bin_growth, min_bin)),
        max_bin_bytes(IntPow(bin_growth, max_bin)),
        max_cached_bytes(max_cached_bytes),
        skip_cleanup(skip_cleanup),
        debug(debug),
        cached_blocks(BlockDescriptor::SizeCompare),
        live_blocks(BlockDescriptor::PtrCompare)
    {}
# 310 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 3
    CachingDeviceAllocator(
        bool skip_cleanup = false,
        bool debug = false)
    :
        bin_growth(8),
        min_bin(3),
        max_bin(7),
        min_bin_bytes(IntPow(bin_growth, min_bin)),
        max_bin_bytes(IntPow(bin_growth, max_bin)),
        max_cached_bytes((max_bin_bytes * 3) - 1),
        skip_cleanup(skip_cleanup),
        debug(debug),
        cached_blocks(BlockDescriptor::SizeCompare),
        live_blocks(BlockDescriptor::PtrCompare)
    {}
# 333 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 3
    cudaError_t SetMaxCachedBytes(
        size_t max_cached_bytes)
    {

        mutex.Lock();

        if (debug) printf("[block (%d,%d,%d), thread (%d,%d,%d)]: " "Changing max_cached_bytes (%lld -> %lld)\n", blockIdx.z, blockIdx.y, blockIdx.x, threadIdx.z, threadIdx.y, threadIdx.x, (long long) this->max_cached_bytes, (long long) max_cached_bytes);;

        this->max_cached_bytes = max_cached_bytes;


        mutex.Unlock();

        return cudaSuccess;
    }
# 357 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 3
    cudaError_t DeviceAllocate(
        int device,
        void **d_ptr,
        size_t bytes,
        cudaStream_t active_stream = 0)
    {
        *d_ptr = __null;
        int entrypoint_device = INVALID_DEVICE_ORDINAL;
        cudaError_t error = cudaSuccess;

        if (device == INVALID_DEVICE_ORDINAL)
        {
            if (cub::Debug((cudaError_t) (error = cudaGetDevice(&entrypoint_device)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 369)) return error;
            device = entrypoint_device;
        }


        bool found = false;
        BlockDescriptor search_key(device);
        search_key.associated_stream = active_stream;
        NearestPowerOf(search_key.bin, search_key.bytes, bin_growth, bytes);

        if (search_key.bin > max_bin)
        {



            search_key.bin = INVALID_BIN;
            search_key.bytes = bytes;
        }
        else
        {

            mutex.Lock();

            if (search_key.bin < min_bin)
            {

                search_key.bin = min_bin;
                search_key.bytes = min_bin_bytes;
            }


            CachedBlocks::iterator block_itr = cached_blocks.lower_bound(search_key);
            while ((block_itr != cached_blocks.end())
                    && (block_itr->device == device)
                    && (block_itr->bin == search_key.bin))
            {



                if ((active_stream == block_itr->associated_stream) ||
                    (cudaEventQuery(block_itr->ready_event) != cudaErrorNotReady))
                {

                    found = true;
                    search_key = *block_itr;
                    search_key.associated_stream = active_stream;
                    live_blocks.insert(search_key);


                    cached_bytes[device].free -= search_key.bytes;
                    cached_bytes[device].live += search_key.bytes;

                    if (debug) printf("[block (%d,%d,%d), thread (%d,%d,%d)]: " "\tDevice %d reused cached block at %p (%lld bytes) for stream %lld (previously associated with stream %lld).\n", blockIdx.z, blockIdx.y, blockIdx.x, threadIdx.z, threadIdx.y, threadIdx.x, device, search_key.d_ptr, (long long) search_key.bytes, (long long) search_key.associated_stream, (long long) block_itr->associated_stream);;


                    cached_blocks.erase(block_itr);

                    break;
                }
                block_itr++;
            }


            mutex.Unlock();
        }


        if (!found)
        {

            if (device != entrypoint_device)
            {
                if (cub::Debug((cudaError_t) (error = cudaGetDevice(&entrypoint_device)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 441)) return error;
                if (cub::Debug((cudaError_t) (error = cudaSetDevice(device)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 442)) return error;
            }


            if (cub::Debug((cudaError_t) (error = cudaMalloc(&search_key.d_ptr, search_key.bytes)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 446) == cudaErrorMemoryAllocation)
            {

                if (debug) printf("[block (%d,%d,%d), thread (%d,%d,%d)]: " "\tDevice %d failed to allocate %lld bytes for stream %lld, retrying after freeing cached allocations", blockIdx.z, blockIdx.y, blockIdx.x, threadIdx.z, threadIdx.y, threadIdx.x, device, (long long) search_key.bytes, (long long) search_key.associated_stream);;


                error = cudaSuccess;
                cudaGetLastError();


                mutex.Lock();


                BlockDescriptor free_key(device);
                CachedBlocks::iterator block_itr = cached_blocks.lower_bound(free_key);

                while ((block_itr != cached_blocks.end()) && (block_itr->device == device))
                {





                    if (cub::Debug((cudaError_t) (error = cudaFree(block_itr->d_ptr)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 469)) break;
                    if (cub::Debug((cudaError_t) (error = cudaEventDestroy(block_itr->ready_event)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 470)) break;


                    cached_bytes[device].free -= block_itr->bytes;

                    if (debug) printf("[block (%d,%d,%d), thread (%d,%d,%d)]: " "\tDevice %d freed %lld bytes.\n\t\t  %lld available blocks cached (%lld bytes), %lld live blocks (%lld bytes) outstanding.\n", blockIdx.z, blockIdx.y, blockIdx.x, threadIdx.z, threadIdx.y, threadIdx.x, device, (long long) block_itr->bytes, (long long) cached_blocks.size(), (long long) cached_bytes[device].free, (long long) live_blocks.size(), (long long) cached_bytes[device].live);;


                    cached_blocks.erase(block_itr);

                    block_itr++;
                }


                mutex.Unlock();


                if (error) return error;


                if (cub::Debug((cudaError_t) (error = cudaMalloc(&search_key.d_ptr, search_key.bytes)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 490)) return error;
            }


            if (cub::Debug((cudaError_t) (error = cudaEventCreateWithFlags(&search_key.ready_event, 0x02)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 494))
                return error;


            mutex.Lock();
            live_blocks.insert(search_key);
            cached_bytes[device].live += search_key.bytes;
            mutex.Unlock();

            if (debug) printf("[block (%d,%d,%d), thread (%d,%d,%d)]: " "\tDevice %d allocated new device block at %p (%lld bytes associated with stream %lld).\n", blockIdx.z, blockIdx.y, blockIdx.x, threadIdx.z, threadIdx.y, threadIdx.x, device, search_key.d_ptr, (long long) search_key.bytes, (long long) search_key.associated_stream);;



            if ((entrypoint_device != INVALID_DEVICE_ORDINAL) && (entrypoint_device != device))
            {
                if (cub::Debug((cudaError_t) (error = cudaSetDevice(entrypoint_device)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 509)) return error;
            }
        }


        *d_ptr = search_key.d_ptr;

        if (debug) printf("[block (%d,%d,%d), thread (%d,%d,%d)]: " "\t\t%lld available blocks cached (%lld bytes), %lld live blocks outstanding(%lld bytes).\n", blockIdx.z, blockIdx.y, blockIdx.x, threadIdx.z, threadIdx.y, threadIdx.x, (long long) cached_blocks.size(), (long long) cached_bytes[device].free, (long long) live_blocks.size(), (long long) cached_bytes[device].live);;


        return error;
    }
# 530 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 3
    cudaError_t DeviceAllocate(
        void **d_ptr,
        size_t bytes,
        cudaStream_t active_stream = 0)
    {
        return DeviceAllocate(INVALID_DEVICE_ORDINAL, d_ptr, bytes, active_stream);
    }
# 546 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 3
    cudaError_t DeviceFree(
        int device,
        void* d_ptr)
    {
        int entrypoint_device = INVALID_DEVICE_ORDINAL;
        cudaError_t error = cudaSuccess;

        if (device == INVALID_DEVICE_ORDINAL)
        {
            if (cub::Debug((cudaError_t) (error = cudaGetDevice(&entrypoint_device)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 555))
                return error;
            device = entrypoint_device;
        }


        mutex.Lock();


        bool recached = false;
        BlockDescriptor search_key(d_ptr, device);
        BusyBlocks::iterator block_itr = live_blocks.find(search_key);
        if (block_itr != live_blocks.end())
        {

            search_key = *block_itr;
            live_blocks.erase(block_itr);
            cached_bytes[device].live -= search_key.bytes;


            if ((search_key.bin != INVALID_BIN) && (cached_bytes[device].free + search_key.bytes <= max_cached_bytes))
            {

                recached = true;
                cached_blocks.insert(search_key);
                cached_bytes[device].free += search_key.bytes;

                if (debug) printf("[block (%d,%d,%d), thread (%d,%d,%d)]: " "\tDevice %d returned %lld bytes from associated stream %lld.\n\t\t %lld available blocks cached (%lld bytes), %lld live blocks outstanding. (%lld bytes)\n", blockIdx.z, blockIdx.y, blockIdx.x, threadIdx.z, threadIdx.y, threadIdx.x, device, (long long) search_key.bytes, (long long) search_key.associated_stream, (long long) cached_blocks.size(), (long long) cached_bytes[device].free, (long long) live_blocks.size(), (long long) cached_bytes[device].live);;


            }
        }


        mutex.Unlock();


        if (device != entrypoint_device)
        {
            if (cub::Debug((cudaError_t) (error = cudaGetDevice(&entrypoint_device)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 594)) return error;
            if (cub::Debug((cudaError_t) (error = cudaSetDevice(device)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 595)) return error;
        }

        if (recached)
        {

            if (cub::Debug((cudaError_t) (error = cudaEventRecord(search_key.ready_event, search_key.associated_stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 601)) return error;
        }
        else
        {

            if (cub::Debug((cudaError_t) (error = cudaFree(d_ptr)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 606)) return error;
            if (cub::Debug((cudaError_t) (error = cudaEventDestroy(search_key.ready_event)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 607)) return error;

            if (debug) printf("[block (%d,%d,%d), thread (%d,%d,%d)]: " "\tDevice %d freed %lld bytes from associated stream %lld.\n\t\t  %lld available blocks cached (%lld bytes), %lld live blocks (%lld bytes) outstanding.\n", blockIdx.z, blockIdx.y, blockIdx.x, threadIdx.z, threadIdx.y, threadIdx.x, device, (long long) search_key.bytes, (long long) search_key.associated_stream, (long long) cached_blocks.size(), (long long) cached_bytes[device].free, (long long) live_blocks.size(), (long long) cached_bytes[device].live);;

        }


        if ((entrypoint_device != INVALID_DEVICE_ORDINAL) && (entrypoint_device != device))
        {
            if (cub::Debug((cudaError_t) (error = cudaSetDevice(entrypoint_device)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 616)) return error;
        }

        return error;
    }
# 630 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh" 3
    cudaError_t DeviceFree(
        void* d_ptr)
    {
        return DeviceFree(INVALID_DEVICE_ORDINAL, d_ptr);
    }





    cudaError_t FreeAllCached()
    {
        cudaError_t error = cudaSuccess;
        int entrypoint_device = INVALID_DEVICE_ORDINAL;
        int current_device = INVALID_DEVICE_ORDINAL;

        mutex.Lock();

        while (!cached_blocks.empty())
        {

            CachedBlocks::iterator begin = cached_blocks.begin();


            if (entrypoint_device == INVALID_DEVICE_ORDINAL)
            {
                if (cub::Debug((cudaError_t) (error = cudaGetDevice(&entrypoint_device)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 656)) break;
            }


            if (begin->device != current_device)
            {
                if (cub::Debug((cudaError_t) (error = cudaSetDevice(begin->device)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 662)) break;
                current_device = begin->device;
            }


            if (cub::Debug((cudaError_t) (error = cudaFree(begin->d_ptr)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 667)) break;
            if (cub::Debug((cudaError_t) (error = cudaEventDestroy(begin->ready_event)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 668)) break;


            cached_bytes[current_device].free -= begin->bytes;

            if (debug) printf("[block (%d,%d,%d), thread (%d,%d,%d)]: " "\tDevice %d freed %lld bytes.\n\t\t  %lld available blocks cached (%lld bytes), %lld live blocks (%lld bytes) outstanding.\n", blockIdx.z, blockIdx.y, blockIdx.x, threadIdx.z, threadIdx.y, threadIdx.x, current_device, (long long) begin->bytes, (long long) cached_blocks.size(), (long long) cached_bytes[current_device].free, (long long) live_blocks.size(), (long long) cached_bytes[current_device].live);;


            cached_blocks.erase(begin);
        }

        mutex.Unlock();


        if (entrypoint_device != INVALID_DEVICE_ORDINAL)
        {
            if (cub::Debug((cudaError_t) (error = cudaSetDevice(entrypoint_device)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/util_allocator.cuh", 684)) return error;
        }

        return error;
    }





    virtual ~CachingDeviceAllocator()
    {
        if (!skip_cleanup)
            FreeAllCached();
    }

};






}
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp" 2




namespace RAJA
{
namespace impl
{
namespace scan
{





template <size_t BLOCK_SIZE, bool Async, typename InputIter, typename Function>
void inclusive_inplace(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>&,
                       InputIter begin,
                       InputIter end,
                       Function binary_op)
{
  cudaStream_t stream = 0;

  int len = std::distance(begin, end);

  void* d_temp_storage = nullptr;
  size_t temp_storage_bytes = 0;
  { ::RAJA::cudaAssert((::cub::DeviceScan::InclusiveScan(d_temp_storage, temp_storage_bytes, begin, begin, binary_op, len, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp", 63); };







  d_temp_storage =
      cuda::device_mempool_type::getInstance().malloc<unsigned char>(
          temp_storage_bytes);

  { ::RAJA::cudaAssert((::cub::DeviceScan::InclusiveScan(d_temp_storage, temp_storage_bytes, begin, begin, binary_op, len, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp", 75); };







  cuda::device_mempool_type::getInstance().free(d_temp_storage);

  cuda::launch(stream);
  if (!Async) cuda::synchronize(stream);
}





template <size_t BLOCK_SIZE,
          bool Async,
          typename InputIter,
          typename Function,
          typename T>
void exclusive_inplace(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>&,
                       InputIter begin,
                       InputIter end,
                       Function binary_op,
                       T init)
{
  cudaStream_t stream = 0;

  int len = std::distance(begin, end);

  void* d_temp_storage = nullptr;
  size_t temp_storage_bytes = 0;
  { ::RAJA::cudaAssert((::cub::DeviceScan::ExclusiveScan(d_temp_storage, temp_storage_bytes, begin, begin, binary_op, init, len, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp", 111); };
# 113 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp"
  d_temp_storage =
      cuda::device_mempool_type::getInstance().malloc<unsigned char>(
          temp_storage_bytes);

  { ::RAJA::cudaAssert((::cub::DeviceScan::ExclusiveScan(d_temp_storage, temp_storage_bytes, begin, begin, binary_op, init, len, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp", 124); };
# 126 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp"
  cuda::device_mempool_type::getInstance().free(d_temp_storage);

  cuda::launch(stream);
  if (!Async) cuda::synchronize(stream);
}





template <size_t BLOCK_SIZE,
          bool Async,
          typename InputIter,
          typename OutputIter,
          typename Function>
void inclusive(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>&,
               InputIter begin,
               InputIter end,
               OutputIter out,
               Function binary_op)
{
  cudaStream_t stream = 0;

  int len = std::distance(begin, end);

  void* d_temp_storage = nullptr;
  size_t temp_storage_bytes = 0;
  { ::RAJA::cudaAssert((::cub::DeviceScan::InclusiveScan( d_temp_storage, temp_storage_bytes, begin, out, binary_op, len, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp", 154); };


  d_temp_storage =
      cuda::device_mempool_type::getInstance().malloc<unsigned char>(
          temp_storage_bytes);

  { ::RAJA::cudaAssert((::cub::DeviceScan::InclusiveScan( d_temp_storage, temp_storage_bytes, begin, out, binary_op, len, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp", 161); };


  cuda::device_mempool_type::getInstance().free(d_temp_storage);

  cuda::launch(stream);
  if (!Async) cuda::synchronize(stream);
}





template <size_t BLOCK_SIZE,
          bool Async,
          typename InputIter,
          typename OutputIter,
          typename Function,
          typename T>
void exclusive(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>&,
               InputIter begin,
               InputIter end,
               OutputIter out,
               Function binary_op,
               T init)
{
  cudaStream_t stream = 0;

  int len = std::distance(begin, end);

  void* d_temp_storage = nullptr;
  size_t temp_storage_bytes = 0;
  { ::RAJA::cudaAssert((::cub::DeviceScan::ExclusiveScan(d_temp_storage, temp_storage_bytes, begin, out, binary_op, init, len, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp", 199); };
# 201 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp"
  d_temp_storage =
      cuda::device_mempool_type::getInstance().malloc<unsigned char>(
          temp_storage_bytes);

  { ::RAJA::cudaAssert((::cub::DeviceScan::ExclusiveScan(d_temp_storage, temp_storage_bytes, begin, out, binary_op, init, len, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp", 212); };
# 214 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/scan.hpp"
  cuda::device_mempool_type::getInstance().free(d_temp_storage);

  cuda::launch(stream);
  if (!Async) cuda::synchronize(stream);
}

}

}

}
# 35 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp" 1
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/climits" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/climits" 3
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp" 2



# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_radix_sort.cuh" 1 3
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_radix_sort.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 1 3
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_upsweep.cuh" 1 3
# 48 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_upsweep.cuh" 3
namespace cub {
# 57 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_upsweep.cuh" 3
template <
    int _BLOCK_THREADS,
    int _ITEMS_PER_THREAD,
    CacheLoadModifier _LOAD_MODIFIER,
    int _RADIX_BITS>
struct AgentRadixSortUpsweepPolicy
{
    enum
    {
        BLOCK_THREADS = _BLOCK_THREADS,
        ITEMS_PER_THREAD = _ITEMS_PER_THREAD,
        RADIX_BITS = _RADIX_BITS,
    };

    static const CacheLoadModifier LOAD_MODIFIER = _LOAD_MODIFIER;
};
# 82 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_upsweep.cuh" 3
template <
    typename AgentRadixSortUpsweepPolicy,
    typename KeyT,
    typename OffsetT>
struct AgentRadixSortUpsweep
{





    typedef typename Traits<KeyT>::UnsignedBits UnsignedBits;


    typedef unsigned char DigitCounter;


    typedef unsigned int PackedCounter;

    static const CacheLoadModifier LOAD_MODIFIER = AgentRadixSortUpsweepPolicy::LOAD_MODIFIER;

    enum
    {
        RADIX_BITS = AgentRadixSortUpsweepPolicy::RADIX_BITS,
        BLOCK_THREADS = AgentRadixSortUpsweepPolicy::BLOCK_THREADS,
        KEYS_PER_THREAD = AgentRadixSortUpsweepPolicy::ITEMS_PER_THREAD,

        RADIX_DIGITS = 1 << RADIX_BITS,

        LOG_WARP_THREADS = (5),
        WARP_THREADS = 1 << LOG_WARP_THREADS,
        WARPS = (BLOCK_THREADS + WARP_THREADS - 1) / WARP_THREADS,

        TILE_ITEMS = BLOCK_THREADS * KEYS_PER_THREAD,

        BYTES_PER_COUNTER = sizeof(DigitCounter),
        LOG_BYTES_PER_COUNTER = Log2<BYTES_PER_COUNTER>::VALUE,

        PACKING_RATIO = sizeof(PackedCounter) / sizeof(DigitCounter),
        LOG_PACKING_RATIO = Log2<PACKING_RATIO>::VALUE,

        LOG_COUNTER_LANES = (((RADIX_BITS - LOG_PACKING_RATIO) > (0)) ? (RADIX_BITS - LOG_PACKING_RATIO) : (0)),
        COUNTER_LANES = 1 << LOG_COUNTER_LANES,





        LANES_PER_WARP = ((((COUNTER_LANES + WARPS - 1) / WARPS) > (1)) ? ((COUNTER_LANES + WARPS - 1) / WARPS) : (1)),


        UNROLL_COUNT = (((255 / KEYS_PER_THREAD) < (64)) ? (255 / KEYS_PER_THREAD) : (64)),
        UNROLLED_ELEMENTS = UNROLL_COUNT * TILE_ITEMS,
    };



    typedef CacheModifiedInputIterator<LOAD_MODIFIER, UnsignedBits, OffsetT> KeysItr;




    union __attribute__((aligned(16))) _TempStorage
    {
        DigitCounter thread_counters[COUNTER_LANES][BLOCK_THREADS][PACKING_RATIO];
        PackedCounter packed_thread_counters[COUNTER_LANES][BLOCK_THREADS];
        OffsetT block_counters[WARP_THREADS][RADIX_DIGITS];
    };



    struct TempStorage : Uninitialized<_TempStorage> {};







    _TempStorage &temp_storage;


    OffsetT local_counts[LANES_PER_WARP][PACKING_RATIO];


    KeysItr d_keys_in;


    int current_bit;


    int num_bits;
# 182 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_upsweep.cuh" 3
    template <int COUNT, int MAX>
    struct Iterate
    {

        static __attribute__((device)) __inline__ __attribute__((always_inline)) void BucketKeys(
            AgentRadixSortUpsweep &cta,
            UnsignedBits keys[KEYS_PER_THREAD])
        {
            cta.Bucket(keys[COUNT]);


            Iterate<COUNT + 1, MAX>::BucketKeys(cta, keys);
        }
    };


    template <int MAX>
    struct Iterate<MAX, MAX>
    {

        static __attribute__((device)) __inline__ __attribute__((always_inline)) void BucketKeys(AgentRadixSortUpsweep & , UnsignedBits [KEYS_PER_THREAD]) {}
    };
# 213 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_upsweep.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Bucket(UnsignedBits key)
    {

        UnsignedBits converted_key = Traits<KeyT>::TwiddleIn(key);


        UnsignedBits digit = BFE(converted_key, current_bit, num_bits);


        UnsignedBits sub_counter = digit & (PACKING_RATIO - 1);


        UnsignedBits row_offset = digit >> LOG_PACKING_RATIO;


        temp_storage.thread_counters[row_offset][threadIdx.x][sub_counter]++;
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void ResetDigitCounters()
    {
#pragma unroll
 for (int LANE = 0; LANE < COUNTER_LANES; LANE++)
        {
            temp_storage.packed_thread_counters[LANE][threadIdx.x] = 0;
        }
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void ResetUnpackedCounters()
    {
#pragma unroll
 for (int LANE = 0; LANE < LANES_PER_WARP; LANE++)
        {
#pragma unroll
 for (int UNPACKED_COUNTER = 0; UNPACKED_COUNTER < PACKING_RATIO; UNPACKED_COUNTER++)
            {
                local_counts[LANE][UNPACKED_COUNTER] = 0;
            }
        }
    }






    __attribute__((device)) __inline__ __attribute__((always_inline)) void UnpackDigitCounts()
    {
        unsigned int warp_id = threadIdx.x >> LOG_WARP_THREADS;
        unsigned int warp_tid = LaneId();

#pragma unroll
 for (int LANE = 0; LANE < LANES_PER_WARP; LANE++)
        {
            const int counter_lane = (LANE * WARPS) + warp_id;
            if (counter_lane < COUNTER_LANES)
            {
#pragma unroll
 for (int PACKED_COUNTER = 0; PACKED_COUNTER < BLOCK_THREADS; PACKED_COUNTER += WARP_THREADS)
                {
#pragma unroll
 for (int UNPACKED_COUNTER = 0; UNPACKED_COUNTER < PACKING_RATIO; UNPACKED_COUNTER++)
                    {
                        OffsetT counter = temp_storage.thread_counters[counter_lane][warp_tid + PACKED_COUNTER][UNPACKED_COUNTER];
                        local_counts[LANE][UNPACKED_COUNTER] += counter;
                    }
                }
            }
        }
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void ProcessFullTile(OffsetT block_offset)
    {

        UnsignedBits keys[KEYS_PER_THREAD];

        LoadDirectStriped<BLOCK_THREADS>(threadIdx.x, d_keys_in + block_offset, keys);


        CTA_SYNC();


        Iterate<0, KEYS_PER_THREAD>::BucketKeys(*this, keys);
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void ProcessPartialTile(
        OffsetT block_offset,
        const OffsetT &block_end)
    {

        block_offset += threadIdx.x;
        while (block_offset < block_end)
        {

            UnsignedBits key = d_keys_in[block_offset];
            Bucket(key);
            block_offset += BLOCK_THREADS;
        }
    }
# 336 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_upsweep.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) AgentRadixSortUpsweep(
        TempStorage &temp_storage,
        const KeyT *d_keys_in,
        int current_bit,
        int num_bits)
    :
        temp_storage(temp_storage.Alias()),
        d_keys_in(reinterpret_cast<const UnsignedBits*>(d_keys_in)),
        current_bit(current_bit),
        num_bits(num_bits)
    {}





    __attribute__((device)) __inline__ __attribute__((always_inline)) void ProcessRegion(
        OffsetT block_offset,
        const OffsetT &block_end)
    {

        ResetDigitCounters();
        ResetUnpackedCounters();


        while (block_offset + UNROLLED_ELEMENTS <= block_end)
        {
            for (int i = 0; i < UNROLL_COUNT; ++i)
            {
                ProcessFullTile(block_offset);
                block_offset += TILE_ITEMS;
            }

            CTA_SYNC();


            UnpackDigitCounts();

            CTA_SYNC();


            ResetDigitCounters();
        }


        while (block_offset + TILE_ITEMS <= block_end)
        {
            ProcessFullTile(block_offset);
            block_offset += TILE_ITEMS;
        }


        ProcessPartialTile(
            block_offset,
            block_end);

        CTA_SYNC();


        UnpackDigitCounts();
    }





    template <bool IS_DESCENDING>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExtractCounts(
        OffsetT *counters,
        int bin_stride = 1,
        int bin_offset = 0)
    {
        unsigned int warp_id = threadIdx.x >> LOG_WARP_THREADS;
        unsigned int warp_tid = LaneId();


#pragma unroll
 for (int LANE = 0; LANE < LANES_PER_WARP; LANE++)
        {
            int counter_lane = (LANE * WARPS) + warp_id;
            if (counter_lane < COUNTER_LANES)
            {
                int digit_row = counter_lane << LOG_PACKING_RATIO;

#pragma unroll
 for (int UNPACKED_COUNTER = 0; UNPACKED_COUNTER < PACKING_RATIO; UNPACKED_COUNTER++)
                {
                    int bin_idx = digit_row + UNPACKED_COUNTER;

                    temp_storage.block_counters[warp_tid][bin_idx] =
                        local_counts[LANE][UNPACKED_COUNTER];
                }
            }
        }

        CTA_SYNC();




#pragma unroll
 for (int BIN_BASE = RADIX_DIGITS % BLOCK_THREADS;
            (BIN_BASE + BLOCK_THREADS) <= RADIX_DIGITS;
            BIN_BASE += BLOCK_THREADS)
        {
            int bin_idx = BIN_BASE + threadIdx.x;

            OffsetT bin_count = 0;
#pragma unroll
 for (int i = 0; i < WARP_THREADS; ++i)
                bin_count += temp_storage.block_counters[i][bin_idx];

            if (IS_DESCENDING)
                bin_idx = RADIX_DIGITS - bin_idx - 1;

            counters[(bin_stride * bin_idx) + bin_offset] = bin_count;
        }


        if ((RADIX_DIGITS % BLOCK_THREADS != 0) && (threadIdx.x < RADIX_DIGITS))
        {
            int bin_idx = threadIdx.x;

            OffsetT bin_count = 0;
#pragma unroll
 for (int i = 0; i < WARP_THREADS; ++i)
                bin_count += temp_storage.block_counters[i][bin_idx];

            if (IS_DESCENDING)
                bin_idx = RADIX_DIGITS - bin_idx - 1;

            counters[(bin_stride * bin_idx) + bin_offset] = bin_count;
        }
    }





    template <int BINS_TRACKED_PER_THREAD>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExtractCounts(
        OffsetT (&bin_count)[BINS_TRACKED_PER_THREAD])
    {
        unsigned int warp_id = threadIdx.x >> LOG_WARP_THREADS;
        unsigned int warp_tid = LaneId();


#pragma unroll
 for (int LANE = 0; LANE < LANES_PER_WARP; LANE++)
        {
            int counter_lane = (LANE * WARPS) + warp_id;
            if (counter_lane < COUNTER_LANES)
            {
                int digit_row = counter_lane << LOG_PACKING_RATIO;

#pragma unroll
 for (int UNPACKED_COUNTER = 0; UNPACKED_COUNTER < PACKING_RATIO; UNPACKED_COUNTER++)
                {
                    int bin_idx = digit_row + UNPACKED_COUNTER;

                    temp_storage.block_counters[warp_tid][bin_idx] =
                        local_counts[LANE][UNPACKED_COUNTER];
                }
            }
        }

        CTA_SYNC();


#pragma unroll
 for (int track = 0; track < BINS_TRACKED_PER_THREAD; ++track)
        {
            int bin_idx = (threadIdx.x * BINS_TRACKED_PER_THREAD) + track;

            if ((BLOCK_THREADS == RADIX_DIGITS) || (bin_idx < RADIX_DIGITS))
            {
                bin_count[track] = 0;

#pragma unroll
 for (int i = 0; i < WARP_THREADS; ++i)
                    bin_count[track] += temp_storage.block_counters[i][bin_idx];
            }
        }
    }

};


}
# 41 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_downsweep.cuh" 1 3
# 42 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_downsweep.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_radix_rank.cuh" 1 3
# 51 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_radix_rank.cuh" 3
namespace cub {
# 87 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_radix_rank.cuh" 3
template <
    int BLOCK_DIM_X,
    int RADIX_BITS,
    bool IS_DESCENDING,
    bool MEMOIZE_OUTER_SCAN = (700 >= 350) ? true : false,
    BlockScanAlgorithm INNER_SCAN_ALGORITHM = BLOCK_SCAN_WARP_SCANS,
    cudaSharedMemConfig SMEM_CONFIG = cudaSharedMemBankSizeFourByte,
    int BLOCK_DIM_Y = 1,
    int BLOCK_DIM_Z = 1,
    int PTX_ARCH = 700>
class BlockRadixRank
{
private:






    typedef unsigned short DigitCounter;


    typedef typename If<(SMEM_CONFIG == cudaSharedMemBankSizeEightByte),
        unsigned long long,
        unsigned int>::Type PackedCounter;

    enum
    {

        BLOCK_THREADS = BLOCK_DIM_X * BLOCK_DIM_Y * BLOCK_DIM_Z,

        RADIX_DIGITS = 1 << RADIX_BITS,

        LOG_WARP_THREADS = (5),
        WARP_THREADS = 1 << LOG_WARP_THREADS,
        WARPS = (BLOCK_THREADS + WARP_THREADS - 1) / WARP_THREADS,

        BYTES_PER_COUNTER = sizeof(DigitCounter),
        LOG_BYTES_PER_COUNTER = Log2<BYTES_PER_COUNTER>::VALUE,

        PACKING_RATIO = sizeof(PackedCounter) / sizeof(DigitCounter),
        LOG_PACKING_RATIO = Log2<PACKING_RATIO>::VALUE,

        LOG_COUNTER_LANES = (((0) > ((RADIX_BITS - LOG_PACKING_RATIO))) ? (0) : ((RADIX_BITS - LOG_PACKING_RATIO))),
        COUNTER_LANES = 1 << LOG_COUNTER_LANES,


        PADDED_COUNTER_LANES = COUNTER_LANES + 1,
        RAKING_SEGMENT = PADDED_COUNTER_LANES,
    };

public:

    enum
    {

        BINS_TRACKED_PER_THREAD = ((((RADIX_DIGITS + BLOCK_THREADS - 1) / BLOCK_THREADS) > (1)) ? ((RADIX_DIGITS + BLOCK_THREADS - 1) / BLOCK_THREADS) : (1)),
    };

private:



    typedef BlockScan<
            PackedCounter,
            BLOCK_DIM_X,
            INNER_SCAN_ALGORITHM,
            BLOCK_DIM_Y,
            BLOCK_DIM_Z,
            PTX_ARCH>
        BlockScan;



    struct __attribute__((aligned(16))) _TempStorage
    {
        union Aliasable
        {
            DigitCounter digit_counters[PADDED_COUNTER_LANES][BLOCK_THREADS][PACKING_RATIO];
            PackedCounter raking_grid[BLOCK_THREADS][RAKING_SEGMENT];

        } aliasable;


        typename BlockScan::TempStorage block_scan;
    };







    _TempStorage &temp_storage;


    unsigned int linear_tid;


    PackedCounter cached_segment[RAKING_SEGMENT];
# 196 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_radix_rank.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) _TempStorage& PrivateStorage()
    {
        __attribute__((shared)) _TempStorage private_storage;
        return private_storage;
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) PackedCounter Upsweep()
    {
        PackedCounter *smem_raking_ptr = temp_storage.aliasable.raking_grid[linear_tid];
        PackedCounter *raking_ptr;

        if (MEMOIZE_OUTER_SCAN)
        {

#pragma unroll
 for (int i = 0; i < RAKING_SEGMENT; i++)
            {
                cached_segment[i] = smem_raking_ptr[i];
            }
            raking_ptr = cached_segment;
        }
        else
        {
            raking_ptr = smem_raking_ptr;
        }

        return internal::ThreadReduce<RAKING_SEGMENT>(raking_ptr, Sum());
    }



    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExclusiveDownsweep(
        PackedCounter raking_partial)
    {
        PackedCounter *smem_raking_ptr = temp_storage.aliasable.raking_grid[linear_tid];

        PackedCounter *raking_ptr = (MEMOIZE_OUTER_SCAN) ?
            cached_segment :
            smem_raking_ptr;


        internal::ThreadScanExclusive<RAKING_SEGMENT>(raking_ptr, raking_ptr, Sum(), raking_partial);

        if (MEMOIZE_OUTER_SCAN)
        {

#pragma unroll
 for (int i = 0; i < RAKING_SEGMENT; i++)
            {
                smem_raking_ptr[i] = cached_segment[i];
            }
        }
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void ResetCounters()
    {

#pragma unroll
 for (int LANE = 0; LANE < PADDED_COUNTER_LANES; LANE++)
        {
            *((PackedCounter*) temp_storage.aliasable.digit_counters[LANE][linear_tid]) = 0;
        }
    }





    struct PrefixCallBack
    {
        __attribute__((device)) __inline__ __attribute__((always_inline)) PackedCounter operator()(PackedCounter block_aggregate)
        {
            PackedCounter block_prefix = 0;


#pragma unroll
 for (int PACKED = 1; PACKED < PACKING_RATIO; PACKED++)
            {
                block_prefix += block_aggregate << (sizeof(DigitCounter) * 8 * PACKED);
            }

            return block_prefix;
        }
    };





    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScanCounters()
    {

        PackedCounter raking_partial = Upsweep();


        PackedCounter exclusive_partial;
        PrefixCallBack prefix_call_back;
        BlockScan(temp_storage.block_scan).ExclusiveSum(raking_partial, exclusive_partial, prefix_call_back);


        ExclusiveDownsweep(exclusive_partial);
    }

public:


    struct TempStorage : Uninitialized<_TempStorage> {};
# 321 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_radix_rank.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockRadixRank()
    :
        temp_storage(PrivateStorage()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
    {}





    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockRadixRank(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
    {}
# 348 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_radix_rank.cuh" 3
    template <
        typename UnsignedBits,
        int KEYS_PER_THREAD>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void RankKeys(
        UnsignedBits (&keys)[KEYS_PER_THREAD],
        int (&ranks)[KEYS_PER_THREAD],
        int current_bit,
        int num_bits)
    {
        DigitCounter thread_prefixes[KEYS_PER_THREAD];
        DigitCounter* digit_counters[KEYS_PER_THREAD];


        ResetCounters();

#pragma unroll
 for (int ITEM = 0; ITEM < KEYS_PER_THREAD; ++ITEM)
        {

            unsigned int digit = BFE(keys[ITEM], current_bit, num_bits);


            unsigned int sub_counter = digit >> LOG_COUNTER_LANES;


            unsigned int counter_lane = digit & (COUNTER_LANES - 1);

            if (IS_DESCENDING)
            {
                sub_counter = PACKING_RATIO - 1 - sub_counter;
                counter_lane = COUNTER_LANES - 1 - counter_lane;
            }


            digit_counters[ITEM] = &temp_storage.aliasable.digit_counters[counter_lane][linear_tid][sub_counter];


            thread_prefixes[ITEM] = *digit_counters[ITEM];


            *digit_counters[ITEM] = thread_prefixes[ITEM] + 1;
        }

        CTA_SYNC();


        ScanCounters();

        CTA_SYNC();


        for (int ITEM = 0; ITEM < KEYS_PER_THREAD; ++ITEM)
        {

            ranks[ITEM] = thread_prefixes[ITEM] + *digit_counters[ITEM];
        }
    }





    template <
        typename UnsignedBits,
        int KEYS_PER_THREAD>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void RankKeys(
        UnsignedBits (&keys)[KEYS_PER_THREAD],
        int (&ranks)[KEYS_PER_THREAD],
        int current_bit,
        int num_bits,
        int (&exclusive_digit_prefix)[BINS_TRACKED_PER_THREAD])
    {

        RankKeys(keys, ranks, current_bit, num_bits);


#pragma unroll
 for (int track = 0; track < BINS_TRACKED_PER_THREAD; ++track)
        {
            int bin_idx = (linear_tid * BINS_TRACKED_PER_THREAD) + track;

            if ((BLOCK_THREADS == RADIX_DIGITS) || (bin_idx < RADIX_DIGITS))
            {
                if (IS_DESCENDING)
                    bin_idx = RADIX_DIGITS - bin_idx - 1;



                unsigned int counter_lane = (bin_idx & (COUNTER_LANES - 1));
                unsigned int sub_counter = bin_idx >> (LOG_COUNTER_LANES);

                exclusive_digit_prefix[track] = temp_storage.aliasable.digit_counters[counter_lane][0][sub_counter];
            }
        }
    }
};
# 452 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_radix_rank.cuh" 3
template <
    int BLOCK_DIM_X,
    int RADIX_BITS,
    bool IS_DESCENDING,
    BlockScanAlgorithm INNER_SCAN_ALGORITHM = BLOCK_SCAN_WARP_SCANS,
    int BLOCK_DIM_Y = 1,
    int BLOCK_DIM_Z = 1,
    int PTX_ARCH = 700>
class BlockRadixRankMatch
{
private:





    typedef int32_t RankT;
    typedef int32_t DigitCounterT;

    enum
    {

        BLOCK_THREADS = BLOCK_DIM_X * BLOCK_DIM_Y * BLOCK_DIM_Z,

        RADIX_DIGITS = 1 << RADIX_BITS,

        LOG_WARP_THREADS = (5),
        WARP_THREADS = 1 << LOG_WARP_THREADS,
        WARPS = (BLOCK_THREADS + WARP_THREADS - 1) / WARP_THREADS,

        PADDED_WARPS = ((WARPS & 0x1) == 0) ?
                                    WARPS + 1 :
                                    WARPS,

        COUNTERS = PADDED_WARPS * RADIX_DIGITS,
        RAKING_SEGMENT = (COUNTERS + BLOCK_THREADS - 1) / BLOCK_THREADS,
        PADDED_RAKING_SEGMENT = ((RAKING_SEGMENT & 0x1) == 0) ?
                                    RAKING_SEGMENT + 1 :
                                    RAKING_SEGMENT,
    };

public:

    enum
    {

        BINS_TRACKED_PER_THREAD = ((((RADIX_DIGITS + BLOCK_THREADS - 1) / BLOCK_THREADS) > (1)) ? ((RADIX_DIGITS + BLOCK_THREADS - 1) / BLOCK_THREADS) : (1)),
    };

private:


    typedef BlockScan<
            DigitCounterT,
            BLOCK_THREADS,
            INNER_SCAN_ALGORITHM,
            BLOCK_DIM_Y,
            BLOCK_DIM_Z,
            PTX_ARCH>
        BlockScanT;



    struct __attribute__((aligned(16))) _TempStorage
    {
        typename BlockScanT::TempStorage block_scan;

        union __attribute__((aligned(16))) Aliasable
        {
            volatile DigitCounterT warp_digit_counters[RADIX_DIGITS][PADDED_WARPS];
            DigitCounterT raking_grid[BLOCK_THREADS][PADDED_RAKING_SEGMENT];

        } aliasable;
    };







    _TempStorage &temp_storage;


    unsigned int linear_tid;



public:


    struct TempStorage : Uninitialized<_TempStorage> {};
# 555 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_radix_rank.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockRadixRankMatch(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
    {}
# 572 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../block/block_radix_rank.cuh" 3
    template <
        typename UnsignedBits,
        int KEYS_PER_THREAD>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void RankKeys(
        UnsignedBits (&keys)[KEYS_PER_THREAD],
        int (&ranks)[KEYS_PER_THREAD],
        int current_bit,
        int num_bits)
    {


#pragma unroll
 for (int ITEM = 0; ITEM < PADDED_RAKING_SEGMENT; ++ITEM)
            temp_storage.aliasable.raking_grid[linear_tid][ITEM] = 0;

        CTA_SYNC();



        volatile DigitCounterT *digit_counters[KEYS_PER_THREAD];
        uint32_t warp_id = linear_tid >> LOG_WARP_THREADS;
        uint32_t lane_mask_lt = LaneMaskLt();

#pragma unroll
 for (int ITEM = 0; ITEM < KEYS_PER_THREAD; ++ITEM)
        {

            uint32_t digit = BFE(keys[ITEM], current_bit, num_bits);

            if (IS_DESCENDING)
                digit = RADIX_DIGITS - digit - 1;


            uint32_t peer_mask = MatchAny<RADIX_BITS>(digit);


            digit_counters[ITEM] = &temp_storage.aliasable.warp_digit_counters[digit][warp_id];


            DigitCounterT warp_digit_prefix = *digit_counters[ITEM];


            WARP_SYNC(0xFFFFFFFF);


            int32_t digit_count = __popc(peer_mask);


            int32_t peer_digit_prefix = __popc(peer_mask & lane_mask_lt);

            if (peer_digit_prefix == 0)
            {

                *digit_counters[ITEM] = DigitCounterT(warp_digit_prefix + digit_count);
            }


            WARP_SYNC(0xFFFFFFFF);


            ranks[ITEM] = warp_digit_prefix + DigitCounterT(peer_digit_prefix);
        }

        CTA_SYNC();



        DigitCounterT scan_counters[PADDED_RAKING_SEGMENT];

#pragma unroll
 for (int ITEM = 0; ITEM < PADDED_RAKING_SEGMENT; ++ITEM)
            scan_counters[ITEM] = temp_storage.aliasable.raking_grid[linear_tid][ITEM];

        BlockScanT(temp_storage.block_scan).ExclusiveSum(scan_counters, scan_counters);

#pragma unroll
 for (int ITEM = 0; ITEM < PADDED_RAKING_SEGMENT; ++ITEM)
            temp_storage.aliasable.raking_grid[linear_tid][ITEM] = scan_counters[ITEM];

        CTA_SYNC();


#pragma unroll
 for (int ITEM = 0; ITEM < KEYS_PER_THREAD; ++ITEM)
            ranks[ITEM] += *digit_counters[ITEM];
    }





    template <
        typename UnsignedBits,
        int KEYS_PER_THREAD>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void RankKeys(
        UnsignedBits (&keys)[KEYS_PER_THREAD],
        int (&ranks)[KEYS_PER_THREAD],
        int current_bit,
        int num_bits,
        int (&exclusive_digit_prefix)[BINS_TRACKED_PER_THREAD])
    {
        RankKeys(keys, ranks, current_bit, num_bits);


#pragma unroll
 for (int track = 0; track < BINS_TRACKED_PER_THREAD; ++track)
        {
            int bin_idx = (linear_tid * BINS_TRACKED_PER_THREAD) + track;

            if ((BLOCK_THREADS == RADIX_DIGITS) || (bin_idx < RADIX_DIGITS))
            {
                if (IS_DESCENDING)
                    bin_idx = RADIX_DIGITS - bin_idx - 1;

                exclusive_digit_prefix[track] = temp_storage.aliasable.warp_digit_counters[bin_idx][0];
            }
        }
    }
};


}
# 43 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_downsweep.cuh" 2 3
# 52 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_downsweep.cuh" 3
namespace cub {
# 62 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_downsweep.cuh" 3
enum RadixRankAlgorithm
{
    RADIX_RANK_BASIC,
    RADIX_RANK_MEMOIZE,
    RADIX_RANK_MATCH
};




template <
    int _BLOCK_THREADS,
    int _ITEMS_PER_THREAD,
    BlockLoadAlgorithm _LOAD_ALGORITHM,
    CacheLoadModifier _LOAD_MODIFIER,
    RadixRankAlgorithm _RANK_ALGORITHM,
    BlockScanAlgorithm _SCAN_ALGORITHM,
    int _RADIX_BITS>
struct AgentRadixSortDownsweepPolicy
{
    enum
    {
        BLOCK_THREADS = _BLOCK_THREADS,
        ITEMS_PER_THREAD = _ITEMS_PER_THREAD,
        RADIX_BITS = _RADIX_BITS,
    };

    static const BlockLoadAlgorithm LOAD_ALGORITHM = _LOAD_ALGORITHM;
    static const CacheLoadModifier LOAD_MODIFIER = _LOAD_MODIFIER;
    static const RadixRankAlgorithm RANK_ALGORITHM = _RANK_ALGORITHM;
    static const BlockScanAlgorithm SCAN_ALGORITHM = _SCAN_ALGORITHM;
};
# 107 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_downsweep.cuh" 3
template <
    typename AgentRadixSortDownsweepPolicy,
    bool IS_DESCENDING,
    typename KeyT,
    typename ValueT,
    typename OffsetT>
struct AgentRadixSortDownsweep
{





    typedef typename Traits<KeyT>::UnsignedBits UnsignedBits;

    static const UnsignedBits LOWEST_KEY = Traits<KeyT>::LOWEST_KEY;
    static const UnsignedBits MAX_KEY = Traits<KeyT>::MAX_KEY;

    static const BlockLoadAlgorithm LOAD_ALGORITHM = AgentRadixSortDownsweepPolicy::LOAD_ALGORITHM;
    static const CacheLoadModifier LOAD_MODIFIER = AgentRadixSortDownsweepPolicy::LOAD_MODIFIER;
    static const RadixRankAlgorithm RANK_ALGORITHM = AgentRadixSortDownsweepPolicy::RANK_ALGORITHM;
    static const BlockScanAlgorithm SCAN_ALGORITHM = AgentRadixSortDownsweepPolicy::SCAN_ALGORITHM;

    enum
    {
        BLOCK_THREADS = AgentRadixSortDownsweepPolicy::BLOCK_THREADS,
        ITEMS_PER_THREAD = AgentRadixSortDownsweepPolicy::ITEMS_PER_THREAD,
        RADIX_BITS = AgentRadixSortDownsweepPolicy::RADIX_BITS,
        TILE_ITEMS = BLOCK_THREADS * ITEMS_PER_THREAD,

        RADIX_DIGITS = 1 << RADIX_BITS,
        KEYS_ONLY = Equals<ValueT, NullType>::VALUE,
    };


    typedef CacheModifiedInputIterator<LOAD_MODIFIER, UnsignedBits, OffsetT> KeysItr;
    typedef CacheModifiedInputIterator<LOAD_MODIFIER, ValueT, OffsetT> ValuesItr;


    typedef typename If<(RANK_ALGORITHM == RADIX_RANK_BASIC),
            BlockRadixRank<BLOCK_THREADS, RADIX_BITS, IS_DESCENDING, false, SCAN_ALGORITHM>,
            typename If<(RANK_ALGORITHM == RADIX_RANK_MEMOIZE),
                BlockRadixRank<BLOCK_THREADS, RADIX_BITS, IS_DESCENDING, true, SCAN_ALGORITHM>,
                BlockRadixRankMatch<BLOCK_THREADS, RADIX_BITS, IS_DESCENDING, SCAN_ALGORITHM>
            >::Type
        >::Type BlockRadixRankT;

    enum
    {

        BINS_TRACKED_PER_THREAD = BlockRadixRankT::BINS_TRACKED_PER_THREAD
    };


    typedef BlockLoad<
        UnsignedBits,
        BLOCK_THREADS,
        ITEMS_PER_THREAD,
        LOAD_ALGORITHM> BlockLoadKeysT;


    typedef BlockLoad<
        ValueT,
        BLOCK_THREADS,
        ITEMS_PER_THREAD,
        LOAD_ALGORITHM> BlockLoadValuesT;


    typedef ValueT ValueExchangeT[TILE_ITEMS];




    union __attribute__((aligned(16))) _TempStorage
    {
        typename BlockLoadKeysT::TempStorage load_keys;
        typename BlockLoadValuesT::TempStorage load_values;
        typename BlockRadixRankT::TempStorage radix_rank;

        struct
        {
            UnsignedBits exchange_keys[TILE_ITEMS];
            OffsetT relative_bin_offsets[RADIX_DIGITS];
        };

        Uninitialized<ValueExchangeT> exchange_values;

        OffsetT exclusive_digit_prefix[RADIX_DIGITS];
    };



    struct TempStorage : Uninitialized<_TempStorage> {};







    _TempStorage &temp_storage;


    KeysItr d_keys_in;
    ValuesItr d_values_in;
    UnsignedBits *d_keys_out;
    ValueT *d_values_out;


    OffsetT bin_offset[BINS_TRACKED_PER_THREAD];


    int current_bit;


    int num_bits;


    int short_circuit;
# 235 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_downsweep.cuh" 3
    template <bool FULL_TILE>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterKeys(
        UnsignedBits (&twiddled_keys)[ITEMS_PER_THREAD],
        OffsetT (&relative_bin_offsets)[ITEMS_PER_THREAD],
        int (&ranks)[ITEMS_PER_THREAD],
        OffsetT valid_items)
    {
#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ++ITEM)
        {
            temp_storage.exchange_keys[ranks[ITEM]] = twiddled_keys[ITEM];
        }

        CTA_SYNC();

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ++ITEM)
        {
            UnsignedBits key = temp_storage.exchange_keys[threadIdx.x + (ITEM * BLOCK_THREADS)];
            UnsignedBits digit = BFE(key, current_bit, num_bits);
            relative_bin_offsets[ITEM] = temp_storage.relative_bin_offsets[digit];


            key = Traits<KeyT>::TwiddleOut(key);

            if (FULL_TILE ||
                (static_cast<OffsetT>(threadIdx.x + (ITEM * BLOCK_THREADS)) < valid_items))
            {
                d_keys_out[relative_bin_offsets[ITEM] + threadIdx.x + (ITEM * BLOCK_THREADS)] = key;
            }
        }
    }





    template <bool FULL_TILE>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ScatterValues(
        ValueT (&values)[ITEMS_PER_THREAD],
        OffsetT (&relative_bin_offsets)[ITEMS_PER_THREAD],
        int (&ranks)[ITEMS_PER_THREAD],
        OffsetT valid_items)
    {
        CTA_SYNC();

        ValueExchangeT &exchange_values = temp_storage.exchange_values.Alias();

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ++ITEM)
        {
            exchange_values[ranks[ITEM]] = values[ITEM];
        }

        CTA_SYNC();

#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ++ITEM)
        {
            ValueT value = exchange_values[threadIdx.x + (ITEM * BLOCK_THREADS)];

            if (FULL_TILE ||
                (static_cast<OffsetT>(threadIdx.x + (ITEM * BLOCK_THREADS)) < valid_items))
            {
                d_values_out[relative_bin_offsets[ITEM] + threadIdx.x + (ITEM * BLOCK_THREADS)] = value;
            }
        }
    }




    template <int _RANK_ALGORITHM>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void LoadKeys(
        UnsignedBits (&keys)[ITEMS_PER_THREAD],
        OffsetT block_offset,
        OffsetT valid_items,
        UnsignedBits oob_item,
        Int2Type<true> is_full_tile,
        Int2Type<_RANK_ALGORITHM> rank_algorithm)
    {
        BlockLoadKeysT(temp_storage.load_keys).Load(
            d_keys_in + block_offset, keys);

        CTA_SYNC();
    }





    template <int _RANK_ALGORITHM>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void LoadKeys(
        UnsignedBits (&keys)[ITEMS_PER_THREAD],
        OffsetT block_offset,
        OffsetT valid_items,
        UnsignedBits oob_item,
        Int2Type<false> is_full_tile,
        Int2Type<_RANK_ALGORITHM> rank_algorithm)
    {


        valid_items = ShuffleIndex<(1 << (5))>(valid_items, 0, 0xffffffff);

        BlockLoadKeysT(temp_storage.load_keys).Load(
            d_keys_in + block_offset, keys, valid_items, oob_item);

        CTA_SYNC();
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void LoadKeys(
        UnsignedBits (&keys)[ITEMS_PER_THREAD],
        OffsetT block_offset,
        OffsetT valid_items,
        UnsignedBits oob_item,
        Int2Type<true> is_full_tile,
        Int2Type<RADIX_RANK_MATCH> rank_algorithm)
    {
        LoadDirectWarpStriped(threadIdx.x, d_keys_in + block_offset, keys);
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void LoadKeys(
        UnsignedBits (&keys)[ITEMS_PER_THREAD],
        OffsetT block_offset,
        OffsetT valid_items,
        UnsignedBits oob_item,
        Int2Type<false> is_full_tile,
        Int2Type<RADIX_RANK_MATCH> rank_algorithm)
    {


        valid_items = ShuffleIndex<(1 << (5))>(valid_items, 0, 0xffffffff);

        LoadDirectWarpStriped(threadIdx.x, d_keys_in + block_offset, keys, valid_items, oob_item);
    }





    template <int _RANK_ALGORITHM>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void LoadValues(
        ValueT (&values)[ITEMS_PER_THREAD],
        OffsetT block_offset,
        OffsetT valid_items,
        Int2Type<true> is_full_tile,
        Int2Type<_RANK_ALGORITHM> rank_algorithm)
    {
        BlockLoadValuesT(temp_storage.load_values).Load(
            d_values_in + block_offset, values);

        CTA_SYNC();
    }





    template <int _RANK_ALGORITHM>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void LoadValues(
        ValueT (&values)[ITEMS_PER_THREAD],
        OffsetT block_offset,
        OffsetT valid_items,
        Int2Type<false> is_full_tile,
        Int2Type<_RANK_ALGORITHM> rank_algorithm)
    {


        valid_items = ShuffleIndex<(1 << (5))>(valid_items, 0, 0xffffffff);

        BlockLoadValuesT(temp_storage.load_values).Load(
            d_values_in + block_offset, values, valid_items);

        CTA_SYNC();
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void LoadValues(
        ValueT (&values)[ITEMS_PER_THREAD],
        OffsetT block_offset,
        OffsetT valid_items,
        Int2Type<true> is_full_tile,
        Int2Type<RADIX_RANK_MATCH> rank_algorithm)
    {
        LoadDirectWarpStriped(threadIdx.x, d_values_in + block_offset, values);
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void LoadValues(
        ValueT (&values)[ITEMS_PER_THREAD],
        OffsetT block_offset,
        OffsetT valid_items,
        Int2Type<false> is_full_tile,
        Int2Type<RADIX_RANK_MATCH> rank_algorithm)
    {


        valid_items = ShuffleIndex<(1 << (5))>(valid_items, 0, 0xffffffff);

        LoadDirectWarpStriped(threadIdx.x, d_values_in + block_offset, values, valid_items);
    }





    template <bool FULL_TILE>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void GatherScatterValues(
        OffsetT (&relative_bin_offsets)[ITEMS_PER_THREAD],
        int (&ranks)[ITEMS_PER_THREAD],
        OffsetT block_offset,
        OffsetT valid_items,
        Int2Type<false> )
    {
        ValueT values[ITEMS_PER_THREAD];

        CTA_SYNC();

        LoadValues(
            values,
            block_offset,
            valid_items,
            Int2Type<FULL_TILE>(),
            Int2Type<RANK_ALGORITHM>());

        ScatterValues<FULL_TILE>(
            values,
            relative_bin_offsets,
            ranks,
            valid_items);
    }





    template <bool FULL_TILE>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void GatherScatterValues(
        OffsetT (& )[ITEMS_PER_THREAD],
        int (& )[ITEMS_PER_THREAD],
        OffsetT ,
        OffsetT ,
        Int2Type<true> )
    {}





    template <bool FULL_TILE>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ProcessTile(
        OffsetT block_offset,
        const OffsetT &valid_items = TILE_ITEMS)
    {
        UnsignedBits keys[ITEMS_PER_THREAD];
        int ranks[ITEMS_PER_THREAD];
        OffsetT relative_bin_offsets[ITEMS_PER_THREAD];


        UnsignedBits default_key = (IS_DESCENDING) ? LOWEST_KEY : MAX_KEY;


        LoadKeys(
            keys,
            block_offset,
            valid_items,
            default_key,
            Int2Type<FULL_TILE>(),
            Int2Type<RANK_ALGORITHM>());


#pragma unroll
 for (int KEY = 0; KEY < ITEMS_PER_THREAD; KEY++)
        {
            keys[KEY] = Traits<KeyT>::TwiddleIn(keys[KEY]);
        }


        int exclusive_digit_prefix[BINS_TRACKED_PER_THREAD];
        BlockRadixRankT(temp_storage.radix_rank).RankKeys(
            keys,
            ranks,
            current_bit,
            num_bits,
            exclusive_digit_prefix);

        CTA_SYNC();


#pragma unroll
 for (int track = 0; track < BINS_TRACKED_PER_THREAD; ++track)
        {
            int bin_idx = (threadIdx.x * BINS_TRACKED_PER_THREAD) + track;
            if ((BLOCK_THREADS == RADIX_DIGITS) || (bin_idx < RADIX_DIGITS))
            {

                temp_storage.exclusive_digit_prefix[bin_idx] =
                    exclusive_digit_prefix[track];
            }
        }

        CTA_SYNC();


        int inclusive_digit_prefix[BINS_TRACKED_PER_THREAD];

#pragma unroll
 for (int track = 0; track < BINS_TRACKED_PER_THREAD; ++track)
        {
            int bin_idx = (threadIdx.x * BINS_TRACKED_PER_THREAD) + track;
            if ((BLOCK_THREADS == RADIX_DIGITS) || (bin_idx < RADIX_DIGITS))
            {
                if (IS_DESCENDING)
                {

                    inclusive_digit_prefix[track] = (bin_idx == 0) ?
                        (BLOCK_THREADS * ITEMS_PER_THREAD) :
                        temp_storage.exclusive_digit_prefix[bin_idx - 1];
                }
                else
                {

                    inclusive_digit_prefix[track] = (bin_idx == RADIX_DIGITS - 1) ?
                        (BLOCK_THREADS * ITEMS_PER_THREAD) :
                        temp_storage.exclusive_digit_prefix[bin_idx + 1];
                }
            }
        }

        CTA_SYNC();


#pragma unroll
 for (int track = 0; track < BINS_TRACKED_PER_THREAD; ++track)
        {
            int bin_idx = (threadIdx.x * BINS_TRACKED_PER_THREAD) + track;
            if ((BLOCK_THREADS == RADIX_DIGITS) || (bin_idx < RADIX_DIGITS))
            {
                bin_offset[track] -= exclusive_digit_prefix[track];
                temp_storage.relative_bin_offsets[bin_idx] = bin_offset[track];
                bin_offset[track] += inclusive_digit_prefix[track];
            }
        }

        CTA_SYNC();


        ScatterKeys<FULL_TILE>(keys, relative_bin_offsets, ranks, valid_items);


        GatherScatterValues<FULL_TILE>(relative_bin_offsets , ranks, block_offset, valid_items, Int2Type<KEYS_ONLY>());
    }
# 609 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_downsweep.cuh" 3
    template <
        typename InputIteratorT,
        typename T>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Copy(
        InputIteratorT d_in,
        T *d_out,
        OffsetT block_offset,
        OffsetT block_end)
    {

        while (block_offset + TILE_ITEMS <= block_end)
        {
            T items[ITEMS_PER_THREAD];

            LoadDirectStriped<BLOCK_THREADS>(threadIdx.x, d_in + block_offset, items);
            CTA_SYNC();
            StoreDirectStriped<BLOCK_THREADS>(threadIdx.x, d_out + block_offset, items);

            block_offset += TILE_ITEMS;
        }


        if (block_offset < block_end)
        {
            OffsetT valid_items = block_end - block_offset;

            T items[ITEMS_PER_THREAD];

            LoadDirectStriped<BLOCK_THREADS>(threadIdx.x, d_in + block_offset, items, valid_items);
            CTA_SYNC();
            StoreDirectStriped<BLOCK_THREADS>(threadIdx.x, d_out + block_offset, items, valid_items);
        }
    }





    template <typename InputIteratorT>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Copy(
        InputIteratorT ,
        NullType * ,
        OffsetT ,
        OffsetT )
    {}
# 663 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/agent_radix_sort_downsweep.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) AgentRadixSortDownsweep(
        TempStorage &temp_storage,
        OffsetT (&bin_offset)[BINS_TRACKED_PER_THREAD],
        OffsetT num_items,
        const KeyT *d_keys_in,
        KeyT *d_keys_out,
        const ValueT *d_values_in,
        ValueT *d_values_out,
        int current_bit,
        int num_bits)
    :
        temp_storage(temp_storage.Alias()),
        d_keys_in(reinterpret_cast<const UnsignedBits*>(d_keys_in)),
        d_values_in(d_values_in),
        d_keys_out(reinterpret_cast<UnsignedBits*>(d_keys_out)),
        d_values_out(d_values_out),
        current_bit(current_bit),
        num_bits(num_bits),
        short_circuit(1)
    {
#pragma unroll
 for (int track = 0; track < BINS_TRACKED_PER_THREAD; ++track)
        {
            this->bin_offset[track] = bin_offset[track];

            int bin_idx = (threadIdx.x * BINS_TRACKED_PER_THREAD) + track;
            if ((BLOCK_THREADS == RADIX_DIGITS) || (bin_idx < RADIX_DIGITS))
            {

                short_circuit = short_circuit && ((bin_offset[track] == 0) || (bin_offset[track] == num_items));
            }
        }

        short_circuit = CTA_SYNC_AND(short_circuit);
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) AgentRadixSortDownsweep(
        TempStorage &temp_storage,
        OffsetT num_items,
        OffsetT *d_spine,
        const KeyT *d_keys_in,
        KeyT *d_keys_out,
        const ValueT *d_values_in,
        ValueT *d_values_out,
        int current_bit,
        int num_bits)
    :
        temp_storage(temp_storage.Alias()),
        d_keys_in(reinterpret_cast<const UnsignedBits*>(d_keys_in)),
        d_values_in(d_values_in),
        d_keys_out(reinterpret_cast<UnsignedBits*>(d_keys_out)),
        d_values_out(d_values_out),
        current_bit(current_bit),
        num_bits(num_bits),
        short_circuit(1)
    {
#pragma unroll
 for (int track = 0; track < BINS_TRACKED_PER_THREAD; ++track)
        {
            int bin_idx = (threadIdx.x * BINS_TRACKED_PER_THREAD) + track;


            if ((BLOCK_THREADS == RADIX_DIGITS) || (bin_idx < RADIX_DIGITS))
            {
                if (IS_DESCENDING)
                    bin_idx = RADIX_DIGITS - bin_idx - 1;


                OffsetT first_block_bin_offset = d_spine[gridDim.x * bin_idx];
                short_circuit = short_circuit && ((first_block_bin_offset == 0) || (first_block_bin_offset == num_items));


                bin_offset[track] = d_spine[(gridDim.x * bin_idx) + blockIdx.x];
            }
        }

        short_circuit = CTA_SYNC_AND(short_circuit);
    }





    __attribute__((device)) __inline__ __attribute__((always_inline)) void ProcessRegion(
        OffsetT block_offset,
        OffsetT block_end)
    {
        if (short_circuit)
        {

            Copy(d_keys_in, d_keys_out, block_offset, block_end);


            Copy(d_values_in, d_values_out, block_offset, block_end);
        }
        else
        {

#pragma unroll 1
 while (block_offset + TILE_ITEMS <= block_end)
            {
                ProcessTile<true>(block_offset);
                block_offset += TILE_ITEMS;

                CTA_SYNC();
            }


            if (block_offset < block_end)
            {
                ProcessTile<false>(block_offset, block_end - block_offset);
            }

        }
    }

};



}
# 42 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 2 3

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../block/block_radix_sort.cuh" 1 3
# 48 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../block/block_radix_sort.cuh" 3
namespace cub {
# 120 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../block/block_radix_sort.cuh" 3
template <
    typename KeyT,
    int BLOCK_DIM_X,
    int ITEMS_PER_THREAD,
    typename ValueT = NullType,
    int RADIX_BITS = 4,
    bool MEMOIZE_OUTER_SCAN = (700 >= 350) ? true : false,
    BlockScanAlgorithm INNER_SCAN_ALGORITHM = BLOCK_SCAN_WARP_SCANS,
    cudaSharedMemConfig SMEM_CONFIG = cudaSharedMemBankSizeFourByte,
    int BLOCK_DIM_Y = 1,
    int BLOCK_DIM_Z = 1,
    int PTX_ARCH = 700>
class BlockRadixSort
{
private:





    enum
    {

        BLOCK_THREADS = BLOCK_DIM_X * BLOCK_DIM_Y * BLOCK_DIM_Z,


        KEYS_ONLY = Equals<ValueT, NullType>::VALUE,
    };


    typedef Traits<KeyT> KeyTraits;
    typedef typename KeyTraits::UnsignedBits UnsignedBits;


    typedef BlockRadixRank<
            BLOCK_DIM_X,
            RADIX_BITS,
            false,
            MEMOIZE_OUTER_SCAN,
            INNER_SCAN_ALGORITHM,
            SMEM_CONFIG,
            BLOCK_DIM_Y,
            BLOCK_DIM_Z,
            PTX_ARCH>
        AscendingBlockRadixRank;


    typedef BlockRadixRank<
            BLOCK_DIM_X,
            RADIX_BITS,
            true,
            MEMOIZE_OUTER_SCAN,
            INNER_SCAN_ALGORITHM,
            SMEM_CONFIG,
            BLOCK_DIM_Y,
            BLOCK_DIM_Z,
            PTX_ARCH>
        DescendingBlockRadixRank;


    typedef BlockExchange<KeyT, BLOCK_DIM_X, ITEMS_PER_THREAD, false, BLOCK_DIM_Y, BLOCK_DIM_Z, PTX_ARCH> BlockExchangeKeys;


    typedef BlockExchange<ValueT, BLOCK_DIM_X, ITEMS_PER_THREAD, false, BLOCK_DIM_Y, BLOCK_DIM_Z, PTX_ARCH> BlockExchangeValues;


    union _TempStorage
    {
        typename AscendingBlockRadixRank::TempStorage asending_ranking_storage;
        typename DescendingBlockRadixRank::TempStorage descending_ranking_storage;
        typename BlockExchangeKeys::TempStorage exchange_keys;
        typename BlockExchangeValues::TempStorage exchange_values;
    };







    _TempStorage &temp_storage;


    unsigned int linear_tid;






    __attribute__((device)) __inline__ __attribute__((always_inline)) _TempStorage& PrivateStorage()
    {
        __attribute__((shared)) _TempStorage private_storage;
        return private_storage;
    }


    __attribute__((device)) __inline__ __attribute__((always_inline)) void RankKeys(
        UnsignedBits (&unsigned_keys)[ITEMS_PER_THREAD],
        int (&ranks)[ITEMS_PER_THREAD],
        int begin_bit,
        int pass_bits,
        Int2Type<false> )
    {
        AscendingBlockRadixRank(temp_storage.asending_ranking_storage).RankKeys(
            unsigned_keys,
            ranks,
            begin_bit,
            pass_bits);
    }


    __attribute__((device)) __inline__ __attribute__((always_inline)) void RankKeys(
        UnsignedBits (&unsigned_keys)[ITEMS_PER_THREAD],
        int (&ranks)[ITEMS_PER_THREAD],
        int begin_bit,
        int pass_bits,
        Int2Type<true> )
    {
        DescendingBlockRadixRank(temp_storage.descending_ranking_storage).RankKeys(
            unsigned_keys,
            ranks,
            begin_bit,
            pass_bits);
    }


    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExchangeValues(
        ValueT (&values)[ITEMS_PER_THREAD],
        int (&ranks)[ITEMS_PER_THREAD],
        Int2Type<false> ,
        Int2Type<true> )
    {
        CTA_SYNC();


        BlockExchangeValues(temp_storage.exchange_values).ScatterToBlocked(values, ranks);
    }


    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExchangeValues(
        ValueT (&values)[ITEMS_PER_THREAD],
        int (&ranks)[ITEMS_PER_THREAD],
        Int2Type<false> ,
        Int2Type<false> )
    {
        CTA_SYNC();


        BlockExchangeValues(temp_storage.exchange_values).ScatterToStriped(values, ranks);
    }


    template <int IS_BLOCKED>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void ExchangeValues(
        ValueT (& )[ITEMS_PER_THREAD],
        int (& )[ITEMS_PER_THREAD],
        Int2Type<true> ,
        Int2Type<IS_BLOCKED> )
    {}


    template <int DESCENDING, int KEYS_ONLY>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void SortBlocked(
        KeyT (&keys)[ITEMS_PER_THREAD],
        ValueT (&values)[ITEMS_PER_THREAD],
        int begin_bit,
        int end_bit,
        Int2Type<DESCENDING> is_descending,
        Int2Type<KEYS_ONLY> is_keys_only)
    {
        UnsignedBits (&unsigned_keys)[ITEMS_PER_THREAD] =
            reinterpret_cast<UnsignedBits (&)[ITEMS_PER_THREAD]>(keys);


#pragma unroll
 for (int KEY = 0; KEY < ITEMS_PER_THREAD; KEY++)
        {
            unsigned_keys[KEY] = KeyTraits::TwiddleIn(unsigned_keys[KEY]);
        }


        while (true)
        {
            int pass_bits = (((end_bit - begin_bit) < (RADIX_BITS)) ? (end_bit - begin_bit) : (RADIX_BITS));


            int ranks[ITEMS_PER_THREAD];
            RankKeys(unsigned_keys, ranks, begin_bit, pass_bits, is_descending);
            begin_bit += RADIX_BITS;

            CTA_SYNC();


            BlockExchangeKeys(temp_storage.exchange_keys).ScatterToBlocked(keys, ranks);


            ExchangeValues(values, ranks, is_keys_only, Int2Type<true>());


            if (begin_bit >= end_bit) break;

            CTA_SYNC();
        }


#pragma unroll
 for (int KEY = 0; KEY < ITEMS_PER_THREAD; KEY++)
        {
            unsigned_keys[KEY] = KeyTraits::TwiddleOut(unsigned_keys[KEY]);
        }
    }

public:




    template <int DESCENDING, int KEYS_ONLY>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void SortBlockedToStriped(
        KeyT (&keys)[ITEMS_PER_THREAD],
        ValueT (&values)[ITEMS_PER_THREAD],
        int begin_bit,
        int end_bit,
        Int2Type<DESCENDING> is_descending,
        Int2Type<KEYS_ONLY> is_keys_only)
    {
        UnsignedBits (&unsigned_keys)[ITEMS_PER_THREAD] =
            reinterpret_cast<UnsignedBits (&)[ITEMS_PER_THREAD]>(keys);


#pragma unroll
 for (int KEY = 0; KEY < ITEMS_PER_THREAD; KEY++)
        {
            unsigned_keys[KEY] = KeyTraits::TwiddleIn(unsigned_keys[KEY]);
        }


        while (true)
        {
            int pass_bits = (((end_bit - begin_bit) < (RADIX_BITS)) ? (end_bit - begin_bit) : (RADIX_BITS));


            int ranks[ITEMS_PER_THREAD];
            RankKeys(unsigned_keys, ranks, begin_bit, pass_bits, is_descending);
            begin_bit += RADIX_BITS;

            CTA_SYNC();


            if (begin_bit >= end_bit)
            {

                BlockExchangeKeys(temp_storage.exchange_keys).ScatterToStriped(keys, ranks);


                ExchangeValues(values, ranks, is_keys_only, Int2Type<false>());


                break;
            }


            BlockExchangeKeys(temp_storage.exchange_keys).ScatterToBlocked(keys, ranks);


            ExchangeValues(values, ranks, is_keys_only, Int2Type<true>());

            CTA_SYNC();
        }


#pragma unroll
 for (int KEY = 0; KEY < ITEMS_PER_THREAD; KEY++)
        {
            unsigned_keys[KEY] = KeyTraits::TwiddleOut(unsigned_keys[KEY]);
        }
    }




    struct TempStorage : Uninitialized<_TempStorage> {};
# 413 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../block/block_radix_sort.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockRadixSort()
    :
        temp_storage(PrivateStorage()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
    {}





    __attribute__((device)) __inline__ __attribute__((always_inline)) BlockRadixSort(
        TempStorage &temp_storage)
    :
        temp_storage(temp_storage.Alias()),
        linear_tid(RowMajorTid(BLOCK_DIM_X, BLOCK_DIM_Y, BLOCK_DIM_Z))
    {}
# 474 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../block/block_radix_sort.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Sort(
        KeyT (&keys)[ITEMS_PER_THREAD],
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8)
    {
        NullType values[ITEMS_PER_THREAD];

        SortBlocked(keys, values, begin_bit, end_bit, Int2Type<false>(), Int2Type<KEYS_ONLY>());
    }
# 529 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../block/block_radix_sort.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void Sort(
        KeyT (&keys)[ITEMS_PER_THREAD],
        ValueT (&values)[ITEMS_PER_THREAD],
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8)
    {
        SortBlocked(keys, values, begin_bit, end_bit, Int2Type<false>(), Int2Type<KEYS_ONLY>());
    }
# 575 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../block/block_radix_sort.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void SortDescending(
        KeyT (&keys)[ITEMS_PER_THREAD],
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8)
    {
        NullType values[ITEMS_PER_THREAD];

        SortBlocked(keys, values, begin_bit, end_bit, Int2Type<true>(), Int2Type<KEYS_ONLY>());
    }
# 630 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../block/block_radix_sort.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void SortDescending(
        KeyT (&keys)[ITEMS_PER_THREAD],
        ValueT (&values)[ITEMS_PER_THREAD],
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8)
    {
        SortBlocked(keys, values, begin_bit, end_bit, Int2Type<true>(), Int2Type<KEYS_ONLY>());
    }
# 685 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../block/block_radix_sort.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void SortBlockedToStriped(
        KeyT (&keys)[ITEMS_PER_THREAD],
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8)
    {
        NullType values[ITEMS_PER_THREAD];

        SortBlockedToStriped(keys, values, begin_bit, end_bit, Int2Type<false>(), Int2Type<KEYS_ONLY>());
    }
# 740 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../block/block_radix_sort.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void SortBlockedToStriped(
        KeyT (&keys)[ITEMS_PER_THREAD],
        ValueT (&values)[ITEMS_PER_THREAD],
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8)
    {
        SortBlockedToStriped(keys, values, begin_bit, end_bit, Int2Type<false>(), Int2Type<KEYS_ONLY>());
    }
# 788 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../block/block_radix_sort.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void SortDescendingBlockedToStriped(
        KeyT (&keys)[ITEMS_PER_THREAD],
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8)
    {
        NullType values[ITEMS_PER_THREAD];

        SortBlockedToStriped(keys, values, begin_bit, end_bit, Int2Type<true>(), Int2Type<KEYS_ONLY>());
    }
# 843 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../block/block_radix_sort.cuh" 3
    __attribute__((device)) __inline__ __attribute__((always_inline)) void SortDescendingBlockedToStriped(
        KeyT (&keys)[ITEMS_PER_THREAD],
        ValueT (&values)[ITEMS_PER_THREAD],
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8)
    {
        SortBlockedToStriped(keys, values, begin_bit, end_bit, Int2Type<true>(), Int2Type<KEYS_ONLY>());
    }




};





}
# 44 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 2 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../grid/grid_even_share.cuh" 1 3
# 39 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../grid/grid_even_share.cuh" 3
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../grid/grid_mapping.cuh" 1 3
# 42 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../grid/grid_mapping.cuh" 3
namespace cub {
# 59 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../grid/grid_mapping.cuh" 3
enum GridMappingStrategy
{
# 75 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../grid/grid_mapping.cuh" 3
    GRID_MAPPING_RAKE,
# 92 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../grid/grid_mapping.cuh" 3
    GRID_MAPPING_STRIP_MINE,
# 105 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../agent/../grid/grid_mapping.cuh" 3
    GRID_MAPPING_DYNAMIC,
};




}
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../grid/grid_even_share.cuh" 2 3





namespace cub {
# 73 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/../../grid/grid_even_share.cuh" 3
template <typename OffsetT>
struct GridEvenShare
{
private:

    OffsetT total_tiles;
    int big_shares;
    OffsetT big_share_items;
    OffsetT normal_share_items;
    OffsetT normal_base_offset;

public:


    OffsetT num_items;


    int grid_size;


    OffsetT block_offset;


    OffsetT block_end;


    OffsetT block_stride;





    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) GridEvenShare() :
        total_tiles(0),
        big_shares(0),
        big_share_items(0),
        normal_share_items(0),
        normal_base_offset(0),
        num_items(0),
        grid_size(0),
        block_offset(0),
        block_end(0),
        block_stride(0)
    {}





    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline)) void DispatchInit(
        OffsetT num_items,
        int max_grid_size,
        int tile_items)
    {
        this->block_offset = num_items;
        this->block_end = num_items;
        this->num_items = num_items;
        this->total_tiles = (num_items + tile_items - 1) / tile_items;
        this->grid_size = (((max_grid_size) < (total_tiles)) ? (max_grid_size) : (total_tiles));
        OffsetT avg_tiles_per_block = total_tiles / grid_size;
        this->big_shares = total_tiles - (avg_tiles_per_block * grid_size);
        this->normal_share_items = avg_tiles_per_block * tile_items;
        this->normal_base_offset = big_shares * tile_items;
        this->big_share_items = normal_share_items + tile_items;
    }







    template <int TILE_ITEMS>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void BlockInit(
        int block_id,
        Int2Type<GRID_MAPPING_RAKE> )
    {
        block_stride = TILE_ITEMS;
        if (block_id < big_shares)
        {

            block_offset = (block_id * big_share_items);
            block_end = block_offset + big_share_items;
        }
        else if (block_id < total_tiles)
        {

            block_offset = normal_base_offset + (block_id * normal_share_items);
            block_end = (((block_offset + normal_share_items) < (num_items)) ? (block_offset + normal_share_items) : (num_items));
        }

    }







    template <int TILE_ITEMS>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void BlockInit(
        int block_id,
        Int2Type<GRID_MAPPING_STRIP_MINE> )
    {
        block_stride = grid_size * TILE_ITEMS;
        block_offset = (block_id * TILE_ITEMS);
        block_end = num_items;
    }







    template <
        int TILE_ITEMS,
        GridMappingStrategy STRATEGY>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void BlockInit()
    {
        BlockInit<TILE_ITEMS>(blockIdx.x, Int2Type<STRATEGY>());
    }







    template <int TILE_ITEMS>
    __attribute__((device)) __inline__ __attribute__((always_inline)) void BlockInit(
        OffsetT block_offset,
        OffsetT block_end)
    {
        this->block_offset = block_offset;
        this->block_end = block_end;
        this->block_stride = TILE_ITEMS;
    }


};







}
# 45 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 2 3
# 54 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 3
namespace cub {
# 63 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 3
template <
    typename ChainedPolicyT,
    bool ALT_DIGIT_BITS,
    bool IS_DESCENDING,
    typename KeyT,
    typename OffsetT>
__attribute__((launch_bounds(int((ALT_DIGIT_BITS) ? ChainedPolicyT::ActivePolicy::AltUpsweepPolicy::BLOCK_THREADS : ChainedPolicyT::ActivePolicy::UpsweepPolicy::BLOCK_THREADS))))


__attribute__((global)) void DeviceRadixSortUpsweepKernel(
    const KeyT *d_keys,
    OffsetT *d_spine,
    OffsetT ,
    int current_bit,
    int num_bits,
    GridEvenShare<OffsetT> even_share)
{
    enum {
        TILE_ITEMS = ChainedPolicyT::ActivePolicy::AltUpsweepPolicy::BLOCK_THREADS *
                        ChainedPolicyT::ActivePolicy::AltUpsweepPolicy::ITEMS_PER_THREAD
    };


    typedef AgentRadixSortUpsweep<
            typename If<(ALT_DIGIT_BITS),
                typename ChainedPolicyT::ActivePolicy::AltUpsweepPolicy,
                typename ChainedPolicyT::ActivePolicy::UpsweepPolicy>::Type,
            KeyT,
            OffsetT>
        AgentRadixSortUpsweepT;


    __attribute__((shared)) typename AgentRadixSortUpsweepT::TempStorage temp_storage;


    even_share.template BlockInit<TILE_ITEMS, GRID_MAPPING_RAKE>();

    AgentRadixSortUpsweepT upsweep(temp_storage, d_keys, current_bit, num_bits);

    upsweep.ProcessRegion(even_share.block_offset, even_share.block_end);

    CTA_SYNC();


    upsweep.template ExtractCounts<IS_DESCENDING>(d_spine, gridDim.x, blockIdx.x);
}





template <
    typename ChainedPolicyT,
    typename OffsetT>
__attribute__((launch_bounds(int(ChainedPolicyT::ActivePolicy::ScanPolicy::BLOCK_THREADS), 1)))
__attribute__((global)) void RadixSortScanBinsKernel(
    OffsetT *d_spine,
    int num_counts)
{

    typedef AgentScan<
            typename ChainedPolicyT::ActivePolicy::ScanPolicy,
            OffsetT*,
            OffsetT*,
            cub::Sum,
            OffsetT,
            OffsetT>
        AgentScanT;


    __attribute__((shared)) typename AgentScanT::TempStorage temp_storage;


    AgentScanT block_scan(temp_storage, d_spine, d_spine, cub::Sum(), OffsetT(0)) ;


    int block_offset = 0;
    BlockScanRunningPrefixOp<OffsetT, Sum> prefix_op(0, Sum());
    while (block_offset + AgentScanT::TILE_ITEMS <= num_counts)
    {
        block_scan.template ConsumeTile<false, false>(block_offset, prefix_op);
        block_offset += AgentScanT::TILE_ITEMS;
    }
}





template <
    typename ChainedPolicyT,
    bool ALT_DIGIT_BITS,
    bool IS_DESCENDING,
    typename KeyT,
    typename ValueT,
    typename OffsetT>
__attribute__((launch_bounds(int((ALT_DIGIT_BITS) ? ChainedPolicyT::ActivePolicy::AltDownsweepPolicy::BLOCK_THREADS : ChainedPolicyT::ActivePolicy::DownsweepPolicy::BLOCK_THREADS))))


__attribute__((global)) void DeviceRadixSortDownsweepKernel(
    const KeyT *d_keys_in,
    KeyT *d_keys_out,
    const ValueT *d_values_in,
    ValueT *d_values_out,
    OffsetT *d_spine,
    OffsetT num_items,
    int current_bit,
    int num_bits,
    GridEvenShare<OffsetT> even_share)
{
    enum {
        TILE_ITEMS = ChainedPolicyT::ActivePolicy::AltUpsweepPolicy::BLOCK_THREADS *
                        ChainedPolicyT::ActivePolicy::AltUpsweepPolicy::ITEMS_PER_THREAD
    };


    typedef AgentRadixSortDownsweep<
            typename If<(ALT_DIGIT_BITS),
                typename ChainedPolicyT::ActivePolicy::AltDownsweepPolicy,
                typename ChainedPolicyT::ActivePolicy::DownsweepPolicy>::Type,
            IS_DESCENDING,
            KeyT,
            ValueT,
            OffsetT>
        AgentRadixSortDownsweepT;


    __attribute__((shared)) typename AgentRadixSortDownsweepT::TempStorage temp_storage;


    even_share.template BlockInit<TILE_ITEMS, GRID_MAPPING_RAKE>();


    AgentRadixSortDownsweepT(temp_storage, num_items, d_spine, d_keys_in, d_keys_out, d_values_in, d_values_out, current_bit, num_bits).ProcessRegion(
        even_share.block_offset,
        even_share.block_end);
}





template <
    typename ChainedPolicyT,
    bool IS_DESCENDING,
    typename KeyT,
    typename ValueT,
    typename OffsetT>
__attribute__((launch_bounds(int(ChainedPolicyT::ActivePolicy::SingleTilePolicy::BLOCK_THREADS), 1)))
__attribute__((global)) void DeviceRadixSortSingleTileKernel(
    const KeyT *d_keys_in,
    KeyT *d_keys_out,
    const ValueT *d_values_in,
    ValueT *d_values_out,
    OffsetT num_items,
    int current_bit,
    int end_bit)
{

    enum
    {
        BLOCK_THREADS = ChainedPolicyT::ActivePolicy::SingleTilePolicy::BLOCK_THREADS,
        ITEMS_PER_THREAD = ChainedPolicyT::ActivePolicy::SingleTilePolicy::ITEMS_PER_THREAD,
        KEYS_ONLY = Equals<ValueT, NullType>::VALUE,
    };


    typedef BlockRadixSort<
            KeyT,
            BLOCK_THREADS,
            ITEMS_PER_THREAD,
            ValueT,
            ChainedPolicyT::ActivePolicy::SingleTilePolicy::RADIX_BITS,
            (ChainedPolicyT::ActivePolicy::SingleTilePolicy::RANK_ALGORITHM == RADIX_RANK_MEMOIZE),
            ChainedPolicyT::ActivePolicy::SingleTilePolicy::SCAN_ALGORITHM>
        BlockRadixSortT;


    typedef BlockLoad<
        KeyT,
        BLOCK_THREADS,
        ITEMS_PER_THREAD,
        ChainedPolicyT::ActivePolicy::SingleTilePolicy::LOAD_ALGORITHM> BlockLoadKeys;


    typedef BlockLoad<
        ValueT,
        BLOCK_THREADS,
        ITEMS_PER_THREAD,
        ChainedPolicyT::ActivePolicy::SingleTilePolicy::LOAD_ALGORITHM> BlockLoadValues;


    typedef typename Traits<KeyT>::UnsignedBits UnsignedBitsT;


    __attribute__((shared)) union TempStorage
    {
        typename BlockRadixSortT::TempStorage sort;
        typename BlockLoadKeys::TempStorage load_keys;
        typename BlockLoadValues::TempStorage load_values;

    } temp_storage;


    KeyT keys[ITEMS_PER_THREAD];
    ValueT values[ITEMS_PER_THREAD];


    UnsignedBitsT default_key_bits = (IS_DESCENDING) ? Traits<KeyT>::LOWEST_KEY : Traits<KeyT>::MAX_KEY;
    KeyT default_key = reinterpret_cast<KeyT&>(default_key_bits);


    BlockLoadKeys(temp_storage.load_keys).Load(d_keys_in, keys, num_items, default_key);

    CTA_SYNC();


    if (!KEYS_ONLY)
    {


        num_items = ShuffleIndex<(1 << (5))>(num_items, 0, 0xffffffff);

        BlockLoadValues(temp_storage.load_values).Load(d_values_in, values, num_items);

        CTA_SYNC();
    }


    BlockRadixSortT(temp_storage.sort).SortBlockedToStriped(
        keys,
        values,
        current_bit,
        end_bit,
        Int2Type<IS_DESCENDING>(),
        Int2Type<KEYS_ONLY>());


#pragma unroll
 for (int ITEM = 0; ITEM < ITEMS_PER_THREAD; ++ITEM)
    {
        int item_offset = ITEM * BLOCK_THREADS + threadIdx.x;
        if (item_offset < num_items)
        {
            d_keys_out[item_offset] = keys[ITEM];
            if (!KEYS_ONLY)
                d_values_out[item_offset] = values[ITEM];
        }
    }
}





template <
    typename ChainedPolicyT,
    bool ALT_DIGIT_BITS,
    bool IS_DESCENDING,
    typename KeyT,
    typename ValueT,
    typename OffsetIteratorT,
    typename OffsetT>
__attribute__((launch_bounds(int((ALT_DIGIT_BITS) ? ChainedPolicyT::ActivePolicy::AltSegmentedPolicy::BLOCK_THREADS : ChainedPolicyT::ActivePolicy::SegmentedPolicy::BLOCK_THREADS))))


__attribute__((global)) void DeviceSegmentedRadixSortKernel(
    const KeyT *d_keys_in,
    KeyT *d_keys_out,
    const ValueT *d_values_in,
    ValueT *d_values_out,
    OffsetIteratorT d_begin_offsets,
    OffsetIteratorT d_end_offsets,
    int ,
    int current_bit,
    int pass_bits)
{




    typedef typename If<(ALT_DIGIT_BITS),
        typename ChainedPolicyT::ActivePolicy::AltSegmentedPolicy,
        typename ChainedPolicyT::ActivePolicy::SegmentedPolicy>::Type SegmentedPolicyT;

    enum
    {
        BLOCK_THREADS = SegmentedPolicyT::BLOCK_THREADS,
        ITEMS_PER_THREAD = SegmentedPolicyT::ITEMS_PER_THREAD,
        RADIX_BITS = SegmentedPolicyT::RADIX_BITS,
        TILE_ITEMS = BLOCK_THREADS * ITEMS_PER_THREAD,
        RADIX_DIGITS = 1 << RADIX_BITS,
        KEYS_ONLY = Equals<ValueT, NullType>::VALUE,
    };


    typedef AgentRadixSortUpsweep<
            AgentRadixSortUpsweepPolicy<BLOCK_THREADS, ITEMS_PER_THREAD, SegmentedPolicyT::LOAD_MODIFIER, RADIX_BITS>,
            KeyT,
            OffsetT>
        BlockUpsweepT;


    typedef BlockScan<OffsetT, BLOCK_THREADS> DigitScanT;


    typedef AgentRadixSortDownsweep<SegmentedPolicyT, IS_DESCENDING, KeyT, ValueT, OffsetT> BlockDownsweepT;

    enum
    {

        BINS_TRACKED_PER_THREAD = BlockDownsweepT::BINS_TRACKED_PER_THREAD
    };






    __attribute__((shared)) union
    {
        typename BlockUpsweepT::TempStorage upsweep;
        typename BlockDownsweepT::TempStorage downsweep;
        struct
        {
            volatile OffsetT reverse_counts_in[RADIX_DIGITS];
            volatile OffsetT reverse_counts_out[RADIX_DIGITS];
            typename DigitScanT::TempStorage scan;
        };

    } temp_storage;

    OffsetT segment_begin = d_begin_offsets[blockIdx.x];
    OffsetT segment_end = d_end_offsets[blockIdx.x];
    OffsetT num_items = segment_end - segment_begin;


    if (num_items <= 0)
        return;


    BlockUpsweepT upsweep(temp_storage.upsweep, d_keys_in, current_bit, pass_bits);
    upsweep.ProcessRegion(segment_begin, segment_end);

    CTA_SYNC();


    OffsetT bin_count[BINS_TRACKED_PER_THREAD];
    upsweep.ExtractCounts(bin_count);

    CTA_SYNC();

    if (IS_DESCENDING)
    {

#pragma unroll
 for (int track = 0; track < BINS_TRACKED_PER_THREAD; ++track)
        {
            int bin_idx = (threadIdx.x * BINS_TRACKED_PER_THREAD) + track;

            if ((BLOCK_THREADS == RADIX_DIGITS) || (bin_idx < RADIX_DIGITS))
                temp_storage.reverse_counts_in[bin_idx] = bin_count[track];
        }

        CTA_SYNC();

#pragma unroll
 for (int track = 0; track < BINS_TRACKED_PER_THREAD; ++track)
        {
            int bin_idx = (threadIdx.x * BINS_TRACKED_PER_THREAD) + track;

            if ((BLOCK_THREADS == RADIX_DIGITS) || (bin_idx < RADIX_DIGITS))
                bin_count[track] = temp_storage.reverse_counts_in[RADIX_DIGITS - bin_idx - 1];
        }
    }


    OffsetT bin_offset[BINS_TRACKED_PER_THREAD];
    DigitScanT(temp_storage.scan).ExclusiveSum(bin_count, bin_offset);

#pragma unroll
 for (int track = 0; track < BINS_TRACKED_PER_THREAD; ++track)
    {
        bin_offset[track] += segment_begin;
    }

    if (IS_DESCENDING)
    {

#pragma unroll
 for (int track = 0; track < BINS_TRACKED_PER_THREAD; ++track)
        {
            int bin_idx = (threadIdx.x * BINS_TRACKED_PER_THREAD) + track;

            if ((BLOCK_THREADS == RADIX_DIGITS) || (bin_idx < RADIX_DIGITS))
                temp_storage.reverse_counts_out[threadIdx.x] = bin_offset[track];
        }

        CTA_SYNC();

#pragma unroll
 for (int track = 0; track < BINS_TRACKED_PER_THREAD; ++track)
        {
            int bin_idx = (threadIdx.x * BINS_TRACKED_PER_THREAD) + track;

            if ((BLOCK_THREADS == RADIX_DIGITS) || (bin_idx < RADIX_DIGITS))
                bin_offset[track] = temp_storage.reverse_counts_out[RADIX_DIGITS - bin_idx - 1];
        }
    }

    CTA_SYNC();


    BlockDownsweepT downsweep(temp_storage.downsweep, bin_offset, num_items, d_keys_in, d_keys_out, d_values_in, d_values_out, current_bit, pass_bits);
    downsweep.ProcessRegion(segment_begin, segment_end);
}
# 489 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 3
template <
    typename KeyT,
    typename ValueT,
    typename OffsetT>
struct DeviceRadixSortPolicy
{




    enum
    {

        KEYS_ONLY = (Equals<ValueT, NullType>::VALUE),
    };


    typedef typename If<(sizeof(ValueT) > 4) && (sizeof(KeyT) < sizeof(ValueT)), ValueT, KeyT>::Type DominantT;






    struct Policy200 : ChainedPolicy<200, Policy200, Policy200>
    {
        enum {
            PRIMARY_RADIX_BITS = 5,
            ALT_RADIX_BITS = PRIMARY_RADIX_BITS - 1,


            SCALE_FACTOR_4B = ((((sizeof(ValueT)) > (sizeof(KeyT))) ? (sizeof(ValueT)) : (sizeof(KeyT))) + 3) / 4,
        };


        typedef AgentRadixSortUpsweepPolicy <64, (((18 / SCALE_FACTOR_4B) > (1)) ? (18 / SCALE_FACTOR_4B) : (1)), LOAD_DEFAULT, PRIMARY_RADIX_BITS> UpsweepPolicyKeys;
        typedef AgentRadixSortUpsweepPolicy <64, (((18 / SCALE_FACTOR_4B) > (1)) ? (18 / SCALE_FACTOR_4B) : (1)), LOAD_DEFAULT, ALT_RADIX_BITS> AltUpsweepPolicyKeys;


        typedef AgentRadixSortUpsweepPolicy <128, (((13 / SCALE_FACTOR_4B) > (1)) ? (13 / SCALE_FACTOR_4B) : (1)), LOAD_DEFAULT, PRIMARY_RADIX_BITS> UpsweepPolicyPairs;
        typedef AgentRadixSortUpsweepPolicy <128, (((13 / SCALE_FACTOR_4B) > (1)) ? (13 / SCALE_FACTOR_4B) : (1)), LOAD_DEFAULT, ALT_RADIX_BITS> AltUpsweepPolicyPairs;


        typedef typename If<KEYS_ONLY, UpsweepPolicyKeys, UpsweepPolicyPairs>::Type UpsweepPolicy;
        typedef typename If<KEYS_ONLY, AltUpsweepPolicyKeys, AltUpsweepPolicyPairs>::Type AltUpsweepPolicy;


        typedef AgentScanPolicy <512, 4, BLOCK_LOAD_VECTORIZE, LOAD_DEFAULT, BLOCK_STORE_VECTORIZE, BLOCK_SCAN_RAKING_MEMOIZE> ScanPolicy;


        typedef AgentRadixSortDownsweepPolicy <64, (((18 / SCALE_FACTOR_4B) > (1)) ? (18 / SCALE_FACTOR_4B) : (1)), BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_BASIC, BLOCK_SCAN_WARP_SCANS, PRIMARY_RADIX_BITS> DownsweepPolicyKeys;
        typedef AgentRadixSortDownsweepPolicy <64, (((18 / SCALE_FACTOR_4B) > (1)) ? (18 / SCALE_FACTOR_4B) : (1)), BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_BASIC, BLOCK_SCAN_WARP_SCANS, ALT_RADIX_BITS> AltDownsweepPolicyKeys;


        typedef AgentRadixSortDownsweepPolicy <128, (((13 / SCALE_FACTOR_4B) > (1)) ? (13 / SCALE_FACTOR_4B) : (1)), BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_BASIC, BLOCK_SCAN_WARP_SCANS, PRIMARY_RADIX_BITS> DownsweepPolicyPairs;
        typedef AgentRadixSortDownsweepPolicy <128, (((13 / SCALE_FACTOR_4B) > (1)) ? (13 / SCALE_FACTOR_4B) : (1)), BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_BASIC, BLOCK_SCAN_WARP_SCANS, ALT_RADIX_BITS> AltDownsweepPolicyPairs;


        typedef typename If<KEYS_ONLY, DownsweepPolicyKeys, DownsweepPolicyPairs>::Type DownsweepPolicy;
        typedef typename If<KEYS_ONLY, AltDownsweepPolicyKeys, AltDownsweepPolicyPairs>::Type AltDownsweepPolicy;


        typedef DownsweepPolicy SingleTilePolicy;


        typedef DownsweepPolicy SegmentedPolicy;
        typedef AltDownsweepPolicy AltSegmentedPolicy;
    };


    struct Policy300 : ChainedPolicy<300, Policy300, Policy200>
    {
        enum {
            PRIMARY_RADIX_BITS = 5,
            ALT_RADIX_BITS = PRIMARY_RADIX_BITS - 1,


            SCALE_FACTOR_4B = ((((sizeof(ValueT)) > (sizeof(KeyT))) ? (sizeof(ValueT)) : (sizeof(KeyT))) + 3) / 4,
        };


        typedef AgentRadixSortUpsweepPolicy <256, (((7 / SCALE_FACTOR_4B) > (1)) ? (7 / SCALE_FACTOR_4B) : (1)), LOAD_DEFAULT, PRIMARY_RADIX_BITS> UpsweepPolicyKeys;
        typedef AgentRadixSortUpsweepPolicy <256, (((7 / SCALE_FACTOR_4B) > (1)) ? (7 / SCALE_FACTOR_4B) : (1)), LOAD_DEFAULT, ALT_RADIX_BITS> AltUpsweepPolicyKeys;


        typedef AgentRadixSortUpsweepPolicy <256, (((5 / SCALE_FACTOR_4B) > (1)) ? (5 / SCALE_FACTOR_4B) : (1)), LOAD_DEFAULT, PRIMARY_RADIX_BITS> UpsweepPolicyPairs;
        typedef AgentRadixSortUpsweepPolicy <256, (((5 / SCALE_FACTOR_4B) > (1)) ? (5 / SCALE_FACTOR_4B) : (1)), LOAD_DEFAULT, ALT_RADIX_BITS> AltUpsweepPolicyPairs;


        typedef typename If<KEYS_ONLY, UpsweepPolicyKeys, UpsweepPolicyPairs>::Type UpsweepPolicy;
        typedef typename If<KEYS_ONLY, AltUpsweepPolicyKeys, AltUpsweepPolicyPairs>::Type AltUpsweepPolicy;


        typedef AgentScanPolicy <1024, 4, BLOCK_LOAD_VECTORIZE, LOAD_DEFAULT, BLOCK_STORE_VECTORIZE, BLOCK_SCAN_WARP_SCANS> ScanPolicy;


        typedef AgentRadixSortDownsweepPolicy <128, (((14 / SCALE_FACTOR_4B) > (1)) ? (14 / SCALE_FACTOR_4B) : (1)), BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_BASIC, BLOCK_SCAN_WARP_SCANS, PRIMARY_RADIX_BITS> DownsweepPolicyKeys;
        typedef AgentRadixSortDownsweepPolicy <128, (((14 / SCALE_FACTOR_4B) > (1)) ? (14 / SCALE_FACTOR_4B) : (1)), BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_BASIC, BLOCK_SCAN_WARP_SCANS, ALT_RADIX_BITS> AltDownsweepPolicyKeys;


        typedef AgentRadixSortDownsweepPolicy <128, (((10 / SCALE_FACTOR_4B) > (1)) ? (10 / SCALE_FACTOR_4B) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_BASIC, BLOCK_SCAN_WARP_SCANS, PRIMARY_RADIX_BITS> DownsweepPolicyPairs;
        typedef AgentRadixSortDownsweepPolicy <128, (((10 / SCALE_FACTOR_4B) > (1)) ? (10 / SCALE_FACTOR_4B) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_BASIC, BLOCK_SCAN_WARP_SCANS, ALT_RADIX_BITS> AltDownsweepPolicyPairs;


        typedef typename If<KEYS_ONLY, DownsweepPolicyKeys, DownsweepPolicyPairs>::Type DownsweepPolicy;
        typedef typename If<KEYS_ONLY, AltDownsweepPolicyKeys, AltDownsweepPolicyPairs>::Type AltDownsweepPolicy;


        typedef DownsweepPolicy SingleTilePolicy;


        typedef DownsweepPolicy SegmentedPolicy;
        typedef AltDownsweepPolicy AltSegmentedPolicy;
    };



    struct Policy350 : ChainedPolicy<350, Policy350, Policy300>
    {
        enum {
            PRIMARY_RADIX_BITS = (sizeof(KeyT) > 1) ? 6 : 5,
        };


        typedef AgentScanPolicy <1024, 4, BLOCK_LOAD_VECTORIZE, LOAD_DEFAULT, BLOCK_STORE_VECTORIZE, BLOCK_SCAN_WARP_SCANS> ScanPolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128))), ((((sizeof(DominantT) < 4) ? ((9 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128))) / 2 : ((9 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((9 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128))) / 2 : ((9 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128)))) : (1)), BLOCK_LOAD_WARP_TRANSPOSE, LOAD_LDG, RADIX_RANK_MATCH, BLOCK_SCAN_WARP_SCANS, PRIMARY_RADIX_BITS> DownsweepPolicyKeys;
        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (64)) ? ((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (64))), ((((sizeof(DominantT) < 4) ? ((18 * 64 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (64)) ? ((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (64))) / 2 : ((18 * 64 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (64)) ? ((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (64)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((18 * 64 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (64)) ? ((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (64))) / 2 : ((18 * 64 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (64)) ? ((1 << (5)) * ((((64 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((64 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (64)))) : (1)), BLOCK_LOAD_DIRECT, LOAD_LDG, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, PRIMARY_RADIX_BITS - 1> AltDownsweepPolicyKeys;


        typedef DownsweepPolicyKeys DownsweepPolicyPairs;
        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128))), ((((sizeof(DominantT) < 4) ? ((15 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128))) / 2 : ((15 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((15 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128))) / 2 : ((15 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128)))) : (1)), BLOCK_LOAD_DIRECT, LOAD_LDG, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, PRIMARY_RADIX_BITS - 1> AltDownsweepPolicyPairs;


        typedef typename If<KEYS_ONLY, DownsweepPolicyKeys, DownsweepPolicyPairs>::Type DownsweepPolicy;
        typedef typename If<KEYS_ONLY, AltDownsweepPolicyKeys, AltDownsweepPolicyPairs>::Type AltDownsweepPolicy;


        typedef DownsweepPolicy UpsweepPolicy;
        typedef AltDownsweepPolicy AltUpsweepPolicy;


        typedef DownsweepPolicy SingleTilePolicy;


        typedef DownsweepPolicy SegmentedPolicy;
        typedef AltDownsweepPolicy AltSegmentedPolicy;


    };



    struct Policy500 : ChainedPolicy<500, Policy500, Policy350>
    {
        enum {
            PRIMARY_RADIX_BITS = (sizeof(KeyT) > 1) ? 7 : 5,
            SINGLE_TILE_RADIX_BITS = (sizeof(KeyT) > 1) ? 6 : 5,
            SEGMENTED_RADIX_BITS = (sizeof(KeyT) > 1) ? 6 : 5,
        };


        typedef AgentScanPolicy <512, 23, BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, BLOCK_STORE_WARP_TRANSPOSE, BLOCK_SCAN_RAKING_MEMOIZE> ScanPolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((160 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((160 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (160)) ? ((1 << (5)) * ((((160 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((160 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (160))), ((((sizeof(DominantT) < 4) ? ((39 * 160 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((160 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((160 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (160)) ? ((1 << (5)) * ((((160 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((160 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (160))) / 2 : ((39 * 160 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((160 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((160 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (160)) ? ((1 << (5)) * ((((160 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((160 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (160)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((39 * 160 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((160 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((160 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (160)) ? ((1 << (5)) * ((((160 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((160 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (160))) / 2 : ((39 * 160 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((160 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((160 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (160)) ? ((1 << (5)) * ((((160 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((160 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (160)))) : (1)), BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_BASIC, BLOCK_SCAN_WARP_SCANS, PRIMARY_RADIX_BITS> DownsweepPolicy;
        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))), ((((sizeof(DominantT) < 4) ? ((16 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((16 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((16 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((16 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) : (1)), BLOCK_LOAD_DIRECT, LOAD_LDG, RADIX_RANK_MEMOIZE, BLOCK_SCAN_RAKING_MEMOIZE, PRIMARY_RADIX_BITS - 1> AltDownsweepPolicy;


        typedef DownsweepPolicy UpsweepPolicy;
        typedef AltDownsweepPolicy AltUpsweepPolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))), ((((sizeof(DominantT) < 4) ? ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) : (1)), BLOCK_LOAD_DIRECT, LOAD_LDG, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, SINGLE_TILE_RADIX_BITS> SingleTilePolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))), ((((sizeof(DominantT) < 4) ? ((31 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))) / 2 : ((31 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((31 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))) / 2 : ((31 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192)))) : (1)), BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, SEGMENTED_RADIX_BITS> SegmentedPolicy;
        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))), ((((sizeof(DominantT) < 4) ? ((11 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((11 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((11 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((11 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) : (1)), BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, SEGMENTED_RADIX_BITS - 1> AltSegmentedPolicy;
    };



    struct Policy600 : ChainedPolicy<600, Policy600, Policy500>
    {
        enum {
            PRIMARY_RADIX_BITS = (sizeof(KeyT) > 1) ? 7 : 5,
            SINGLE_TILE_RADIX_BITS = (sizeof(KeyT) > 1) ? 6 : 5,
            SEGMENTED_RADIX_BITS = (sizeof(KeyT) > 1) ? 6 : 5,
        };


        typedef AgentScanPolicy <512, 23, BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, BLOCK_STORE_WARP_TRANSPOSE, BLOCK_SCAN_RAKING_MEMOIZE> ScanPolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))), ((((sizeof(DominantT) < 4) ? ((25 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((25 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((25 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((25 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MATCH, BLOCK_SCAN_WARP_SCANS, PRIMARY_RADIX_BITS> DownsweepPolicy;
        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))), ((((sizeof(DominantT) < 4) ? ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))) / 2 : ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))) / 2 : ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, PRIMARY_RADIX_BITS - 1> AltDownsweepPolicy;


        typedef DownsweepPolicy UpsweepPolicy;
        typedef AltDownsweepPolicy AltUpsweepPolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))), ((((sizeof(DominantT) < 4) ? ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) : (1)), BLOCK_LOAD_DIRECT, LOAD_LDG, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, SINGLE_TILE_RADIX_BITS> SingleTilePolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))), ((((sizeof(DominantT) < 4) ? ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))) / 2 : ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))) / 2 : ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, SEGMENTED_RADIX_BITS> SegmentedPolicy;
        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384))), ((((sizeof(DominantT) < 4) ? ((11 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384))) / 2 : ((11 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((11 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384))) / 2 : ((11 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, SEGMENTED_RADIX_BITS - 1> AltSegmentedPolicy;

    };



    struct Policy610 : ChainedPolicy<610, Policy610, Policy600>
    {
        enum {
            PRIMARY_RADIX_BITS = (sizeof(KeyT) > 1) ? 7 : 5,
            SINGLE_TILE_RADIX_BITS = (sizeof(KeyT) > 1) ? 6 : 5,
            SEGMENTED_RADIX_BITS = (sizeof(KeyT) > 1) ? 6 : 5,
        };


        typedef AgentScanPolicy <512, 23, BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, BLOCK_STORE_WARP_TRANSPOSE, BLOCK_SCAN_RAKING_MEMOIZE> ScanPolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384))), ((((sizeof(DominantT) < 4) ? ((31 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384))) / 2 : ((31 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((31 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384))) / 2 : ((31 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MATCH, BLOCK_SCAN_RAKING_MEMOIZE, PRIMARY_RADIX_BITS> DownsweepPolicy;
        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))), ((((sizeof(DominantT) < 4) ? ((35 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((35 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((35 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((35 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MEMOIZE, BLOCK_SCAN_RAKING_MEMOIZE, PRIMARY_RADIX_BITS - 1> AltDownsweepPolicy;


        typedef AgentRadixSortUpsweepPolicy <(((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128))), ((((sizeof(DominantT) < 4) ? ((16 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128))) / 2 : ((16 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((16 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128))) / 2 : ((16 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128)))) : (1)), LOAD_LDG, PRIMARY_RADIX_BITS> UpsweepPolicy;
        typedef AgentRadixSortUpsweepPolicy <(((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128))), ((((sizeof(DominantT) < 4) ? ((16 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128))) / 2 : ((16 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((16 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128))) / 2 : ((16 * 128 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (128)) ? ((1 << (5)) * ((((128 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((128 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (128)))) : (1)), LOAD_LDG, PRIMARY_RADIX_BITS - 1> AltUpsweepPolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))), ((((sizeof(DominantT) < 4) ? ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) : (1)), BLOCK_LOAD_DIRECT, LOAD_LDG, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, SINGLE_TILE_RADIX_BITS> SingleTilePolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))), ((((sizeof(DominantT) < 4) ? ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))) / 2 : ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))) / 2 : ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, SEGMENTED_RADIX_BITS> SegmentedPolicy;
        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384))), ((((sizeof(DominantT) < 4) ? ((11 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384))) / 2 : ((11 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((11 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384))) / 2 : ((11 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, SEGMENTED_RADIX_BITS - 1> AltSegmentedPolicy;
    };



    struct Policy620 : ChainedPolicy<620, Policy620, Policy610>
    {
        enum {
            PRIMARY_RADIX_BITS = 5,
            ALT_RADIX_BITS = PRIMARY_RADIX_BITS - 1,
        };


        typedef AgentScanPolicy <512, 23, BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, BLOCK_STORE_WARP_TRANSPOSE, BLOCK_SCAN_RAKING_MEMOIZE> ScanPolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))), ((((sizeof(DominantT) < 4) ? ((16 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((16 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((16 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((16 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MEMOIZE, BLOCK_SCAN_RAKING_MEMOIZE, PRIMARY_RADIX_BITS> DownsweepPolicy;
        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))), ((((sizeof(DominantT) < 4) ? ((16 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((16 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((16 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((16 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MEMOIZE, BLOCK_SCAN_RAKING_MEMOIZE, ALT_RADIX_BITS> AltDownsweepPolicy;


        typedef DownsweepPolicy UpsweepPolicy;
        typedef AltDownsweepPolicy AltUpsweepPolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))), ((((sizeof(DominantT) < 4) ? ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) : (1)), BLOCK_LOAD_DIRECT, LOAD_LDG, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, PRIMARY_RADIX_BITS> SingleTilePolicy;


        typedef DownsweepPolicy SegmentedPolicy;
        typedef AltDownsweepPolicy AltSegmentedPolicy;
    };



    struct Policy700 : ChainedPolicy<700, Policy700, Policy620>
    {
        enum {
            PRIMARY_RADIX_BITS = (sizeof(KeyT) > 1) ? 7 : 5,
            SINGLE_TILE_RADIX_BITS = (sizeof(KeyT) > 1) ? 6 : 5,
            SEGMENTED_RADIX_BITS = (sizeof(KeyT) > 1) ? 6 : 5,
        };


        typedef AgentScanPolicy <512, 23, BLOCK_LOAD_WARP_TRANSPOSE, LOAD_DEFAULT, BLOCK_STORE_WARP_TRANSPOSE, BLOCK_SCAN_RAKING_MEMOIZE> ScanPolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))), ((((sizeof(DominantT) < 4) ? ((25 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((25 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((25 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((25 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MATCH, BLOCK_SCAN_WARP_SCANS, PRIMARY_RADIX_BITS> DownsweepPolicy;
        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))), ((((sizeof(DominantT) < 4) ? ((25 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((25 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((25 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((25 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, PRIMARY_RADIX_BITS - 1> AltDownsweepPolicy;


        typedef DownsweepPolicy UpsweepPolicy;
        typedef AltDownsweepPolicy AltUpsweepPolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))), ((((sizeof(DominantT) < 4) ? ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256))) / 2 : ((19 * 256 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (256)) ? ((1 << (5)) * ((((256 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((256 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (256)))) : (1)), BLOCK_LOAD_DIRECT, LOAD_LDG, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, SINGLE_TILE_RADIX_BITS> SingleTilePolicy;


        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))), ((((sizeof(DominantT) < 4) ? ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))) / 2 : ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192))) / 2 : ((39 * 192 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (192)) ? ((1 << (5)) * ((((192 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((192 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (192)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, SEGMENTED_RADIX_BITS> SegmentedPolicy;
        typedef AgentRadixSortDownsweepPolicy <(((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384))), ((((sizeof(DominantT) < 4) ? ((11 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384))) / 2 : ((11 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384)))) > (1)) ? ((sizeof(DominantT) < 4) ? ((11 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384))) / 2 : ((11 * 384 * 4) / (((sizeof(DominantT)) > (4)) ? (sizeof(DominantT)) : (4))) / (((((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) < (384)) ? ((1 << (5)) * ((((384 / (1 << (5))) * 4 / sizeof(DominantT)) > (2)) ? ((384 / (1 << (5))) * 4 / sizeof(DominantT)) : (2))) : (384)))) : (1)), BLOCK_LOAD_TRANSPOSE, LOAD_DEFAULT, RADIX_RANK_MEMOIZE, BLOCK_SCAN_WARP_SCANS, SEGMENTED_RADIX_BITS - 1> AltSegmentedPolicy;
    };



    typedef Policy700 MaxPolicy;


};
# 802 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 3
template <
    bool IS_DESCENDING,
    typename KeyT,
    typename ValueT,
    typename OffsetT>
struct DispatchRadixSort :
    DeviceRadixSortPolicy<KeyT, ValueT, OffsetT>
{




    enum
    {

        KEYS_ONLY = (Equals<ValueT, NullType>::VALUE),
    };






    void *d_temp_storage;
    size_t &temp_storage_bytes;
    DoubleBuffer<KeyT> &d_keys;
    DoubleBuffer<ValueT> &d_values;
    OffsetT num_items;
    int begin_bit;
    int end_bit;
    cudaStream_t stream;
    bool debug_synchronous;
    int ptx_version;
    bool is_overwrite_okay;







    __attribute__((host)) __inline__ __attribute__((always_inline))
    DispatchRadixSort(
        void* d_temp_storage,
        size_t &temp_storage_bytes,
        DoubleBuffer<KeyT> &d_keys,
        DoubleBuffer<ValueT> &d_values,
        OffsetT num_items,
        int begin_bit,
        int end_bit,
        bool is_overwrite_okay,
        cudaStream_t stream,
        bool debug_synchronous,
        int ptx_version)
    :
        d_temp_storage(d_temp_storage),
        temp_storage_bytes(temp_storage_bytes),
        d_keys(d_keys),
        d_values(d_values),
        num_items(num_items),
        begin_bit(begin_bit),
        end_bit(end_bit),
        stream(stream),
        debug_synchronous(debug_synchronous),
        ptx_version(ptx_version),
        is_overwrite_okay(is_overwrite_okay)
    {}







    template <
        typename ActivePolicyT,
        typename SingleTileKernelT>
    __attribute__((host)) __inline__ __attribute__((always_inline))
    cudaError_t InvokeSingleTile(
        SingleTileKernelT single_tile_kernel)
    {

        (void)single_tile_kernel;

        return cub::Debug((cudaError_t) (cudaErrorNotSupported), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 886);
# 933 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 3
    }
# 943 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 3
    template <typename PassConfigT>
    __attribute__((host)) __inline__ __attribute__((always_inline))
    cudaError_t InvokePass(
        const KeyT *d_keys_in,
        KeyT *d_keys_out,
        const ValueT *d_values_in,
        ValueT *d_values_out,
        OffsetT *d_spine,
        int spine_length,
        int &current_bit,
        PassConfigT &pass_config)
    {
        cudaError error = cudaSuccess;
        do
        {
            int pass_bits = ((((end_bit - current_bit)) < (pass_config.radix_bits)) ? ((end_bit - current_bit)) : (pass_config.radix_bits));


            if (debug_synchronous)
                printf("[block (%d,%d,%d), thread (%d,%d,%d)]: " "Invoking upsweep_kernel<<<%d, %d, 0, %lld>>>(), %d items per thread, %d SM occupancy, current bit %d, bit_grain %d\n", blockIdx.z, blockIdx.y, blockIdx.x, threadIdx.z, threadIdx.y, threadIdx.x, pass_config.even_share.grid_size, pass_config.upsweep_config.block_threads, (long long) stream, pass_config.upsweep_config.items_per_thread, pass_config.upsweep_config.sm_occupancy, current_bit, pass_bits);;




            pass_config.upsweep_kernel<<<pass_config.even_share.grid_size, pass_config.upsweep_config.block_threads, 0, stream>>>(
                d_keys_in,
                d_spine,
                num_items,
                current_bit,
                pass_bits,
                pass_config.even_share);


            if (cub::Debug((cudaError_t) (error = cudaPeekAtLastError()), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 976)) break;


            if (debug_synchronous && (cub::Debug((cudaError_t) (error = SyncStream(stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 979))) break;


            if (debug_synchronous) printf("[block (%d,%d,%d), thread (%d,%d,%d)]: " "Invoking scan_kernel<<<%d, %d, 0, %lld>>>(), %d items per thread\n", blockIdx.z, blockIdx.y, blockIdx.x, threadIdx.z, threadIdx.y, threadIdx.x, 1, pass_config.scan_config.block_threads, (long long) stream, pass_config.scan_config.items_per_thread);;



            pass_config.scan_kernel<<<1, pass_config.scan_config.block_threads, 0, stream>>>(
                d_spine,
                spine_length);


            if (cub::Debug((cudaError_t) (error = cudaPeekAtLastError()), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 991)) break;


            if (debug_synchronous && (cub::Debug((cudaError_t) (error = SyncStream(stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 994))) break;


            if (debug_synchronous) printf("[block (%d,%d,%d), thread (%d,%d,%d)]: " "Invoking downsweep_kernel<<<%d, %d, 0, %lld>>>(), %d items per thread, %d SM occupancy\n", blockIdx.z, blockIdx.y, blockIdx.x, threadIdx.z, threadIdx.y, threadIdx.x, pass_config.even_share.grid_size, pass_config.downsweep_config.block_threads, (long long) stream, pass_config.downsweep_config.items_per_thread, pass_config.downsweep_config.sm_occupancy);;




            pass_config.downsweep_kernel<<<pass_config.even_share.grid_size, pass_config.downsweep_config.block_threads, 0, stream>>>(
                d_keys_in,
                d_keys_out,
                d_values_in,
                d_values_out,
                d_spine,
                num_items,
                current_bit,
                pass_bits,
                pass_config.even_share);


            if (cub::Debug((cudaError_t) (error = cudaPeekAtLastError()), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1014)) break;


            if (debug_synchronous && (cub::Debug((cudaError_t) (error = SyncStream(stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1017))) break;


            current_bit += pass_bits;
        }
        while (0);

        return error;
    }




    template <
        typename UpsweepKernelT,
        typename ScanKernelT,
        typename DownsweepKernelT>
    struct PassConfig
    {
        UpsweepKernelT upsweep_kernel;
        KernelConfig upsweep_config;
        ScanKernelT scan_kernel;
        KernelConfig scan_config;
        DownsweepKernelT downsweep_kernel;
        KernelConfig downsweep_config;
        int radix_bits;
        int radix_digits;
        int max_downsweep_grid_size;
        GridEvenShare<OffsetT> even_share;


        template <
            typename UpsweepPolicyT,
            typename ScanPolicyT,
            typename DownsweepPolicyT>
        __attribute__((host)) __inline__ __attribute__((always_inline))
        cudaError_t InitPassConfig(
            UpsweepKernelT upsweep_kernel,
            ScanKernelT scan_kernel,
            DownsweepKernelT downsweep_kernel,
            int ptx_version,
            int sm_count,
            int num_items)
        {
            cudaError error = cudaSuccess;
            do
            {
                this->upsweep_kernel = upsweep_kernel;
                this->scan_kernel = scan_kernel;
                this->downsweep_kernel = downsweep_kernel;
                radix_bits = DownsweepPolicyT::RADIX_BITS;
                radix_digits = 1 << radix_bits;

                if (cub::Debug((cudaError_t) (error = upsweep_config.Init<UpsweepPolicyT>(upsweep_kernel)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1070)) break;
                if (cub::Debug((cudaError_t) (error = scan_config.Init<ScanPolicyT>(scan_kernel)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1071)) break;
                if (cub::Debug((cudaError_t) (error = downsweep_config.Init<DownsweepPolicyT>(downsweep_kernel)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1072)) break;

                max_downsweep_grid_size = (downsweep_config.sm_occupancy * sm_count) * ((ptx_version >= 300) ? (5) : ((ptx_version >= 200) ? (3) : (10)));

                even_share.DispatchInit(
                    num_items,
                    max_downsweep_grid_size,
                    (((upsweep_config.tile_size) > (downsweep_config.tile_size)) ? (upsweep_config.tile_size) : (downsweep_config.tile_size)));

            }
            while (0);
            return error;
        }

    };



    template <
        typename ActivePolicyT,
        typename UpsweepKernelT,
        typename ScanKernelT,
        typename DownsweepKernelT>
    __attribute__((host)) __inline__ __attribute__((always_inline))
    cudaError_t InvokePasses(
        UpsweepKernelT upsweep_kernel,
        UpsweepKernelT alt_upsweep_kernel,
        ScanKernelT scan_kernel,
        DownsweepKernelT downsweep_kernel,
        DownsweepKernelT alt_downsweep_kernel)
    {

        (void)upsweep_kernel;
        (void)alt_upsweep_kernel;
        (void)scan_kernel;
        (void)downsweep_kernel;
        (void)alt_downsweep_kernel;


        return cub::Debug((cudaError_t) (cudaErrorNotSupported), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1111);
# 1212 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 3
    }







    template <typename ActivePolicyT>
    __attribute__((host)) __inline__ __attribute__((always_inline))
    cudaError_t Invoke()
    {
        typedef typename DispatchRadixSort::MaxPolicy MaxPolicyT;
        typedef typename ActivePolicyT::SingleTilePolicy SingleTilePolicyT;


        if (num_items <= (SingleTilePolicyT::BLOCK_THREADS * SingleTilePolicyT::ITEMS_PER_THREAD))
        {

            return InvokeSingleTile<ActivePolicyT>(
                DeviceRadixSortSingleTileKernel<MaxPolicyT, IS_DESCENDING, KeyT, ValueT, OffsetT>);
        }
        else
        {

            return InvokePasses<ActivePolicyT>(
                DeviceRadixSortUpsweepKernel< MaxPolicyT, false, IS_DESCENDING, KeyT, OffsetT>,
                DeviceRadixSortUpsweepKernel< MaxPolicyT, true, IS_DESCENDING, KeyT, OffsetT>,
                RadixSortScanBinsKernel< MaxPolicyT, OffsetT>,
                DeviceRadixSortDownsweepKernel< MaxPolicyT, false, IS_DESCENDING, KeyT, ValueT, OffsetT>,
                DeviceRadixSortDownsweepKernel< MaxPolicyT, true, IS_DESCENDING, KeyT, ValueT, OffsetT>);
        }
    }
# 1254 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 3
    __attribute__((host)) __inline__ __attribute__((always_inline))
    static cudaError_t Dispatch(
        void* d_temp_storage,
        size_t &temp_storage_bytes,
        DoubleBuffer<KeyT> &d_keys,
        DoubleBuffer<ValueT> &d_values,
        OffsetT num_items,
        int begin_bit,
        int end_bit,
        bool is_overwrite_okay,
        cudaStream_t stream,
        bool debug_synchronous)
    {
        typedef typename DispatchRadixSort::MaxPolicy MaxPolicyT;

        cudaError_t error;
        do {

            int ptx_version;
            if (cub::Debug((cudaError_t) (error = PtxVersion(ptx_version)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1273)) break;


            DispatchRadixSort dispatch(
                d_temp_storage, temp_storage_bytes,
                d_keys, d_values,
                num_items, begin_bit, end_bit, is_overwrite_okay,
                stream, debug_synchronous, ptx_version);


            if (cub::Debug((cudaError_t) (error = MaxPolicyT::Invoke(ptx_version, dispatch)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1283)) break;

        } while (0);

        return error;
    }
};
# 1301 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 3
template <
    bool IS_DESCENDING,
    typename KeyT,
    typename ValueT,
    typename OffsetIteratorT,
    typename OffsetT>
struct DispatchSegmentedRadixSort :
    DeviceRadixSortPolicy<KeyT, ValueT, OffsetT>
{




    enum
    {

        KEYS_ONLY = (Equals<ValueT, NullType>::VALUE),
    };






    void *d_temp_storage;
    size_t &temp_storage_bytes;
    DoubleBuffer<KeyT> &d_keys;
    DoubleBuffer<ValueT> &d_values;
    OffsetT num_items;
    OffsetT num_segments;
    OffsetIteratorT d_begin_offsets;
    OffsetIteratorT d_end_offsets;
    int begin_bit;
    int end_bit;
    cudaStream_t stream;
    bool debug_synchronous;
    int ptx_version;
    bool is_overwrite_okay;







    __attribute__((host)) __inline__ __attribute__((always_inline))
    DispatchSegmentedRadixSort(
        void* d_temp_storage,
        size_t &temp_storage_bytes,
        DoubleBuffer<KeyT> &d_keys,
        DoubleBuffer<ValueT> &d_values,
        OffsetT num_items,
        OffsetT num_segments,
        OffsetIteratorT d_begin_offsets,
        OffsetIteratorT d_end_offsets,
        int begin_bit,
        int end_bit,
        bool is_overwrite_okay,
        cudaStream_t stream,
        bool debug_synchronous,
        int ptx_version)
    :
        d_temp_storage(d_temp_storage),
        temp_storage_bytes(temp_storage_bytes),
        d_keys(d_keys),
        d_values(d_values),
        num_items(num_items),
        num_segments(num_segments),
        d_begin_offsets(d_begin_offsets),
        d_end_offsets(d_end_offsets),
        begin_bit(begin_bit),
        end_bit(end_bit),
        is_overwrite_okay(is_overwrite_okay),
        stream(stream),
        debug_synchronous(debug_synchronous),
        ptx_version(ptx_version)
    {}







    template <typename PassConfigT>
    __attribute__((host)) __inline__ __attribute__((always_inline))
    cudaError_t InvokePass(
        const KeyT *d_keys_in,
        KeyT *d_keys_out,
        const ValueT *d_values_in,
        ValueT *d_values_out,
        int &current_bit,
        PassConfigT &pass_config)
    {
        cudaError error = cudaSuccess;
        do
        {
            int pass_bits = ((((end_bit - current_bit)) < (pass_config.radix_bits)) ? ((end_bit - current_bit)) : (pass_config.radix_bits));


            if (debug_synchronous)
                printf("[block (%d,%d,%d), thread (%d,%d,%d)]: " "Invoking segmented_kernels<<<%d, %d, 0, %lld>>>(), %d items per thread, %d SM occupancy, current bit %d, bit_grain %d\n", blockIdx.z, blockIdx.y, blockIdx.x, threadIdx.z, threadIdx.y, threadIdx.x, num_segments, pass_config.segmented_config.block_threads, (long long) stream, pass_config.segmented_config.items_per_thread, pass_config.segmented_config.sm_occupancy, current_bit, pass_bits);;



            pass_config.segmented_kernel<<<num_segments, pass_config.segmented_config.block_threads, 0, stream>>>(
                d_keys_in, d_keys_out,
                d_values_in, d_values_out,
                d_begin_offsets, d_end_offsets, num_segments,
                current_bit, pass_bits);


            if (cub::Debug((cudaError_t) (error = cudaPeekAtLastError()), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1413)) break;


            if (debug_synchronous && (cub::Debug((cudaError_t) (error = SyncStream(stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1416))) break;


            current_bit += pass_bits;
        }
        while (0);

        return error;
    }



    template <typename SegmentedKernelT>
    struct PassConfig
    {
        SegmentedKernelT segmented_kernel;
        KernelConfig segmented_config;
        int radix_bits;
        int radix_digits;


        template <typename SegmentedPolicyT>
        __attribute__((host)) __inline__ __attribute__((always_inline))
        cudaError_t InitPassConfig(SegmentedKernelT segmented_kernel)
        {
            this->segmented_kernel = segmented_kernel;
            this->radix_bits = SegmentedPolicyT::RADIX_BITS;
            this->radix_digits = 1 << radix_bits;

            return cub::Debug((cudaError_t) (segmented_config.Init<SegmentedPolicyT>(segmented_kernel)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1445);
        }
    };



    template <
        typename ActivePolicyT,
        typename SegmentedKernelT>
    __attribute__((host)) __inline__ __attribute__((always_inline))
    cudaError_t InvokePasses(
        SegmentedKernelT segmented_kernel,
        SegmentedKernelT alt_segmented_kernel)
    {

      (void)segmented_kernel;
      (void)alt_segmented_kernel;


        return cub::Debug((cudaError_t) (cudaErrorNotSupported), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1464);
# 1547 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 3
    }







    template <typename ActivePolicyT>
    __attribute__((host)) __inline__ __attribute__((always_inline))
    cudaError_t Invoke()
    {
        typedef typename DispatchSegmentedRadixSort::MaxPolicy MaxPolicyT;


        return InvokePasses<ActivePolicyT>(
            DeviceSegmentedRadixSortKernel<MaxPolicyT, false, IS_DESCENDING, KeyT, ValueT, OffsetIteratorT, OffsetT>,
            DeviceSegmentedRadixSortKernel<MaxPolicyT, true, IS_DESCENDING, KeyT, ValueT, OffsetIteratorT, OffsetT>);
    }
# 1574 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh" 3
    __attribute__((host)) __inline__ __attribute__((always_inline))
    static cudaError_t Dispatch(
        void* d_temp_storage,
        size_t &temp_storage_bytes,
        DoubleBuffer<KeyT> &d_keys,
        DoubleBuffer<ValueT> &d_values,
        int num_items,
        int num_segments,
        OffsetIteratorT d_begin_offsets,
        OffsetIteratorT d_end_offsets,
        int begin_bit,
        int end_bit,
        bool is_overwrite_okay,
        cudaStream_t stream,
        bool debug_synchronous)
    {
        typedef typename DispatchSegmentedRadixSort::MaxPolicy MaxPolicyT;

        cudaError_t error;
        do {

            int ptx_version;
            if (cub::Debug((cudaError_t) (error = PtxVersion(ptx_version)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1596)) break;


            DispatchSegmentedRadixSort dispatch(
                d_temp_storage, temp_storage_bytes,
                d_keys, d_values,
                num_items, num_segments, d_begin_offsets, d_end_offsets,
                begin_bit, end_bit, is_overwrite_okay,
                stream, debug_synchronous, ptx_version);


            if (cub::Debug((cudaError_t) (error = MaxPolicyT::Invoke(ptx_version, dispatch)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/dispatch/dispatch_radix_sort.cuh", 1607)) break;

        } while (0);

        return error;
    }
};


}
# 41 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_radix_sort.cuh" 2 3







namespace cub {
# 83 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_radix_sort.cuh" 3
struct DeviceRadixSort
{
# 144 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_radix_sort.cuh" 3
    template <
        typename KeyT,
        typename ValueT>
    __attribute__((host))
    static cudaError_t SortPairs(
        void *d_temp_storage,
        size_t &temp_storage_bytes,
        const KeyT *d_keys_in,
        KeyT *d_keys_out,
        const ValueT *d_values_in,
        ValueT *d_values_out,
        int num_items,
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8,
        cudaStream_t stream = 0,
        bool debug_synchronous = false)
    {

        typedef int OffsetT;

        DoubleBuffer<KeyT> d_keys(const_cast<KeyT*>(d_keys_in), d_keys_out);
        DoubleBuffer<ValueT> d_values(const_cast<ValueT*>(d_values_in), d_values_out);

        return DispatchRadixSort<false, KeyT, ValueT, OffsetT>::Dispatch(
            d_temp_storage,
            temp_storage_bytes,
            d_keys,
            d_values,
            num_items,
            begin_bit,
            end_bit,
            false,
            stream,
            debug_synchronous);
    }
# 245 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_radix_sort.cuh" 3
    template <
        typename KeyT,
        typename ValueT>
    __attribute__((host))
    static cudaError_t SortPairs(
        void *d_temp_storage,
        size_t &temp_storage_bytes,
        DoubleBuffer<KeyT> &d_keys,
        DoubleBuffer<ValueT> &d_values,
        int num_items,
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8,
        cudaStream_t stream = 0,
        bool debug_synchronous = false)
    {

        typedef int OffsetT;

        return DispatchRadixSort<false, KeyT, ValueT, OffsetT>::Dispatch(
            d_temp_storage,
            temp_storage_bytes,
            d_keys,
            d_values,
            num_items,
            begin_bit,
            end_bit,
            true,
            stream,
            debug_synchronous);
    }
# 325 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_radix_sort.cuh" 3
    template <
        typename KeyT,
        typename ValueT>
    __attribute__((host))
    static cudaError_t SortPairsDescending(
        void *d_temp_storage,
        size_t &temp_storage_bytes,
        const KeyT *d_keys_in,
        KeyT *d_keys_out,
        const ValueT *d_values_in,
        ValueT *d_values_out,
        int num_items,
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8,
        cudaStream_t stream = 0,
        bool debug_synchronous = false)
    {

        typedef int OffsetT;

        DoubleBuffer<KeyT> d_keys(const_cast<KeyT*>(d_keys_in), d_keys_out);
        DoubleBuffer<ValueT> d_values(const_cast<ValueT*>(d_values_in), d_values_out);

        return DispatchRadixSort<true, KeyT, ValueT, OffsetT>::Dispatch(
            d_temp_storage,
            temp_storage_bytes,
            d_keys,
            d_values,
            num_items,
            begin_bit,
            end_bit,
            false,
            stream,
            debug_synchronous);
    }
# 421 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_radix_sort.cuh" 3
    template <
        typename KeyT,
        typename ValueT>
    __attribute__((host))
    static cudaError_t SortPairsDescending(
        void *d_temp_storage,
        size_t &temp_storage_bytes,
        DoubleBuffer<KeyT> &d_keys,
        DoubleBuffer<ValueT> &d_values,
        int num_items,
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8,
        cudaStream_t stream = 0,
        bool debug_synchronous = false)
    {

        typedef int OffsetT;

        return DispatchRadixSort<true, KeyT, ValueT, OffsetT>::Dispatch(
            d_temp_storage,
            temp_storage_bytes,
            d_keys,
            d_values,
            num_items,
            begin_bit,
            end_bit,
            true,
            stream,
            debug_synchronous);
    }
# 505 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_radix_sort.cuh" 3
    template <typename KeyT>
    __attribute__((host))
    static cudaError_t SortKeys(
        void *d_temp_storage,
        size_t &temp_storage_bytes,
        const KeyT *d_keys_in,
        KeyT *d_keys_out,
        int num_items,
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8,
        cudaStream_t stream = 0,
        bool debug_synchronous = false)
    {

        typedef int OffsetT;


        DoubleBuffer<KeyT> d_keys(const_cast<KeyT*>(d_keys_in), d_keys_out);
        DoubleBuffer<NullType> d_values;

        return DispatchRadixSort<false, KeyT, NullType, OffsetT>::Dispatch(
            d_temp_storage,
            temp_storage_bytes,
            d_keys,
            d_values,
            num_items,
            begin_bit,
            end_bit,
            false,
            stream,
            debug_synchronous);
    }
# 594 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_radix_sort.cuh" 3
    template <typename KeyT>
    __attribute__((host))
    static cudaError_t SortKeys(
        void *d_temp_storage,
        size_t &temp_storage_bytes,
        DoubleBuffer<KeyT> &d_keys,
        int num_items,
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8,
        cudaStream_t stream = 0,
        bool debug_synchronous = false)
    {

        typedef int OffsetT;


        DoubleBuffer<NullType> d_values;

        return DispatchRadixSort<false, KeyT, NullType, OffsetT>::Dispatch(
            d_temp_storage,
            temp_storage_bytes,
            d_keys,
            d_values,
            num_items,
            begin_bit,
            end_bit,
            true,
            stream,
            debug_synchronous);
    }
# 669 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_radix_sort.cuh" 3
    template <typename KeyT>
    __attribute__((host))
    static cudaError_t SortKeysDescending(
        void *d_temp_storage,
        size_t &temp_storage_bytes,
        const KeyT *d_keys_in,
        KeyT *d_keys_out,
        int num_items,
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8,
        cudaStream_t stream = 0,
        bool debug_synchronous = false)
    {

        typedef int OffsetT;

        DoubleBuffer<KeyT> d_keys(const_cast<KeyT*>(d_keys_in), d_keys_out);
        DoubleBuffer<NullType> d_values;

        return DispatchRadixSort<true, KeyT, NullType, OffsetT>::Dispatch(
            d_temp_storage,
            temp_storage_bytes,
            d_keys,
            d_values,
            num_items,
            begin_bit,
            end_bit,
            false,
            stream,
            debug_synchronous);
    }
# 753 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/tpl/cub/cub/device/device_radix_sort.cuh" 3
    template <typename KeyT>
    __attribute__((host))
    static cudaError_t SortKeysDescending(
        void *d_temp_storage,
        size_t &temp_storage_bytes,
        DoubleBuffer<KeyT> &d_keys,
        int num_items,
        int begin_bit = 0,
        int end_bit = sizeof(KeyT) * 8,
        cudaStream_t stream = 0,
        bool debug_synchronous = false)
    {

        typedef int OffsetT;


        DoubleBuffer<NullType> d_values;

        return DispatchRadixSort<true, KeyT, NullType, OffsetT>::Dispatch(
            d_temp_storage,
            temp_storage_bytes,
            d_keys,
            d_values,
            num_items,
            begin_bit,
            end_bit,
            true,
            stream,
            debug_synchronous);
    }





};





}
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp" 2







namespace RAJA
{
namespace impl
{
namespace sort
{




template <size_t BLOCK_SIZE, bool Async, typename Iter, typename Compare>
concepts::enable_if<concepts::negate<concepts::all_of<
                      type_traits::is_arithmetic<RAJA::detail::IterVal<Iter>>,
                      std::is_pointer<Iter>,
                      concepts::any_of<
                        camp::is_same<Compare, operators::less<RAJA::detail::IterVal<Iter>>>,
                        camp::is_same<Compare, operators::greater<RAJA::detail::IterVal<Iter>>>>>>>
stable(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>&,
       Iter,
       Iter,
       Compare)
{
  static_assert (std::is_pointer<Iter>::value,
      "stable_sort<cuda_exec> is only implemented for pointers");
  using iterval = RAJA::detail::IterVal<Iter>;
  static_assert (type_traits::is_arithmetic<iterval>::value,
      "stable_sort<cuda_exec> is only implemented for arithmetic types");
  static_assert (concepts::any_of<
      camp::is_same<Compare, operators::less<iterval>>,
      camp::is_same<Compare, operators::greater<iterval>>>::value,
      "stable_sort<cuda_exec> is only implemented for RAJA::operators::less or RAJA::operators::greater");
}




template <size_t BLOCK_SIZE, bool Async, typename Iter>
concepts::enable_if<type_traits::is_arithmetic<RAJA::detail::IterVal<Iter>>,
                    std::is_pointer<Iter>>
stable(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>&,
       Iter begin,
       Iter end,
       operators::less<RAJA::detail::IterVal<Iter>>)
{
  cudaStream_t stream = 0;

  using R = RAJA::detail::IterVal<Iter>;

  int len = std::distance(begin, end);
  int begin_bit=0;
  int end_bit=sizeof(R)*8;


  R* d_out = cuda::device_mempool_type::getInstance().malloc<R>(len);



  cub::DoubleBuffer<R> d_keys(begin, d_out);


  void* d_temp_storage = nullptr;
  size_t temp_storage_bytes = 0;
  { ::RAJA::cudaAssert((::cub::DeviceRadixSort::SortKeys(d_temp_storage, temp_storage_bytes, d_keys, len, begin_bit, end_bit, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 105); };







  d_temp_storage =
      cuda::device_mempool_type::getInstance().malloc<unsigned char>(
          temp_storage_bytes);


  { ::RAJA::cudaAssert((::cub::DeviceRadixSort::SortKeys(d_temp_storage, temp_storage_bytes, d_keys, len, begin_bit, end_bit, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 118); };







  cuda::device_mempool_type::getInstance().free(d_temp_storage);

  if (d_keys.Current() == d_out) {


    { ::RAJA::cudaAssert((cudaMemcpyAsync(begin, d_out, len*sizeof(R), cudaMemcpyDefault, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 125); };
  }

  cuda::device_mempool_type::getInstance().free(d_out);

  cuda::launch(stream);
  if (!Async) cuda::synchronize(stream);
}




template <size_t BLOCK_SIZE, bool Async, typename Iter>
concepts::enable_if<type_traits::is_arithmetic<RAJA::detail::IterVal<Iter>>,
                    std::is_pointer<Iter>>
stable(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>&,
       Iter begin,
       Iter end,
       operators::greater<RAJA::detail::IterVal<Iter>>)
{
  cudaStream_t stream = 0;

  using R = RAJA::detail::IterVal<Iter>;

  int len = std::distance(begin, end);
  int begin_bit=0;
  int end_bit=sizeof(R)*8;


  R* d_out = cuda::device_mempool_type::getInstance().malloc<R>(len);



  cub::DoubleBuffer<R> d_keys(begin, d_out);


  void* d_temp_storage = nullptr;
  size_t temp_storage_bytes = 0;
  { ::RAJA::cudaAssert((::cub::DeviceRadixSort::SortKeysDescending(d_temp_storage, temp_storage_bytes, d_keys, len, begin_bit, end_bit, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 169); };







  d_temp_storage =
      cuda::device_mempool_type::getInstance().malloc<unsigned char>(
          temp_storage_bytes);


  { ::RAJA::cudaAssert((::cub::DeviceRadixSort::SortKeysDescending(d_temp_storage, temp_storage_bytes, d_keys, len, begin_bit, end_bit, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 182); };







  cuda::device_mempool_type::getInstance().free(d_temp_storage);

  if (d_keys.Current() == d_out) {


    { ::RAJA::cudaAssert((cudaMemcpyAsync(begin, d_out, len*sizeof(R), cudaMemcpyDefault, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 189); };
  }

  cuda::device_mempool_type::getInstance().free(d_out);

  cuda::launch(stream);
  if (!Async) cuda::synchronize(stream);
}





template <size_t BLOCK_SIZE, bool Async, typename Iter, typename Compare>
concepts::enable_if<concepts::negate<concepts::all_of<
                      type_traits::is_arithmetic<RAJA::detail::IterVal<Iter>>,
                      std::is_pointer<Iter>,
                      concepts::any_of<
                        camp::is_same<Compare, operators::less<RAJA::detail::IterVal<Iter>>>,
                        camp::is_same<Compare, operators::greater<RAJA::detail::IterVal<Iter>>>>>>>
unstable(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>&,
         Iter,
         Iter,
         Compare)
{
  static_assert (std::is_pointer<Iter>::value,
      "sort<cuda_exec> is only implemented for pointers");
  using iterval = RAJA::detail::IterVal<Iter>;
  static_assert (type_traits::is_arithmetic<iterval>::value,
      "sort<cuda_exec> is only implemented for arithmetic types");
  static_assert (concepts::any_of<
      camp::is_same<Compare, operators::less<iterval>>,
      camp::is_same<Compare, operators::greater<iterval>>>::value,
      "sort<cuda_exec> is only implemented for RAJA::operators::less or RAJA::operators::greater");
}




template <size_t BLOCK_SIZE, bool Async, typename Iter>
concepts::enable_if<type_traits::is_arithmetic<RAJA::detail::IterVal<Iter>>,
                    std::is_pointer<Iter>>
unstable(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>& p,
         Iter begin,
         Iter end,
         operators::less<RAJA::detail::IterVal<Iter>> comp)
{
  stable(p, begin, end, comp);
}




template <size_t BLOCK_SIZE, bool Async, typename Iter>
concepts::enable_if<type_traits::is_arithmetic<RAJA::detail::IterVal<Iter>>,
                    std::is_pointer<Iter>>
unstable(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>& p,
         Iter begin,
         Iter end,
         operators::greater<RAJA::detail::IterVal<Iter>> comp)
{
  stable(p, begin, end, comp);
}





template <size_t BLOCK_SIZE, bool Async,
          typename KeyIter, typename ValIter, typename Compare>
concepts::enable_if<concepts::negate<concepts::all_of<
                      type_traits::is_arithmetic<RAJA::detail::IterVal<KeyIter>>,
                      std::is_pointer<KeyIter>,
                      std::is_pointer<ValIter>,
                      concepts::any_of<
                        camp::is_same<Compare, operators::less<RAJA::detail::IterVal<KeyIter>>>,
                        camp::is_same<Compare, operators::greater<RAJA::detail::IterVal<KeyIter>>>>>>>
stable_pairs(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>&,
             KeyIter,
             KeyIter,
             ValIter,
             Compare)
{
  static_assert (std::is_pointer<KeyIter>::value,
      "stable_sort_pairs<cuda_exec> is only implemented for pointers");
  static_assert (std::is_pointer<ValIter>::value,
      "stable_sort_pairs<cuda_exec> is only implemented for pointers");
  using K = RAJA::detail::IterVal<KeyIter>;
  static_assert (type_traits::is_arithmetic<K>::value,
      "stable_sort_pairs<cuda_exec> is only implemented for arithmetic types");
  static_assert (concepts::any_of<
      camp::is_same<Compare, operators::less<K>>,
      camp::is_same<Compare, operators::greater<K>>>::value,
      "stable_sort_pairs<cuda_exec> is only implemented for RAJA::operators::less or RAJA::operators::greater");
}




template <size_t BLOCK_SIZE, bool Async,
          typename KeyIter, typename ValIter>
concepts::enable_if<type_traits::is_arithmetic<RAJA::detail::IterVal<KeyIter>>,
                    std::is_pointer<KeyIter>,
                    std::is_pointer<ValIter>>
stable_pairs(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>&,
             KeyIter keys_begin,
             KeyIter keys_end,
             ValIter vals_begin,
             operators::less<RAJA::detail::IterVal<KeyIter>>)
{
  cudaStream_t stream = 0;

  using K = RAJA::detail::IterVal<KeyIter>;
  using V = RAJA::detail::IterVal<ValIter>;

  int len = std::distance(keys_begin, keys_end);
  int begin_bit=0;
  int end_bit=sizeof(K)*8;


  K* d_keys_out = cuda::device_mempool_type::getInstance().malloc<K>(len);
  V* d_vals_out = cuda::device_mempool_type::getInstance().malloc<V>(len);



  cub::DoubleBuffer<K> d_keys(keys_begin, d_keys_out);
  cub::DoubleBuffer<V> d_vals(vals_begin, d_vals_out);


  void* d_temp_storage = nullptr;
  size_t temp_storage_bytes = 0;
  { ::RAJA::cudaAssert((::cub::DeviceRadixSort::SortPairs(d_temp_storage, temp_storage_bytes, d_keys, d_vals, len, begin_bit, end_bit, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 327); };
# 329 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp"
  d_temp_storage =
      cuda::device_mempool_type::getInstance().malloc<unsigned char>(
          temp_storage_bytes);


  { ::RAJA::cudaAssert((::cub::DeviceRadixSort::SortPairs(d_temp_storage, temp_storage_bytes, d_keys, d_vals, len, begin_bit, end_bit, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 341); };
# 343 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp"
  cuda::device_mempool_type::getInstance().free(d_temp_storage);

  if (d_keys.Current() == d_keys_out) {


    { ::RAJA::cudaAssert((cudaMemcpyAsync(keys_begin, d_keys_out, len*sizeof(K), cudaMemcpyDefault, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 348); };
  }
  if (d_vals.Current() == d_vals_out) {


    { ::RAJA::cudaAssert((cudaMemcpyAsync(vals_begin, d_vals_out, len*sizeof(V), cudaMemcpyDefault, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 353); };
  }

  cuda::device_mempool_type::getInstance().free(d_keys_out);
  cuda::device_mempool_type::getInstance().free(d_vals_out);

  cuda::launch(stream);
  if (!Async) cuda::synchronize(stream);
}




template <size_t BLOCK_SIZE, bool Async,
          typename KeyIter, typename ValIter>
concepts::enable_if<type_traits::is_arithmetic<RAJA::detail::IterVal<KeyIter>>,
                    std::is_pointer<KeyIter>,
                    std::is_pointer<ValIter>>
stable_pairs(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>&,
             KeyIter keys_begin,
             KeyIter keys_end,
             ValIter vals_begin,
             operators::greater<RAJA::detail::IterVal<KeyIter>>)
{
  cudaStream_t stream = 0;

  using K = RAJA::detail::IterVal<KeyIter>;
  using V = RAJA::detail::IterVal<ValIter>;

  int len = std::distance(keys_begin, keys_end);
  int begin_bit=0;
  int end_bit=sizeof(K)*8;


  K* d_keys_out = cuda::device_mempool_type::getInstance().malloc<K>(len);
  V* d_vals_out = cuda::device_mempool_type::getInstance().malloc<V>(len);



  cub::DoubleBuffer<K> d_keys(keys_begin, d_keys_out);
  cub::DoubleBuffer<V> d_vals(vals_begin, d_vals_out);


  void* d_temp_storage = nullptr;
  size_t temp_storage_bytes = 0;
  { ::RAJA::cudaAssert((::cub::DeviceRadixSort::SortPairsDescending(d_temp_storage, temp_storage_bytes, d_keys, d_vals, len, begin_bit, end_bit, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 405); };
# 407 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp"
  d_temp_storage =
      cuda::device_mempool_type::getInstance().malloc<unsigned char>(
          temp_storage_bytes);


  { ::RAJA::cudaAssert((::cub::DeviceRadixSort::SortPairsDescending(d_temp_storage, temp_storage_bytes, d_keys, d_vals, len, begin_bit, end_bit, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 419); };
# 421 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp"
  cuda::device_mempool_type::getInstance().free(d_temp_storage);

  if (d_keys.Current() == d_keys_out) {


    { ::RAJA::cudaAssert((cudaMemcpyAsync(keys_begin, d_keys_out, len*sizeof(K), cudaMemcpyDefault, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 426); };
  }
  if (d_vals.Current() == d_vals_out) {


    { ::RAJA::cudaAssert((cudaMemcpyAsync(vals_begin, d_vals_out, len*sizeof(V), cudaMemcpyDefault, stream)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/sort.hpp", 431); };
  }

  cuda::device_mempool_type::getInstance().free(d_keys_out);
  cuda::device_mempool_type::getInstance().free(d_vals_out);

  cuda::launch(stream);
  if (!Async) cuda::synchronize(stream);
}





template <size_t BLOCK_SIZE, bool Async,
          typename KeyIter, typename ValIter, typename Compare>
concepts::enable_if<concepts::negate<concepts::all_of<
                      type_traits::is_arithmetic<RAJA::detail::IterVal<KeyIter>>,
                      std::is_pointer<KeyIter>,
                      std::is_pointer<ValIter>,
                      concepts::any_of<
                        camp::is_same<Compare, operators::less<RAJA::detail::IterVal<KeyIter>>>,
                        camp::is_same<Compare, operators::greater<RAJA::detail::IterVal<KeyIter>>>>>>>
unstable_pairs(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>&,
               KeyIter,
               KeyIter,
               ValIter,
               Compare)
{
  static_assert (std::is_pointer<KeyIter>::value,
      "sort_pairs<cuda_exec> is only implemented for pointers");
  static_assert (std::is_pointer<ValIter>::value,
      "sort_pairs<cuda_exec> is only implemented for pointers");
  using K = RAJA::detail::IterVal<KeyIter>;
  static_assert (type_traits::is_arithmetic<K>::value,
      "sort_pairs<cuda_exec> is only implemented for arithmetic types");
  static_assert (concepts::any_of<
      camp::is_same<Compare, operators::less<K>>,
      camp::is_same<Compare, operators::greater<K>>>::value,
      "sort_pairs<cuda_exec> is only implemented for RAJA::operators::less or RAJA::operators::greater");
}




template <size_t BLOCK_SIZE, bool Async,
          typename KeyIter, typename ValIter>
concepts::enable_if<type_traits::is_arithmetic<RAJA::detail::IterVal<KeyIter>>,
                    std::is_pointer<KeyIter>,
                    std::is_pointer<ValIter>>
unstable_pairs(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>& p,
               KeyIter keys_begin,
               KeyIter keys_end,
               ValIter vals_begin,
               operators::less<RAJA::detail::IterVal<KeyIter>> comp)
{
  stable_pairs(p, keys_begin, keys_end, vals_begin, comp);
}




template <size_t BLOCK_SIZE, bool Async,
          typename KeyIter, typename ValIter>
concepts::enable_if<type_traits::is_arithmetic<RAJA::detail::IterVal<KeyIter>>,
                    std::is_pointer<KeyIter>,
                    std::is_pointer<ValIter>>
unstable_pairs(const ::RAJA::cuda_exec<BLOCK_SIZE, Async>& p,
               KeyIter keys_begin,
               KeyIter keys_end,
               ValIter vals_begin,
               operators::greater<RAJA::detail::IterVal<KeyIter>> comp)
{
  stable_pairs(p, keys_begin, keys_end, vals_begin, comp);
}

}

}

}
# 36 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel.hpp" 1
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Conditional.hpp" 1
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Conditional.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/internal.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/internal.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 1 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 3

# 1 "/usr/include/assert.h" 1 3 4
# 65 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 2 3
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/internal.hpp" 2
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/climits" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/climits" 3
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/internal.hpp" 2
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/internal.hpp"
namespace RAJA
{


namespace internal
{

inline __attribute__((always_inline))
size_t get_size(cuda_dim_t dims)
{
  if(dims.x == 0 && dims.y == 0 && dims.z == 0){
    return 0;
  }
  return size_t(dims.x ? dims.x : 1) *
         size_t(dims.y ? dims.y : 1) *
         size_t(dims.z ? dims.z : 1);
}

struct LaunchDims {

  cuda_dim_t blocks;
  cuda_dim_t min_blocks;
  cuda_dim_t threads;
  cuda_dim_t min_threads;

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  LaunchDims() : blocks{0,0,0}, min_blocks{0,0,0},
                 threads{0,0,0}, min_threads{0,0,0} {}


  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  LaunchDims(LaunchDims const &c) :
  blocks(c.blocks), min_blocks(c.min_blocks),
  threads(c.threads), min_threads(c.min_threads)
  {
  }

  inline __attribute__((always_inline))
  LaunchDims max(LaunchDims const &c) const
  {
    LaunchDims result;

    result.blocks.x = std::max(c.blocks.x, blocks.x);
    result.blocks.y = std::max(c.blocks.y, blocks.y);
    result.blocks.z = std::max(c.blocks.z, blocks.z);

    result.min_blocks.x = std::max(c.min_blocks.x, min_blocks.x);
    result.min_blocks.y = std::max(c.min_blocks.y, min_blocks.y);
    result.min_blocks.z = std::max(c.min_blocks.z, min_blocks.z);

    result.threads.x = std::max(c.threads.x, threads.x);
    result.threads.y = std::max(c.threads.y, threads.y);
    result.threads.z = std::max(c.threads.z, threads.z);

    result.min_threads.x = std::max(c.min_threads.x, min_threads.x);
    result.min_threads.y = std::max(c.min_threads.y, min_threads.y);
    result.min_threads.z = std::max(c.min_threads.z, min_threads.z);

    return result;
  }

  inline __attribute__((always_inline))
  size_t num_blocks() const {
    return get_size(blocks);
  }

  inline __attribute__((always_inline))
  size_t num_threads() const {
    return get_size(threads);
  }


  inline __attribute__((always_inline))
  void clamp_to_min_blocks() {
    blocks.x = std::max(min_blocks.x, blocks.x);
    blocks.y = std::max(min_blocks.y, blocks.y);
    blocks.z = std::max(min_blocks.z, blocks.z);
  };

  inline __attribute__((always_inline))
  void clamp_to_min_threads() {
    threads.x = std::max(min_threads.x, threads.x);
    threads.y = std::max(min_threads.y, threads.y);
    threads.z = std::max(min_threads.z, threads.z);
  };

};


struct CudaFixedMaxBlocksData
{
  int multiProcessorCount;
  int maxThreadsPerMultiProcessor;
};

inline __attribute__((always_inline))
size_t cuda_max_blocks(size_t block_size)
{
  static CudaFixedMaxBlocksData data = {-1, -1};

  if (data.multiProcessorCount < 0) {
    cudaDeviceProp& prop = cuda::device_prop();
    data.multiProcessorCount = prop.multiProcessorCount;
    data.maxThreadsPerMultiProcessor = prop.maxThreadsPerMultiProcessor;
  }

  size_t max_blocks = data.multiProcessorCount *
                  (data.maxThreadsPerMultiProcessor / block_size);



  return max_blocks;
}

struct CudaOccMaxBlocksThreadsData
{
  int prev_shmem_size;
  int max_blocks;
  int max_threads;
};

template < typename , typename Func >
inline __attribute__((always_inline))
void cuda_occupancy_max_blocks_threads(Func&& func, int shmem_size,
                                       size_t &max_blocks, size_t &max_threads)
{
  static CudaOccMaxBlocksThreadsData data = {-1, -1, -1};

  if (data.prev_shmem_size != shmem_size) {

    { ::RAJA::cudaAssert((cudaOccupancyMaxPotentialBlockSize( &data.max_blocks, &data.max_threads, func, shmem_size)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/internal.hpp", 173); };


    data.prev_shmem_size = shmem_size;

  }

  max_blocks = data.max_blocks;
  max_threads = data.max_threads;

}

struct CudaOccMaxBlocksFixedThreadsData
{
  int prev_shmem_size;
  int max_blocks;
  int multiProcessorCount;
};

template < typename , size_t num_threads, typename Func >
inline __attribute__((always_inline))
void cuda_occupancy_max_blocks(Func&& func, int shmem_size,
                               size_t &max_blocks)
{
  static CudaOccMaxBlocksFixedThreadsData data = {-1, -1, -1};

  if (data.prev_shmem_size != shmem_size) {

    { ::RAJA::cudaAssert((cudaOccupancyMaxActiveBlocksPerMultiprocessor( &data.max_blocks, func, num_threads, shmem_size)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/internal.hpp", 201); };


    if (data.multiProcessorCount < 0) {

      data.multiProcessorCount = cuda::device_prop().multiProcessorCount;

    }

    data.max_blocks *= data.multiProcessorCount;

    data.prev_shmem_size = shmem_size;

  }

  max_blocks = data.max_blocks;

}

struct CudaOccMaxBlocksVariableThreadsData
{
  int prev_shmem_size;
  size_t prev_num_threads;
  size_t max_blocks;
  int multiProcessorCount;
};

template < typename , typename Func >
inline __attribute__((always_inline))
void cuda_occupancy_max_blocks(Func&& func, int shmem_size,
                               size_t &max_blocks, size_t num_threads)
{
  static CudaOccMaxBlocksVariableThreadsData data = {0, 0, 0, 0};

  if ( data.prev_shmem_size != shmem_size ||
       data.prev_num_threads != num_threads ) {

    int max_blocks(0);
    { ::RAJA::cudaAssert((cudaOccupancyMaxActiveBlocksPerMultiprocessor( &max_blocks, func, static_cast<int>(num_threads), shmem_size)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/internal.hpp", 239); };


    data.max_blocks = max_blocks;

    if (data.multiProcessorCount < 0) {

      data.multiProcessorCount = cuda::device_prop().multiProcessorCount;

    }

    data.max_blocks *= data.multiProcessorCount;

    data.prev_shmem_size = shmem_size;
    data.prev_num_threads = num_threads;

  }

  max_blocks = data.max_blocks;

}



template <camp::idx_t cur_stmt, camp::idx_t num_stmts, typename StmtList>
struct CudaStatementListExecutorHelper {

  using next_helper_t =
      CudaStatementListExecutorHelper<cur_stmt + 1, num_stmts, StmtList>;

  using cur_stmt_t = camp::at_v<StmtList, cur_stmt>;

  template <typename Data>
  inline static __attribute__((device)) void exec(Data &data, bool thread_active)
  {

    cur_stmt_t::exec(data, thread_active);


    next_helper_t::exec(data, thread_active);
  }


  template <typename Data>
  inline static LaunchDims calculateDimensions(Data &data)
  {

    LaunchDims statement_dims = cur_stmt_t::calculateDimensions(data);


    LaunchDims next_dims = next_helper_t::calculateDimensions(data);


    return statement_dims.max(next_dims);
  }
};

template <camp::idx_t num_stmts, typename StmtList>
struct CudaStatementListExecutorHelper<num_stmts, num_stmts, StmtList> {

  template <typename Data>
  inline static __attribute__((device)) void exec(Data &, bool)
  {

  }

  template <typename Data>
  inline static LaunchDims calculateDimensions(Data &)
  {
    return LaunchDims();
  }
};


template <typename Data, typename Policy, typename Types>
struct CudaStatementExecutor;

template <typename Data, typename StmtList, typename Types>
struct CudaStatementListExecutor;


template <typename Data, typename... Stmts, typename Types>
struct CudaStatementListExecutor<Data, StatementList<Stmts...>, Types> {

  using enclosed_stmts_t =
      camp::list<CudaStatementExecutor<Data, Stmts, Types>...>;

  static constexpr size_t num_stmts = sizeof...(Stmts);

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    CudaStatementListExecutorHelper<0, num_stmts, enclosed_stmts_t>::exec(data, thread_active);
  }



  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {

    return CudaStatementListExecutorHelper<0, num_stmts, enclosed_stmts_t>::
        calculateDimensions(data);
  }
};


template <typename StmtList, typename Data, typename Types>
using cuda_statement_list_executor_t = CudaStatementListExecutor<
    Data,
    StmtList,
    Types>;



}
}
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Conditional.hpp" 2

namespace RAJA
{
namespace internal
{


template <typename Data,
          typename Conditional,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<Data,
                             statement::If<Conditional, EnclosedStmts...>,
                             Types> {

  using stmt_list_t = StatementList<EnclosedStmts...>;
  using enclosed_stmts_t = CudaStatementListExecutor<Data, stmt_list_t, Types>;


  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {
    if (Conditional::eval(data)) {


      enclosed_stmts_t::exec(data, thread_active);
    }
  }



  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {
    return enclosed_stmts_t::calculateDimensions(data);
  }
};


}
}
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/CudaKernel.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/CudaKernel.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 1 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 3

# 1 "/usr/include/assert.h" 1 3 4
# 65 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 2 3
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/CudaKernel.hpp" 2
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/climits" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/climits" 3
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/CudaKernel.hpp" 2
# 43 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/CudaKernel.hpp"
namespace RAJA
{
# 59 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/CudaKernel.hpp"
template <bool async0, size_t num_blocks, size_t num_threads>
struct cuda_launch {};







template <bool async0, size_t num_blocks, size_t num_threads>
using cuda_explicit_launch = cuda_launch<async0, num_blocks, num_threads>;







template <size_t num_threads0, bool async0>
using cuda_occ_calc_launch = cuda_launch<async0, 0, num_threads0>;

namespace statement
{






template <typename LaunchConfig, typename... EnclosedStmts>
struct CudaKernelExt
    : public internal::Statement<cuda_exec<0>, EnclosedStmts...> {
};
# 100 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/CudaKernel.hpp"
template <size_t num_blocks, size_t num_threads, typename... EnclosedStmts>
using CudaKernelExp =
    CudaKernelExt<cuda_launch<false, num_blocks, num_threads>, EnclosedStmts...>;







template <size_t num_blocks, size_t num_threads, typename... EnclosedStmts>
using CudaKernelExpAsync =
    CudaKernelExt<cuda_launch<true, num_blocks, num_threads>, EnclosedStmts...>;






template <typename... EnclosedStmts>
using CudaKernelOcc =
    CudaKernelExt<cuda_occ_calc_launch<1024, false>, EnclosedStmts...>;






template <typename... EnclosedStmts>
using CudaKernelOccAsync =
    CudaKernelExt<cuda_occ_calc_launch<1024, true>, EnclosedStmts...>;






template <size_t num_threads, typename... EnclosedStmts>
using CudaKernelFixed =
    CudaKernelExt<cuda_explicit_launch<false, operators::limits<size_t>::max(), num_threads>,
                  EnclosedStmts...>;






template <size_t num_threads, typename... EnclosedStmts>
using CudaKernelFixedAsync =
    CudaKernelExt<cuda_explicit_launch<true, operators::limits<size_t>::max(), num_threads>,
                  EnclosedStmts...>;





template <typename... EnclosedStmts>
using CudaKernel = CudaKernelFixed<1024, EnclosedStmts...>;





template <typename... EnclosedStmts>
using CudaKernelAsync = CudaKernelFixedAsync<1024, EnclosedStmts...>;

}

namespace internal
{





template <typename Data, typename Exec>
__attribute__((global)) void CudaKernelLauncher(Data data)
{

  using data_t = camp::decay<Data>;
  data_t private_data = data;

  Exec::exec(private_data, true);
}
# 193 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/CudaKernel.hpp"
template <size_t BlockSize, typename Data, typename Exec>
__attribute__((launch_bounds(BlockSize, 1))) __attribute__((global))
    void CudaKernelLauncherFixed(Data data)
{

  using data_t = camp::decay<Data>;
  data_t private_data = data;


  Exec::exec(private_data, true);
}
# 214 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/CudaKernel.hpp"
template<size_t BlockSize, typename Data, typename executor_t>
struct CudaKernelLauncherGetter
{
  using type = camp::decay<decltype(&internal::CudaKernelLauncherFixed<BlockSize, Data, executor_t>)>;
  static constexpr type get() noexcept
  {
    return internal::CudaKernelLauncherFixed<BlockSize, Data, executor_t>;
  }
};





template<typename Data, typename executor_t>
struct CudaKernelLauncherGetter<0, Data, executor_t>
{
  using type = camp::decay<decltype(&internal::CudaKernelLauncher<Data, executor_t>)>;
  static constexpr type get() noexcept
  {
    return internal::CudaKernelLauncher<Data, executor_t>;
  }
};







template<typename LaunchPolicy, typename StmtList, typename Data, typename Types>
struct CudaLaunchHelper;







template<bool async0, size_t num_blocks, size_t num_threads, typename StmtList, typename Data, typename Types>
struct CudaLaunchHelper<cuda_launch<async0, num_blocks, num_threads>,StmtList,Data,Types>
{
  using Self = CudaLaunchHelper;

  static constexpr bool async = async0;

  using executor_t = internal::cuda_statement_list_executor_t<StmtList, Data, Types>;

  using kernelGetter_t = CudaKernelLauncherGetter<(num_threads <= 0) ? 0 : num_threads, Data, executor_t>;

  inline static void recommended_blocks_threads(int shmem_size,
      size_t &recommended_blocks, size_t &recommended_threads)
  {
    auto func = kernelGetter_t::get();

    if (num_blocks <= 0) {

      if (num_threads <= 0) {





        internal::cuda_occupancy_max_blocks_threads<Self>(
            func, shmem_size, recommended_blocks, recommended_threads);

      } else {





        recommended_threads = num_threads;

        internal::cuda_occupancy_max_blocks<Self, num_threads>(
            func, shmem_size, recommended_blocks);

      }

    } else {

      if (num_threads <= 0) {





        recommended_threads = 1024;

      } else {




        recommended_threads = num_threads;

      }




      recommended_blocks = num_blocks;

    }
  }

  inline static void max_threads(int , size_t &max_threads)
  {
    if (num_threads <= 0) {





      max_threads = 1024;

    } else {




      max_threads = num_threads;

    }
  }

  inline static void max_blocks(int shmem_size,
      size_t &max_blocks, size_t actual_threads)
  {
    auto func = kernelGetter_t::get();

    if (num_blocks <= 0) {




      if (num_threads <= 0 ||
          num_threads != actual_threads) {




        internal::cuda_occupancy_max_blocks<Self>(
            func, shmem_size, max_blocks, actual_threads);

      } else {




        internal::cuda_occupancy_max_blocks<Self, num_threads>(
            func, shmem_size, max_blocks);

      }

    } else {




      max_blocks = num_blocks;

    }
  }

  static void launch(Data &&data,
                     internal::LaunchDims launch_dims,
                     size_t shmem,
                     cudaStream_t stream)
  {
    auto func = kernelGetter_t::get();

    void *args[] = {(void*)&data};
    RAJA::cuda::launch((const void*)func, launch_dims.blocks, launch_dims.threads, args, shmem, stream);
  }
};
# 400 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/CudaKernel.hpp"
inline
cuda_dim_t fitCudaDims(size_t limit, cuda_dim_t result, cuda_dim_t minimum = cuda_dim_t()){



  result.x = result.x ? result.x : 1;
  result.y = result.y ? result.y : 1;
  result.z = result.z ? result.z : 1;

  minimum.x = minimum.x ? minimum.x : 1;
  minimum.y = minimum.y ? minimum.y : 1;
  minimum.z = minimum.z ? minimum.z : 1;


  if(result.x * result.y * result.z <= limit) return result;


  if(result.x * result.y * minimum.z < limit){

    result.z = limit / (result.x*result.y);
    return result;
  }

  result.z = minimum.z;



  if(result.x * minimum.y * result.z < limit){

    result.y = limit / (result.x*result.z);
    return result;
  }

  result.y = minimum.y;



  if(minimum.x * result.y * result.z < limit){

    result.x = limit / (result.y*result.z);
    return result;
  }

  result.x = minimum.x;

  return result;
}





template <typename LaunchConfig, typename... EnclosedStmts, typename Types>
struct StatementExecutor<
    statement::CudaKernelExt<LaunchConfig, EnclosedStmts...>, Types> {

  using stmt_list_t = StatementList<EnclosedStmts...>;
  using StatementType =
      statement::CudaKernelExt<LaunchConfig, EnclosedStmts...>;

  template <typename Data>
  static inline void exec(Data &&data)
  {

    using data_t = camp::decay<Data>;
    using executor_t = cuda_statement_list_executor_t<stmt_list_t, data_t, Types>;
    using launch_t = CudaLaunchHelper<LaunchConfig, stmt_list_t, data_t, Types>;





    LaunchDims launch_dims = executor_t::calculateDimensions(data);



    size_t num_blocks = launch_dims.num_blocks();
    size_t num_threads = launch_dims.num_threads();
    if (num_blocks > 0 || num_threads > 0) {




      int shmem = 0;
      cudaStream_t stream = 0;





      size_t recommended_blocks;
      size_t recommended_threads;
      launch_t::recommended_blocks_threads(
          shmem, recommended_blocks, recommended_threads);





      size_t max_threads;
      launch_t::max_threads(shmem, max_threads);





      cuda_dim_t fit_threads{0,0,0};

      if ( recommended_threads >= get_size(launch_dims.min_threads) ) {

        fit_threads = fitCudaDims(
            recommended_threads, launch_dims.threads, launch_dims.min_threads);

      }




      if ( recommended_threads < max_threads &&
           get_size(fit_threads) != recommended_threads ) {

        fit_threads = fitCudaDims(
            max_threads, launch_dims.threads, launch_dims.min_threads);

      }

      launch_dims.threads = fit_threads;





      size_t max_blocks;
      launch_t::max_blocks(shmem, max_blocks, launch_dims.num_threads());

      size_t use_blocks;

      if ( launch_dims.num_threads() == recommended_threads ) {




        use_blocks = recommended_blocks;

      } else {




        use_blocks = max_blocks;

      }

      launch_dims.blocks = fitCudaDims(
          use_blocks, launch_dims.blocks, launch_dims.min_blocks);
# 563 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/CudaKernel.hpp"
      if(launch_dims.num_threads() > max_threads){
        RAJA_ABORT_OR_THROW("RAJA::kernel exceeds max num threads");
      }

      {



        auto cuda_data = RAJA::cuda::make_launch_body(
            launch_dims.blocks, launch_dims.threads, shmem, stream, data);





        launch_t::launch(std::move(cuda_data), launch_dims, shmem, stream);
      }




      if (!launch_t::async) { RAJA::cuda::synchronize(stream); }
    }
  }
};


}
}
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/For.hpp" 1
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/For.hpp"
namespace RAJA
{

namespace internal
{







template <typename Data,
          camp::idx_t ArgumentId,
          int ThreadDim,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::For<ArgumentId, RAJA::cuda_thread_xyz_direct<ThreadDim>, EnclosedStmts...>, Types> {

  using stmt_list_t = StatementList<EnclosedStmts...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
      CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using diff_t = segment_diff_type<ArgumentId, Data>;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {
    diff_t len = segment_length<ArgumentId>(data);
    diff_t i = get_cuda_dim<ThreadDim>(threadIdx);


    data.template assign_offset<ArgumentId>(i);


    enclosed_stmts_t::exec(data, thread_active && (i<len));
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {
    diff_t len = segment_length<ArgumentId>(data);


    LaunchDims dims;
    set_cuda_dim<ThreadDim>(dims.threads, len);


    set_cuda_dim<ThreadDim>(dims.min_threads, len);


    LaunchDims enclosed_dims = enclosed_stmts_t::calculateDimensions(data);
    return dims.max(enclosed_dims);
  }
};







template <typename Data,
          camp::idx_t ArgumentId,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::For<ArgumentId, RAJA::cuda_warp_direct, EnclosedStmts...>,
    Types> {

  using stmt_list_t = StatementList<EnclosedStmts...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
      CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using diff_t = segment_diff_type<ArgumentId, Data>;


  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {
    diff_t len = segment_length<ArgumentId>(data);
    diff_t i = threadIdx.x;


    data.template assign_offset<ArgumentId>(i);


    enclosed_stmts_t::exec(data, thread_active && (i<len));
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {

    LaunchDims dims = enclosed_stmts_t::calculateDimensions(data);


    diff_t len = RAJA::policy::cuda::WARP_SIZE;


    set_cuda_dim<0>(dims.threads, len);


    set_cuda_dim<0>(dims.min_threads, len);

    return dims;
  }
};
# 162 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/For.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          int ThreadDim,
          int MinThreads,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::For<ArgumentId, RAJA::cuda_thread_xyz_loop<ThreadDim, MinThreads>, EnclosedStmts...>,
    Types> {

  using stmt_list_t = StatementList<EnclosedStmts...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
      CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using diff_t = segment_diff_type<ArgumentId, Data>;


  static
  inline __attribute__((device)) void exec(Data &data, bool thread_active)
  {

    diff_t len = segment_length<ArgumentId>(data);
    diff_t i_init = get_cuda_dim<ThreadDim>(threadIdx);
    diff_t i_stride = get_cuda_dim<ThreadDim>(blockDim);


    for (diff_t ii = 0; ii < len; ii += i_stride) {
      diff_t i = ii + i_init;



      bool have_work = i < len;


      data.template assign_offset<ArgumentId>(i);


      enclosed_stmts_t::exec(data, thread_active && have_work);
    }
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {
    diff_t len = segment_length<ArgumentId>(data);


    LaunchDims dims;
    set_cuda_dim<ThreadDim>(dims.threads, len);



    set_cuda_dim<ThreadDim>(dims.min_threads, MinThreads);


    LaunchDims enclosed_dims = enclosed_stmts_t::calculateDimensions(data);
    return dims.max(enclosed_dims);
  }
};







template <typename Data,
          camp::idx_t ArgumentId,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::For<ArgumentId, RAJA::cuda_warp_loop, EnclosedStmts...>,
    Types> {

  using stmt_list_t = StatementList<EnclosedStmts...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
      CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using diff_t = segment_diff_type<ArgumentId, Data>;


  static
  inline __attribute__((device)) void exec(Data &data, bool thread_active)
  {

    diff_t len = segment_length<ArgumentId>(data);
    diff_t i_init = threadIdx.x;
    diff_t i_stride = RAJA::policy::cuda::WARP_SIZE;


    for (diff_t ii = 0; ii < len; ii += i_stride) {
      diff_t i = ii + i_init;



      bool have_work = i < len;


      data.template assign_offset<ArgumentId>(i);


      enclosed_stmts_t::exec(data, thread_active && have_work);
    }
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {

    LaunchDims dims = enclosed_stmts_t::calculateDimensions(data);


    diff_t len = RAJA::policy::cuda::WARP_SIZE;


    set_cuda_dim<0>(dims.threads, len);


    set_cuda_dim<0>(dims.min_threads, len);

    return dims;
  }
};







template <typename Data,
          camp::idx_t ArgumentId,
          typename Mask,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::For<ArgumentId, RAJA::cuda_warp_masked_direct<Mask>,
                 EnclosedStmts ...>,
  Types> {

  using stmt_list_t = StatementList<EnclosedStmts ...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
          CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using mask_t = Mask;

  using diff_t = segment_diff_type<ArgumentId, Data>;

  static_assert(mask_t::max_masked_size <= RAJA::policy::cuda::WARP_SIZE,
                "BitMask is too large for CUDA warp size");

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {
    diff_t len = segment_length<ArgumentId>(data);

    diff_t i = mask_t::maskValue(threadIdx.x);


    data.template assign_offset<ArgumentId>(i);


    enclosed_stmts_t::exec(data, thread_active && (i<len));
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {

    LaunchDims dims = enclosed_stmts_t::calculateDimensions(data);



    diff_t len = RAJA::policy::cuda::WARP_SIZE;


    set_cuda_dim<0>(dims.threads, len);


    set_cuda_dim<0>(dims.min_threads, len);

    return(dims);
  }
};
# 377 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/For.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename Mask,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::For<ArgumentId, RAJA::cuda_warp_masked_loop<Mask>,
                 EnclosedStmts ...>,
  Types> {

  using stmt_list_t = StatementList<EnclosedStmts ...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
          CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using mask_t = Mask;

  using diff_t = segment_diff_type<ArgumentId, Data>;

  static_assert(mask_t::max_masked_size <= RAJA::policy::cuda::WARP_SIZE,
                "BitMask is too large for CUDA warp size");

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    diff_t len = segment_length<ArgumentId>(data);
    diff_t i_init = mask_t::maskValue(threadIdx.x);
    diff_t i_stride = (diff_t) mask_t::max_masked_size;


    for (diff_t ii = 0; ii < len; ii += i_stride) {
      diff_t i = ii + i_init;



      bool have_work = i < len;


      data.template assign_offset<ArgumentId>(i);


      enclosed_stmts_t::exec(data, thread_active && have_work);
    }
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {

    LaunchDims dims = enclosed_stmts_t::calculateDimensions(data);



    diff_t len = RAJA::policy::cuda::WARP_SIZE;


    set_cuda_dim<0>(dims.threads, len);


    set_cuda_dim<0>(dims.min_threads, len);

    return(dims);
  }
};







template <typename Data,
          camp::idx_t ArgumentId,
          typename Mask,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::For<ArgumentId, RAJA::cuda_thread_masked_direct<Mask>,
                 EnclosedStmts ...>,
  Types> {

  using stmt_list_t = StatementList<EnclosedStmts ...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
          CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using mask_t = Mask;

  using diff_t = segment_diff_type<ArgumentId, Data>;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {
    diff_t len = segment_length<ArgumentId>(data);

    diff_t i = mask_t::maskValue(threadIdx.x);


    data.template assign_offset<ArgumentId>(i);


    enclosed_stmts_t::exec(data, thread_active && (i<len));
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {

    LaunchDims dims;



    diff_t len = mask_t::max_input_size;


    set_cuda_dim<0>(dims.threads, len);


    set_cuda_dim<0>(dims.min_threads, len);

    LaunchDims enclosed_dims = enclosed_stmts_t::calculateDimensions(data);
    return(dims.max(enclosed_dims));
  }
};
# 527 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/For.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename Mask,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::For<ArgumentId, RAJA::cuda_thread_masked_loop<Mask>,
                 EnclosedStmts ...>,
  Types> {

  using stmt_list_t = StatementList<EnclosedStmts ...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
          CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using mask_t = Mask;

  using diff_t = segment_diff_type<ArgumentId, Data>;


  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    diff_t len = segment_length<ArgumentId>(data);
    diff_t i_init = mask_t::maskValue(threadIdx.x);
    diff_t i_stride = (diff_t) mask_t::max_masked_size;


    for (diff_t ii = 0; ii < len; ii += i_stride) {
      diff_t i = ii + i_init;



      bool have_work = i < len;


      data.template assign_offset<ArgumentId>(i);


      enclosed_stmts_t::exec(data, thread_active && have_work);
    }
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {

    LaunchDims dims;



    diff_t len = mask_t::max_input_size;


    set_cuda_dim<0>(dims.threads, len);


    set_cuda_dim<0>(dims.min_threads, len);

    LaunchDims enclosed_dims = enclosed_stmts_t::calculateDimensions(data);
    return(dims.max(enclosed_dims));
  }
};







template <typename Data,
          camp::idx_t ArgumentId,
          int BlockDim,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::For<ArgumentId, RAJA::cuda_block_xyz_direct<BlockDim>, EnclosedStmts...>,
    Types> {

  using stmt_list_t = StatementList<EnclosedStmts...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
      CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using diff_t = segment_diff_type<ArgumentId, Data>;


  static
  inline __attribute__((device)) void exec(Data &data, bool thread_active)
  {
    diff_t len = segment_length<ArgumentId>(data);
    diff_t i = get_cuda_dim<BlockDim>(blockIdx);

    if (i < len) {


      data.template assign_offset<ArgumentId>(i);


      enclosed_stmts_t::exec(data, thread_active);
    }
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {
    diff_t len = segment_length<ArgumentId>(data);


    LaunchDims dims;
    set_cuda_dim<BlockDim>(dims.blocks, len);


    set_cuda_dim<BlockDim>(dims.min_blocks, len);


    LaunchDims enclosed_dims = enclosed_stmts_t::calculateDimensions(data);
    return dims.max(enclosed_dims);
  }
};







template <typename Data,
          camp::idx_t ArgumentId,
          int BlockDim,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::For<ArgumentId, RAJA::cuda_block_xyz_loop<BlockDim>, EnclosedStmts...>,
    Types> {

  using stmt_list_t = StatementList<EnclosedStmts...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
      CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using diff_t = segment_diff_type<ArgumentId, Data>;


  static
  inline __attribute__((device)) void exec(Data &data, bool thread_active)
  {

    diff_t len = segment_length<ArgumentId>(data);
    diff_t i_init = get_cuda_dim<BlockDim>(blockIdx);
    diff_t i_stride = get_cuda_dim<BlockDim>(gridDim);


    for(diff_t i = i_init;i < len;i += i_stride){


      data.template assign_offset<ArgumentId>(i);


      enclosed_stmts_t::exec(data, thread_active);
    }
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {
    diff_t len = segment_length<ArgumentId>(data);


    LaunchDims dims;
    set_cuda_dim<BlockDim>(dims.blocks, len);


    LaunchDims enclosed_dims = enclosed_stmts_t::calculateDimensions(data);
    return dims.max(enclosed_dims);
  }
};
# 734 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/For.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::For<ArgumentId, seq_exec, EnclosedStmts...>,
    Types> {

  using stmt_list_t = StatementList<EnclosedStmts...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
      CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using diff_t = segment_diff_type<ArgumentId, Data>;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {
    diff_t len = segment_length<ArgumentId>(data);

    for(diff_t i = 0;i < len;++ i){

      data.template assign_offset<ArgumentId>(i);


      enclosed_stmts_t::exec(data, thread_active);
    }
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {
    return enclosed_stmts_t::calculateDimensions(data);
  }
};




}
}
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/ForICount.hpp" 1
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/ForICount.hpp"
namespace RAJA
{

namespace internal
{
# 41 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/ForICount.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          int ThreadDim,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::ForICount<ArgumentId, ParamId, RAJA::cuda_thread_xyz_direct<ThreadDim>, EnclosedStmts...>,
    Types>
    : public CudaStatementExecutor<
        Data,
        statement::For<ArgumentId, RAJA::cuda_thread_xyz_direct<ThreadDim>, EnclosedStmts...>, Types> {

  using Base = CudaStatementExecutor<
        Data,
        statement::For<ArgumentId, RAJA::cuda_thread_xyz_direct<ThreadDim>, EnclosedStmts...>,
        Types>;

  using typename Base::enclosed_stmts_t;
  using typename Base::diff_t;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {
    diff_t len = segment_length<ArgumentId>(data);
    diff_t i = get_cuda_dim<ThreadDim>(threadIdx);


    data.template assign_offset<ArgumentId>(i);
    data.template assign_param<ParamId>(i);


    enclosed_stmts_t::exec(data, thread_active && (i<len));

  }
};
# 91 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/ForICount.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::ForICount<ArgumentId, ParamId, RAJA::cuda_warp_direct,
                       EnclosedStmts ...>,
  Types>
  : public CudaStatementExecutor<
    Data,
    statement::For<ArgumentId, RAJA::cuda_warp_direct,
                   EnclosedStmts ...>, Types > {

  using Base = CudaStatementExecutor<
          Data,
          statement::For<ArgumentId, RAJA::cuda_warp_direct,
                         EnclosedStmts ...>, Types >;

  using typename Base::enclosed_stmts_t;
  using typename Base::diff_t;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {
    diff_t len = segment_length<ArgumentId>(data);
    diff_t i = get_cuda_dim<0>(threadIdx);


    data.template assign_offset<ArgumentId>(i);
    data.template assign_param<ParamId>(i);


    enclosed_stmts_t::exec(data, thread_active && (i<len));

  }
};
# 139 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/ForICount.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::ForICount<ArgumentId, ParamId, RAJA::cuda_warp_loop,
                       EnclosedStmts ...>, Types >
  : public CudaStatementExecutor<
    Data,
    statement::For<ArgumentId, RAJA::cuda_warp_loop,
                   EnclosedStmts ...>, Types > {

  using Base = CudaStatementExecutor<
          Data,
          statement::For<ArgumentId, RAJA::cuda_warp_loop,
                         EnclosedStmts ...>, Types >;

  using typename Base::enclosed_stmts_t;
  using typename Base::diff_t;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    diff_t len = segment_length<ArgumentId>(data);
    diff_t i_init = threadIdx.x;
    diff_t i_stride = RAJA::policy::cuda::WARP_SIZE;


    for (diff_t ii = 0; ii < len; ii += i_stride) {
      diff_t i = ii + i_init;



      bool have_work = i < len;


      data.template assign_offset<ArgumentId>(i);
      data.template assign_param<ParamId>(i);


      enclosed_stmts_t::exec(data, thread_active && have_work);
    }
  }
};







template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          typename Mask,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::ForICount<ArgumentId, ParamId,
                       RAJA::cuda_warp_masked_direct<Mask>,
                       EnclosedStmts ...>, Types >
  : public CudaStatementExecutor<
    Data,
    statement::For<ArgumentId, RAJA::cuda_warp_masked_direct<Mask>,
                   EnclosedStmts ...>, Types > {

  using Base = CudaStatementExecutor<
          Data,
          statement::For<ArgumentId, RAJA::cuda_warp_masked_direct<Mask>,
                         EnclosedStmts ...>, Types >;

  using typename Base::diff_t;

  using stmt_list_t = StatementList<EnclosedStmts ...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
          CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using mask_t = Mask;

  static_assert(mask_t::max_masked_size <= RAJA::policy::cuda::WARP_SIZE,
                "BitMask is too large for CUDA warp size");

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {
    diff_t len = segment_length<ArgumentId>(data);

    diff_t i = mask_t::maskValue(threadIdx.x);


    data.template assign_offset<ArgumentId>(i);
    data.template assign_param<ParamId>(i);


    enclosed_stmts_t::exec(data, thread_active && (i<len));
  }

};
# 257 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/ForICount.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          typename Mask,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::ForICount<ArgumentId, ParamId,
                       RAJA::cuda_warp_masked_loop<Mask>,
                       EnclosedStmts ...>, Types >
  : public CudaStatementExecutor<
    Data,
    statement::For<ArgumentId, RAJA::cuda_warp_masked_loop<Mask>,
                   EnclosedStmts ...>, Types > {

  using Base = CudaStatementExecutor<
          Data,
          statement::For<ArgumentId, RAJA::cuda_warp_masked_loop<Mask>,
                         EnclosedStmts ...>, Types >;

  using typename Base::diff_t;

  using stmt_list_t = StatementList<EnclosedStmts ...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
          CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using mask_t = Mask;

  static_assert(mask_t::max_masked_size <= RAJA::policy::cuda::WARP_SIZE,
                "BitMask is too large for CUDA warp size");

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    diff_t len = segment_length<ArgumentId>(data);
    diff_t i_init = mask_t::maskValue(threadIdx.x);
    diff_t i_stride = (diff_t) mask_t::max_masked_size;


    for (diff_t ii = 0; ii < len; ii += i_stride) {
      diff_t i = ii + i_init;



      bool have_work = i < len;


      data.template assign_offset<ArgumentId>(i);
      data.template assign_param<ParamId>(i);


      enclosed_stmts_t::exec(data, thread_active && have_work);
    }
  }

};
# 330 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/ForICount.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          typename Mask,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::ForICount<ArgumentId, ParamId,
                       RAJA::cuda_thread_masked_direct<Mask>,
                       EnclosedStmts ...>, Types >
  : public CudaStatementExecutor<
    Data,
    statement::For<ArgumentId, RAJA::cuda_thread_masked_direct<Mask>,
                   EnclosedStmts ...>, Types > {

  using Base = CudaStatementExecutor<
          Data,
          statement::For<ArgumentId, RAJA::cuda_thread_masked_direct<Mask>,
                         EnclosedStmts ...>, Types >;

  using typename Base::diff_t;

  using stmt_list_t = StatementList<EnclosedStmts ...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
          CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using mask_t = Mask;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {
    diff_t len = segment_length<ArgumentId>(data);

    diff_t i = mask_t::maskValue(threadIdx.x);


    data.template assign_offset<ArgumentId>(i);
    data.template assign_param<ParamId>(i);


    enclosed_stmts_t::exec(data, thread_active && (i<len));
  }

};
# 391 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/ForICount.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          typename Mask,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::ForICount<ArgumentId, ParamId,
                       RAJA::cuda_thread_masked_loop<Mask>,
                       EnclosedStmts ...>, Types >
  : public CudaStatementExecutor<
    Data,
    statement::For<ArgumentId, RAJA::cuda_thread_masked_loop<Mask>,
                   EnclosedStmts ...>, Types > {

  using Base = CudaStatementExecutor<
          Data,
          statement::For<ArgumentId, RAJA::cuda_thread_masked_loop<Mask>,
                         EnclosedStmts ...>, Types >;

  using typename Base::diff_t;

  using stmt_list_t = StatementList<EnclosedStmts ...>;


  using NewTypes = setSegmentTypeFromData<Types, ArgumentId, Data>;

  using enclosed_stmts_t =
          CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  using mask_t = Mask;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    diff_t len = segment_length<ArgumentId>(data);
    diff_t i_init = mask_t::maskValue(threadIdx.x);
    diff_t i_stride = (diff_t) mask_t::max_masked_size;


    for (diff_t ii = 0; ii < len; ii += i_stride) {
      diff_t i = ii + i_init;



      bool have_work = i < len;


      data.template assign_offset<ArgumentId>(i);
      data.template assign_param<ParamId>(i);


      enclosed_stmts_t::exec(data, thread_active && have_work);
    }
  }

};
# 464 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/ForICount.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          int ThreadDim,
          int MinThreads,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::ForICount<ArgumentId, ParamId, RAJA::cuda_thread_xyz_loop<ThreadDim, MinThreads>, EnclosedStmts...>,
    Types>
    : public CudaStatementExecutor<
        Data,
        statement::For<ArgumentId, RAJA::cuda_thread_xyz_loop<ThreadDim, MinThreads>, EnclosedStmts...>,
        Types> {

  using Base = CudaStatementExecutor<
        Data,
        statement::For<ArgumentId, RAJA::cuda_thread_xyz_loop<ThreadDim, MinThreads>, EnclosedStmts...>,
        Types>;

  using typename Base::enclosed_stmts_t;
  using typename Base::diff_t;

  static
  inline __attribute__((device)) void exec(Data &data, bool thread_active)
  {

    diff_t len = segment_length<ArgumentId>(data);
    diff_t i_init = get_cuda_dim<ThreadDim>(threadIdx);
    diff_t i_stride = get_cuda_dim<ThreadDim>(blockDim);


    for (diff_t ii = 0; ii < len; ii += i_stride) {
      diff_t i = ii + i_init;



      bool have_work = i < len;


      data.template assign_offset<ArgumentId>(i);
      data.template assign_param<ParamId>(i);


      enclosed_stmts_t::exec(data, thread_active && have_work);
    }
  }
};
# 522 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/ForICount.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          int BlockDim,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::ForICount<ArgumentId, ParamId, RAJA::cuda_block_xyz_direct<BlockDim>, EnclosedStmts...>,
    Types>
    : public CudaStatementExecutor<
        Data,
        statement::For<ArgumentId, RAJA::cuda_block_xyz_direct<BlockDim>, EnclosedStmts...>,
        Types> {

  using Base = CudaStatementExecutor<
      Data,
      statement::For<ArgumentId, RAJA::cuda_block_xyz_direct<BlockDim>, EnclosedStmts...>,
      Types>;

  using typename Base::enclosed_stmts_t;
  using typename Base::diff_t;

  static
  inline __attribute__((device)) void exec(Data &data, bool thread_active)
  {

    diff_t len = segment_length<ArgumentId>(data);
    diff_t i = get_cuda_dim<BlockDim>(blockIdx);

    if (i < len) {


      data.template assign_offset<ArgumentId>(i);
      data.template assign_param<ParamId>(i);


      enclosed_stmts_t::exec(data, thread_active);
    }
  }
};
# 571 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/ForICount.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          int BlockDim,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::ForICount<ArgumentId, ParamId, RAJA::cuda_block_xyz_loop<BlockDim>, EnclosedStmts...>,
    Types>
    : public CudaStatementExecutor<
        Data,
        statement::For<ArgumentId, RAJA::cuda_block_xyz_loop<BlockDim>, EnclosedStmts...>,
        Types> {

  using Base = CudaStatementExecutor<
      Data,
      statement::For<ArgumentId, RAJA::cuda_block_xyz_loop<BlockDim>, EnclosedStmts...>,
      Types>;

  using typename Base::enclosed_stmts_t;
  using typename Base::diff_t;

  static
  inline __attribute__((device)) void exec(Data &data, bool thread_active)
  {

    diff_t len = segment_length<ArgumentId>(data);
    diff_t i_init = get_cuda_dim<BlockDim>(blockIdx);
    diff_t i_stride = get_cuda_dim<BlockDim>(gridDim);


    for (diff_t i = i_init; i < len; i += i_stride) {


      data.template assign_offset<ArgumentId>(i);
      data.template assign_param<ParamId>(i);


      enclosed_stmts_t::exec(data, thread_active);
    }
  }
};
# 623 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/ForICount.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::ForICount<ArgumentId, ParamId, seq_exec, EnclosedStmts...>, Types >
    : public CudaStatementExecutor<
        Data,
        statement::For<ArgumentId, seq_exec, EnclosedStmts...>, Types > {

  using Base = CudaStatementExecutor<
      Data,
      statement::For<ArgumentId, seq_exec, EnclosedStmts...>, Types >;

  using typename Base::enclosed_stmts_t;
  using typename Base::diff_t;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {
    diff_t len = segment_length<ArgumentId>(data);

    for(diff_t i = 0;i < len;++ i){

      data.template assign_offset<ArgumentId>(i);
      data.template assign_param<ParamId>(i);


      enclosed_stmts_t::exec(data, thread_active);
    }
  }
};





}
}
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Hyperplane.hpp" 1
# 33 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Hyperplane.hpp"
namespace RAJA
{
namespace internal
{


template <typename Data,
          camp::idx_t HpArgumentId,
          camp::idx_t... Args,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<Data,
                             statement::Hyperplane<HpArgumentId,
                                                   seq_exec,
                                                   ArgList<Args...>,
                                                   EnclosedStmts...>,
                             Types> {

  using stmt_list_t = StatementList<EnclosedStmts...>;


  using NewTypes = setSegmentTypeFromData<Types, HpArgumentId, Data>;

  using enclosed_stmts_t = CudaStatementListExecutor<Data, stmt_list_t, NewTypes>;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {


    int hp_len = segment_length<HpArgumentId>(data) +
                 foldl(RAJA::operators::plus<int>(),
                               segment_length<Args>(data)...);

    int h_args = foldl(RAJA::operators::plus<idx_t>(),
        camp::get<Args>(data.offset_tuple)...);


    auto i_len = segment_length<HpArgumentId>(data);
# 82 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Hyperplane.hpp"
    for (int h = 0; h < hp_len; ++h) {



      idx_t i = h - h_args;



      data.template assign_offset<HpArgumentId>(i);
      enclosed_stmts_t::exec(data, thread_active && (i >= 0 && i < i_len));
    }
  }



  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {
    return enclosed_stmts_t::calculateDimensions(data);
  }
};




}

}
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/InitLocalMem.hpp" 1
# 33 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/InitLocalMem.hpp"
namespace RAJA
{

struct cuda_thread_mem;
struct cuda_shared_mem;

namespace internal
{


template <typename Data, camp::idx_t... Indices, typename... EnclosedStmts, typename Types>
struct CudaStatementExecutor<Data,
                             statement::InitLocalMem<RAJA::cuda_shared_mem,
                             camp::idx_seq<Indices...>, EnclosedStmts...>,
                             Types>
{

  using stmt_list_t = StatementList<EnclosedStmts...>;
  using enclosed_stmts_t = CudaStatementListExecutor<Data, stmt_list_t, Types>;



  template<camp::idx_t Pos>
  static
  inline
  __attribute__((device))
  void initMem(Data &data, bool thread_active)
  {
    using varType = typename camp::tuple_element_t<Pos, typename camp::decay<Data>::param_tuple_t>::element_t;
    const camp::idx_t NumElem = camp::tuple_element_t<Pos, typename camp::decay<Data>::param_tuple_t>::NumElem;

    __attribute__((shared)) varType Array[NumElem];
    camp::get<Pos>(data.param_tuple).m_arrayPtr = Array;

    enclosed_stmts_t::exec(data, thread_active);
  }



  template<camp::idx_t Pos, camp::idx_t other0, camp::idx_t... others>
  static
  inline
  __attribute__((device))
  void initMem(Data &data, bool thread_active)
  {
    using varType = typename camp::tuple_element_t<Pos, typename camp::decay<Data>::param_tuple_t>::element_t;
    const camp::idx_t NumElem = camp::tuple_element_t<Pos, typename camp::decay<Data>::param_tuple_t>::NumElem;

    __attribute__((shared)) varType Array[NumElem];
    camp::get<Pos>(data.param_tuple).m_arrayPtr = Array;
    initMem<other0, others...>(data, thread_active);
  }


  template<camp::idx_t Pos>
  static
  inline
  __attribute__((device))
  void setPtrToNull(Data &data)
  {

    camp::get<Pos>(data.param_tuple).m_arrayPtr = nullptr;
  }



  template<camp::idx_t Pos, camp::idx_t other0, camp::idx_t... others>
  static
  inline
  __attribute__((device))
  void setPtrToNull(Data &data)
  {

    camp::get<Pos>(data.param_tuple).m_arrayPtr = nullptr;
    setPtrToNull<other0, others...>(data);
  }


  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {


    initMem<Indices...>(data, thread_active);


    setPtrToNull<Indices...>(data);
  }


  inline
  static
  LaunchDims calculateDimensions(Data const &data)
  {
    return enclosed_stmts_t::calculateDimensions(data);
  }

};


template <typename Data, camp::idx_t... Indices, typename... EnclosedStmts, typename Types>
struct CudaStatementExecutor<Data, statement::InitLocalMem<RAJA::cuda_thread_mem, camp::idx_seq<Indices...>, EnclosedStmts...>, Types>
{

  using stmt_list_t = StatementList<EnclosedStmts...>;
  using enclosed_stmts_t = CudaStatementListExecutor<Data, stmt_list_t, Types>;



  template<camp::idx_t Pos>
  static
  inline
  __attribute__((device))
  void initMem(Data &data, bool thread_active)
  {
    using varType = typename camp::tuple_element_t<Pos, typename camp::decay<Data>::param_tuple_t>::element_t;
    const camp::idx_t NumElem = camp::tuple_element_t<Pos, typename camp::decay<Data>::param_tuple_t>::NumElem;

    varType Array[NumElem];
    camp::get<Pos>(data.param_tuple).m_arrayPtr = Array;

    enclosed_stmts_t::exec(data, thread_active);
  }



  template<camp::idx_t Pos, camp::idx_t other0, camp::idx_t... others>
  static
  inline
  __attribute__((device))
  void initMem(Data &data, bool thread_active)
  {
    using varType = typename camp::tuple_element_t<Pos, typename camp::decay<Data>::param_tuple_t>::element_t;
    const camp::idx_t NumElem = camp::tuple_element_t<Pos, typename camp::decay<Data>::param_tuple_t>::NumElem;

    varType Array[NumElem];
    camp::get<Pos>(data.param_tuple).m_arrayPtr = Array;
    initMem<other0, others...>(data, thread_active);
  }


  template<camp::idx_t Pos>
  static
  inline
  __attribute__((device))
  void setPtrToNull(Data &data)
  {

    camp::get<Pos>(data.param_tuple).m_arrayPtr = nullptr;
  }



  template<camp::idx_t Pos, camp::idx_t other0, camp::idx_t... others>
  static
  inline
  __attribute__((device))
  void setPtrToNull(Data &data)
  {

    camp::get<Pos>(data.param_tuple).m_arrayPtr = nullptr;
    setPtrToNull<other0, others...>(data);
  }


  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {


    initMem<Indices...>(data, thread_active);


    setPtrToNull<Indices...>(data);
  }


  inline
  static
  LaunchDims calculateDimensions(Data const &data)
  {
    return enclosed_stmts_t::calculateDimensions(data);
  }

};



}
}
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Lambda.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Lambda.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 1 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 3

# 1 "/usr/include/assert.h" 1 3 4
# 65 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 2 3
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Lambda.hpp" 2
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/climits" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/climits" 3
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Lambda.hpp" 2
# 38 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Lambda.hpp"
namespace RAJA
{
namespace internal
{



template <typename Data, camp::idx_t LambdaIndex, typename... Args, typename Types>
struct CudaStatementExecutor<Data, statement::Lambda<LambdaIndex, Args...>, Types> {

  static
  inline __attribute__((device)) void exec(Data &data, bool thread_active)
  {

    if(thread_active){
      StatementExecutor<statement::Lambda<LambdaIndex, Args...>, Types>::exec(data);
    }

  }


  static
  inline
  LaunchDims calculateDimensions(Data const & )
  {
    return LaunchDims();
  }
};




}
}
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Reduce.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Reduce.hpp"
namespace RAJA
{

namespace internal
{





template <typename Data,
          template <typename...> class ReduceOperator,
          typename ParamId,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<Data,
                             statement::Reduce<RAJA::cuda_block_reduce,
                                               ReduceOperator,
                                               ParamId,
                                               EnclosedStmts...>,
                                               Types> {

  using stmt_list_t = StatementList<EnclosedStmts...>;

  using enclosed_stmts_t = CudaStatementListExecutor<Data, stmt_list_t, Types>;


  static inline __attribute__((device)) void exec(Data &data, bool thread_active)
  {

    auto value = data.template get_param<ParamId>();
    using value_t = decltype(value);
    value_t ident = value_t();


    if (!thread_active) {
      value = ident;
    }



    using combiner_t =
        RAJA::reduce::detail::op_adapter<value_t, ReduceOperator>;
    value_t new_value =
        RAJA::cuda::impl::block_reduce<combiner_t>(value, ident);



    thread_active = threadIdx.x == 0 && threadIdx.y == 0 && threadIdx.z == 0;
    if(thread_active){

      data.template assign_param<ParamId>(new_value);
    }
    enclosed_stmts_t::exec(data, thread_active);
  }


  static inline LaunchDims calculateDimensions(Data const &data)
  {

    LaunchDims enclosed_dims = enclosed_stmts_t::calculateDimensions(data);
    return enclosed_dims;
  }
};





template <typename Data,
          template <typename...> class ReduceOperator,
          typename ParamId,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<Data,
                             statement::Reduce<RAJA::cuda_warp_reduce,
                                               ReduceOperator,
                                               ParamId,
                                               EnclosedStmts...>,
                                               Types> {

  using stmt_list_t = StatementList<EnclosedStmts...>;

  using enclosed_stmts_t = CudaStatementListExecutor<Data, stmt_list_t, Types>;


  static inline __attribute__((device)) void exec(Data &data, bool thread_active)
  {

    auto value = data.template get_param<ParamId>();
    using value_t = decltype(value);
    value_t ident = value_t();


    if (!thread_active) {
      value = ident;
    }


    using combiner_t =
        RAJA::reduce::detail::op_adapter<value_t, ReduceOperator>;
    value_t new_value =
        RAJA::cuda::impl::warp_reduce<combiner_t>(value, ident);
    data.template assign_param<ParamId>(new_value);


    thread_active = threadIdx.x == 0;
    if(thread_active){

      data.template assign_param<ParamId>(new_value);
    }
    enclosed_stmts_t::exec(data, thread_active);
  }


  static inline LaunchDims calculateDimensions(Data const &data)
  {

    LaunchDims enclosed_dims = enclosed_stmts_t::calculateDimensions(data);
    return enclosed_dims;
  }
};



}
}
# 30 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Sync.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Sync.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 1 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 3

# 1 "/usr/include/assert.h" 1 3 4
# 65 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 2 3
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Sync.hpp" 2
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/climits" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/climits" 3
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Sync.hpp" 2
# 37 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Sync.hpp"
namespace RAJA
{
namespace statement
{




struct CudaSyncThreads : public internal::Statement<camp::nil> {
};




struct CudaSyncWarp : public internal::Statement<camp::nil> {
};


}

namespace internal
{

template <typename Data, typename Types>
struct CudaStatementExecutor<Data, statement::CudaSyncThreads, Types> {

  static
  inline
  __attribute__((device))
  void exec(Data &, bool) { __syncthreads(); }


  static
  inline
  LaunchDims calculateDimensions(Data const & )
  {
    return LaunchDims();
  }
};

template <typename Data, typename Types>
struct CudaStatementExecutor<Data, statement::CudaSyncWarp, Types> {

  static
  inline
  __attribute__((device))

  void exec(Data &, bool) { __syncwarp(); }





  static
  inline
  LaunchDims calculateDimensions(Data const & )
  {
    return LaunchDims();
  }
};


}
}
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Tile.hpp" 1
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Tile.hpp"
namespace RAJA
{
namespace internal
{






template <typename Data,
          camp::idx_t ArgumentId,
          typename TPol,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::Tile<ArgumentId, TPol, seq_exec, EnclosedStmts...>, Types>
{

  using stmt_list_t = StatementList<EnclosedStmts...>;
  using enclosed_stmts_t = CudaStatementListExecutor<Data, stmt_list_t, Types>;
  using diff_t = segment_diff_type<ArgumentId, Data>;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active){

    auto &segment = camp::get<ArgumentId>(data.segment_tuple);


    using segment_t = camp::decay<decltype(segment)>;
    segment_t orig_segment = segment;

    diff_t chunk_size = TPol::chunk_size;


    diff_t len = segment.end() - segment.begin();


    for (diff_t i = 0; i < len; i += chunk_size) {


      segment = orig_segment.slice(i, chunk_size);


      enclosed_stmts_t::exec(data, thread_active);
    }


    segment = orig_segment;
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {


    using data_t = camp::decay<Data>;
    data_t private_data = data;


    auto &segment = camp::get<ArgumentId>(private_data.segment_tuple);


    segment = segment.slice(0, TPol::chunk_size);


    LaunchDims enclosed_dims =
        enclosed_stmts_t::calculateDimensions(private_data);

    return enclosed_dims;
  }
};







template <typename Data,
          camp::idx_t ArgumentId,
          camp::idx_t chunk_size,
          int BlockDim,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::Tile<ArgumentId,
                    RAJA::tile_fixed<chunk_size>,
                    cuda_block_xyz_direct<BlockDim>,
                    EnclosedStmts...>,
                    Types>
  {

  using stmt_list_t = StatementList<EnclosedStmts...>;

  using enclosed_stmts_t = CudaStatementListExecutor<Data, stmt_list_t, Types>;

  using diff_t = segment_diff_type<ArgumentId, Data>;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    auto &segment = camp::get<ArgumentId>(data.segment_tuple);

    using segment_t = camp::decay<decltype(segment)>;


    diff_t len = segment.end() - segment.begin();
    diff_t i = get_cuda_dim<BlockDim>(blockIdx) * chunk_size;


    if (i < len) {


      segment_t orig_segment = segment;


      segment = orig_segment.slice(i, chunk_size);


      enclosed_stmts_t::exec(data, thread_active);


      segment = orig_segment;
    }
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {


    diff_t len = segment_length<ArgumentId>(data);
    diff_t num_blocks = len / chunk_size;
    if (num_blocks * chunk_size < len) {
      num_blocks++;
    }

    LaunchDims dims;
    set_cuda_dim<BlockDim>(dims.blocks, num_blocks);


    set_cuda_dim<BlockDim>(dims.min_blocks, num_blocks);



    using data_t = camp::decay<Data>;
    data_t private_data = data;


    auto &segment = camp::get<ArgumentId>(private_data.segment_tuple);


    segment = segment.slice(0, chunk_size);


    LaunchDims enclosed_dims =
        enclosed_stmts_t::calculateDimensions(private_data);

    return dims.max(enclosed_dims);
  }
};






template <typename Data,
          camp::idx_t ArgumentId,
          camp::idx_t chunk_size,
          int BlockDim,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::Tile<ArgumentId,
                    RAJA::tile_fixed<chunk_size>,
                    cuda_block_xyz_loop<BlockDim>,
                    EnclosedStmts...>, Types>
  {

  using stmt_list_t = StatementList<EnclosedStmts...>;

  using enclosed_stmts_t = CudaStatementListExecutor<Data, stmt_list_t, Types>;

  using diff_t = segment_diff_type<ArgumentId, Data>;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    auto &segment = camp::get<ArgumentId>(data.segment_tuple);


    using segment_t = camp::decay<decltype(segment)>;
    segment_t orig_segment = segment;


    diff_t len = segment.end() - segment.begin();
    diff_t i_init = get_cuda_dim<BlockDim>(blockIdx) * chunk_size;
    diff_t i_stride = get_cuda_dim<BlockDim>(gridDim) * chunk_size;


    for (diff_t i = i_init; i < len; i += i_stride) {


      segment = orig_segment.slice(i, chunk_size);


      enclosed_stmts_t::exec(data, thread_active);
    }


    segment = orig_segment;
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {


    diff_t len = segment_length<ArgumentId>(data);
    diff_t num_blocks = len / chunk_size;
    if (num_blocks * chunk_size < len) {
      num_blocks++;
    }

    LaunchDims dims;
    set_cuda_dim<BlockDim>(dims.blocks, num_blocks);




    using data_t = camp::decay<Data>;
    data_t private_data = data;


    auto &segment = camp::get<ArgumentId>(private_data.segment_tuple);


    segment = segment.slice(0, chunk_size);


    LaunchDims enclosed_dims =
        enclosed_stmts_t::calculateDimensions(private_data);

    return dims.max(enclosed_dims);
  }
};
# 313 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/Tile.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          camp::idx_t chunk_size,
          int ThreadDim,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::Tile<ArgumentId,
                  RAJA::tile_fixed<chunk_size>,
                  cuda_thread_xyz_direct<ThreadDim>,
                  EnclosedStmts ...>, Types>{

  using stmt_list_t = StatementList<EnclosedStmts ...>;

  using enclosed_stmts_t = CudaStatementListExecutor<Data, stmt_list_t, Types>;

  using diff_t = segment_diff_type<ArgumentId, Data>;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    auto &segment = camp::get<ArgumentId>(data.segment_tuple);


    using segment_t = camp::decay<decltype(segment)>;
    segment_t orig_segment = segment;


    diff_t len = segment.end() - segment.begin();
    diff_t i = get_cuda_dim<ThreadDim>(threadIdx) * chunk_size;



    bool have_work = i < len;


    diff_t slice_size = have_work ? chunk_size : 0;
    segment = orig_segment.slice(i, slice_size);


    enclosed_stmts_t::exec(data, thread_active && have_work);


    segment = orig_segment;
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {


    diff_t len = segment_length<ArgumentId>(data);
    diff_t num_threads = len / chunk_size;
    if(num_threads * chunk_size < len){
      num_threads++;
    }

    LaunchDims dims;
    set_cuda_dim<ThreadDim>(dims.threads, num_threads);
    set_cuda_dim<ThreadDim>(dims.min_threads, num_threads);


    using data_t = camp::decay<Data>;
    data_t private_data = data;


    auto &segment = camp::get<ArgumentId>(private_data.segment_tuple);


    segment = segment.slice(0, chunk_size);


    LaunchDims enclosed_dims =
      enclosed_stmts_t::calculateDimensions(private_data);

    return(dims.max(enclosed_dims));
  }
};







template <typename Data,
          camp::idx_t ArgumentId,
          camp::idx_t chunk_size,
          int ThreadDim,
          int MinThreads,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::Tile<ArgumentId,
                  RAJA::tile_fixed<chunk_size>,
                  cuda_thread_xyz_loop<ThreadDim, MinThreads>,
                  EnclosedStmts ...>, Types>{

  using stmt_list_t = StatementList<EnclosedStmts ...>;

  using enclosed_stmts_t = CudaStatementListExecutor<Data, stmt_list_t, Types>;

  using diff_t = segment_diff_type<ArgumentId, Data>;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    auto &segment = camp::get<ArgumentId>(data.segment_tuple);


    using segment_t = camp::decay<decltype(segment)>;
    segment_t orig_segment = segment;


    diff_t len = segment_length<ArgumentId>(data);
    diff_t i_init = get_cuda_dim<ThreadDim>(threadIdx) * chunk_size;
    diff_t i_stride = get_cuda_dim<ThreadDim>(blockDim) * chunk_size;


    for (diff_t ii = 0; ii < len; ii += i_stride) {
      diff_t i = ii + i_init;



      bool have_work = i < len;


      diff_t slice_size = have_work ? chunk_size : 0;
      segment = orig_segment.slice(i, slice_size);


      enclosed_stmts_t::exec(data, thread_active && have_work);
    }


    segment = orig_segment;
  }


  static
  inline
  LaunchDims calculateDimensions(Data const &data)
  {


    diff_t len = segment_length<ArgumentId>(data);
    diff_t num_threads = len / chunk_size;
    if(num_threads * chunk_size < len){
      num_threads++;
    }
    num_threads = std::max(num_threads, (diff_t)MinThreads);

    LaunchDims dims;
    set_cuda_dim<ThreadDim>(dims.threads, num_threads);
    set_cuda_dim<ThreadDim>(dims.min_threads, MinThreads);


    using data_t = camp::decay<Data>;
    data_t private_data = data;


    auto &segment = camp::get<ArgumentId>(private_data.segment_tuple);


    segment = segment.slice(0, chunk_size);


    LaunchDims enclosed_dims =
      enclosed_stmts_t::calculateDimensions(private_data);

    return(dims.max(enclosed_dims));
  }
};




}
}
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/TileTCount.hpp" 1
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/TileTCount.hpp"
namespace RAJA
{
namespace internal
{






template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          typename TPol,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::TileTCount<ArgumentId, ParamId, TPol, seq_exec, EnclosedStmts...>, Types>
    : public CudaStatementExecutor<
        Data,
        statement::Tile<ArgumentId, TPol, seq_exec, EnclosedStmts...>, Types> {

  using Base = CudaStatementExecutor<
      Data,
      statement::Tile<ArgumentId, TPol, seq_exec, EnclosedStmts...>, Types>;

  using typename Base::enclosed_stmts_t;
  using typename Base::diff_t;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active){

    auto &segment = camp::get<ArgumentId>(data.segment_tuple);


    using segment_t = camp::decay<decltype(segment)>;
    segment_t orig_segment = segment;

    diff_t chunk_size = TPol::chunk_size;


    diff_t len = segment.end() - segment.begin();


    for (diff_t i = 0, t = 0; i < len; i += chunk_size, ++t) {


      segment = orig_segment.slice(i, chunk_size);
      data.template assign_param<ParamId>(t);


      enclosed_stmts_t::exec(data, thread_active);
    }


    segment = orig_segment;
  }
};







template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          camp::idx_t chunk_size,
          int BlockDim,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::TileTCount<ArgumentId, ParamId,
                    RAJA::tile_fixed<chunk_size>,
                    cuda_block_xyz_direct<BlockDim>,
                    EnclosedStmts...>,
                    Types>
    : public CudaStatementExecutor<
        Data,
        statement::Tile<ArgumentId,
                        RAJA::tile_fixed<chunk_size>,
                        cuda_block_xyz_direct<BlockDim>,
                        EnclosedStmts...>,
                        Types> {

  using Base = CudaStatementExecutor<
      Data,
      statement::Tile<ArgumentId,
                      RAJA::tile_fixed<chunk_size>,
                      cuda_block_xyz_direct<BlockDim>,
                      EnclosedStmts...>,
                      Types>;

  using typename Base::enclosed_stmts_t;
  using typename Base::diff_t;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    auto &segment = camp::get<ArgumentId>(data.segment_tuple);

    using segment_t = camp::decay<decltype(segment)>;


    diff_t len = segment.end() - segment.begin();
    diff_t t = get_cuda_dim<BlockDim>(blockIdx);
    diff_t i = t * chunk_size;


    if (i < len) {


      segment_t orig_segment = segment;


      segment = orig_segment.slice(i, chunk_size);
      data.template assign_param<ParamId>(t);


      enclosed_stmts_t::exec(data, thread_active);


      segment = orig_segment;
    }
  }
};






template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          camp::idx_t chunk_size,
          int BlockDim,
          typename... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
    Data,
    statement::TileTCount<ArgumentId, ParamId,
                    RAJA::tile_fixed<chunk_size>,
                    cuda_block_xyz_loop<BlockDim>,
                    EnclosedStmts...>,
                    Types>
    : public CudaStatementExecutor<
        Data,
        statement::Tile<ArgumentId,
                        RAJA::tile_fixed<chunk_size>,
                        cuda_block_xyz_loop<BlockDim>,
                        EnclosedStmts...>,
                        Types> {

  using Base = CudaStatementExecutor<
      Data,
      statement::Tile<ArgumentId,
                      RAJA::tile_fixed<chunk_size>,
                      cuda_block_xyz_loop<BlockDim>,
                      EnclosedStmts...>,
                      Types>;

  using typename Base::enclosed_stmts_t;
  using typename Base::diff_t;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    auto &segment = camp::get<ArgumentId>(data.segment_tuple);


    using segment_t = camp::decay<decltype(segment)>;
    segment_t orig_segment = segment;


    diff_t len = segment.end() - segment.begin();
    diff_t t_init = get_cuda_dim<BlockDim>(blockIdx);
    diff_t i_init = t_init * chunk_size;
    diff_t t_stride = get_cuda_dim<BlockDim>(gridDim);
    diff_t i_stride = t_stride * chunk_size;


    for (diff_t i = i_init, t = t_init; i < len; i += i_stride, t += t_stride) {


      segment = orig_segment.slice(i, chunk_size);
      data.template assign_param<ParamId>(t);


      enclosed_stmts_t::exec(data, thread_active);
    }


    segment = orig_segment;
  }
};
# 255 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel/TileTCount.hpp"
template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          camp::idx_t chunk_size,
          int ThreadDim,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::TileTCount<ArgumentId, ParamId,
                        RAJA::tile_fixed<chunk_size>,
                        cuda_thread_xyz_direct<ThreadDim>,
                        EnclosedStmts ...>,
                        Types>
  : public CudaStatementExecutor<
    Data,
    statement::Tile<ArgumentId,
                    RAJA::tile_fixed<chunk_size>,
                    cuda_thread_xyz_direct<ThreadDim>,
                    EnclosedStmts ...>,
                    Types> {

  using Base = CudaStatementExecutor<
          Data,
          statement::Tile<ArgumentId,
                          RAJA::tile_fixed<chunk_size>,
                          cuda_thread_xyz_direct<ThreadDim>,
                          EnclosedStmts ...>,
                          Types>;

  using typename Base::enclosed_stmts_t;
  using typename Base::diff_t;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    auto &segment = camp::get<ArgumentId>(data.segment_tuple);


    using segment_t = camp::decay<decltype(segment)>;
    segment_t orig_segment = segment;


    diff_t len = segment.end() - segment.begin();
    diff_t t = get_cuda_dim<ThreadDim>(threadIdx);
    diff_t i = t * chunk_size;



    bool have_work = i < len;


    diff_t slice_size = have_work ? chunk_size : 0;
    segment = orig_segment.slice(i, slice_size);
    data.template assign_param<ParamId>(t);


    enclosed_stmts_t::exec(data, thread_active && have_work);


    segment = orig_segment;
  }
};







template <typename Data,
          camp::idx_t ArgumentId,
          typename ParamId,
          camp::idx_t chunk_size,
          int ThreadDim,
          int MinThreads,
          typename ... EnclosedStmts,
          typename Types>
struct CudaStatementExecutor<
  Data,
  statement::TileTCount<ArgumentId, ParamId,
                        RAJA::tile_fixed<chunk_size>,
                        cuda_thread_xyz_loop<ThreadDim, MinThreads>,
                        EnclosedStmts ...>,
                        Types>
  : public CudaStatementExecutor<
    Data,
    statement::Tile<ArgumentId,
                    RAJA::tile_fixed<chunk_size>,
                    cuda_thread_xyz_loop<ThreadDim, MinThreads>,
                    EnclosedStmts ...>,
                    Types> {

  using Base = CudaStatementExecutor<
          Data,
          statement::Tile<ArgumentId,
                          RAJA::tile_fixed<chunk_size>,
                          cuda_thread_xyz_loop<ThreadDim, MinThreads>,
                          EnclosedStmts ...>,
                          Types>;

  using typename Base::enclosed_stmts_t;
  using typename Base::diff_t;

  static
  inline
  __attribute__((device))
  void exec(Data &data, bool thread_active)
  {

    auto &segment = camp::get<ArgumentId>(data.segment_tuple);


    using segment_t = camp::decay<decltype(segment)>;
    segment_t orig_segment = segment;


    diff_t len = segment_length<ArgumentId>(data);
    diff_t t_init = get_cuda_dim<ThreadDim>(threadIdx);
    diff_t i_init = t_init * chunk_size;
    diff_t t_stride = get_cuda_dim<ThreadDim>(blockDim);
    diff_t i_stride = t_stride * chunk_size;


    for(diff_t ii = 0, t = t_init; ii < len; ii += i_stride, t += t_stride) {
      diff_t i = ii + i_init;



      bool have_work = i < len;


      diff_t slice_size = have_work ? chunk_size : 0;
      segment = orig_segment.slice(i, slice_size);
      data.template assign_param<ParamId>(t);


      enclosed_stmts_t::exec(data, thread_active && have_work);
    }


    segment = orig_segment;
  }
};

}
}
# 33 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/kernel.hpp" 2
# 37 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/synchronize.hpp" 1
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/synchronize.hpp"
namespace RAJA
{

namespace policy
{

namespace cuda
{




inline __attribute__((always_inline))
void synchronize_impl(const cuda_synchronize&)
{
  { ::RAJA::cudaAssert((cudaDeviceSynchronize()), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/synchronize.hpp", 42); };
}


}
}
}
# 38 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/WorkGroup.hpp" 1
# 21 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/WorkGroup.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/WorkGroup/Vtable.hpp" 1
# 27 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/WorkGroup/Vtable.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/thread" 1 3
# 33 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/thread" 3
# 47 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/thread" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
# 60 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/thread" 3
  class thread
  {
  public:
    typedef __gthread_t native_handle_type;
    struct _Impl_base;
    typedef shared_ptr<_Impl_base> __shared_base_type;


    class id
    {
      native_handle_type _M_thread;

    public:
      id() noexcept : _M_thread() { }

      explicit
      id(native_handle_type __id) : _M_thread(__id) { }

    private:
      friend class thread;
      friend class hash<thread::id>;

      friend bool
      operator==(thread::id __x, thread::id __y) noexcept
      { return __gthread_equal(__x._M_thread, __y._M_thread); }

      friend bool
      operator<(thread::id __x, thread::id __y) noexcept
      { return __x._M_thread < __y._M_thread; }

      template<class _CharT, class _Traits>
 friend basic_ostream<_CharT, _Traits>&
 operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id);
    };



    struct _Impl_base
    {
      __shared_base_type _M_this_ptr;

      inline virtual ~_Impl_base();

      virtual void _M_run() = 0;
    };

    template<typename _Callable>
      struct _Impl : public _Impl_base
      {
 _Callable _M_func;

 _Impl(_Callable&& __f) : _M_func(std::forward<_Callable>(__f))
 { }

 void
 _M_run() { _M_func(); }
      };

  private:
    id _M_id;

  public:
    thread() noexcept = default;


    thread(thread&) = delete;
    thread(const thread&) = delete;

    thread(thread&& __t) noexcept
    { swap(__t); }

    template<typename _Callable, typename... _Args>
      explicit
      thread(_Callable&& __f, _Args&&... __args)
      {
        _M_start_thread(_M_make_routine(std::__bind_simple(
                std::forward<_Callable>(__f),
                std::forward<_Args>(__args)...)));
      }

    ~thread()
    {
      if (joinable())
 std::terminate();
    }

    thread& operator=(const thread&) = delete;

    thread& operator=(thread&& __t) noexcept
    {
      if (joinable())
 std::terminate();
      swap(__t);
      return *this;
    }

    void
    swap(thread& __t) noexcept
    { std::swap(_M_id, __t._M_id); }

    bool
    joinable() const noexcept
    { return !(_M_id == id()); }

    void
    join();

    void
    detach();

    thread::id
    get_id() const noexcept
    { return _M_id; }



    native_handle_type
    native_handle()
    { return _M_id._M_thread; }


    static unsigned int
    hardware_concurrency() noexcept;

  private:
    void
    _M_start_thread(__shared_base_type);

    template<typename _Callable>
      shared_ptr<_Impl<_Callable>>
      _M_make_routine(_Callable&& __f)
      {

 return std::make_shared<_Impl<_Callable>>(std::forward<_Callable>(__f));
      }
  };

  inline thread::_Impl_base::~_Impl_base() = default;

  inline void
  swap(thread& __x, thread& __y) noexcept
  { __x.swap(__y); }

  inline bool
  operator!=(thread::id __x, thread::id __y) noexcept
  { return !(__x == __y); }

  inline bool
  operator<=(thread::id __x, thread::id __y) noexcept
  { return !(__y < __x); }

  inline bool
  operator>(thread::id __x, thread::id __y) noexcept
  { return __y < __x; }

  inline bool
  operator>=(thread::id __x, thread::id __y) noexcept
  { return !(__x < __y); }



  template<>
    struct hash<thread::id>
    : public __hash_base<size_t, thread::id>
    {
      size_t
      operator()(const thread::id& __id) const noexcept
      { return std::_Hash_impl::hash(__id._M_thread); }
    };

  template<class _CharT, class _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id)
    {
      if (__id == thread::id())
 return __out << "thread::id of a non-executing thread";
      else
 return __out << __id._M_thread;
    }







  namespace this_thread
  {



    inline thread::id
    get_id() noexcept { return thread::id(__gthread_self()); }


    inline void
    yield() noexcept
    {

      __gthread_yield();

    }

    void
    __sleep_for(chrono::seconds, chrono::nanoseconds);


    template<typename _Rep, typename _Period>
      inline void
      sleep_for(const chrono::duration<_Rep, _Period>& __rtime)
      {
 if (__rtime <= __rtime.zero())
   return;
 auto __s = chrono::duration_cast<chrono::seconds>(__rtime);
 auto __ns = chrono::duration_cast<chrono::nanoseconds>(__rtime - __s);

 __gthread_time_t __ts =
   {
     static_cast<std::time_t>(__s.count()),
     static_cast<long>(__ns.count())
   };
 ::nanosleep(&__ts, 0);



      }


    template<typename _Clock, typename _Duration>
      inline void
      sleep_until(const chrono::time_point<_Clock, _Duration>& __atime)
      {
 auto __now = _Clock::now();
 if (__now < __atime)
   sleep_for(__atime - __now);
      }


  }



}
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/WorkGroup/Vtable.hpp" 2



namespace RAJA
{

namespace detail
{



template < typename T, typename Vtable_T >
__attribute__((global)) void get_Vtable_cuda_device_call_global(
    typename Vtable_T::call_sig* ptrptr)
{
  *ptrptr = &Vtable_T::template device_call<T>;
}


inline void* get_Vtable_cuda_device_call_ptrptr()
{
  void* ptrptr = nullptr;
  { ::RAJA::cudaAssert((cudaMallocHost(&ptrptr, sizeof(typename Vtable<>::call_sig))), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/WorkGroup/Vtable.hpp", 50); };
  return ptrptr;
}


inline void* get_cached_Vtable_cuda_device_call_ptrptr()
{
  static void* ptrptr = get_Vtable_cuda_device_call_ptrptr();
  return ptrptr;
}



inline std::mutex& get_Vtable_cuda_mutex()
{
  static std::mutex s_mutex;
  return s_mutex;
}




template < typename T, typename Vtable_T >
inline typename Vtable_T::call_sig get_Vtable_cuda_device_call()
{
  const std::lock_guard<std::mutex> lock(get_Vtable_cuda_mutex());

  typename Vtable_T::call_sig* ptrptr =
      static_cast<typename Vtable_T::call_sig*>(
        get_cached_Vtable_cuda_device_call_ptrptr());
  get_Vtable_cuda_device_call_global<T, Vtable_T><<<1,1>>>(ptrptr);
  { ::RAJA::cudaAssert((cudaGetLastError()), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/WorkGroup/Vtable.hpp", 81); };
  { ::RAJA::cudaAssert((cudaDeviceSynchronize()), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/WorkGroup/Vtable.hpp", 82); };

  return *ptrptr;
}



template < typename T, typename Vtable_T >
inline typename Vtable_T::call_sig get_cached_Vtable_cuda_device_call()
{
  static typename Vtable_T::call_sig ptr =
      get_Vtable_cuda_device_call<T, Vtable_T>();
  return ptr;
}





template < typename T, typename Vtable_T, size_t BLOCK_SIZE, bool Async >
inline const Vtable_T* get_Vtable(cuda_work<BLOCK_SIZE, Async> const&)
{
  static Vtable_T vtable{
        &Vtable_T::template move_construct_destroy<T>,
        get_cached_Vtable_cuda_device_call<T, Vtable_T>(),
        &Vtable_T::template destroy<T>,
        sizeof(T)
      };
  return &vtable;
}

}

}
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/WorkGroup.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/WorkGroup/WorkRunner.hpp" 1
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/WorkGroup/WorkRunner.hpp"
namespace RAJA
{

namespace detail
{





template <size_t BLOCK_SIZE, bool Async,
          typename ALLOCATOR_T,
          typename INDEX_T,
          typename ... Args>
struct WorkRunner<
        RAJA::cuda_work<BLOCK_SIZE, Async>,
        RAJA::ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>
    : WorkRunnerForallOrdered<
        RAJA::cuda_exec_async<BLOCK_SIZE>,
        RAJA::cuda_work<BLOCK_SIZE, Async>,
        RAJA::ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>
{
  using base = WorkRunnerForallOrdered<
        RAJA::cuda_exec_async<BLOCK_SIZE>,
        RAJA::cuda_work<BLOCK_SIZE, Async>,
        RAJA::ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>;
  using base::base;
  using IndexType = INDEX_T;
  using per_run_storage = typename base::per_run_storage;





  template < typename WorkContainer >
  per_run_storage run(WorkContainer const& storage, Args... args) const
  {
    per_run_storage run_storage =
        base::run(storage, std::forward<Args>(args)...);

    IndexType num_loops = std::distance(std::begin(storage), std::end(storage));


    if (num_loops > 0 && BLOCK_SIZE > 0) {
      cudaStream_t stream = 0;
      if (!Async) { RAJA::cuda::synchronize(stream); }
    }

    return run_storage;
  }
};





template <size_t BLOCK_SIZE, bool Async,
          typename ALLOCATOR_T,
          typename INDEX_T,
          typename ... Args>
struct WorkRunner<
        RAJA::cuda_work<BLOCK_SIZE, Async>,
        RAJA::reverse_ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>
    : WorkRunnerForallReverse<
        RAJA::cuda_exec_async<BLOCK_SIZE>,
        RAJA::cuda_work<BLOCK_SIZE, Async>,
        RAJA::reverse_ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>
{
  using base = WorkRunnerForallReverse<
        RAJA::cuda_exec_async<BLOCK_SIZE>,
        RAJA::cuda_work<BLOCK_SIZE, Async>,
        RAJA::reverse_ordered,
        ALLOCATOR_T,
        INDEX_T,
        Args...>;
  using base::base;
  using IndexType = INDEX_T;
  using per_run_storage = typename base::per_run_storage;





  template < typename WorkContainer >
  per_run_storage run(WorkContainer const& storage, Args... args) const
  {
    per_run_storage run_storage =
        base::run(storage, std::forward<Args>(args)...);

    IndexType num_loops = std::distance(std::begin(storage), std::end(storage));


    if (num_loops > 0 && BLOCK_SIZE > 0) {
      cudaStream_t stream = 0;
      if (!Async) { RAJA::cuda::synchronize(stream); }
    }

    return run_storage;
  }
};






template <typename Segment_type, typename LoopBody,
          typename index_type, typename ... Args>
struct HoldCudaDeviceXThreadblockLoop
{
  template < typename segment_in, typename body_in >
  HoldCudaDeviceXThreadblockLoop(segment_in&& segment, body_in&& body)
    : m_segment(std::forward<segment_in>(segment))
    , m_body(std::forward<body_in>(body))
  { }

  __attribute__((device)) inline __attribute__((always_inline)) void operator()(Args... args) const
  {


    const index_type i_begin = threadIdx.x + blockIdx.x * blockDim.x;
    const index_type stride = blockDim.x * gridDim.x;
    const auto begin = m_segment.begin();
    const auto end = m_segment.end();
    const index_type len(end - begin);
    for ( index_type i = i_begin; i < len; i += stride ) {
      m_body(begin[i], std::forward<Args>(args)...);
    }
  }

private:
  Segment_type m_segment;
  LoopBody m_body;
};

template < size_t BLOCK_SIZE,
           typename StorageIter,
           typename value_type,
           typename index_type,
           typename ... Args >
__attribute__((launch_bounds(BLOCK_SIZE, 1))) __attribute__((global))
    void cuda_unordered_y_block_global(StorageIter iter, Args... args)
{
  const index_type i_loop = blockIdx.y;


  value_type::call(&iter[i_loop], args...);
}
# 200 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/WorkGroup/WorkRunner.hpp"
template <size_t BLOCK_SIZE, bool Async,
          typename ALLOCATOR_T,
          typename INDEX_T,
          typename ... Args>
struct WorkRunner<
        RAJA::cuda_work<BLOCK_SIZE, Async>,
        RAJA::policy::cuda::unordered_cuda_loop_y_block_iter_x_threadblock_average,
        ALLOCATOR_T,
        INDEX_T,
        Args...>
{
  using exec_policy = RAJA::cuda_work<BLOCK_SIZE, Async>;
  using order_policy = RAJA::policy::cuda::unordered_cuda_loop_y_block_iter_x_threadblock_average;
  using Allocator = ALLOCATOR_T;
  using index_type = INDEX_T;

  using vtable_type = Vtable<Args...>;

  WorkRunner() = default;

  WorkRunner(WorkRunner const&) = delete;
  WorkRunner& operator=(WorkRunner const&) = delete;

  WorkRunner(WorkRunner && o)
    : m_total_iterations(o.m_total_iterations)
  {
    o.m_total_iterations = 0;
  }
  WorkRunner& operator=(WorkRunner && o)
  {
    m_total_iterations = o.m_total_iterations;

    o.m_total_iterations = 0;
    return *this;
  }


  template < typename ITERABLE, typename LOOP_BODY >
  using holder_type = HoldCudaDeviceXThreadblockLoop<ITERABLE, LOOP_BODY,
                                 index_type, Args...>;



  using vtable_exec_policy = exec_policy;



  template < typename WorkContainer, typename Iterable, typename LoopBody >
  inline void enqueue(WorkContainer& storage, Iterable&& iter, LoopBody&& loop_body)
  {
    using Iterator = camp::decay<decltype(std::begin(iter))>;
    using LOOP_BODY = camp::decay<LoopBody>;
    using ITERABLE = camp::decay<Iterable>;
    using IndexType = camp::decay<decltype(std::distance(std::begin(iter), std::end(iter)))>;

    using holder = holder_type<ITERABLE, LOOP_BODY>;



    Iterator begin = std::begin(iter);
    Iterator end = std::end(iter);
    IndexType len = std::distance(begin, end);


    if (len > 0 && BLOCK_SIZE > 0) {

      m_total_iterations += len;







      storage.template emplace<holder>(
          get_Vtable<holder, vtable_type>(vtable_exec_policy{}),
          std::forward<Iterable>(iter), std::forward<LoopBody>(loop_body));
    }
  }


  using per_run_storage = int;

  template < typename WorkContainer >
  per_run_storage run(WorkContainer const& storage, Args... args) const
  {
    using Iterator = camp::decay<decltype(std::begin(storage))>;
    using IndexType = camp::decay<decltype(std::distance(std::begin(storage), std::end(storage)))>;
    using value_type = typename WorkContainer::value_type;

    per_run_storage run_storage{};

    auto func = cuda_unordered_y_block_global<BLOCK_SIZE, Iterator, value_type, index_type, Args...>;




    Iterator begin = std::begin(storage);
    Iterator end = std::end(storage);
    IndexType num_loops = std::distance(begin, end);


    if (num_loops > 0 && BLOCK_SIZE > 0) {

      index_type average_iterations = m_total_iterations / static_cast<index_type>(num_loops);




      constexpr index_type block_size = static_cast<index_type>(BLOCK_SIZE);
      cuda_dim_t blockSize{static_cast<cuda_dim_member_t>(block_size), 1, 1};
      cuda_dim_t gridSize{static_cast<cuda_dim_member_t>((average_iterations + block_size - 1) / block_size),
                          static_cast<cuda_dim_member_t>(num_loops),
                          1};

                   ;




      size_t shmem = 0;
      cudaStream_t stream = 0;

      {



        void* func_args[] = { (void*)&begin, (void*)&args... };
        RAJA::cuda::launch((const void*)func, gridSize, blockSize, func_args, shmem, stream);
      }

      if (!Async) { RAJA::cuda::synchronize(stream); }

                 ;
    }

    return run_storage;
  }


  void clear()
  {
    m_total_iterations = 0;
  }

private:
  index_type m_total_iterations = 0;
};


}

}
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda/WorkGroup.hpp" 2
# 39 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/cuda.hpp" 2
# 70 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2
# 105 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Layout.hpp" 1
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Layout.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 1 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 3

# 1 "/usr/include/assert.h" 1 3 4
# 65 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 2 3
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Layout.hpp" 2








namespace RAJA
{

namespace detail
{
# 48 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Layout.hpp"
template <ptrdiff_t i, ptrdiff_t exclude_i>
struct ConditionalMultiply {

  template <typename A, typename B>
  static inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr A multiply(A a, B b)
  {

    return a * b;
  }
};

template <ptrdiff_t i>
struct ConditionalMultiply<i, i> {
  template <typename A, typename B>
  static inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr A multiply(A a, B)
  {

    return a;
  }
};


template <typename Range,
          typename IdxLin = Index_type,
          ptrdiff_t StrideOneDim = -1>
struct LayoutBase_impl;





template <size_t j, size_t n_dims, typename IdxLin = Index_type>
struct stride_calculator {
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr IdxLin operator()(
      IdxLin cur_stride,
      IdxLin const (&sizes)[n_dims]) const
  {
    return stride_calculator<j + 1, n_dims, IdxLin>{}(
        cur_stride * (sizes[j] ? sizes[j] : 1), sizes);
  }
};
template <size_t n_dims, typename IdxLin>
struct stride_calculator<n_dims, n_dims, IdxLin> {
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr IdxLin operator()(
      IdxLin cur_stride,
      IdxLin const (&)[n_dims]) const
  {
    return cur_stride;
  }
};

template <camp::idx_t... RangeInts, typename IdxLin, ptrdiff_t StrideOneDim>
struct LayoutBase_impl<camp::idx_seq<RangeInts...>, IdxLin, StrideOneDim> {
public:
  using IndexLinear = IdxLin;
  using IndexRange = camp::make_idx_seq_t<sizeof...(RangeInts)>;

  static constexpr size_t n_dims = sizeof...(RangeInts);
  static constexpr IdxLin limit = RAJA::operators::limits<IdxLin>::max();
  static constexpr ptrdiff_t stride1_dim = StrideOneDim;



  IdxLin sizes[n_dims];
  IdxLin strides[n_dims];
  IdxLin inv_strides[n_dims];
  IdxLin inv_mods[n_dims];





  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr LayoutBase_impl()
      : sizes{0}, strides{0}, inv_strides{0}, inv_mods{0}
  {
  }




  template <typename... Types>
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr LayoutBase_impl(Types... ns)
      : sizes{static_cast<IdxLin>(stripIndexType(ns))...},
        strides{(detail::stride_calculator<RangeInts + 1, n_dims, IdxLin>{}(
            sizes[RangeInts] ? IdxLin(1) : IdxLin(0),
            sizes))...},
        inv_strides{(strides[RangeInts] ? strides[RangeInts] : IdxLin(1))...},
        inv_mods{(sizes[RangeInts] ? sizes[RangeInts] : IdxLin(1))...}
  {
    static_assert(n_dims == sizeof...(Types),
                  "number of dimensions must match");
  }




  template <typename CIdxLin, ptrdiff_t CStrideOneDim>
  constexpr inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) LayoutBase_impl(
      const LayoutBase_impl<camp::idx_seq<RangeInts...>, CIdxLin, CStrideOneDim>
          &rhs)
      : sizes{static_cast<IdxLin>(rhs.sizes[RangeInts])...},
        strides{static_cast<IdxLin>(rhs.strides[RangeInts])...},
        inv_strides{static_cast<IdxLin>(rhs.inv_strides[RangeInts])...},
        inv_mods{static_cast<IdxLin>(rhs.inv_mods[RangeInts])...}
  {
  }





  template <typename... Types>
  inline __attribute__((always_inline)) constexpr LayoutBase_impl(
      const std::array<IdxLin, n_dims> &sizes_in,
      const std::array<IdxLin, n_dims> &strides_in)
      : sizes{sizes_in[RangeInts]...},
        strides{strides_in[RangeInts]...},
        inv_strides{(strides[RangeInts] ? strides[RangeInts] : IdxLin(1))...},
        inv_mods{(sizes[RangeInts] ? sizes[RangeInts] : IdxLin(1))...}
  {
  }




  template<camp::idx_t N, typename Idx>
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void BoundsCheckError(Idx idx) const
  {
    printf("Error at index %d, value %ld is not within bounds [0, %ld] \n",
           static_cast<int>(N), static_cast<long int>(idx), static_cast<long int>(sizes[N] - 1));
    RAJA_ABORT_OR_THROW("Out of bounds error \n");
  }

  template <camp::idx_t N>
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void BoundsCheck() const
  {
  }

  template <camp::idx_t N, typename Idx, typename... Indices>
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void BoundsCheck(Idx idx, Indices... indices) const
  {
    if(sizes[N] > 0 && !(0<=idx && idx < static_cast<Idx>(sizes[N])))
    {
      BoundsCheckError<N>(idx);
    }
    RAJA_UNUSED_VAR(idx);
    BoundsCheck<N+1>(indices...);
  }
# 205 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Layout.hpp"
  template <typename... Indices>
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr IdxLin operator()(
      Indices... indices) const
  {
# 217 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Layout.hpp"
    return sum<IdxLin>
      (((IdxLin) detail::ConditionalMultiply<RangeInts, stride1_dim>::multiply(IdxLin(indices), strides[RangeInts]) )...);

  }
# 233 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Layout.hpp"
  template <typename... Indices>
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void toIndices(IdxLin linear_index,
                                              Indices &&... indices) const
  {
# 247 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Layout.hpp"
    camp::sink((indices = (camp::decay<Indices>)((linear_index / inv_strides[RangeInts]) %
                                   inv_mods[RangeInts]))...);
  }







  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr IdxLin size() const
  {


    return foldl(RAJA::operators::multiplies<IdxLin>(),
                         (sizes[RangeInts] == IdxLin(0) ? IdxLin(1) : sizes[RangeInts])...);
  }
};

template <camp::idx_t... RangeInts, typename IdxLin, ptrdiff_t StrideOneDim>
constexpr size_t
    LayoutBase_impl<camp::idx_seq<RangeInts...>, IdxLin, StrideOneDim>::n_dims;
template <camp::idx_t... RangeInts, typename IdxLin, ptrdiff_t StrideOneDim>
constexpr IdxLin
    LayoutBase_impl<camp::idx_seq<RangeInts...>, IdxLin, StrideOneDim>::limit;
}
# 323 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Layout.hpp"
template <size_t n_dims, typename IdxLin = Index_type, ptrdiff_t StrideOne = -1>
using Layout =
    detail::LayoutBase_impl<camp::make_idx_seq_t<n_dims>, IdxLin, StrideOne>;

template <typename IdxLin, typename DimTuple, ptrdiff_t StrideOne = -1>
struct TypedLayout;

template <typename IdxLin, typename... DimTypes, ptrdiff_t StrideOne>
struct TypedLayout<IdxLin, camp::tuple<DimTypes...>, StrideOne>
    : public Layout<sizeof...(DimTypes), strip_index_type_t<IdxLin>, StrideOne> {

  using StrippedIdxLin = strip_index_type_t<IdxLin>;
  using Self = TypedLayout<IdxLin, camp::tuple<DimTypes...>, StrideOne>;
  using Base = Layout<sizeof...(DimTypes), StrippedIdxLin, StrideOne>;
  using DimArr = std::array<StrippedIdxLin, sizeof...(DimTypes)>;


  using Base::Base;
# 350 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Layout.hpp"
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr IdxLin operator()(
      DimTypes... indices) const
  {
    return IdxLin(Base::operator()(stripIndexType(indices)...));
  }
# 367 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Layout.hpp"
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void toIndices(IdxLin linear_index,
                                              DimTypes &... indices) const
  {
    toIndicesHelper(camp::make_idx_seq_t<sizeof...(DimTypes)>{},
                    std::forward<IdxLin>(linear_index),
                    std::forward<DimTypes &>(indices)...);
  }

private:







  template <typename... Indices, camp::idx_t... RangeInts>
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void toIndicesHelper(camp::idx_seq<RangeInts...>,
                                                    IdxLin linear_index,
                                                    Indices &... indices) const
  {
    Index_type locals[sizeof...(DimTypes)];
    Base::toIndices(stripIndexType(linear_index), locals[RangeInts]...);
  camp::sink((indices = Indices{static_cast<Indices>(locals[RangeInts])})...);
  }
};






template <ptrdiff_t s1_dim, size_t n_dims, typename IdxLin>
inline __attribute__((always_inline)) Layout<n_dims, IdxLin, s1_dim> make_stride_one(
    Layout<n_dims, IdxLin> const &l)
{
  return Layout<n_dims, IdxLin, s1_dim>(l);
}






template <ptrdiff_t s1_dim, typename IdxLin, typename IdxTuple>
inline __attribute__((always_inline)) TypedLayout<IdxLin, IdxTuple, s1_dim> make_stride_one(
    TypedLayout<IdxLin, IdxTuple> const &l)
{

  using Base = typename TypedLayout<IdxLin, IdxTuple>::Base;
  Base const &b = (Base const &)l;


  return TypedLayout<IdxLin, IdxTuple, s1_dim>(b);
}


}
# 106 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/OffsetLayout.hpp" 1
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/OffsetLayout.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PermutedLayout.hpp" 1
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PermutedLayout.hpp"
namespace RAJA
{
# 63 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PermutedLayout.hpp"
template <size_t Rank, typename IdxLin = Index_type>
auto make_permuted_layout(std::array<IdxLin, Rank> sizes,
                          std::array<camp::idx_t, Rank> permutation)
    -> Layout<Rank, IdxLin>
{
  std::array<IdxLin, Rank> strides;
  std::array<IdxLin, Rank> folded_strides;
  for (size_t i = 0; i < Rank; ++i) {

    folded_strides[i] = sizes[permutation[i]] ? 1 : 0;
    for (size_t j = i + 1; j < Rank; ++j) {
      folded_strides[i] *= sizes[permutation[j]] ? sizes[permutation[j]] : 1;
    }
  }

  for (size_t i = 0; i < Rank; ++i) {
    strides[permutation[i]] = folded_strides[i];
  }



  auto ret = Layout<Rank, IdxLin>();
  for (size_t i = 0; i < Rank; ++i) {
    ret.sizes[i] = sizes[i];
    ret.strides[i] = strides[i];
    ret.inv_strides[i] = strides[i] ? strides[i] : 1;
    ret.inv_mods[i] = sizes[i] ? sizes[i] : 1;
  }
  return ret;
}


template <camp::idx_t... Ints>
using Perm = camp::idx_seq<Ints...>;
template <camp::idx_t N>
using MakePerm = typename camp::make_idx_seq<N>::type;

}
# 33 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/OffsetLayout.hpp" 2

namespace RAJA
{

namespace internal
{

template <typename Range, typename IdxLin>
struct OffsetLayout_impl;

template <camp::idx_t... RangeInts, typename IdxLin>
struct OffsetLayout_impl<camp::idx_seq<RangeInts...>, IdxLin> {
  using Self = OffsetLayout_impl<camp::idx_seq<RangeInts...>, IdxLin>;
  using IndexRange = camp::idx_seq<RangeInts...>;
  using Base = RAJA::detail::LayoutBase_impl<IndexRange, IdxLin>;
  Base base_;

  static constexpr size_t n_dims = sizeof...(RangeInts);
  IdxLin offsets[n_dims]={0};

  constexpr inline __attribute__((always_inline)) OffsetLayout_impl(
      std::array<IdxLin, sizeof...(RangeInts)> lower,
      std::array<IdxLin, sizeof...(RangeInts)> upper)
      : base_{(upper[RangeInts] - lower[RangeInts] + 1)...},
        offsets{lower[RangeInts]...}
  {
  }

  constexpr inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) OffsetLayout_impl(Self const& c)
      : base_(c.base_), offsets{c.offsets[RangeInts]...}
  {
  }

  void shift(std::array<IdxLin, sizeof...(RangeInts)> shift)
  {
    for(size_t i=0; i<n_dims; ++i) offsets[i] += shift[i];
  }

  template<camp::idx_t N, typename Idx>
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void BoundsCheckError(Idx idx) const
  {
    printf("Error at index %d, value %ld is not within bounds [%ld, %ld] \n",
           static_cast<int>(N), static_cast<long int>(idx),
           static_cast<long int>(offsets[N]), static_cast<long int>(offsets[N] + base_.sizes[N] - 1));
    RAJA_ABORT_OR_THROW("Out of bounds error \n");
  }

  template <camp::idx_t N>
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void BoundsCheck() const
  {
  }

  template <camp::idx_t N, typename Idx, typename... Indices>
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) void BoundsCheck(Idx idx, Indices... indices) const
  {
    if(!(offsets[N] <=idx && idx < offsets[N] + base_.sizes[N]))
    {
      BoundsCheckError<N>(idx);
    }
    RAJA_UNUSED_VAR(idx);
    BoundsCheck<N+1>(indices...);
  }

  template <typename... Indices>
  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr IdxLin operator()(
      Indices... indices) const
  {



    return base_((indices - offsets[RangeInts])...);
  }

  static inline __attribute__((always_inline)) OffsetLayout_impl<IndexRange, IdxLin>
  from_layout_and_offsets(
      const std::array<IdxLin, sizeof...(RangeInts)>& offsets_in,
      const Layout<sizeof...(RangeInts), IdxLin>& rhs)
  {
    OffsetLayout_impl ret{rhs};
    camp::sink((ret.offsets[RangeInts] = offsets_in[RangeInts])...);
    return ret;
  }

  constexpr inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
  OffsetLayout_impl(const Layout<sizeof...(RangeInts), IdxLin>& rhs)
      : base_{rhs}
  {
  }
};

}

template <size_t n_dims = 1, typename IdxLin = Index_type>
struct OffsetLayout
    : public internal::OffsetLayout_impl<camp::make_idx_seq_t<n_dims>, IdxLin> {
  using Base =
      internal::OffsetLayout_impl<camp::make_idx_seq_t<n_dims>, IdxLin>;

  using internal::OffsetLayout_impl<camp::make_idx_seq_t<n_dims>,
                                    IdxLin>::OffsetLayout_impl;

  constexpr inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) OffsetLayout(
      const internal::OffsetLayout_impl<camp::make_idx_seq_t<n_dims>, IdxLin>&
          rhs)
      : Base{rhs}
  {
  }
};


template <typename IdxLin, typename DimTuple>
struct TypedOffsetLayout;

template <typename IdxLin, typename... DimTypes>
struct TypedOffsetLayout<IdxLin, camp::tuple<DimTypes...>>
: public OffsetLayout<sizeof...(DimTypes), Index_type>
{
   using Self = TypedOffsetLayout<IdxLin, camp::tuple<DimTypes...>>;
   using Base = OffsetLayout<sizeof...(DimTypes), Index_type>;
   using DimArr = std::array<Index_type, sizeof...(DimTypes)>;






   using OffsetLayout<sizeof...(DimTypes), Index_type>::OffsetLayout;


  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr IdxLin operator()(DimTypes... indices) const
  {
    return IdxLin(Base::operator()(stripIndexType(indices)...));
  }

};


template <size_t n_dims, typename IdxLin = Index_type>
auto make_offset_layout(const std::array<IdxLin, n_dims>& lower,
                        const std::array<IdxLin, n_dims>& upper)
    -> OffsetLayout<n_dims, IdxLin>
{
  return OffsetLayout<n_dims, IdxLin>{lower, upper};
}

template <size_t Rank, typename IdxLin = Index_type>
auto make_permuted_offset_layout(const std::array<IdxLin, Rank>& lower,
                                 const std::array<IdxLin, Rank>& upper,
                                 const std::array<IdxLin, Rank>& permutation)
    -> decltype(make_offset_layout<Rank, IdxLin>(lower, upper))
{
  std::array<IdxLin, Rank> sizes;
  for (size_t i = 0; i < Rank; ++i) {
    sizes[i] = upper[i] - lower[i] + 1;
  }
  return internal::OffsetLayout_impl<camp::make_idx_seq_t<Rank>, IdxLin>::
      from_layout_and_offsets(lower, make_permuted_layout(sizes, permutation));
}

}
# 107 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/View.hpp" 1
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/View.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/atomic.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/atomic.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/atomic_auto.hpp" 1
# 54 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/atomic_auto.hpp"
namespace RAJA
{


struct auto_atomic {
};


template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicAdd(auto_atomic, T volatile *acc, T value)
{
  return atomicAdd(RAJA::cuda_atomic {}, acc, value);
}


template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicSub(auto_atomic, T volatile *acc, T value)
{
  return atomicSub(RAJA::cuda_atomic {}, acc, value);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicMin(auto_atomic, T volatile *acc, T value)
{
  return atomicMin(RAJA::cuda_atomic {}, acc, value);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicMax(auto_atomic, T volatile *acc, T value)
{
  return atomicMax(RAJA::cuda_atomic {}, acc, value);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicInc(auto_atomic, T volatile *acc)
{
  return atomicInc(RAJA::cuda_atomic {}, acc);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicInc(auto_atomic,
                                         T volatile *acc,
                                         T compare)
{
  return atomicInc(RAJA::cuda_atomic {}, acc, compare);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicDec(auto_atomic, T volatile *acc)
{
  return atomicDec(RAJA::cuda_atomic {}, acc);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicDec(auto_atomic,
                                         T volatile *acc,
                                         T compare)
{
  return atomicDec(RAJA::cuda_atomic {}, acc, compare);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicAnd(auto_atomic, T volatile *acc, T value)
{
  return atomicAnd(RAJA::cuda_atomic {}, acc, value);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicOr(auto_atomic, T volatile *acc, T value)
{
  return atomicOr(RAJA::cuda_atomic {}, acc, value);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicXor(auto_atomic, T volatile *acc, T value)
{
  return atomicXor(RAJA::cuda_atomic {}, acc, value);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicExchange(auto_atomic,
                                              T volatile *acc,
                                              T value)
{
  return atomicExchange(RAJA::cuda_atomic {}, acc, value);
}

template <typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T
atomicCAS(auto_atomic, T volatile *acc, T compare, T value)
{
  return atomicCAS(RAJA::cuda_atomic {}, acc, compare, value);
}


}
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/atomic.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/atomic_builtin.hpp" 1
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/atomic_builtin.hpp"
namespace RAJA
{



struct builtin_atomic {
};

namespace detail
{
# 81 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/atomic_builtin.hpp"
inline __attribute__((always_inline)) unsigned builtin_atomic_CAS(unsigned volatile *acc,
                                        unsigned compare,
                                        unsigned value)
{
  __atomic_compare_exchange_n(
      acc, &compare, value, false, 4, 0);
  return compare;
}


inline __attribute__((always_inline)) unsigned long long builtin_atomic_CAS(
    unsigned long long volatile *acc,
    unsigned long long compare,
    unsigned long long value)
{
  __atomic_compare_exchange_n(
      acc, &compare, value, false, 4, 0);
  return compare;
}




template <typename T>
                inline __attribute__((always_inline))
    typename std::enable_if<sizeof(T) == sizeof(unsigned), T>::type
    builtin_atomic_CAS(T volatile *acc, T compare, T value)
{
  return RAJA::util::reinterp_A_as_B<unsigned, T>(
      builtin_atomic_CAS((unsigned volatile *)acc,
                         RAJA::util::reinterp_A_as_B<T, unsigned>(compare),
                         RAJA::util::reinterp_A_as_B<T, unsigned>(value)));
}

template <typename T>
                inline __attribute__((always_inline))
    typename std::enable_if<sizeof(T) == sizeof(unsigned long long), T>::type
    builtin_atomic_CAS(T volatile *acc, T compare, T value)
{
  return RAJA::util::reinterp_A_as_B<unsigned long long, T>(builtin_atomic_CAS(
      (unsigned long long volatile *)acc,
      RAJA::util::reinterp_A_as_B<T, unsigned long long>(compare),
      RAJA::util::reinterp_A_as_B<T, unsigned long long>(value)));
}


template <size_t BYTES>
struct BuiltinAtomicCAS;
template <size_t BYTES>
struct BuiltinAtomicCAS {
  static_assert(!(BYTES == 4 || BYTES == 8),
                "builtin atomic cas assumes 4 or 8 byte targets");
};


template <>
struct BuiltinAtomicCAS<4> {






  template <typename T, typename OPER, typename ShortCircuit>
                  inline __attribute__((always_inline)) T operator()(T volatile *acc,
                                           OPER const &oper,
                                           ShortCircuit const &sc) const
  {



    unsigned oldval, newval, readback;

    oldval = RAJA::util::reinterp_A_as_B<T, unsigned>(*acc);
    newval = RAJA::util::reinterp_A_as_B<T, unsigned>(
        oper(RAJA::util::reinterp_A_as_B<unsigned, T>(oldval)));

    while ((readback = builtin_atomic_CAS((unsigned *)acc, oldval, newval)) !=
           oldval) {
      if (sc(readback)) break;
      oldval = readback;
      newval = RAJA::util::reinterp_A_as_B<T, unsigned>(
          oper(RAJA::util::reinterp_A_as_B<unsigned, T>(oldval)));
    }
    return RAJA::util::reinterp_A_as_B<unsigned, T>(oldval);
  }



};

template <>
struct BuiltinAtomicCAS<8> {






  template <typename T, typename OPER, typename ShortCircuit>
                  inline __attribute__((always_inline)) T operator()(T volatile *acc,
                                           OPER const &oper,
                                           ShortCircuit const &sc) const
  {



    unsigned long long oldval, newval, readback;

    oldval = RAJA::util::reinterp_A_as_B<T, unsigned long long>(*acc);
    newval = RAJA::util::reinterp_A_as_B<T, unsigned long long>(
        oper(RAJA::util::reinterp_A_as_B<unsigned long long, T>(oldval)));

    while ((readback = builtin_atomic_CAS((unsigned long long *)acc,
                                          oldval,
                                          newval)) != oldval) {
      if (sc(readback)) break;
      oldval = readback;
      newval = RAJA::util::reinterp_A_as_B<T, unsigned long long>(
          oper(RAJA::util::reinterp_A_as_B<unsigned long long, T>(oldval)));
    }
    return RAJA::util::reinterp_A_as_B<unsigned long long, T>(oldval);
  }





};
# 218 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/policy/atomic_builtin.hpp"
template <typename T, typename OPER>
                inline __attribute__((always_inline)) T builtin_atomic_CAS_oper(T volatile *acc,
                                                      OPER &&oper)
{
  BuiltinAtomicCAS<sizeof(T)> cas;
  return cas(acc, std::forward<OPER>(oper), [](T const &) { return false; });
}

template <typename T, typename OPER, typename ShortCircuit>
                inline __attribute__((always_inline)) T builtin_atomic_CAS_oper_sc(T volatile *acc,
                                                         OPER &&oper,
                                                         ShortCircuit const &sc)
{
  BuiltinAtomicCAS<sizeof(T)> cas;
  return cas(acc, std::forward<OPER>(oper), sc);
}


}


template <typename T>
                inline __attribute__((always_inline)) T atomicAdd(builtin_atomic,
                                        T volatile *acc,
                                        T value)
{
  return detail::builtin_atomic_CAS_oper(acc, [=](T a) { return a + value; });
}


template <typename T>
                inline __attribute__((always_inline)) T atomicSub(builtin_atomic,
                                        T volatile *acc,
                                        T value)
{
  return detail::builtin_atomic_CAS_oper(acc, [=](T a) { return a - value; });
}

template <typename T>
                inline __attribute__((always_inline)) T atomicMin(builtin_atomic,
                                        T volatile *acc,
                                        T value)
{
  if (*acc < value) {
    return *acc;
  }
  return detail::builtin_atomic_CAS_oper_sc(acc,
                                            [=](T a) {
                                              return a < value ? a : value;
                                            },
                                            [=](T current) {
                                              return current < value;
                                            });
}

template <typename T>
                inline __attribute__((always_inline)) T atomicMax(builtin_atomic,
                                        T volatile *acc,
                                        T value)
{
  if (*acc > value) {
    return *acc;
  }
  return detail::builtin_atomic_CAS_oper_sc(acc,
                                            [=](T a) {
                                              return a > value ? a : value;
                                            },
                                            [=](T current) {
                                              return current > value;
                                            });
}

template <typename T>
                inline __attribute__((always_inline)) T atomicInc(builtin_atomic, T volatile *acc)
{
  return detail::builtin_atomic_CAS_oper(acc, [=](T a) { return a + 1; });
}

template <typename T>
                inline __attribute__((always_inline)) T atomicInc(builtin_atomic, T volatile *acc, T val)
{
  return detail::builtin_atomic_CAS_oper(acc, [=](T old) {
    return ((old >= val) ? 0 : (old + 1));
  });
}

template <typename T>
                inline __attribute__((always_inline)) T atomicDec(builtin_atomic, T volatile *acc)
{
  return detail::builtin_atomic_CAS_oper(acc, [=](T a) { return a - 1; });
}

template <typename T>
                inline __attribute__((always_inline)) T atomicDec(builtin_atomic, T volatile *acc, T val)
{
  return detail::builtin_atomic_CAS_oper(acc, [=](T old) {
    return (((old == 0) | (old > val)) ? val : (old - 1));
  });
}

template <typename T>
                inline __attribute__((always_inline)) T atomicAnd(builtin_atomic,
                                        T volatile *acc,
                                        T value)
{
  return detail::builtin_atomic_CAS_oper(acc, [=](T a) { return a & value; });
}

template <typename T>
                inline __attribute__((always_inline)) T atomicOr(builtin_atomic, T volatile *acc, T value)
{
  return detail::builtin_atomic_CAS_oper(acc, [=](T a) { return a | value; });
}

template <typename T>
                inline __attribute__((always_inline)) T atomicXor(builtin_atomic,
                                        T volatile *acc,
                                        T value)
{
  return detail::builtin_atomic_CAS_oper(acc, [=](T a) { return a ^ value; });
}

template <typename T>
                inline __attribute__((always_inline)) T atomicExchange(builtin_atomic,
                                             T volatile *acc,
                                             T value)
{
  return detail::builtin_atomic_CAS_oper(acc, [=](T) { return value; });
}

template <typename T>
                inline __attribute__((always_inline)) T
atomicCAS(builtin_atomic, T volatile *acc, T compare, T value)
{
  return detail::builtin_atomic_CAS(acc, compare, value);
}


}
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/atomic.hpp" 2



namespace RAJA
{
# 89 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/atomic.hpp"
#pragma nv_exec_check_disable
template <typename Policy, typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicAdd(T volatile *acc, T value)
{
  return RAJA::atomicAdd(Policy{}, acc, value);
}








#pragma nv_exec_check_disable
template <typename Policy, typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicSub(T volatile *acc, T value)
{
  return RAJA::atomicSub(Policy{}, acc, value);
}








#pragma nv_exec_check_disable
template <typename Policy, typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicMin(T volatile *acc, T value)
{
  return RAJA::atomicMin(Policy{}, acc, value);
}








#pragma nv_exec_check_disable
template <typename Policy, typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicMax(T volatile *acc, T value)
{
  return RAJA::atomicMax(Policy{}, acc, value);
}







#pragma nv_exec_check_disable
template <typename Policy, typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicInc(T volatile *acc)
{
  return RAJA::atomicInc(Policy{}, acc);
}
# 160 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/atomic.hpp"
#pragma nv_exec_check_disable
template <typename Policy, typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicInc(T volatile *acc, T compare)
{
  return RAJA::atomicInc(Policy{}, acc, compare);
}







#pragma nv_exec_check_disable
template <typename Policy, typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicDec(T volatile *acc)
{
  return RAJA::atomicDec(Policy{}, acc);
}
# 189 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/atomic.hpp"
#pragma nv_exec_check_disable
template <typename Policy, typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicDec(T volatile *acc, T compare)
{
  return RAJA::atomicDec(Policy{}, acc, compare);
}
# 204 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/atomic.hpp"
#pragma nv_exec_check_disable
template <typename Policy, typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicAnd(T volatile *acc, T value)
{
  static_assert(std::is_integral<T>::value,
                "atomicAnd can only be used on integral types");
  return RAJA::atomicAnd(Policy{}, acc, value);
}
# 221 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/atomic.hpp"
#pragma nv_exec_check_disable
template <typename Policy, typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicOr(T volatile *acc, T value)
{
  static_assert(std::is_integral<T>::value,
                "atomicOr can only be used on integral types");
  return RAJA::atomicOr(Policy{}, acc, value);
}
# 238 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/atomic.hpp"
#pragma nv_exec_check_disable
template <typename Policy, typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicXor(T volatile *acc, T value)
{
  static_assert(std::is_integral<T>::value,
                "atomicXor can only be used on integral types");
  return RAJA::atomicXor(Policy{}, acc, value);
}








#pragma nv_exec_check_disable
template <typename Policy, typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicExchange(T volatile *acc, T value)
{
  return RAJA::atomicExchange(Policy{}, acc, value);
}
# 270 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/atomic.hpp"
#pragma nv_exec_check_disable
template <typename Policy, typename T>
inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) T atomicCAS(T volatile *acc, T compare, T value)
{
  return RAJA::atomicCAS(Policy{}, acc, compare, value);
}
# 286 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/atomic.hpp"
template <typename T, typename Policy = auto_atomic>
class AtomicRef
{
public:
  using value_type = T;

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  constexpr explicit AtomicRef(value_type *value_ptr)
      : m_value_ptr(value_ptr){};

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  constexpr AtomicRef(AtomicRef const&c)
      : m_value_ptr(c.m_value_ptr){};

  AtomicRef& operator=(AtomicRef const&) = delete;

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type volatile * getPointer() const { return m_value_ptr; }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  void store(value_type rhs) const
  {
    *m_value_ptr = rhs;
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type operator=(value_type rhs) const
  {
    *m_value_ptr = rhs;
    return rhs;
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type load() const
  {
    return *m_value_ptr;
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  operator value_type() const
  {
    return *m_value_ptr;
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type exchange(value_type rhs) const
  {
    return RAJA::atomicExchange<Policy>(m_value_ptr, rhs);
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type CAS(value_type compare, value_type rhs) const
  {
    return RAJA::atomicCAS<Policy>(m_value_ptr, compare, rhs);
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  bool compare_exchange_strong(value_type& expect, value_type rhs) const
  {
    value_type compare = expect;
    value_type old = RAJA::atomicCAS<Policy>(m_value_ptr, compare, rhs);
    if (compare == old) {
      return true;
    } else {
      expect = old;
      return false;
    }
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  bool compare_exchange_weak(value_type& expect, value_type rhs) const
  {
    return this->compare_exchange_strong(expect, rhs);
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type operator++() const
  {
    return RAJA::atomicInc<Policy>(m_value_ptr) + 1;
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type operator++(int) const
  {
    return RAJA::atomicInc<Policy>(m_value_ptr);
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type operator--() const
  {
    return RAJA::atomicDec<Policy>(m_value_ptr) - 1;
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type operator--(int) const
  {
    return RAJA::atomicDec<Policy>(m_value_ptr);
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type fetch_add(value_type rhs) const
  {
    return RAJA::atomicAdd<Policy>(m_value_ptr, rhs);
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type operator+=(value_type rhs) const
  {
    return RAJA::atomicAdd<Policy>(m_value_ptr, rhs) + rhs;
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type fetch_sub(value_type rhs) const
  {
    return RAJA::atomicSub<Policy>(m_value_ptr, rhs);
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type operator-=(value_type rhs) const
  {
    return RAJA::atomicSub<Policy>(m_value_ptr, rhs) - rhs;
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type fetch_min(value_type rhs) const
  {
    return RAJA::atomicMin<Policy>(m_value_ptr, rhs);
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type min(value_type rhs) const
  {
    value_type old = RAJA::atomicMin<Policy>(m_value_ptr, rhs);
    return old < rhs ? old : rhs;
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type fetch_max(value_type rhs) const
  {
    return RAJA::atomicMax<Policy>(m_value_ptr, rhs);
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type max(value_type rhs) const
  {
    value_type old = RAJA::atomicMax<Policy>(m_value_ptr, rhs);
    return old > rhs ? old : rhs;
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type fetch_and(value_type rhs) const
  {
    return RAJA::atomicAnd<Policy>(m_value_ptr, rhs);
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type operator&=(value_type rhs) const
  {
    return RAJA::atomicAnd<Policy>(m_value_ptr, rhs) & rhs;
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type fetch_or(value_type rhs) const
  {
    return RAJA::atomicOr<Policy>(m_value_ptr, rhs);
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type operator|=(value_type rhs) const
  {
    return RAJA::atomicOr<Policy>(m_value_ptr, rhs) | rhs;
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type fetch_xor(value_type rhs) const
  {
    return RAJA::atomicXor<Policy>(m_value_ptr, rhs);
  }

  inline __attribute__((always_inline))
  __attribute__((host)) __attribute__((device))
  value_type operator^=(value_type rhs) const
  {
    return RAJA::atomicXor<Policy>(m_value_ptr, rhs) ^ rhs;
  }

private:
  value_type volatile *m_value_ptr;
};


}
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/View.hpp" 2




namespace RAJA
{




template<typename layout>
struct add_offset
{
  using type = RAJA::OffsetLayout<layout::n_dims>;
};

template<typename IdxLin, typename...DimTypes>
struct add_offset<RAJA::TypedLayout<IdxLin,camp::tuple<DimTypes...>>>
{
  using type = RAJA::TypedOffsetLayout<IdxLin,camp::tuple<DimTypes...>>;
};

template <typename ValueType,
          typename LayoutType,
          typename PointerType = ValueType *>
struct View {
  using value_type = ValueType;
  using pointer_type = PointerType;
  using layout_type = LayoutType;
  using nc_value_type = camp::decay<value_type>;
  using nc_pointer_type =
    camp::type::ptr::add<
      camp::type::cv::rem<
        camp::type::ptr::rem<pointer_type>
      >
    >;
  using NonConstView = View<nc_value_type, layout_type, nc_pointer_type>;

  layout_type const layout;
  pointer_type data;

  template <typename... Args>
  inline __attribute__((always_inline)) constexpr View(pointer_type data_ptr, Args... dim_sizes)
      : layout(dim_sizes...), data(data_ptr)
  {
  }

  inline __attribute__((always_inline)) constexpr View(pointer_type data_ptr, layout_type &&layout)
      : layout(layout), data(data_ptr)
  {
  }





  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr View(View const &V)
      : layout(V.layout), data(V.data)
  {
  }

  template <bool IsConstView = std::is_const<value_type>::value>
  inline __attribute__((always_inline)) constexpr View(
      typename std::enable_if<IsConstView, NonConstView>::type const &rhs)
      : layout(rhs.layout), data(rhs.data)
  {
  }

  inline __attribute__((always_inline)) void set_data(pointer_type data_ptr) { data = data_ptr; }

  template <size_t n_dims=layout_type::n_dims, typename IdxLin = Index_type>
  inline __attribute__((always_inline)) RAJA::View<ValueType, typename add_offset<layout_type>::type>
  shift(const std::array<IdxLin, n_dims>& shift)
  {
    static_assert(n_dims==layout_type::n_dims, "Dimension mismatch in view shift");

    typename add_offset<layout_type>::type shift_layout(layout);
    shift_layout.shift(shift);

    return RAJA::View<ValueType, typename add_offset<layout_type>::type>(data, shift_layout);
  }



  template <typename... Args>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) value_type &operator()(Args... args) const
  {
    auto idx = stripIndexType(layout(args...));
    return data[idx];
  }
};




template <typename Lay, typename Tup, camp::idx_t... Idxs>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
RAJA::Index_type selecttuple( Lay lyout, Tup&& tup, camp::idx_seq<Idxs...> )
{
  return lyout(
                camp::get<Idxs>(std::forward<Tup>(tup))...
              );
}


template <typename Seq1, typename Seq2>
struct cat_seq;

template <camp::idx_t... Idxs1, camp::idx_t... Idxs2>
struct cat_seq < camp::idx_seq<Idxs1...>,
                  camp::idx_seq<Idxs2...>
                >
{
  using type = camp::idx_seq<Idxs1..., Idxs2...>;
};

template <typename Seq1, typename Seq2>
using cat_seq_t = typename cat_seq<Seq1, Seq2>::type;


template <camp::idx_t Offset, typename Seq>
struct offset_seq;

template <camp::idx_t Offset, camp::idx_t... Idxs>
struct offset_seq<Offset, camp::idx_seq<Idxs...>>
{
  using type = camp::idx_seq<(Idxs+Offset)...>;
};

template <camp::idx_t Offset, typename Seq>
using offset_seq_t = typename offset_seq<Offset, Seq>::type;



template <typename Lay, RAJA::Index_type Nth = 0, typename Tup>
__attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) auto removenth( Lay lyout, Tup&& tup ) ->
  decltype( selecttuple<Lay>(
              lyout,
              std::forward<Tup>(tup),
              cat_seq_t< camp::make_idx_seq_t<Nth>,
                          offset_seq_t<
                            Nth+1,
                            camp::make_idx_seq_t<camp::tuple_size<Tup>::value - Nth-1>
                          >
                       >{}
            )
          )
{
  return selecttuple<Lay>(
              lyout,
              std::forward<Tup>(tup),
              cat_seq_t< camp::make_idx_seq_t<Nth>,
                          offset_seq_t<
                            Nth+1,
                            camp::make_idx_seq_t<camp::tuple_size<Tup>::value - Nth-1>
                          >
                       >{}
          );
}
# 193 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/View.hpp"
template <typename ValueType,
          typename LayoutType,
          RAJA::Index_type P2Pidx = 0,
          typename PointerType = ValueType **>
struct MultiView {
  using value_type = ValueType;
  using pointer_type = PointerType;
  using layout_type = LayoutType;
  using nc_value_type = camp::decay<value_type>;
  using nc_pointer_type =
    camp::type::ptr::add<
      camp::type::ptr::add<
        camp::type::cv::rem<
          camp::type::ptr::rem<
            camp::type::ptr::rem<pointer_type>
          >
        >
      >
    >;
  using NonConstView = MultiView<nc_value_type, layout_type, P2Pidx, nc_pointer_type>;

  layout_type const layout;
  nc_pointer_type data;

  template <typename... Args>
  inline __attribute__((always_inline)) constexpr MultiView(pointer_type data_ptr, Args... dim_sizes)
      : layout(dim_sizes...), data(data_ptr)
  {
  }

  inline __attribute__((always_inline)) constexpr MultiView(pointer_type data_ptr, layout_type &&layout)
      : layout(layout), data(data_ptr)
  {
  }





  inline __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) constexpr MultiView(MultiView const &V)
      : layout(V.layout), data(V.data)
  {
  }

  template <bool IsConstView = std::is_const<value_type>::value>
  inline __attribute__((always_inline)) constexpr MultiView(
      typename std::enable_if<IsConstView, NonConstView>::type const &rhs)
      : layout(rhs.layout),
        data(rhs.data)
  {
  }

  inline __attribute__((always_inline)) void set_data(pointer_type data_ptr) { data = data_ptr; }

  template <size_t n_dims=layout_type::n_dims, typename IdxLin = Index_type>
  inline __attribute__((always_inline)) RAJA::MultiView<ValueType, typename add_offset<layout_type>::type, P2Pidx>
  shift(const std::array<IdxLin, n_dims>& shift)
  {
    static_assert(n_dims==layout_type::n_dims, "Dimension mismatch in view shift");

    typename add_offset<layout_type>::type shift_layout(layout);
    shift_layout.shift(shift);

    return RAJA::MultiView<ValueType, typename add_offset<layout_type>::type, P2Pidx>(data, shift_layout);
  }





  template <typename... Args>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) value_type &operator()(Args... ar) const
  {
    auto pidx = stripIndexType( camp::get<P2Pidx>( camp::forward_as_tuple( ar... ) ) );

    if ( pidx < 0 )
    {
      RAJA_ABORT_OR_THROW( "Negative index while accessing array of pointers.\n" );
    }

    auto idx = stripIndexType( removenth<LayoutType, P2Pidx>( layout, camp::forward_as_tuple( ar... ) ) );
    return data[pidx][idx];
  }
};

template <typename ValueType,
          typename PointerType,
          typename LayoutType,
          typename... IndexTypes>
struct TypedViewBase {
  using Base = View<ValueType, LayoutType, PointerType>;

  Base base_;

  template <typename... Args>
  inline __attribute__((always_inline)) constexpr TypedViewBase(PointerType data_ptr, Args... dim_sizes)
      : base_(data_ptr, dim_sizes...)
  {
  }

  template <typename CLayoutType>
  inline __attribute__((always_inline)) constexpr TypedViewBase(PointerType data_ptr,
                                      CLayoutType &&layout)
      : base_(data_ptr, std::forward<CLayoutType>(layout))
  {
  }

  inline __attribute__((always_inline)) void set_data(PointerType data_ptr) { base_.set_data(data_ptr); }

  template <size_t n_dims=Base::layout_type::n_dims, typename IdxLin = Index_type>
  inline __attribute__((always_inline)) RAJA::TypedViewBase<ValueType, ValueType *, typename add_offset<LayoutType>::type, IndexTypes...>
  shift(const std::array<IdxLin, n_dims>& shift)
  {
    static_assert(n_dims==Base::layout_type::n_dims, "Dimension mismatch in view shift");

    typename add_offset<LayoutType>::type shift_layout(base_.layout);
    shift_layout.shift(shift);

    return RAJA::TypedViewBase<ValueType, ValueType *, typename add_offset<LayoutType>::type, IndexTypes...>(base_.data, shift_layout);
  }

  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) ValueType &operator()(IndexTypes... args) const
  {
    return base_.operator()(stripIndexType(args)...);
  }
};

template <typename ValueType, typename LayoutType, typename... IndexTypes>
using TypedView =
    TypedViewBase<ValueType, ValueType *, LayoutType, IndexTypes...>;

template <typename ViewType, typename AtomicPolicy = RAJA::auto_atomic>
struct AtomicViewWrapper {
  using base_type = ViewType;
  using pointer_type = typename base_type::pointer_type;
  using value_type = typename base_type::value_type;
  using atomic_type = RAJA::AtomicRef<value_type, AtomicPolicy>;

  base_type base_;

  inline __attribute__((always_inline))
  constexpr explicit AtomicViewWrapper(ViewType view) : base_(view) {}

  inline __attribute__((always_inline)) void set_data(pointer_type data_ptr) { base_.set_data(data_ptr); }

  template <typename... ARGS>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) atomic_type operator()(ARGS &&... args) const
  {
    return atomic_type(&base_.operator()(std::forward<ARGS>(args)...));
  }
};






template <typename ViewType>
struct AtomicViewWrapper<ViewType, RAJA::seq_atomic> {
  using base_type = ViewType;
  using pointer_type = typename base_type::pointer_type;
  using value_type = typename base_type::value_type;
  using atomic_type = RAJA::AtomicRef<value_type, RAJA::seq_atomic>;

  base_type base_;

  inline __attribute__((always_inline))
  constexpr explicit AtomicViewWrapper(ViewType const &view) : base_{view} {}

  inline __attribute__((always_inline)) void set_data(pointer_type data_ptr) { base_.set_data(data_ptr); }

  template <typename... ARGS>
  __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) value_type &operator()(ARGS &&... args) const
  {
    return base_.operator()(std::forward<ARGS>(args)...);
  }
};


template <typename AtomicPolicy, typename ViewType>
inline __attribute__((always_inline)) AtomicViewWrapper<ViewType, AtomicPolicy> make_atomic_view(
    ViewType const &view)
{

  return RAJA::AtomicViewWrapper<ViewType, AtomicPolicy>(view);
}


}
# 110 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2
# 130 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/LocalArray.hpp" 1
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/LocalArray.hpp"
namespace RAJA
{



template<camp::idx_t ... Sizes>
using ParamList = camp::idx_seq<Sizes...>;
# 51 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/LocalArray.hpp"
template<typename DataType, typename Perm, typename Sizes, typename... IndexTypes>
struct TypedLocalArray
{
};

template<typename DataType, camp::idx_t ... Perm, camp::idx_t ...Sizes, typename... IndexTypes>
struct TypedLocalArray<DataType, camp::idx_seq<Perm...>, RAJA::SizeList<Sizes...>, IndexTypes...>
{
  DataType *m_arrayPtr = nullptr;
  using element_t = DataType;
  using layout_t = StaticLayout<camp::idx_seq<Perm...>, Sizes...>;
  static const camp::idx_t NumElem = layout_t::size();

  __attribute__((host)) __attribute__((device))
  element_t &operator()(IndexTypes ...indices) const
  {
    return m_arrayPtr[layout_t::s_oper(stripIndexType(indices)...)];
  }
};



template<typename AtomicPolicy, typename DataType, typename Perm,
         typename Sizes, typename ... IndexTypes>
struct AtomicTypedLocalArray {
};

template<typename AtomicPolicy, typename DataType, camp::idx_t ... Perm,
         camp::idx_t ... Sizes, typename ... IndexTypes>
struct AtomicTypedLocalArray<AtomicPolicy, DataType, camp::idx_seq<Perm ...>,
                             RAJA::SizeList<Sizes ...>, IndexTypes ...>{
  DataType *m_arrayPtr = nullptr;
  using element_t = DataType;
  using atomic_ref_t = RAJA::AtomicRef<element_t, AtomicPolicy>;
  using layout_t = RAJA::StaticLayout<camp::idx_seq<Perm ...>, Sizes ...>;
  static const camp::idx_t NumElem = layout_t::size();

  __attribute__((host)) __attribute__((device))
  atomic_ref_t operator()(IndexTypes ... indices) const
  {
    return(atomic_ref_t(&m_arrayPtr[layout_t::s_oper(stripIndexType(indices)
                                                     ...)]));
  }
};



template<typename DataType, typename Perm, typename Sizes>
struct LocalArray
{
};

template<typename DataType, camp::idx_t ... Perm, camp::idx_t ...Sizes>
struct LocalArray<DataType, camp::idx_seq<Perm...>, RAJA::SizeList<Sizes...> >
{
  DataType *m_arrayPtr = nullptr;
  using element_t = DataType;
  using layout_t = StaticLayout<camp::idx_seq<Perm...>, Sizes...>;
  static const camp::idx_t NumElem = layout_t::size();

  template<typename ...Indices>
  __attribute__((host)) __attribute__((device))
  element_t &operator()(Indices ...indices) const
  {
    return m_arrayPtr[layout_t::s_oper(indices...)];
  }

};


}
# 131 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2




# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/BitMask.hpp" 1
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/BitMask.hpp"
namespace RAJA
{
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/BitMask.hpp"
  template<size_t Width, size_t Shift>
  struct BitMask {
    static constexpr size_t shift = Shift;
    static constexpr size_t width = Width;
    static constexpr size_t max_input_size = 1<<(Shift+Width);
    static constexpr size_t max_masked_size = 1<<Width;
    static constexpr size_t max_shifted_size = 1<<Shift;

    template<typename T>
    __attribute__((host)) __attribute__((device))
    static constexpr T maskValue(T input) {
      return( (input>>((T) Shift)) & (T) ((1<<(Width))-1));
    }
  };

}
# 136 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2
# 146 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup.hpp" 1
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup/WorkStorage.hpp" 1
# 33 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup/WorkStorage.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup/WorkStruct.hpp" 1
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup/WorkStruct.hpp"
namespace RAJA
{

namespace detail
{




template < size_t size, typename Vtable_T >
struct WorkStruct;







template < typename Vtable_T >
using GenericWorkStruct = WorkStruct<alignof(std::max_align_t), Vtable_T>;

template < size_t size, typename ... CallArgs >
struct WorkStruct<size, Vtable<CallArgs...>>
{
  using vtable_type = Vtable<CallArgs...>;



  template < typename holder, typename ... holder_ctor_args >
  static inline __attribute__((always_inline))
  void construct(void* ptr, const vtable_type* vtable, holder_ctor_args&&... ctor_args)
  {
    using true_value_type = WorkStruct<sizeof(holder), vtable_type>;
    using value_type = GenericWorkStruct<vtable_type>;

    static_assert(sizeof(holder) <= sizeof(true_value_type::obj),
        "holder must fit in WorkStruct::obj");
    static_assert(std::is_standard_layout<true_value_type>::value,
        "WorkStruct must be a standard layout type");
    static_assert(std::is_standard_layout<value_type>::value,
        "GenericWorkStruct must be a standard layout type");
    static_assert(__builtin_offsetof(value_type, obj) == __builtin_offsetof(true_value_type, obj),
        "WorkStruct and GenericWorkStruct must have obj at the same offset");
    static_assert(sizeof(value_type) <= sizeof(true_value_type),
        "WorkStruct must not be smaller than GenericWorkStruct");

    true_value_type* value_ptr = static_cast<true_value_type*>(ptr);

    value_ptr->vtable = vtable;
    value_ptr->call_function_ptr = vtable->call_function_ptr;
    new(&value_ptr->obj) holder(std::forward<holder_ctor_args>(ctor_args)...);
  }


  static inline __attribute__((always_inline))
  void move_destroy(WorkStruct* value_dst,
                    WorkStruct* value_src)
  {
    value_dst->vtable = value_src->vtable;
    value_dst->call_function_ptr = value_src->call_function_ptr;
    value_dst->vtable->move_construct_destroy_function_ptr(&value_dst->obj, &value_src->obj);
  }


  static inline __attribute__((always_inline))
  void destroy(WorkStruct* value_ptr)
  {
    value_ptr->vtable->destroy_function_ptr(&value_ptr->obj);
  }


  static __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline))
  void call(const WorkStruct* value_ptr, CallArgs... args)
  {
    value_ptr->call_function_ptr(&value_ptr->obj, std::forward<CallArgs>(args)...);
  }

  const vtable_type* vtable;
  typename vtable_type::call_sig call_function_ptr;
  typename std::aligned_storage<size, alignof(std::max_align_t)>::type obj;
};

}

}
# 34 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup/WorkStorage.hpp" 2


namespace RAJA
{

namespace detail
{
# 49 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup/WorkStorage.hpp"
template < typename iterator_base >
struct random_access_iterator : iterator_base
{
  using base = iterator_base;
  using value_type = const typename base::value_type;
  using pointer = typename base::pointer;
  using reference = typename base::reference;
  using difference_type = typename base::difference_type;
  using iterator_category = std::random_access_iterator_tag;

  using base::base;

  random_access_iterator(random_access_iterator const&) = default;
  random_access_iterator(random_access_iterator &&) = default;

  random_access_iterator& operator=(random_access_iterator const&) = default;
  random_access_iterator& operator=(random_access_iterator &&) = default;


  __attribute__((host)) __attribute__((device)) reference operator*() const
  {
    return *static_cast<base const&>(*this);
  }

  __attribute__((host)) __attribute__((device)) pointer operator->() const
  {
    return &(*(*this));
  }

  __attribute__((host)) __attribute__((device)) reference operator[](difference_type i) const
  {
    random_access_iterator copy = *this;
    copy += i;
    return *copy;
  }

  __attribute__((host)) __attribute__((device)) random_access_iterator& operator++()
  {
    (*this) += 1;
    return *this;
  }

  __attribute__((host)) __attribute__((device)) random_access_iterator operator++(int)
  {
    random_access_iterator copy = *this;
    ++(*this);
    return copy;
  }

  __attribute__((host)) __attribute__((device)) random_access_iterator& operator--()
  {
    (*this) -= 1;
    return *this;
  }

  __attribute__((host)) __attribute__((device)) random_access_iterator operator--(int)
  {
    random_access_iterator copy = *this;
    --(*this);
    return copy;
  }

  __attribute__((host)) __attribute__((device)) random_access_iterator& operator+=(difference_type rhs)
  {
    static_cast<base&>(*this) += rhs;
    return *this;
  }

  __attribute__((host)) __attribute__((device)) random_access_iterator& operator-=(difference_type rhs)
  {
    (*this) += -rhs;
    return *this;
  }

  __attribute__((host)) __attribute__((device)) friend inline random_access_iterator operator+(
      random_access_iterator const& lhs, difference_type rhs)
  {
    random_access_iterator copy = lhs;
    copy += rhs;
    return copy;
  }

  __attribute__((host)) __attribute__((device)) friend inline random_access_iterator operator+(
      difference_type lhs, random_access_iterator const& rhs)
  {
    random_access_iterator copy = rhs;
    copy += lhs;
    return copy;
  }

  __attribute__((host)) __attribute__((device)) friend inline random_access_iterator operator-(
      random_access_iterator const& lhs, difference_type rhs)
  {
    random_access_iterator copy = lhs;
    copy -= rhs;
    return copy;
  }

  __attribute__((host)) __attribute__((device)) friend inline difference_type operator-(
      random_access_iterator const& lhs, random_access_iterator const& rhs)
  {
    return static_cast<base const&>(lhs) - static_cast<base const&>(rhs);
  }

  __attribute__((host)) __attribute__((device)) friend inline bool operator==(
      random_access_iterator const& lhs, random_access_iterator const& rhs)
  {
    return static_cast<base const&>(lhs) == static_cast<base const&>(rhs);
  }

  __attribute__((host)) __attribute__((device)) friend inline bool operator!=(
      random_access_iterator const& lhs, random_access_iterator const& rhs)
  {
    return !(lhs == rhs);
  }

  __attribute__((host)) __attribute__((device)) friend inline bool operator<(
      random_access_iterator const& lhs, random_access_iterator const& rhs)
  {
    return static_cast<base const&>(lhs) < static_cast<base const&>(rhs);
  }

  __attribute__((host)) __attribute__((device)) friend inline bool operator<=(
      random_access_iterator const& lhs, random_access_iterator const& rhs)
  {
    return !(rhs < lhs);
  }

  __attribute__((host)) __attribute__((device)) friend inline bool operator>(
      random_access_iterator const& lhs, random_access_iterator const& rhs)
  {
    return rhs < lhs;
  }

  __attribute__((host)) __attribute__((device)) friend inline bool operator>=(
      random_access_iterator const& lhs, random_access_iterator const& rhs)
  {
    return !(lhs < rhs);
  }
};





template < typename STORAGE_POLICY_T, typename ALLOCATOR_T, typename Vtable_T >
class WorkStorage;

template < typename ALLOCATOR_T, typename Vtable_T >
class WorkStorage<RAJA::array_of_pointers, ALLOCATOR_T, Vtable_T>
{
  using allocator_traits_type = std::allocator_traits<ALLOCATOR_T>;
  using propagate_on_container_copy_assignment =
      typename allocator_traits_type::propagate_on_container_copy_assignment;
  using propagate_on_container_move_assignment =
      typename allocator_traits_type::propagate_on_container_move_assignment;
  using propagate_on_container_swap =
      typename allocator_traits_type::propagate_on_container_swap;
  static_assert(std::is_same<typename allocator_traits_type::value_type, char>::value,
      "WorkStorage expects an allocator for 'char's.");
public:
  using storage_policy = RAJA::array_of_pointers;
  using vtable_type = Vtable_T;

  template < typename holder >
  using true_value_type = WorkStruct<sizeof(holder), vtable_type>;

  using value_type = GenericWorkStruct<vtable_type>;
  using allocator_type = ALLOCATOR_T;
  using size_type = std::size_t;
  using difference_type = std::ptrdiff_t;
  using reference = value_type&;
  using const_reference = const value_type&;
  using pointer = value_type*;
  using const_pointer = const value_type*;

private:

  struct pointer_and_size
  {
    pointer ptr;
    size_type size;
  };

public:


  struct const_iterator_base
  {
    using value_type = const typename WorkStorage::value_type;
    using pointer = typename WorkStorage::const_pointer;
    using reference = typename WorkStorage::const_reference;
    using difference_type = typename WorkStorage::difference_type;
    using iterator_category = std::random_access_iterator_tag;

    const_iterator_base(const pointer_and_size* ptrptr)
      : m_ptrptr(ptrptr)
    { }

    __attribute__((host)) __attribute__((device)) reference operator*() const
    {
      return *(m_ptrptr->ptr);
    }

    __attribute__((host)) __attribute__((device)) const_iterator_base& operator+=(difference_type n)
    {
      m_ptrptr += n;
      return *this;
    }

    __attribute__((host)) __attribute__((device)) friend inline difference_type operator-(
        const_iterator_base const& lhs_iter, const_iterator_base const& rhs_iter)
    {
      return lhs_iter.m_ptrptr - rhs_iter.m_ptrptr;
    }

    __attribute__((host)) __attribute__((device)) friend inline bool operator==(
        const_iterator_base const& lhs_iter, const_iterator_base const& rhs_iter)
    {
      return lhs_iter.m_ptrptr == rhs_iter.m_ptrptr;
    }

    __attribute__((host)) __attribute__((device)) friend inline bool operator<(
        const_iterator_base const& lhs_iter, const_iterator_base const& rhs_iter)
    {
      return lhs_iter.m_ptrptr < rhs_iter.m_ptrptr;
    }

  private:
    const pointer_and_size* m_ptrptr;
  };

  using const_iterator = random_access_iterator<const_iterator_base>;


  explicit WorkStorage(allocator_type const& aloc)
    : m_vec(0, aloc)
    , m_aloc(aloc)
  { }

  WorkStorage(WorkStorage const&) = delete;
  WorkStorage& operator=(WorkStorage const&) = delete;

  WorkStorage(WorkStorage&& rhs)
    : m_vec(std::move(rhs.m_vec))
    , m_aloc(std::move(rhs.m_aloc))
  { }

  WorkStorage& operator=(WorkStorage&& rhs)
  {
    if (this != &rhs) {
      move_assign_private(std::move(rhs), propagate_on_container_move_assignment{});
    }
    return *this;
  }




  void reserve(size_type num_loops, size_type loop_storage_size)
  {
    RAJA_UNUSED_VAR(loop_storage_size);
    m_vec.reserve(num_loops);
  }


  size_type size() const
  {
    return m_vec.size();
  }

  const_iterator begin() const
  {
    return const_iterator(m_vec.begin());
  }

  const_iterator end() const
  {
    return const_iterator(m_vec.end());
  }


  size_type storage_size() const
  {
    size_type storage_size_nbytes = 0;
    for (size_t i = 0; i < m_vec.size(); ++i) {
      storage_size_nbytes += m_vec[i].size;
    }
    return storage_size_nbytes;
  }

  template < typename holder, typename ... holder_ctor_args >
  void emplace(const vtable_type* vtable, holder_ctor_args&&... ctor_args)
  {
    m_vec.emplace_back(create_value<holder>(
        vtable, std::forward<holder_ctor_args>(ctor_args)...));
  }


  void clear()
  {
    while (!m_vec.empty()) {
      destroy_value(m_vec.back());
      m_vec.pop_back();
    }
    m_vec.shrink_to_fit();
  }

  ~WorkStorage()
  {
    clear();
  }

private:
  RAJAVec<pointer_and_size, typename allocator_traits_type::template rebind_alloc<pointer_and_size>> m_vec;
  allocator_type m_aloc;


  void move_assign_private(WorkStorage&& rhs, std::true_type)
  {
    clear();
    m_vec = std::move(rhs.m_vec);
    m_aloc = std::move(rhs.m_aloc);
  }


  void move_assign_private(WorkStorage&& rhs, std::false_type)
  {
    clear();
    if (m_aloc == rhs.m_aloc) {

      m_vec = std::move(rhs.m_vec);
    } else {

      for (size_type i = 0; i < rhs.m_vec.size(); ++i) {
        m_vec.emplace_back(move_destroy_value(std::move(rhs), rhs.m_vec[i]));
      }
      rhs.m_vec.clear();
      rhs.clear();
    }
  }


  template < typename holder, typename ... holder_ctor_args >
  pointer_and_size create_value(const vtable_type* vtable,
                                holder_ctor_args&&... ctor_args)
  {
    const size_type value_size = sizeof(true_value_type<holder>);

    pointer value_ptr = reinterpret_cast<pointer>(
        allocator_traits_type::allocate(m_aloc, value_size));

    value_type::template construct<holder>(
        value_ptr, vtable, std::forward<holder_ctor_args>(ctor_args)...);

    return pointer_and_size{value_ptr, value_size};
  }



  pointer_and_size move_destroy_value(WorkStorage&& rhs,
                                      pointer_and_size other_value_and_size)
  {
    pointer value_ptr = reinterpret_cast<pointer>(
        allocator_traits_type::allocate(m_aloc, other_value_and_size.size));

    value_type::move_destroy(value_ptr, other_value_and_size.ptr);

    allocator_traits_type::deallocate(rhs.m_aloc,
        reinterpret_cast<char*>(other_value_and_size.ptr), other_value_and_size.size);

    return pointer_and_size{value_ptr, other_value_and_size.size};
  }


  void destroy_value(pointer_and_size value_and_size_ptr)
  {
    value_type::destroy(value_and_size_ptr.ptr);
    allocator_traits_type::deallocate(m_aloc,
        reinterpret_cast<char*>(value_and_size_ptr.ptr), value_and_size_ptr.size);
  }
};

template < typename ALLOCATOR_T, typename Vtable_T >
class WorkStorage<RAJA::ragged_array_of_objects, ALLOCATOR_T, Vtable_T>
{
  using allocator_traits_type = std::allocator_traits<ALLOCATOR_T>;
  using propagate_on_container_copy_assignment =
      typename allocator_traits_type::propagate_on_container_copy_assignment;
  using propagate_on_container_move_assignment =
      typename allocator_traits_type::propagate_on_container_move_assignment;
  using propagate_on_container_swap =
      typename allocator_traits_type::propagate_on_container_swap;
  static_assert(std::is_same<typename allocator_traits_type::value_type, char>::value,
      "WorkStorage expects an allocator for 'char's.");
public:
  using storage_policy = RAJA::ragged_array_of_objects;
  using vtable_type = Vtable_T;

  template < typename holder >
  using true_value_type = WorkStruct<sizeof(holder), vtable_type>;

  using value_type = GenericWorkStruct<vtable_type>;
  using allocator_type = ALLOCATOR_T;
  using size_type = std::size_t;
  using difference_type = std::ptrdiff_t;
  using reference = value_type&;
  using const_reference = const value_type&;
  using pointer = value_type*;
  using const_pointer = const value_type*;


  struct const_iterator_base
  {
    using value_type = const typename WorkStorage::value_type;
    using pointer = typename WorkStorage::const_pointer;
    using reference = typename WorkStorage::const_reference;
    using difference_type = typename WorkStorage::difference_type;
    using iterator_category = std::random_access_iterator_tag;

    const_iterator_base(const char* array_begin, const size_type* offset_iter)
      : m_array_begin(array_begin)
      , m_offset_iter(offset_iter)
    { }

    __attribute__((host)) __attribute__((device)) reference operator*() const
    {
      return *reinterpret_cast<pointer>(
          m_array_begin + *m_offset_iter);
    }

    __attribute__((host)) __attribute__((device)) const_iterator_base& operator+=(difference_type n)
    {
      m_offset_iter += n;
      return *this;
    }

    __attribute__((host)) __attribute__((device)) friend inline difference_type operator-(
        const_iterator_base const& lhs_iter, const_iterator_base const& rhs_iter)
    {
      return lhs_iter.m_offset_iter - rhs_iter.m_offset_iter;
    }

    __attribute__((host)) __attribute__((device)) friend inline bool operator==(
        const_iterator_base const& lhs_iter, const_iterator_base const& rhs_iter)
    {
      return lhs_iter.m_offset_iter == rhs_iter.m_offset_iter;
    }

    __attribute__((host)) __attribute__((device)) friend inline bool operator<(
        const_iterator_base const& lhs_iter, const_iterator_base const& rhs_iter)
    {
      return lhs_iter.m_offset_iter < rhs_iter.m_offset_iter;
    }

  private:
    const char* m_array_begin;
    const size_type* m_offset_iter;
  };

  using const_iterator = random_access_iterator<const_iterator_base>;


  explicit WorkStorage(allocator_type const& aloc)
    : m_offsets(0, aloc)
    , m_aloc(aloc)
  { }

  WorkStorage(WorkStorage const&) = delete;
  WorkStorage& operator=(WorkStorage const&) = delete;

  WorkStorage(WorkStorage&& rhs)
    : m_offsets(std::move(rhs.m_offsets))
    , m_array_begin(rhs.m_array_begin)
    , m_array_end(rhs.m_array_end)
    , m_array_cap(rhs.m_array_cap)
    , m_aloc(std::move(rhs.m_aloc))
  {
    rhs.m_array_begin = nullptr;
    rhs.m_array_end = nullptr;
    rhs.m_array_cap = nullptr;
  }

  WorkStorage& operator=(WorkStorage&& rhs)
  {
    if (this != &rhs) {
      move_assign_private(std::move(rhs), propagate_on_container_move_assignment{});
    }
    return *this;
  }



  void reserve(size_type num_loops, size_type loop_storage_size)
  {
    m_offsets.reserve(num_loops);
    array_reserve(loop_storage_size);
  }


  size_type size() const
  {
    return m_offsets.size();
  }

  const_iterator begin() const
  {
    return const_iterator(m_array_begin, m_offsets.begin());
  }

  const_iterator end() const
  {
    return const_iterator(m_array_begin, m_offsets.end());
  }


  size_type storage_size() const
  {
    return m_array_end - m_array_begin;
  }

  template < typename holder, typename ... holder_ctor_args >
  void emplace(const vtable_type* vtable, holder_ctor_args&&... ctor_args)
  {
    size_type value_offset = storage_size();
    size_type value_size = create_value<holder>(value_offset,
        vtable, std::forward<holder_ctor_args>(ctor_args)...);
    m_offsets.emplace_back(value_offset);
    m_array_end += value_size;
  }


  void clear()
  {
    array_clear();
    if (m_array_begin != nullptr) {
      allocator_traits_type::deallocate(m_aloc, m_array_begin, storage_capacity());
      m_array_begin = nullptr;
      m_array_end = nullptr;
      m_array_cap = nullptr;
    }
  }

  ~WorkStorage()
  {
    clear();
  }

private:
  RAJAVec<size_type, typename allocator_traits_type::template rebind_alloc<size_type>> m_offsets;
  char* m_array_begin = nullptr;
  char* m_array_end = nullptr;
  char* m_array_cap = nullptr;
  allocator_type m_aloc;


  void move_assign_private(WorkStorage&& rhs, std::true_type)
  {
    clear();

    m_offsets = std::move(rhs.m_offsets);
    m_array_begin = rhs.m_array_begin;
    m_array_end = rhs.m_array_end ;
    m_array_cap = rhs.m_array_cap ;
    m_aloc = std::move(rhs.m_aloc);

    rhs.m_array_begin = nullptr;
    rhs.m_array_end = nullptr;
    rhs.m_array_cap = nullptr;
  }


  void move_assign_private(WorkStorage&& rhs, std::false_type)
  {
    clear();
    if (m_aloc == rhs.m_aloc) {

      m_offsets = std::move(rhs.m_offsets);
      m_array_begin = rhs.m_array_begin;
      m_array_end = rhs.m_array_end ;
      m_array_cap = rhs.m_array_cap ;

      rhs.m_array_begin = nullptr;
      rhs.m_array_end = nullptr;
      rhs.m_array_cap = nullptr;
    } else {
      array_reserve(rhs.storage_size());

      for (size_type i = 0; i < rhs.size(); ++i) {
        m_array_end = m_array_begin + rhs.m_offsets[i];
        move_destroy_value(m_array_end, rhs.m_array_begin + rhs.m_offsets[i]);
        m_offsets.emplace_back(rhs.m_offsets[i]);
      }
      m_array_end = m_array_begin + rhs.storage_size();
      rhs.m_array_end = rhs.m_array_begin;
      rhs.m_offsets.clear();
      rhs.clear();
    }
  }


  size_type storage_capacity() const
  {
    return m_array_cap - m_array_begin;
  }


  size_type storage_unused() const
  {
    return m_array_cap - m_array_end;
  }


  void array_reserve(size_type loop_storage_size)
  {
    if (loop_storage_size > storage_capacity()) {

      char* new_array_begin =
          allocator_traits_type::allocate(m_aloc, loop_storage_size);
      char* new_array_end = new_array_begin + storage_size();
      char* new_array_cap = new_array_begin + loop_storage_size;

      for (size_type i = 0; i < size(); ++i) {
        move_destroy_value(new_array_begin + m_offsets[i],
                             m_array_begin + m_offsets[i]);
      }

      if (m_array_begin != nullptr) {
        allocator_traits_type::deallocate(m_aloc, m_array_begin, storage_capacity());
      }

      m_array_begin = new_array_begin;
      m_array_end = new_array_end ;
      m_array_cap = new_array_cap ;
    }
  }


  void array_clear()
  {
    while (!m_offsets.empty()) {
      destroy_value(m_offsets.back());
      m_array_end = m_array_begin + m_offsets.back();
      m_offsets.pop_back();
    }
    m_offsets.shrink_to_fit();
  }



  template < typename holder, typename ... holder_ctor_args >
  size_type create_value(size_type value_offset,
                         const vtable_type* vtable,
                         holder_ctor_args&&... ctor_args)
  {
    const size_type value_size = sizeof(true_value_type<holder>);

    if (value_size > storage_unused()) {
      array_reserve(std::max(storage_size() + value_size, 2*storage_capacity()));
    }

    pointer value_ptr = reinterpret_cast<pointer>(m_array_begin + value_offset);

    value_type::template construct<holder>(
        value_ptr, vtable, std::forward<holder_ctor_args>(ctor_args)...);

    return value_size;
  }



  void move_destroy_value(char* value_ptr, char* other_value_ptr)
  {
    value_type::move_destroy(reinterpret_cast<pointer>(value_ptr),
                             reinterpret_cast<pointer>(other_value_ptr));
  }


  void destroy_value(size_type value_offset)
  {
    pointer value_ptr =
        reinterpret_cast<pointer>(m_array_begin + value_offset);
    value_type::destroy(value_ptr);
  }
};

template < typename ALLOCATOR_T, typename Vtable_T >
class WorkStorage<RAJA::constant_stride_array_of_objects,
                  ALLOCATOR_T,
                  Vtable_T>
{
  using allocator_traits_type = std::allocator_traits<ALLOCATOR_T>;
  using propagate_on_container_copy_assignment =
      typename allocator_traits_type::propagate_on_container_copy_assignment;
  using propagate_on_container_move_assignment =
      typename allocator_traits_type::propagate_on_container_move_assignment;
  using propagate_on_container_swap =
      typename allocator_traits_type::propagate_on_container_swap;
  static_assert(std::is_same<typename allocator_traits_type::value_type, char>::value,
      "WorkStorage expects an allocator for 'char's.");
public:
  using storage_policy = RAJA::constant_stride_array_of_objects;
  using vtable_type = Vtable_T;

  template < typename holder >
  using true_value_type = WorkStruct<sizeof(holder), vtable_type>;

  using value_type = GenericWorkStruct<vtable_type>;
  using allocator_type = ALLOCATOR_T;
  using size_type = std::size_t;
  using difference_type = std::ptrdiff_t;
  using reference = value_type&;
  using const_reference = const value_type&;
  using pointer = value_type*;
  using const_pointer = const value_type*;


  struct const_iterator_base
  {
    using value_type = const typename WorkStorage::value_type;
    using pointer = typename WorkStorage::const_pointer;
    using reference = typename WorkStorage::const_reference;
    using difference_type = typename WorkStorage::difference_type;
    using iterator_category = std::random_access_iterator_tag;

    const_iterator_base(const char* array_pos, size_type stride)
      : m_array_pos(array_pos)
      , m_stride(stride)
    { }

    __attribute__((host)) __attribute__((device)) reference operator*() const
    {
      return *reinterpret_cast<const value_type*>(m_array_pos);
    }

    __attribute__((host)) __attribute__((device)) const_iterator_base& operator+=(difference_type n)
    {
      m_array_pos += n * m_stride;
      return *this;
    }

    __attribute__((host)) __attribute__((device)) friend inline difference_type operator-(
        const_iterator_base const& lhs_iter, const_iterator_base const& rhs_iter)
    {
      return (lhs_iter.m_array_pos - rhs_iter.m_array_pos) / lhs_iter.m_stride;
    }

    __attribute__((host)) __attribute__((device)) friend inline bool operator==(
        const_iterator_base const& lhs_iter, const_iterator_base const& rhs_iter)
    {
      return lhs_iter.m_array_pos == rhs_iter.m_array_pos;
    }

    __attribute__((host)) __attribute__((device)) friend inline bool operator<(
        const_iterator_base const& lhs_iter, const_iterator_base const& rhs_iter)
    {
      return lhs_iter.m_array_pos < rhs_iter.m_array_pos;
    }

  private:
    const char* m_array_pos;
    size_type m_stride;
  };

  using const_iterator = random_access_iterator<const_iterator_base>;


  explicit WorkStorage(allocator_type const& aloc)
    : m_aloc(aloc)
  { }

  WorkStorage(WorkStorage const&) = delete;
  WorkStorage& operator=(WorkStorage const&) = delete;

  WorkStorage(WorkStorage&& rhs)
    : m_aloc(std::move(rhs.m_aloc))
    , m_stride(rhs.m_stride)
    , m_array_begin(rhs.m_array_begin)
    , m_array_end(rhs.m_array_end)
    , m_array_cap(rhs.m_array_cap)
  {

    rhs.m_array_begin = nullptr;
    rhs.m_array_end = nullptr;
    rhs.m_array_cap = nullptr;
  }

  WorkStorage& operator=(WorkStorage&& rhs)
  {
    if (this != &rhs) {
      move_assign_private(std::move(rhs), propagate_on_container_move_assignment{});
    }
    return *this;
  }



  void reserve(size_type num_loops, size_type loop_storage_size)
  {
    size_type num_storage_loops =
        std::max(num_loops, (loop_storage_size + m_stride - 1) / m_stride);
    array_reserve(num_storage_loops*m_stride, m_stride);
  }


  size_type size() const
  {
    return storage_size() / m_stride;
  }

  const_iterator begin() const
  {
    return const_iterator(m_array_begin, m_stride);
  }

  const_iterator end() const
  {
    return const_iterator(m_array_end, m_stride);
  }


  size_type storage_size() const
  {
    return m_array_end - m_array_begin;
  }

  template < typename holder, typename ... holder_ctor_args >
  void emplace(const vtable_type* vtable, holder_ctor_args&&... ctor_args)
  {
    create_value<holder>(vtable, std::forward<holder_ctor_args>(ctor_args)...);
    m_array_end += m_stride;
  }


  void clear()
  {
    array_clear();
    if (m_array_begin != nullptr) {
      allocator_traits_type::deallocate(m_aloc, m_array_begin, storage_capacity());
      m_array_begin = nullptr;
      m_array_end = nullptr;
      m_array_cap = nullptr;
    }
  }

  ~WorkStorage()
  {
    clear();
  }

private:
  allocator_type m_aloc;
  size_type m_stride = 1;
  char* m_array_begin = nullptr;
  char* m_array_end = nullptr;
  char* m_array_cap = nullptr;


  void move_assign_private(WorkStorage&& rhs, std::true_type)
  {
    clear();

    m_aloc = std::move(rhs.m_aloc);
    m_stride = rhs.m_stride ;
    m_array_begin = rhs.m_array_begin;
    m_array_end = rhs.m_array_end ;
    m_array_cap = rhs.m_array_cap ;


    rhs.m_array_begin = nullptr;
    rhs.m_array_end = nullptr;
    rhs.m_array_cap = nullptr;
  }


  void move_assign_private(WorkStorage&& rhs, std::false_type)
  {
    clear();
    if (m_aloc == rhs.m_aloc) {

      m_stride = rhs.m_stride ;
      m_array_begin = rhs.m_array_begin;
      m_array_end = rhs.m_array_end ;
      m_array_cap = rhs.m_array_cap ;


      rhs.m_array_begin = nullptr;
      rhs.m_array_end = nullptr;
      rhs.m_array_cap = nullptr;
    } else {

      m_stride = rhs.m_stride;
      array_reserve(rhs.storage_size(), rhs.m_stride);

      for (size_type i = 0; i < rhs.size(); ++i) {
        move_destroy_value(m_array_end, rhs.m_array_begin + i * rhs.m_stride);
        m_array_end += m_stride;
      }
      rhs.m_array_end = rhs.m_array_begin;
      rhs.clear();
    }
  }


  size_type storage_capacity() const
  {
    return m_array_cap - m_array_begin;
  }


  size_type storage_unused() const
  {
    return m_array_cap - m_array_end;
  }






  void array_reserve(size_type loop_storage_size, size_type new_stride)
  {
    if (loop_storage_size > storage_capacity() || new_stride > m_stride) {

      char* new_array_begin =
          allocator_traits_type::allocate(m_aloc, loop_storage_size);
      char* new_array_end = new_array_begin + size() * new_stride;
      char* new_array_cap = new_array_begin + loop_storage_size;

      for (size_type i = 0; i < size(); ++i) {
        move_destroy_value(new_array_begin + i * new_stride,
                             m_array_begin + i * m_stride);
      }

      if (m_array_begin != nullptr) {
        allocator_traits_type::deallocate(m_aloc, m_array_begin, storage_capacity());
      }

      m_stride = new_stride ;
      m_array_begin = new_array_begin;
      m_array_end = new_array_end ;
      m_array_cap = new_array_cap ;
    }
  }


  void array_clear()
  {
    for (size_type value_offset = storage_size(); value_offset > 0; value_offset -= m_stride) {
      destroy_value(value_offset - m_stride);
      m_array_end -= m_stride;
    }
  }



  template < typename holder, typename ... holder_ctor_args >
  void create_value(const vtable_type* vtable,
                    holder_ctor_args&&... ctor_args)
  {
    const size_type value_size = sizeof(true_value_type<holder>);

    if (value_size > storage_unused() && value_size <= m_stride) {
      array_reserve(std::max(storage_size() + m_stride, 2*storage_capacity()),
                    m_stride);
    } else if (value_size > m_stride) {
      array_reserve((size()+1)*value_size,
                    value_size);
    }

    size_type value_offset = storage_size();
    pointer value_ptr = reinterpret_cast<pointer>(m_array_begin + value_offset);

    value_type::template construct<holder>(
        value_ptr, vtable, std::forward<holder_ctor_args>(ctor_args)...);
  }



  void move_destroy_value(char* value_ptr,
                          char* other_value_ptr)
  {
    value_type::move_destroy(reinterpret_cast<pointer>(value_ptr),
                             reinterpret_cast<pointer>(other_value_ptr));
  }


  void destroy_value(size_type value_offset)
  {
    pointer value_ptr =
        reinterpret_cast<pointer>(m_array_begin + value_offset);
    value_type::destroy(value_ptr);
  }
};

}

}
# 24 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup.hpp" 2





namespace RAJA
{
# 57 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup.hpp"
template < typename ... Args >
using xargs = camp::list<Args...>;

namespace detail {

template < typename T >
struct is_xargs {
  static constexpr bool value = false;
};

template < typename ... Args >
struct is_xargs<xargs<Args...>> {
  static constexpr bool value = true;
};

}
# 111 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup.hpp"
template <typename WORKGROUP_POLICY_T,
          typename INDEX_T,
          typename EXTRA_ARGS_T,
          typename ALLOCATOR_T>
struct WorkPool {
  static_assert(RAJA::pattern_is<WORKGROUP_POLICY_T, RAJA::Pattern::workgroup>::value,
      "WorkPool: WORKGROUP_POLICY_T must be a workgroup policy");
  static_assert(detail::is_xargs<EXTRA_ARGS_T>::value,
      "WorkPool: EXTRA_ARGS_T must be a RAJA::xargs<...> type");
};
# 146 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup.hpp"
template <typename WORKGROUP_POLICY_T,
          typename INDEX_T,
          typename EXTRA_ARGS_T,
          typename ALLOCATOR_T>
struct WorkGroup {
  static_assert(RAJA::pattern_is<WORKGROUP_POLICY_T, RAJA::Pattern::workgroup>::value,
      "WorkGroup: WORKGROUP_POLICY_T must be a workgroup policy");
  static_assert(detail::is_xargs<EXTRA_ARGS_T>::value,
      "WorkGroup: EXTRA_ARGS_T must be a RAJA::xargs<...> type");
};
# 181 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/WorkGroup.hpp"
template <typename WORKGROUP_POLICY_T,
          typename INDEX_T,
          typename EXTRA_ARGS_T,
          typename ALLOCATOR_T>
struct WorkSite {
  static_assert(RAJA::pattern_is<WORKGROUP_POLICY_T, RAJA::Pattern::workgroup>::value,
      "WorkSite: WORKGROUP_POLICY_T must be a workgroup policy");
  static_assert(detail::is_xargs<EXTRA_ARGS_T>::value,
      "WorkSite: EXTRA_ARGS_T must be a RAJA::xargs<...> type");
};


template <typename EXEC_POLICY_T,
          typename ORDER_POLICY_T,
          typename STORAGE_POLICY_T,
          typename INDEX_T,
          typename ... Args,
          typename ALLOCATOR_T>
struct WorkPool<WorkGroupPolicy<EXEC_POLICY_T,
                                ORDER_POLICY_T,
                                STORAGE_POLICY_T>,
                INDEX_T,
                xargs<Args...>,
                ALLOCATOR_T>
{
  using exec_policy = EXEC_POLICY_T;
  using order_policy = ORDER_POLICY_T;
  using storage_policy = STORAGE_POLICY_T;
  using policy = WorkGroupPolicy<exec_policy, order_policy, storage_policy>;
  using index_type = INDEX_T;
  using xarg_type = xargs<Args...>;
  using Allocator = ALLOCATOR_T;

  using workgroup_type = WorkGroup<policy, index_type, xarg_type, Allocator>;
  using worksite_type = WorkSite<policy, index_type, xarg_type, Allocator>;

  explicit WorkPool(Allocator const& aloc)
    : m_storage(aloc)
  { }

  WorkPool(WorkPool const&) = delete;
  WorkPool& operator=(WorkPool const&) = delete;

  WorkPool(WorkPool&&) = default;
  WorkPool& operator=(WorkPool&&) = default;

  size_t num_loops() const
  {
    return m_storage.size();
  }

  size_t storage_bytes() const
  {
    return m_storage.storage_size();
  }

  void reserve(size_t num_loops, size_t storage_bytes)
  {
    m_storage.reserve(num_loops, storage_bytes);
  }

  template < typename segment_T, typename loop_T >
  inline void enqueue(segment_T&& seg, loop_T&& loop_body)
  {
    if (m_storage.begin() == m_storage.end()) {

      reserve(m_max_num_loops, m_max_storage_bytes);
    }

    util::PluginContext context{util::make_context<exec_policy>()};
    util::callPreCapturePlugins(context);

    using RAJA::util::trigger_updates_before;
    auto body = trigger_updates_before(loop_body);

    m_runner.enqueue(
        m_storage, std::forward<segment_T>(seg), std::move(body));

    util::callPostCapturePlugins(context);
  }

  inline workgroup_type instantiate();

  void clear()
  {


    m_storage.clear();
    m_runner.clear();
  }

  ~WorkPool()
  {
    clear();
  }

private:
  using workrunner_type = detail::WorkRunner<
      exec_policy, order_policy, Allocator, index_type, Args...>;
  using storage_type = detail::WorkStorage<
      storage_policy, Allocator, typename workrunner_type::vtable_type>;

  friend workgroup_type;
  friend worksite_type;

  storage_type m_storage;
  size_t m_max_num_loops = 0;
  size_t m_max_storage_bytes = 0;

  workrunner_type m_runner;
};

template <typename EXEC_POLICY_T,
          typename ORDER_POLICY_T,
          typename STORAGE_POLICY_T,
          typename INDEX_T,
          typename ... Args,
          typename ALLOCATOR_T>
struct WorkGroup<WorkGroupPolicy<EXEC_POLICY_T,
                                 ORDER_POLICY_T,
                                 STORAGE_POLICY_T>,
                 INDEX_T,
                 xargs<Args...>,
                 ALLOCATOR_T>
{
  using exec_policy = EXEC_POLICY_T;
  using order_policy = ORDER_POLICY_T;
  using storage_policy = STORAGE_POLICY_T;
  using policy = WorkGroupPolicy<exec_policy, order_policy, storage_policy>;
  using index_type = INDEX_T;
  using xarg_type = xargs<Args...>;
  using Allocator = ALLOCATOR_T;

  using workpool_type = WorkPool<policy, index_type, xarg_type, Allocator>;
  using worksite_type = WorkSite<policy, index_type, xarg_type, Allocator>;

  WorkGroup(WorkGroup const&) = delete;
  WorkGroup& operator=(WorkGroup const&) = delete;

  WorkGroup(WorkGroup&&) = default;
  WorkGroup& operator=(WorkGroup&&) = default;

  inline worksite_type run(Args...);

  void clear()
  {


    m_storage.clear();
    m_runner.clear();
  }

  ~WorkGroup()
  {
    clear();
  }

private:
  using storage_type = typename workpool_type::storage_type;
  using workrunner_type = typename workpool_type::workrunner_type;

  friend workpool_type;
  friend worksite_type;

  storage_type m_storage;
  workrunner_type m_runner;

  WorkGroup(storage_type&& storage, workrunner_type&& runner)
    : m_storage(std::move(storage))
    , m_runner(std::move(runner))
  { }
};

template <typename EXEC_POLICY_T,
          typename ORDER_POLICY_T,
          typename STORAGE_POLICY_T,
          typename INDEX_T,
          typename ... Args,
          typename ALLOCATOR_T>
struct WorkSite<WorkGroupPolicy<EXEC_POLICY_T,
                                ORDER_POLICY_T,
                                STORAGE_POLICY_T>,
                INDEX_T,
                xargs<Args...>,
                ALLOCATOR_T>
{
  using exec_policy = EXEC_POLICY_T;
  using order_policy = ORDER_POLICY_T;
  using storage_policy = STORAGE_POLICY_T;
  using policy = WorkGroupPolicy<exec_policy, order_policy, storage_policy>;
  using index_type = INDEX_T;
  using xarg_type = xargs<Args...>;
  using Allocator = ALLOCATOR_T;

  using workpool_type = WorkPool<policy, index_type, xarg_type, Allocator>;
  using workgroup_type = WorkGroup<policy, index_type, xarg_type, Allocator>;

  WorkSite(WorkSite const&) = delete;
  WorkSite& operator=(WorkSite const&) = delete;

  WorkSite(WorkSite&&) = default;
  WorkSite& operator=(WorkSite&&) = default;

  void clear()
  {


  }

  ~WorkSite()
  {
    clear();
  }

private:
  using workrunner_type = typename workgroup_type::workrunner_type;
  using per_run_storage = typename workrunner_type::per_run_storage;

  friend workpool_type;
  friend workgroup_type;

  per_run_storage m_run_storage;

  explicit WorkSite(per_run_storage&& run_storage)
    : m_run_storage(std::move(run_storage))
  { }
};


template <typename EXEC_POLICY_T,
          typename ORDER_POLICY_T,
          typename STORAGE_POLICY_T,
          typename INDEX_T,
          typename ... Args,
          typename ALLOCATOR_T>
inline
typename WorkPool<
    WorkGroupPolicy<EXEC_POLICY_T, ORDER_POLICY_T, STORAGE_POLICY_T>,
    INDEX_T,
    xargs<Args...>,
    ALLOCATOR_T>::workgroup_type
WorkPool<
    WorkGroupPolicy<EXEC_POLICY_T, ORDER_POLICY_T, STORAGE_POLICY_T>,
    INDEX_T,
    xargs<Args...>,
    ALLOCATOR_T>::instantiate()
{

  m_max_num_loops = std::max(m_storage.size(), m_max_num_loops);
  m_max_storage_bytes = std::max(m_storage.storage_size(), m_max_storage_bytes);


  return workgroup_type{std::move(m_storage), std::move(m_runner)};
}

template <typename EXEC_POLICY_T,
          typename ORDER_POLICY_T,
          typename STORAGE_POLICY_T,
          typename INDEX_T,
          typename ... Args,
          typename ALLOCATOR_T>
inline
typename WorkGroup<
    WorkGroupPolicy<EXEC_POLICY_T, ORDER_POLICY_T, STORAGE_POLICY_T>,
    INDEX_T,
    xargs<Args...>,
    ALLOCATOR_T>::worksite_type
WorkGroup<
    WorkGroupPolicy<EXEC_POLICY_T, ORDER_POLICY_T, STORAGE_POLICY_T>,
    INDEX_T,
    xargs<Args...>,
    ALLOCATOR_T>::run(Args... args)
{
  util::PluginContext context{util::make_context<EXEC_POLICY_T>()};
  util::callPreLaunchPlugins(context);


  worksite_type site(m_runner.run(m_storage, std::forward<Args>(args)...));

  util::callPostLaunchPlugins(context);

  return site;
}

}
# 147 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2
# 157 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/synchronize.hpp" 1
# 21 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/synchronize.hpp"
namespace RAJA
{
# 41 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/synchronize.hpp"
template <typename Policy>
void synchronize()
{
  synchronize_impl(Policy{});
}
}
# 158 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2
# 172 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSetUtils.hpp" 1
# 28 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSetUtils.hpp"
namespace RAJA
{
# 40 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSetUtils.hpp"
template <typename CONTAINER_T, typename... SEG_TYPES>
inline __attribute__((always_inline)) void getIndices(CONTAINER_T& con,
                            const TypedIndexSet<SEG_TYPES...>& iset)
{
  CONTAINER_T tcon;
  forall<ExecPolicy<seq_segit, seq_exec> >(iset, [&](Index_type idx) {
    tcon.push_back(idx);
  });
  con = tcon;
}
# 60 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSetUtils.hpp"
template <typename CONTAINER_T, typename SEGMENT_T>
inline __attribute__((always_inline)) void getIndices(CONTAINER_T& con, const SEGMENT_T& iset)
{
  CONTAINER_T tcon;
  forall<seq_exec>(iset, [&](Index_type idx) { tcon.push_back(idx); });
  con = tcon;
}
# 78 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSetUtils.hpp"
template <typename CONTAINER_T, typename... SEG_TYPES, typename CONDITIONAL>
inline __attribute__((always_inline)) void getIndicesConditional(CONTAINER_T& con,
                                       const TypedIndexSet<SEG_TYPES...>& iset,
                                       CONDITIONAL conditional)
{
  CONTAINER_T tcon;
  forall<ExecPolicy<seq_segit, seq_exec> >(iset, [&](Index_type idx) {
    if (conditional(idx)) tcon.push_back(idx);
  });
  con = tcon;
}
# 100 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSetUtils.hpp"
template <typename CONTAINER_T, typename SEGMENT_T, typename CONDITIONAL>
inline __attribute__((always_inline)) void getIndicesConditional(CONTAINER_T& con,
                                       const SEGMENT_T& iset,
                                       CONDITIONAL conditional)
{
  CONTAINER_T tcon;
  forall<seq_exec>(iset, [&](Index_type idx) {
    if (conditional(idx)) tcon.push_back(idx);
  });
  con = tcon;
}

}
# 173 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSetBuilders.hpp" 1
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSetBuilders.hpp"
namespace RAJA
{
# 56 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSetBuilders.hpp"
void buildIndexSetAligned(
    RAJA::TypedIndexSet<RAJA::RangeSegment, RAJA::ListSegment>& iset,
    camp::resources::Resource& work_res,
    const RAJA::Index_type* const indices_in,
    RAJA::Index_type length,
    RAJA::Index_type range_min_length,
    RAJA::Index_type range_align);
# 95 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSetBuilders.hpp"
void buildLockFreeBlockIndexset(
    RAJA::TypedIndexSet<RAJA::RangeSegment>& iset,
    int fastDim,
    int midDim,
    int slowDim);
# 119 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/index/IndexSetBuilders.hpp"
void buildLockFreeColorIndexset(
    RAJA::TypedIndexSet<RAJA::RangeSegment, RAJA::ListSegment>& iset,
    camp::resources::Resource& work_res,
    RAJA::Index_type const* domainToRange,
    int numEntity,
    int numRangePerDomain,
    int numEntityRange,
    RAJA::Index_type* elemPermutation = nullptr,
    RAJA::Index_type* ielemPermutation = nullptr);

}
# 174 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/scan.hpp" 1
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/scan.hpp"
namespace RAJA
{
# 48 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/scan.hpp"
template <typename ExecPolicy,
          typename Iter,
          typename Function = operators::plus<RAJA::detail::IterVal<Iter>>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_iterator<Iter>>
inclusive_scan_inplace(const ExecPolicy &p,
                       Iter begin,
                       Iter end,
                       Function binop = Function{})
{
  using R = RAJA::detail::IterVal<Iter>;
  static_assert(type_traits::is_binary_function<Function, R, R, R>::value,
                "Function must model BinaryFunction");
  static_assert(type_traits::is_random_access_iterator<Iter>::value,
                "Iterator must model RandomAccessIterator");
  if (begin == end) {
    return;
  }
  impl::scan::inclusive_inplace(p, begin, end, binop);
}
# 83 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/scan.hpp"
template <typename ExecPolicy,
          typename Iter,
          typename T = RAJA::detail::IterVal<Iter>,
          typename Function = operators::plus<T>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_iterator<Iter>>
exclusive_scan_inplace(const ExecPolicy &p,
                       Iter begin,
                       Iter end,
                       Function binop = Function{},
                       T value = Function::identity())
{
  using R = RAJA::detail::IterVal<Iter>;
  static_assert(type_traits::is_binary_function<Function, R, T, R>::value,
                "Function must model BinaryFunction");
  static_assert(type_traits::is_random_access_iterator<Iter>::value,
                "Iterator must model RandomAccessIterator");
  if (begin == end) {
    return;
  }
  impl::scan::exclusive_inplace(p, begin, end, binop, value);
}
# 124 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/scan.hpp"
template <typename ExecPolicy,
          typename Iter,
          typename IterOut,
          typename Function = operators::plus<RAJA::detail::IterVal<Iter>>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_iterator<Iter>,
                    type_traits::is_iterator<IterOut>>
inclusive_scan(const ExecPolicy &p,
               Iter begin,
               Iter end,
               IterOut out,
               Function binop = Function{})
{
  using R = RAJA::detail::IterVal<IterOut>;
  using T = RAJA::detail::IterVal<Iter>;
  static_assert(type_traits::is_binary_function<Function, R, T, R>::value,
                "Function must model BinaryFunction");
  static_assert(type_traits::is_random_access_iterator<Iter>::value,
                "Iterator must model RandomAccessIterator");
  static_assert(type_traits::is_random_access_iterator<IterOut>::value,
                "Output Iterator must model RandomAccessIterator");
  if (begin == end) {
    return;
  }
  impl::scan::inclusive(p, begin, end, out, binop);
}
# 169 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/scan.hpp"
template <typename ExecPolicy,
          typename Iter,
          typename IterOut,
          typename T = RAJA::detail::IterVal<Iter>,
          typename Function = operators::plus<T>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_iterator<Iter>,
                    type_traits::is_iterator<IterOut>>
exclusive_scan(const ExecPolicy &p,
               Iter begin,
               Iter end,
               IterOut out,
               Function binop = Function{},
               T value = Function::identity())
{
  using R = RAJA::detail::IterVal<IterOut>;
  using U = RAJA::detail::IterVal<Iter>;
  static_assert(type_traits::is_binary_function<Function, R, T, U>::value,
                "Function must model BinaryFunction");
  static_assert(type_traits::is_random_access_iterator<Iter>::value,
                "Iterator must model RandomAccessIterator");
  static_assert(type_traits::is_random_access_iterator<IterOut>::value,
                "Output Iterator must model RandomAccessIterator");
  if (begin == end) {
    return;
  }
  impl::scan::exclusive(p, begin, end, out, binop, value);
}
# 212 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/scan.hpp"
template <typename ExecPolicy,
          typename Container,
          typename Function = operators::plus<RAJA::detail::ContainerVal<Container>>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_range<Container>>
inclusive_scan_inplace(const ExecPolicy &p,
                       Container &c,
                       Function binop = Function{})
{
  using R = RAJA::detail::ContainerVal<Container>;
  static_assert(type_traits::is_binary_function<Function, R, R, R>::value,
                "Function must model BinaryFunction");
  static_assert(type_traits::is_random_access_range<Container>::value,
                "Container must model RandomAccessRange");
  if (std::begin(c) == std::end(c)) {
    return;
  }
  impl::scan::inclusive_inplace(p, std::begin(c), std::end(c), binop);
}
# 244 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/scan.hpp"
template <typename ExecPolicy,
          typename Container,
          typename T = RAJA::detail::ContainerVal<Container>,
          typename Function = operators::plus<T>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_range<Container>>
exclusive_scan_inplace(const ExecPolicy &p,
                       Container &c,
                       Function binop = Function{},
                       T value = Function::identity())
{
  using R = RAJA::detail::ContainerVal<Container>;
  static_assert(type_traits::is_binary_function<Function, R, T, R>::value,
                "Function must model BinaryFunction");
  static_assert(type_traits::is_random_access_range<Container>::value,
                "Container must model RandomAccessRange");
  if (std::begin(c) == std::end(c)) {
    return;
  }
  impl::scan::exclusive_inplace(p, std::begin(c), std::end(c), binop, value);
}
# 282 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/scan.hpp"
template <typename ExecPolicy,
          typename Container,
          typename IterOut,
          typename Function = operators::plus<RAJA::detail::ContainerVal<Container>>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_range<Container>,
                    type_traits::is_iterator<IterOut>>
inclusive_scan(const ExecPolicy &p,
               const Container &c,
               IterOut out,
               Function binop = Function{})
{
  using R = RAJA::detail::IterVal<IterOut>;
  using T = RAJA::detail::ContainerVal<Container>;
  static_assert(type_traits::is_binary_function<Function, R, T, R>::value,
                "Function must model BinaryFunction");
  static_assert(type_traits::is_random_access_range<Container>::value,
                "Container must model RandomAccessRange");
  static_assert(type_traits::is_random_access_iterator<IterOut>::value,
                "Output Iterator must model RandomAccessIterator");
  if (std::begin(c) == std::end(c)) {
    return;
  }
  impl::scan::inclusive(p, std::begin(c), std::end(c), out, binop);
}
# 324 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/scan.hpp"
template <typename ExecPolicy,
          typename Container,
          typename IterOut,
          typename T = RAJA::detail::ContainerVal<Container>,
          typename Function = operators::plus<T>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_range<Container>,
                    type_traits::is_iterator<IterOut>>
exclusive_scan(const ExecPolicy &p,
               const Container &c,
               IterOut out,
               Function binop = Function{},
               T value = Function::identity())
{
  using R = RAJA::detail::IterVal<IterOut>;
  using U = RAJA::detail::ContainerVal<Container>;
  static_assert(type_traits::is_binary_function<Function, R, T, U>::value,
                "Function must model BinaryFunction");
  static_assert(type_traits::is_random_access_range<Container>::value,
                "Container must model RandomAccessRange");
  static_assert(type_traits::is_random_access_iterator<IterOut>::value,
                "Output Iterator must model RandomAccessIterator");
  if (std::begin(c) == std::end(c)) {
    return;
  }
  impl::scan::exclusive(p, std::begin(c), std::end(c), out, binop, value);
}

template <typename ExecPolicy, typename... Args>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>>
exclusive_scan(Args &&... args)
{
  exclusive_scan(ExecPolicy{}, std::forward<Args>(args)...);
}

template <typename ExecPolicy, typename... Args>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>>
inclusive_scan(Args &&... args)
{
  inclusive_scan(ExecPolicy{}, std::forward<Args>(args)...);
}

template <typename ExecPolicy, typename... Args>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>>
exclusive_scan_inplace(Args &&... args)
{
  exclusive_scan_inplace(ExecPolicy{}, std::forward<Args>(args)...);
}

template <typename ExecPolicy, typename... Args>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>>
inclusive_scan_inplace(Args &&... args)
{
  inclusive_scan_inplace(ExecPolicy{}, std::forward<Args>(args)...);
}

}
# 176 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PluginLinker.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/PluginLinker.hpp"
namespace {
  namespace anonymous_RAJA {
    struct pluginLinker {
      inline pluginLinker() {
        (void)RAJA::util::linkRuntimePluginLoader();
        (void)RAJA::util::linkKokkosPluginLoader();
      }
    } pluginLinker;
  }
}
# 178 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/sort.hpp" 1
# 31 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/sort.hpp"
namespace RAJA
{
# 47 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/sort.hpp"
template <typename ExecPolicy,
          typename Iter,
          typename Compare = operators::less<RAJA::detail::IterVal<Iter>>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_iterator<Iter>>
sort(const ExecPolicy &p,
     Iter begin,
     Iter end,
     Compare comp = Compare{})
{
  using R = RAJA::detail::IterVal<Iter>;
  static_assert(type_traits::is_binary_function<Compare, bool, R, R>::value,
                "Compare must model BinaryFunction");
  static_assert(type_traits::is_random_access_iterator<Iter>::value,
                "Iterator must model RandomAccessIterator");
  impl::sort::unstable(p, begin, end, comp);
}
# 78 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/sort.hpp"
template <typename ExecPolicy,
          typename Iter,
          typename Compare = operators::less<RAJA::detail::IterVal<Iter>>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_iterator<Iter>>
stable_sort(const ExecPolicy &p,
            Iter begin,
            Iter end,
            Compare comp = Compare{})
{
  using R = RAJA::detail::IterVal<Iter>;
  static_assert(type_traits::is_binary_function<Compare, bool, R, R>::value,
                "Compare must model BinaryFunction");
  static_assert(type_traits::is_random_access_iterator<Iter>::value,
                "Iterator must model RandomAccessIterator");
  impl::sort::stable(p, begin, end, comp);
}
# 109 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/sort.hpp"
template <typename ExecPolicy,
          typename KeyIter,
          typename ValIter,
          typename Compare = operators::less<RAJA::detail::IterVal<KeyIter>>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_iterator<KeyIter>,
                    type_traits::is_iterator<ValIter>>
sort_pairs(const ExecPolicy &p,
           KeyIter keys_begin,
           KeyIter keys_end,
           ValIter vals_begin,
           Compare comp = Compare{})
{
  using R = RAJA::detail::IterVal<KeyIter>;
  static_assert(type_traits::is_binary_function<Compare, bool, R, R>::value,
                "Compare must model BinaryFunction");
  static_assert(type_traits::is_random_access_iterator<KeyIter>::value,
                "Keys Iterator must model RandomAccessIterator");
  static_assert(type_traits::is_random_access_iterator<ValIter>::value,
                "Vals Iterator must model RandomAccessIterator");
  impl::sort::unstable_pairs(p, keys_begin, keys_end, vals_begin, comp);
}
# 145 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/sort.hpp"
template <typename ExecPolicy,
          typename KeyIter,
          typename ValIter,
          typename Compare = operators::less<RAJA::detail::IterVal<KeyIter>>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_iterator<KeyIter>,
                    type_traits::is_iterator<ValIter>>
stable_sort_pairs(const ExecPolicy &p,
                  KeyIter keys_begin,
                  KeyIter keys_end,
                  ValIter vals_begin,
                  Compare comp = Compare{})
{
  using R = RAJA::detail::IterVal<KeyIter>;
  static_assert(type_traits::is_binary_function<Compare, bool, R, R>::value,
                "Compare must model BinaryFunction");
  static_assert(type_traits::is_random_access_iterator<KeyIter>::value,
                "Keys Iterator must model RandomAccessIterator");
  static_assert(type_traits::is_random_access_iterator<ValIter>::value,
                "Vals Iterator must model RandomAccessIterator");
  impl::sort::stable_pairs(p, keys_begin, keys_end, vals_begin, comp);
}
# 183 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/sort.hpp"
template <typename ExecPolicy,
          typename Container,
          typename Compare = operators::less<RAJA::detail::ContainerVal<Container>>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_range<Container>>
sort(const ExecPolicy &p,
     Container &c,
     Compare comp = Compare{})
{
  using T = RAJA::detail::ContainerVal<Container>;
  static_assert(type_traits::is_binary_function<Compare, bool, T, T>::value,
                "Compare must model BinaryFunction");
  static_assert(type_traits::is_random_access_range<Container>::value,
                "Container must model RandomAccessRange");
  impl::sort::unstable(p, std::begin(c), std::end(c), comp);
}
# 212 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/sort.hpp"
template <typename ExecPolicy,
          typename Container,
          typename Compare = operators::less<RAJA::detail::ContainerVal<Container>>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_range<Container>>
stable_sort(const ExecPolicy &p,
            Container &c,
            Compare comp = Compare{})
{
  using T = RAJA::detail::ContainerVal<Container>;
  static_assert(type_traits::is_binary_function<Compare, bool, T, T>::value,
                "Compare must model BinaryFunction");
  static_assert(type_traits::is_random_access_range<Container>::value,
                "Container must model RandomAccessRange");
  impl::sort::stable(p, std::begin(c), std::end(c), comp);
}
# 242 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/sort.hpp"
template <typename ExecPolicy,
          typename KeyContainer,
          typename ValContainer,
          typename Compare = operators::less<RAJA::detail::ContainerVal<KeyContainer>>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_range<KeyContainer>,
                    type_traits::is_range<ValContainer>>
sort_pairs(const ExecPolicy &p,
           KeyContainer &keys,
           ValContainer &vals,
           Compare comp = Compare{})
{
  using T = RAJA::detail::ContainerVal<KeyContainer>;
  static_assert(type_traits::is_binary_function<Compare, bool, T, T>::value,
                "Compare must model BinaryFunction");
  static_assert(type_traits::is_random_access_range<KeyContainer>::value,
                "KeyContainer must model RandomAccessRange");
  static_assert(type_traits::is_random_access_range<ValContainer>::value,
                "ValContainer must model RandomAccessRange");
  impl::sort::unstable_pairs(p, std::begin(keys), std::end(keys), std::begin(vals), comp);
}
# 277 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/pattern/sort.hpp"
template <typename ExecPolicy,
          typename KeyContainer,
          typename ValContainer,
          typename Compare = operators::less<RAJA::detail::ContainerVal<KeyContainer>>>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>,
                    type_traits::is_range<KeyContainer>,
                    type_traits::is_range<ValContainer>>
stable_sort_pairs(const ExecPolicy &p,
                  KeyContainer &keys,
                  ValContainer &vals,
                  Compare comp = Compare{})
{
  using T = RAJA::detail::ContainerVal<KeyContainer>;
  static_assert(type_traits::is_binary_function<Compare, bool, T, T>::value,
                "Compare must model BinaryFunction");
  static_assert(type_traits::is_random_access_range<KeyContainer>::value,
                "KeyContainer must model RandomAccessRange");
  static_assert(type_traits::is_random_access_range<ValContainer>::value,
                "ValContainer must model RandomAccessRange");
  impl::sort::stable_pairs(p, std::begin(keys), std::end(keys), std::begin(vals), comp);
}




template <typename ExecPolicy, typename... Args>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>>
sort(Args &&... args)
{
  sort(ExecPolicy{}, std::forward<Args>(args)...);
}

template <typename ExecPolicy, typename... Args>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>>
stable_sort(Args &&... args)
{
  stable_sort(ExecPolicy{}, std::forward<Args>(args)...);
}

template <typename ExecPolicy, typename... Args>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>>
sort_pairs(Args &&... args)
{
  sort_pairs(ExecPolicy{}, std::forward<Args>(args)...);
}

template <typename ExecPolicy, typename... Args>
concepts::enable_if<type_traits::is_execution_policy<ExecPolicy>>
stable_sort_pairs(Args &&... args)
{
  stable_sort_pairs(ExecPolicy{}, std::forward<Args>(args)...);
}

}
# 180 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/RAJA.hpp" 2
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke.h" 2




# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cmath" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cmath" 3
# 20 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke.h" 2
# 1 "/usr/include/strings.h" 1 3 4
# 21 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke.h" 2
# 35 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke.h"
struct Grid_Data;
# 58 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke.h"
namespace Kripke {




  class SdomId : public ::RAJA::IndexValue<SdomId> { using parent = ::RAJA::IndexValue<SdomId>; public: using IndexValueType = SdomId; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) SdomId() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit SdomId(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "SdomId"; } };;





  class GlobalSdomId : public ::RAJA::IndexValue<GlobalSdomId> { using parent = ::RAJA::IndexValue<GlobalSdomId>; public: using IndexValueType = GlobalSdomId; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) GlobalSdomId() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit GlobalSdomId(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "GlobalSdomId"; } };;


}






enum ParallelMethod {
  PMETHOD_SWEEP,
  PMETHOD_BJ
};







namespace Kripke {
namespace Arch {

  using RAJA::loop_exec;
  using RAJA::seq_exec;
  using RAJA::simd_exec;
  using RAJA::seq_reduce;
  using RAJA::auto_atomic;
  using RAJA::seq_atomic;
  using RAJA::ArgList;
  using RAJA::KernelPolicy;
  using RAJA::statement::Collapse;
  using RAJA::statement::If;
  using RAJA::statement::Param;
  using RAJA::statement::Not;
  using RAJA::statement::For;
  using RAJA::statement::Hyperplane;
  using RAJA::statement::Lambda;
  using RAJA::statement::Tile;
  using RAJA::tile_fixed;
# 118 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke.h"
  using RAJA::cuda_exec;
  using RAJA::cuda_block_x_loop;
  using RAJA::cuda_block_y_loop;
  using RAJA::cuda_block_z_loop;
  using RAJA::cuda_thread_x_direct;
  using RAJA::cuda_thread_y_direct;
  using RAJA::cuda_thread_z_direct;
  using RAJA::cuda_thread_x_loop;
  using RAJA::cuda_thread_y_loop;
  using RAJA::cuda_thread_z_loop;
  using RAJA::cuda_reduce;
  using RAJA::cuda_atomic;
  using RAJA::statement::CudaKernel;
  using RAJA::statement::CudaKernelAsync;
  using RAJA::statement::CudaSyncThreads;


}
}
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/DataStore.h" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/BaseVar.h" 1
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/BaseVar.h"
namespace Kripke {
namespace Core {

class DataStore;




class BaseVar {
  public:
    BaseVar();
    virtual ~BaseVar() = default;

    void setParent(DataStore *parent);

    std::string getName() const;

  private:
    DataStore *m_parent;
};


} }
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/DataStore.h" 2




namespace Kripke {
namespace Core {




class DataStore {
  public:
    DataStore();
    ~DataStore();
    DataStore(DataStore const &) = delete;
    DataStore &operator=(DataStore const &) = delete;

    void addVariable(std::string const &name, Kripke::Core::BaseVar *);

    template<typename T, typename ... CTOR_ARGS>
    inline __attribute__((always_inline))
    T &newVariable(std::string const &name, CTOR_ARGS &&... ctor_args){
      T *new_var = new T(ctor_args...);
      addVariable(name, new_var);
      return *new_var;
    }

    void deleteVariable(std::string const &name);

    template<typename T>
    inline __attribute__((always_inline))
    T &getVariable(std::string const &name){


      auto it = m_vars.find(name);
      if(it == m_vars.end()){
        throw std::domain_error("Cannot find '" + name + "' in DataStore");
      }


      T *var_ptr = dynamic_cast<T*>(it->second);
      if(!(var_ptr != nullptr)){ printf("Assertion Failed: " "Error casting '%s'", name.c_str()); exit(1);; };

      return *var_ptr;
    }

    template<typename T>
    inline __attribute__((always_inline))
    T const &getVariable(std::string const &name) const{
      return const_cast<DataStore *>(this)-> template getVariable<T>(name);
    }

    std::string getVariableName(BaseVar const &var) const;


    template<typename T>
    inline __attribute__((always_inline))
    bool isVariableType(std::string const &name) const{


      auto it = m_vars.find(name);
      if(it == m_vars.end()){
        return false;
      }


      T *var_ptr = dynamic_cast<T*>(it->second);

      return var_ptr != nullptr;
    }

    std::vector<std::string> getVariableList() const;

  private:
    std::map<std::string, Kripke::Core::BaseVar *> m_vars;

};

} }
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.h" 2

namespace Kripke {

  class DataStore;

  int SteadyStateSolver(Kripke::Core::DataStore &data_store, size_t max_iter, bool block_jacobi);


}
# 9 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.cpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/Comm.h" 1
# 18 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/Comm.h"
namespace Kripke {
namespace Core {






class Comm : public Kripke::Core::BaseVar {
  public:
# 36 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/Comm.h"
    inline __attribute__((always_inline))
    static void init(int *, char ***){
    }


    inline __attribute__((always_inline))
    static void finalize() {



    }


    inline __attribute__((always_inline))
    static Comm getSelf() {



      return Comm();

    }
# 85 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/Comm.h"
    inline __attribute__((always_inline))
    Comm() :
      m_rank(0),
      m_size(1)
    {}



    virtual ~Comm() = default;

    inline __attribute__((always_inline))
    size_t size() const {
      return m_size;
    }

    inline __attribute__((always_inline))
    size_t rank() const {
      return m_rank;
    }

    inline __attribute__((always_inline))






    Comm split(int , int ) const {
      return Comm();

    }





    inline __attribute__((always_inline))
    long allReduceSumLong(long value) const {



      return value;
    }





    inline __attribute__((always_inline))





    void allReduceSumLong(long *, size_t ) const {}







    inline __attribute__((always_inline))





    void allReduceSumInt(int *, size_t) const {}






    inline __attribute__((always_inline))
    double allReduceSumDouble(double value) const {



      return value;
    }
# 178 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/Comm.h"
    inline __attribute__((always_inline))
    void allReduceSumDouble(double *, size_t) const {
    }






    inline __attribute__((always_inline))
    long scanSumLong(long value) const {



      return value;
    }

  private:



    size_t m_rank;
    size_t m_size;
};



} }
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.cpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Kernel.h" 1
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Kernel.h"
namespace Kripke {

  namespace Kernel {

    void LPlusTimes(Kripke::Core::DataStore &data_store);


    void LTimes(Kripke::Core::DataStore &data_store);


    double population(Kripke::Core::DataStore &data_store);


    void scattering(Kripke::Core::DataStore &data_store);


    void source(Kripke::Core::DataStore &data_store);


    void sweepSubdomain(Kripke::Core::DataStore &data_store, Kripke::SdomId sdom_id);


    template<typename FieldType>
    inline __attribute__((always_inline))
    void kConst(FieldType &field, Kripke::SdomId sdom_id, typename FieldType::ElementType value){
      auto view1d = field.getView1d(sdom_id);
      int num_elem = field.size(sdom_id);
      RAJA::forall<RAJA::loop_exec>(
        RAJA::RangeSegment(0, num_elem),
        [=](RAJA::Index_type i){
       view1d(i) = value;
      });
    }

    template<typename FieldType>
    inline __attribute__((always_inline))
    void kConst(FieldType &field, typename FieldType::ElementType value){
      for(Kripke::SdomId sdom_id : field.getWorkList()){
        kConst(field, sdom_id, value);
      }
    }




    template<typename FieldType>
    inline __attribute__((always_inline))
    void kCopy(FieldType &field_dst, Kripke::SdomId sdom_id_dst,
               FieldType &field_src, Kripke::SdomId sdom_id_src){
      auto view_src = field_src.getView1d(sdom_id_src);
      auto view_dst = field_dst.getView1d(sdom_id_dst);
      int num_elem = field_src.size(sdom_id_src);

      RAJA::forall<RAJA::loop_exec>(
        RAJA::RangeSegment(0, num_elem),
        [=](RAJA::Index_type i){
          view_src(i) = view_dst(i);
      });
    }

    template<typename FieldType>
    inline __attribute__((always_inline))
    void kCopy(FieldType &field_dst, FieldType &field_src){
      for(Kripke::SdomId sdom_id : field_dst.getWorkList()){
        kCopy(field_dst, sdom_id, field_src, sdom_id);
      }
    }

  }
}
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.cpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/ParallelComm.h" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/ParallelComm.h"
struct Grid_Data;

namespace Kripke {

namespace Core {
  class DataStore;

  template<typename T>
  class FieldStorage;
}

class ParallelComm {
  public:
    explicit ParallelComm(Kripke::Core::DataStore &data_store);
    virtual ~ParallelComm() = default;


    virtual void addSubdomain(Kripke::Core::DataStore &data_store, SdomId sdom_id) = 0;



    virtual bool workRemaining(void);


    virtual std::vector<SdomId> readySubdomains(void) = 0;


    virtual void markComplete(SdomId sdom_id) = 0;

  protected:
    int findSubdomain(SdomId sdom_id);
    void dequeueSubdomain(SdomId sdom_id);
    void postRecvs(Kripke::Core::DataStore &data_store, SdomId sdom_id);
    void postSends(Kripke::Core::DataStore &data_store, SdomId sdom_id_upwind, double *buffers[3]);
    void testRecieves(void);
    void waitAllSends(void);
    std::vector<SdomId> getReadyList(void);

    Kripke::Core::DataStore *m_data_store;

    Kripke::Core::FieldStorage<double> *m_plane_data[3];





    std::vector<int> recv_subdomains;


    std::vector<int> queue_sdom_ids;
    std::vector<int> queue_depends;





};


class SweepComm : public ParallelComm {
  public:
    explicit SweepComm(Kripke::Core::DataStore &data_store);
    virtual ~SweepComm();

    virtual void addSubdomain(Kripke::Core::DataStore &data_store, SdomId sdom_id);
    virtual bool workRemaining(void);
    virtual std::vector<SdomId> readySubdomains(void);
    virtual void markComplete(SdomId sdom_id);
};


class BlockJacobiComm : public ParallelComm {
  public:
    explicit BlockJacobiComm(Kripke::Core::DataStore &data_store);
    virtual ~BlockJacobiComm();

    virtual void addSubdomain(Kripke::Core::DataStore &data_store, SdomId sdom_id);
    virtual bool workRemaining(void);
    virtual std::vector<SdomId> readySubdomains(void);
    virtual void markComplete(SdomId sdom_id);

  private:
    bool posted_sends;
};


}
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.cpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/PartitionSpace.h" 1
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/PartitionSpace.h"
namespace Kripke {
namespace Core {

enum SPACE {
  SPACE_P = 0,
  SPACE_Q,
  SPACE_RX,
  SPACE_RY,
  SPACE_RZ,
  SPACE_R,
  SPACE_PR,
  SPACE_PQR,
  SPACE_NULL,
  NUM_SPACES
};




class PartitionSpace : public Kripke::Core::BaseVar {
  public:
    using SdomCoord = std::array<ptrdiff_t, 5>;

    PartitionSpace(Kripke::Core::Comm &base_comm,
      size_t P, size_t Q, size_t Rx, size_t Ry, size_t Rz);

    virtual ~PartitionSpace() = default;

    void setup_createSubdomains(
        size_t SP, size_t SQ, size_t Sx, size_t Sy, size_t Sz);

    void createSubdomainData(Kripke::Core::DataStore &data_store) const;

    size_t getNumSubdomains(Kripke::Core::SPACE space = SPACE_PQR) const;
    size_t getGlobalNumSubdomains(Kripke::Core::SPACE space = SPACE_PQR) const;

    SdomCoord sdomIdToCoord(Kripke::SdomId sdom_id) const;
    Kripke::SdomId coordToSdomId(SdomCoord coord) const;

    SdomCoord coordToGlobalCoord(SdomCoord local_coord) const;
    SdomCoord globalSdomIdToCoord(Kripke::GlobalSdomId global_sdom_id) const;
    Kripke::GlobalSdomId coordToGlobalSdomId(SdomCoord global_coord) const;



    Kripke::Core::Comm const &getComm(SPACE space) const {
      return m_comm_space[space];
    }

    size_t subdomainToSpace(Kripke::Core::SPACE space, SdomId sdom_id) const;
    SdomId spaceToSubdomain(Kripke::Core::SPACE space, size_t sdom_space) const;

    void print() const;

  private:
    Kripke::Core::Comm m_comm_all;


    Kripke::Core::Comm m_comm_space[NUM_SPACES];


    std::array<long, NUM_SPACES> m_local_num_sdom;
    std::array<long, NUM_SPACES> m_global_num_sdom;
    std::array<long, NUM_SPACES> m_global_sdom_lower;


    std::array<RAJA::Layout<5>, NUM_SPACES> m_local_sdom_space_layout;

    RAJA::Layout<5> m_proc_layout;
    RAJA::Layout<3> m_proc_xyz_layout;
    RAJA::Layout<5> m_global_sdom_layout;

};



template<typename ELEMENT, typename ... IDX_TYPES>
class Field;

}

using Field_SdomId2GlobalSdomId = Kripke::Core::Field<GlobalSdomId, SdomId>;
using Field_GlobalSdomId2Rank = Kripke::Core::Field<long, GlobalSdomId>;
using Field_GlobalSdomId2SdomId = Kripke::Core::Field<SdomId, GlobalSdomId>;


}
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.cpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Timing.h" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Timing.h"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Timer.hpp" 1
# 90 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Timer.hpp"
namespace RAJA
{
# 101 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Timer.hpp"
class ChronoTimer
{
public:
  using ElapsedType = double;

private:
  using ClockType = std::chrono::steady_clock;
  using TimeType = ClockType::time_point;
  using DurationType = std::chrono::duration<ElapsedType>;

public:
  ChronoTimer() : tstart(ClockType::now()), tstop(ClockType::now()), telapsed(0)
  {
  }

  void start() { tstart = ClockType::now(); }

  void stop()
  {
    tstop = ClockType::now();
    telapsed +=
        std::chrono::duration_cast<DurationType>(tstop - tstart).count();
  }

  ElapsedType elapsed() const { return telapsed; }

  void reset() { telapsed = 0; }

private:
  TimeType tstart;
  TimeType tstop;
  ElapsedType telapsed;
};

using TimerBase = ChronoTimer;
}
# 258 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/raja/include/RAJA/util/Timer.hpp"
namespace RAJA
{

class Timer : public TimerBase
{
public:
  using TimerBase::start;
  using TimerBase::stop;





  void start(const char*) { start(); }
  void stop(const char*) { stop(); }

};

}
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Timing.h" 2








namespace Kripke {

  class Timer {
    public:
      inline __attribute__((always_inline))
      Timer() :
        started(false),
        elapsed(0.),
        count(0)
      {}

      inline __attribute__((always_inline))
      void start(std::string const &my_name) {
        timer.stop(my_name.c_str());
        timer.reset();
        timer.start(my_name.c_str());
        started = true;
        ++ count;
      }

      inline __attribute__((always_inline))
      void stop(std::string const &my_name) {
        if(started){
          timer.stop(my_name.c_str());
          elapsed += timer.elapsed();
        }
      }

      inline __attribute__((always_inline))
      size_t getCount() const {
        return count;
      }

      inline __attribute__((always_inline))
      double getElapsed() const {
        return elapsed;
      }

    private:
      bool started;
      double elapsed;
      size_t count;
      RAJA::Timer timer;
  };

  class Timing : public Kripke::Core::BaseVar {
    public:
      virtual ~Timing();

      void start(std::string const &name);
      void stop(std::string const &name);

      void stopAll(void);

      void print(void) const;
      double getTotal(std::string const &name) const;
      size_t getCount(std::string const &name) const;

    private:
      using TimerMap = std::map<std::string, Timer>;
      TimerMap timers;
  };



  class BlockTimer {
    public:
    inline BlockTimer(Timing &timer_obj, std::string const &timer_name) :
        timer(timer_obj),
        name(timer_name)



    {
        timer.start(name);
    }
    inline ~BlockTimer(){
      timer.stop(name);
    }

    private:
      Timing &timer;
      std::string name;




  };

}
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.cpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SweepSolver.h" 1
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SweepSolver.h"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/VarTypes.h" 1
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/VarTypes.h"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/ArchLayout.h" 1
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/ArchLayout.h"
namespace Kripke {

struct ArchT_Sequential {};






struct ArchT_CUDA {};




enum ArchV {
  ArchV_Unknown = -1,
  ArchV_Sequential,






  ArchV_CUDA,


  ArchV_num_values
};


inline __attribute__((always_inline))
std::string archToString(ArchV av){
  switch(av){
    case ArchV_Sequential: return "Sequential";






    case ArchV_CUDA: return "CUDA";


    case ArchV_Unknown:
    case ArchV_num_values:
    default: return "unknown";
  }
}

inline __attribute__((always_inline))
ArchV stringToArch(std::string const &str){
  for(int av = 0;av < (int)ArchV_num_values;++ av){
    if(!strcasecmp(archToString((ArchV)av).c_str(), str.c_str())){
      return (ArchV)av;
    }
  }
  return ArchV_Unknown;
}

struct LayoutT_DGZ {};
struct LayoutT_DZG {};
struct LayoutT_GDZ {};
struct LayoutT_GZD {};
struct LayoutT_ZDG {};
struct LayoutT_ZGD {};

enum LayoutV {
  LayoutV_Unknown = -1,
  LayoutV_DGZ,
  LayoutV_DZG,
  LayoutV_GDZ,
  LayoutV_GZD,
  LayoutV_ZDG,
  LayoutV_ZGD,
  LayoutV_num_values
};

inline __attribute__((always_inline))
std::string layoutToString(LayoutV lv){
  switch(lv){
    case LayoutV_DGZ: return "DGZ";
    case LayoutV_DZG: return "DZG";
    case LayoutV_GDZ: return "GDZ";
    case LayoutV_GZD: return "GZD";
    case LayoutV_ZDG: return "ZDG";
    case LayoutV_ZGD: return "ZGD";
    case LayoutV_Unknown:
    case LayoutV_num_values:
    default: return "unknown";
  }
}

inline __attribute__((always_inline))
LayoutV stringToLayout(std::string const &str){
  for(int lv = 0;lv < (int)LayoutV_num_values;++ lv){
    if(!strcasecmp(layoutToString((LayoutV)lv).c_str(), str.c_str())){
      return (LayoutV)lv;
    }
  }
  return LayoutV_Unknown;
}


template<typename ARCH, typename LAYOUT>
struct ArchLayoutT {
  using arch_t = ARCH;
  using layout_t = LAYOUT;
};

struct ArchLayoutV {
  ArchV arch_v;
  LayoutV layout_v;
};


class ArchLayout : public Kripke::Core::BaseVar {
public:
  ArchLayout() = default;
  virtual ~ArchLayout() = default;

  ArchLayoutV al_v;
};


template<typename Function, typename ... Args>
inline __attribute__((always_inline))
void dispatchLayout(LayoutV layout_v, Function const &fcn, Args &&... args)
{
  switch(layout_v){
    case LayoutV_DGZ: fcn(LayoutT_DGZ{}, std::forward<Args>(args)...); break;
    case LayoutV_DZG: fcn(LayoutT_DZG{}, std::forward<Args>(args)...); break;
    case LayoutV_GDZ: fcn(LayoutT_GDZ{}, std::forward<Args>(args)...); break;
    case LayoutV_GZD: fcn(LayoutT_GZD{}, std::forward<Args>(args)...); break;
    case LayoutV_ZDG: fcn(LayoutT_ZDG{}, std::forward<Args>(args)...); break;
    case LayoutV_ZGD: fcn(LayoutT_ZGD{}, std::forward<Args>(args)...); break;
    default: printf("Unknown layout_v=%d\n", (int)layout_v); exit(1);; break;
  }
}

template<typename Function, typename ... Args>
inline __attribute__((always_inline))
void dispatchArch(ArchV arch_v, Function const &fcn, Args &&... args)
{
  switch(arch_v){
    case ArchV_Sequential: fcn(ArchT_Sequential{}, std::forward<Args>(args)...); break;





    case ArchV_CUDA: fcn(ArchT_CUDA{}, std::forward<Args>(args)...); break;

    default: printf("Unknown arch_v=%d\n", (int)arch_v); exit(1);; break;
  }
}


template<typename arch_t>
struct DispatchHelper{

  template<typename layout_t, typename Function, typename ... Args>
  void operator()(layout_t, Function const &fcn, Args &&... args) const {
    using al_t = ArchLayoutT<arch_t, layout_t>;
    fcn(al_t{}, std::forward<Args>(args)...);
  }
};


template<typename Function, typename ... Args>
inline __attribute__((always_inline))
void dispatch(ArchLayoutV al_v, Function const &fcn, Args &&... args)
{
  dispatchArch(al_v.arch_v, [&](auto arch_t){
    DispatchHelper<decltype(arch_t)> helper;

    dispatchLayout(al_v.layout_v, helper, fcn, std::forward<Args>(args)...);
  });
}

}
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/VarTypes.h" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/VarLayout.h" 1
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/VarLayout.h"
namespace Kripke {
namespace Core {
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/VarLayout.h"
template<camp::idx_t N, typename Order, typename T>
struct GetOrderHelper;

template<camp::idx_t N, typename OrderT, typename ... OrderTRest, typename T>
struct GetOrderHelper<N, camp::list<OrderT, OrderTRest...>, T>{
  static const camp::idx_t value = GetOrderHelper<N, camp::list<OrderTRest...>, T>::value;
};

template<camp::idx_t N, typename OrderT, typename ... OrderTRest>
struct GetOrderHelper<N, camp::list<OrderT, OrderTRest...>, OrderT>{
  static const camp::idx_t value = (N-1) - sizeof...(OrderTRest);
};

template<typename Order, typename T>
constexpr camp::idx_t getOrder(){
  return GetOrderHelper<camp::size<Order>::value, Order, T>::value;
}
# 56 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/VarLayout.h"
template<camp::idx_t i, typename Order, typename Types>
struct ExtractStrideOne;

template<camp::idx_t i, typename Order, typename ... Types>
struct ExtractStrideOne<i, Order, camp::list<Types...>>{
  using LTypes = camp::list<Types...>;
  using T = camp::at_v<LTypes, i>;
  using next_t = ExtractStrideOne<i-1, Order, LTypes>;

  static constexpr camp::idx_t our_value = getOrder<Order, T>();

  static constexpr camp::idx_t value =
    next_t::value > our_value ? next_t::value : our_value;

  static constexpr camp::idx_t arg =
    next_t::value > our_value ? next_t::arg : i;
};

template<typename Order, typename ... Types>
struct ExtractStrideOne<0, Order, camp::list<Types...>>{
  using LTypes = camp::list<Types...>;
  using T = camp::at_v<LTypes, 0>;

  static constexpr camp::idx_t value = getOrder<Order, T>();
  static constexpr camp::idx_t arg = 0;
};




template<typename Order, typename ... T>
struct ArgsToOrder {

  static constexpr camp::idx_t num_types = sizeof...(T);
  using type = camp::idx_seq<getOrder<Order, T>()...>;

  using array_t = std::array<camp::idx_t, sizeof...(T)>;


  static constexpr camp::idx_t stride_one =
    ExtractStrideOne<((camp::idx_t)sizeof...(T))-1, Order, camp::list<T...> >::arg;

  template<camp::idx_t ... RangeInts, camp::idx_t ... OrderInts>
  static array_t toArray_expanded(bool debug, camp::idx_seq<RangeInts...>, camp::idx_seq<OrderInts...>){
    using pair_t = std::pair<camp::idx_t, camp::idx_t>;
    using parray_t = std::array<pair_t, sizeof...(T)>;

    parray_t p{{pair_t{RangeInts, OrderInts}...}};

    std::sort(p.begin(), p.end(),
      [=](pair_t const & a, pair_t const & b){
        return a.second < b.second;
      });

    if(debug){
      array_t a{{(p[RangeInts].second)...}};
      return a;
    }
    else{
      array_t a{{(p[RangeInts].first)...}};
      return a;
    }
  }

  static array_t toArray(bool debug = false){
    return toArray_expanded(debug, camp::make_idx_seq_t<sizeof...(T)>{}, camp::idx_seq<getOrder<Order,T>()...>{});
  }


  static void print(){
    array_t a = toArray(true);
    array_t b = toArray(false);

    printf("A:");
    for(camp::idx_t i = 0;i < (camp::idx_t)sizeof...(T);++i){
      printf("%d ", (int)a[i]);
    }
    printf("   B:");
    for(camp::idx_t i = 0;i < (camp::idx_t)sizeof...(T);++i){
      printf("%d ", (int)b[i]);
    }
    printf(" [stride-one arg=%d]\n", (int)stride_one);
  }

};
# 150 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/VarLayout.h"
template<typename Order, typename ... IndexTypes>
struct LayoutInfo {

  using args_to_order_t = ArgsToOrder<Order, IndexTypes...>;


  constexpr static ptrdiff_t num_dims = sizeof...(IndexTypes);
  constexpr static ptrdiff_t stride_one_dim = args_to_order_t::stride_one;


  using Layout = RAJA::TypedLayout<RAJA::Index_type, camp::tuple<IndexTypes...>, stride_one_dim>;

  static std::array<RAJA::Index_type, num_dims> getPermutation(){
    return args_to_order_t::toArray();
  }
};


template<typename Order, typename ... IndexTypes>
using LayoutType = typename LayoutInfo<Order, IndexTypes...>::Layout;

template<typename Order, typename ElementType, typename ElementPtr, typename ... IndexTypes>
using ViewType = RAJA::View<ElementType, LayoutType<Order, IndexTypes...>, ElementPtr>;



}
}
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/VarTypes.h" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/Set.h" 1
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/Set.h"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/DomainVar.h" 1
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/DomainVar.h"
namespace Kripke {
namespace Core {





  class DomainVar : public Kripke::Core::BaseVar {
    public:
      DomainVar() = default;
      virtual ~DomainVar() = default;


      DomainVar(DomainVar const &) = delete;
      DomainVar& operator=(DomainVar const &) = delete;

      inline __attribute__((always_inline))
      size_t getNumSubdomains() const {
        return m_subdomain_to_chunk.size();
      }

      inline __attribute__((always_inline))
      std::vector<Kripke::SdomId> const &getWorkList() const {
        return m_work_list;
      }


      inline __attribute__((always_inline))
      void dump() const {
        printf("DomainVar:\n");

        printf("  m_subdomain_to_chunk: ");
        for(auto x : m_subdomain_to_chunk){printf("%lu ", (unsigned long)x);}
        printf("\n");

        printf("  m_chunk_to_subdomain: ");
        for(auto x : m_chunk_to_subdomain){printf("%lu ", (unsigned long)x);}
        printf("\n");

        printf("  m_work_list: ");
        for(auto x : m_work_list){printf("%d ", (int)*x);}
        printf("\n");
      }

    protected:

      void setup_initChunks(Kripke::Core::PartitionSpace const &pspace,
          Kripke::Core::SPACE space);

      void setup_initChunks(Kripke::Core::DomainVar const &clone_from);

      std::vector<size_t> m_subdomain_to_chunk;
      std::vector<size_t> m_chunk_to_subdomain;
      std::vector<Kripke::SdomId> m_work_list;
  };

} }
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/Set.h" 2




namespace Kripke {

namespace Core {



  class Set : public Kripke::Core::DomainVar {
    public:
      Set();
      virtual ~Set() = default;


      Set(Set const &) = delete;




      inline __attribute__((always_inline))
      size_t size(Kripke::SdomId sdom_id) const {
        size_t chunk_id = m_subdomain_to_chunk[*sdom_id];
        return m_chunk_to_size[chunk_id];
      }





      inline __attribute__((always_inline))
      RAJA::RangeSegment range(Kripke::SdomId sdom_id) const {
        return RAJA::RangeSegment(0, size(sdom_id));
      }





      inline __attribute__((always_inline))
      size_t lower(Kripke::SdomId sdom_id) const {
        size_t chunk_id = m_subdomain_to_chunk[*sdom_id];
        return m_chunk_to_lower[chunk_id];
      }




      inline __attribute__((always_inline))
      size_t globalSize() const {
        return m_global_size;
      }




      virtual size_t getNumDimensions() const = 0;




      virtual size_t dimSize(Kripke::SdomId sdom_id, size_t dim) const;

    protected:
      std::vector<size_t> m_chunk_to_size;
      std::vector<size_t> m_chunk_to_lower;
      size_t m_global_size;
  };


  class RangeSet : public Kripke::Core::Set {
    public:
      RangeSet(Kripke::Core::PartitionSpace const &pspace, Kripke::Core::SPACE space,
          std::vector<size_t> const &local_sizes);

      virtual ~RangeSet() = default;

      inline __attribute__((always_inline))
      virtual size_t getNumDimensions() const{return 1;}

    private:
      void setup_setupByLocalSize(Kripke::Core::PartitionSpace const &pspace,
          std::vector<size_t> const &local_sizes);
      Kripke::Core::SPACE m_space;
  };


  class LocalRangeSet : public Kripke::Core::Set {
    public:
      LocalRangeSet(Kripke::Core::PartitionSpace const &pspace, size_t local_size);

      virtual ~LocalRangeSet() = default;

      inline __attribute__((always_inline))
      virtual size_t getNumDimensions() const{return 1;}
  };


  class GlobalRangeSet : public Kripke::Core::Set {
    public:
      GlobalRangeSet(Kripke::Core::PartitionSpace const &pspace, size_t global_size);
      GlobalRangeSet(Kripke::Core::PartitionSpace const &pspace, Kripke::Core::Set &parent_set);

      virtual ~GlobalRangeSet() = default;

      inline __attribute__((always_inline))
      virtual size_t getNumDimensions() const{return 1;}

    private:
      void setup_setGlobalSize(Kripke::Core::PartitionSpace const &pspace, size_t global_size);
  };


  template<size_t NUM_SETS>
  class ProductSet : public Kripke::Core::Set {
    public:

      using LayoutType = RAJA::Layout<NUM_SETS>;

      template<typename ... SPAN>
      ProductSet(Kripke::Core::PartitionSpace &pspace, Kripke::Core::SPACE space,
          SPAN const &... spanned_sets){
        static_assert(sizeof...(SPAN) == NUM_SETS,
            "Must provide same number of sets as dimensionality of ProductSet");

        setup_initChunks(pspace, space);
        setup_setSpannedSets({{(&spanned_sets)...}});

      }

      virtual ~ProductSet() = default;

      virtual size_t getNumDimensions() const{
        return s_num_sets;
      }




      virtual size_t dimSize(Kripke::SdomId sdom_id, size_t dim) const{
        return m_spanned_sets[dim]->size(sdom_id);
      }

      inline __attribute__((always_inline))
      LayoutType getLayout(Kripke::SdomId sdom_id) const {

        std::array<RAJA::Index_type, NUM_SETS> sizes;
        for(size_t dim = 0;dim < NUM_SETS;++ dim){
          sizes[dim] = dimSize(sdom_id, dim);
        }


    auto perm = RAJA::as_array<RAJA::MakePerm<NUM_SETS>>::get();

        return RAJA::make_permuted_layout(sizes, perm);
      }

    private:




      void setup_setSpannedSets(
          std::array<Kripke::Core::Set const *, NUM_SETS> const &spanned_sets){
        m_spanned_sets = spanned_sets;

        size_t num_chunks = m_chunk_to_subdomain.size();
        m_chunk_to_size.resize(num_chunks, 1);
        m_chunk_to_lower.resize(num_chunks, 0);
        for(size_t chunk_id = 0;chunk_id < num_chunks;++ chunk_id){
          Kripke::SdomId sdom_id(m_chunk_to_subdomain[chunk_id]);
          for(size_t set_id = 0;set_id < NUM_SETS;++ set_id){
            m_chunk_to_size[chunk_id] *= spanned_sets[set_id]->size(sdom_id);
          }
        }


        m_global_size = 1;
        for(size_t set_id = 0;set_id < NUM_SETS;++ set_id){
          m_global_size *= spanned_sets[set_id]->globalSize();
        }
      }

      static const size_t s_num_sets = NUM_SETS;

      std::array<Kripke::Core::Set const *, NUM_SETS> m_spanned_sets;


  };



} }
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/VarTypes.h" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/Field.h" 1
# 20 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/Field.h"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp" 1
# 10 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/build/tpl/chai/include/chai/config.hpp" 1
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp" 1
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ChaiMacros.hpp" 1
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ChaiMacros.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Macros.hpp" 1
# 10 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Macros.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Exception.hpp" 1
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Exception.hpp"
namespace umpire {
namespace util {

class Exception : public std::exception {
  public:
    Exception(const std::string& msg,
        const std::string &file,
        int line);

    virtual ~Exception() = default;

    std::string message() const;
    virtual const char* what() const throw();

  private:
    std::string m_message;
    std::string m_file;
    int m_line;

    std::string m_what;
};

}
}
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Macros.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/build/include/umpire/config.hpp" 1
# 36 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/build/include/umpire/config.hpp"
static constexpr int UMPIRE_VERSION_MAJOR = 1;
static constexpr int UMPIRE_VERSION_MINOR = 1;
static constexpr int UMPIRE_VERSION_PATCH = 0;
static constexpr const char* UMPIRE_VERSION_RC = "3db26e6a";

extern volatile int umpire_ver_1_found;
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Macros.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/io.hpp" 1
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/io.hpp"
namespace umpire {


std::ostream& log();
std::ostream& replay();
std::ostream& error();

namespace util {





void initialize_io(const bool enable_log, const bool enable_replay);






void flush_files();

}
}
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Macros.hpp" 2





# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 1 3
# 37 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{
# 63 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_string<char_type, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

    protected:

      ios_base::openmode _M_mode;


      __string_type _M_string;

    public:
# 97 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      explicit
      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(__mode), _M_string()
      { }
# 110 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      explicit
      basic_stringbuf(const __string_type& __str,
        ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(), _M_string(__str.data(), __str.size())
      { _M_stringbuf_init(__mode); }
# 125 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      __string_type
      str() const
      {
 __string_type __ret;
 if (this->pptr())
   {

     if (this->pptr() > this->egptr())
       __ret = __string_type(this->pbase(), this->pptr());
     else
        __ret = __string_type(this->pbase(), this->egptr());
   }
 else
   __ret = _M_string;
 return __ret;
      }
# 149 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      void
      str(const __string_type& __s)
      {

 _M_string.assign(__s.data(), __s.size());
 _M_stringbuf_init(_M_mode);
      }

    protected:

      void
      _M_stringbuf_init(ios_base::openmode __mode)
      {
 _M_mode = __mode;
 __size_type __len = 0;
 if (_M_mode & (ios_base::ate | ios_base::app))
   __len = _M_string.size();
 _M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
      }

      virtual streamsize
      showmanyc()
      {
 streamsize __ret = -1;
 if (_M_mode & ios_base::in)
   {
     _M_update_egptr();
     __ret = this->egptr() - this->gptr();
   }
 return __ret;
      }

      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = traits_type::eof());

      virtual int_type
      overflow(int_type __c = traits_type::eof());
# 201 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n)
      {
 if (__s && __n >= 0)
   {






     _M_string.clear();


     _M_sync(__s, __n, 0);
   }
 return this;
      }

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out);




      void
      _M_sync(char_type* __base, __size_type __i, __size_type __o);



      void
      _M_update_egptr()
      {
 const bool __testin = _M_mode & ios_base::in;
 if (this->pptr() && this->pptr() > this->egptr())
   {
     if (__testin)
       this->setg(this->eback(), this->gptr(), this->pptr());
     else
       this->setg(this->pptr(), this->pptr(), this->pptr());
   }
      }



      void
      _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);
    };
# 271 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_istringstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 307 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      explicit
      basic_istringstream(ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__mode | ios_base::in)
      { this->init(&_M_stringbuf); }
# 325 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      explicit
      basic_istringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
      { this->init(&_M_stringbuf); }







      ~basic_istringstream()
      { }
# 347 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 386 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_ostringstream : public basic_ostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 422 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      explicit
      basic_ostringstream(ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
      { this->init(&_M_stringbuf); }
# 440 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      explicit
      basic_ostringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
      { this->init(&_M_stringbuf); }







      ~basic_ostringstream()
      { }
# 462 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 501 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 536 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      explicit
      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__m)
      { this->init(&_M_stringbuf); }
# 552 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      explicit
      basic_stringstream(const __string_type& __str,
    ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__str, __m)
      { this->init(&_M_stringbuf); }







      ~basic_stringstream()
      { }
# 574 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };


}


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/sstream.tcc" 1 3
# 38 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/sstream.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    pbackfail(int_type __c)
    {
      int_type __ret = traits_type::eof();
      if (this->eback() < this->gptr())
 {


   const bool __testeof = traits_type::eq_int_type(__c, __ret);
   if (!__testeof)
     {
       const bool __testeq = traits_type::eq(traits_type::
          to_char_type(__c),
          this->gptr()[-1]);
       const bool __testout = this->_M_mode & ios_base::out;
       if (__testeq || __testout)
  {
    this->gbump(-1);
    if (!__testeq)
      *this->gptr() = traits_type::to_char_type(__c);
    __ret = __c;
  }
     }
   else
     {
       this->gbump(-1);
       __ret = traits_type::not_eof(__c);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    overflow(int_type __c)
    {
      const bool __testout = this->_M_mode & ios_base::out;
      if (__builtin_expect(!__testout, false))
 return traits_type::eof();

      const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());
      if (__builtin_expect(__testeof, false))
 return traits_type::not_eof(__c);

      const __size_type __capacity = _M_string.capacity();
      const __size_type __max_size = _M_string.max_size();
      const bool __testput = this->pptr() < this->epptr();
      if (__builtin_expect(!__testput && __capacity == __max_size, false))
 return traits_type::eof();



      const char_type __conv = traits_type::to_char_type(__c);
      if (!__testput)
 {
# 110 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/bits/sstream.tcc" 3
   const __size_type __opt_len = std::max(__size_type(2 * __capacity),
       __size_type(512));
   const __size_type __len = std::min(__opt_len, __max_size);
   __string_type __tmp;
   __tmp.reserve(__len);
   if (this->pbase())
     __tmp.assign(this->pbase(), this->epptr() - this->pbase());
   __tmp.push_back(__conv);
   _M_string.swap(__tmp);
   _M_sync(const_cast<char_type*>(_M_string.data()),
    this->gptr() - this->eback(), this->pptr() - this->pbase());
 }
      else
 *this->pptr() = __conv;
      this->pbump(1);
      return __c;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = this->_M_mode & ios_base::in;
      if (__testin)
 {

   _M_update_egptr();

   if (this->gptr() < this->egptr())
     __ret = traits_type::to_int_type(*this->gptr());
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;
      const bool __testboth = __testin && __testout && __way != ios_base::cur;
      __testin &= !(__mode & ios_base::out);
      __testout &= !(__mode & ios_base::in);



      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !__off) && (__testin || __testout || __testboth))
 {
   _M_update_egptr();

   off_type __newoffi = __off;
   off_type __newoffo = __newoffi;
   if (__way == ios_base::cur)
     {
       __newoffi += this->gptr() - __beg;
       __newoffo += this->pptr() - __beg;
     }
   else if (__way == ios_base::end)
     __newoffo = __newoffi += this->egptr() - __beg;

   if ((__testin || __testboth)
       && __newoffi >= 0
       && this->egptr() - __beg >= __newoffi)
     {
       this->setg(this->eback(), this->eback() + __newoffi,
    this->egptr());
       __ret = pos_type(__newoffi);
     }
   if ((__testout || __testboth)
       && __newoffo >= 0
       && this->egptr() - __beg >= __newoffo)
     {
       _M_pbump(this->pbase(), this->epptr(), __newoffo);
       __ret = pos_type(__newoffo);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekpos(pos_type __sp, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;

      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !off_type(__sp)) && (__testin || __testout))
 {
   _M_update_egptr();

   const off_type __pos(__sp);
   const bool __testpos = (0 <= __pos
      && __pos <= this->egptr() - __beg);
   if (__testpos)
     {
       if (__testin)
  this->setg(this->eback(), this->eback() + __pos,
      this->egptr());
       if (__testout)
  _M_pbump(this->pbase(), this->epptr(), __pos);
       __ret = __sp;
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_sync(char_type* __base, __size_type __i, __size_type __o)
    {
      const bool __testin = _M_mode & ios_base::in;
      const bool __testout = _M_mode & ios_base::out;
      char_type* __endg = __base + _M_string.size();
      char_type* __endp = __base + _M_string.capacity();

      if (__base != _M_string.data())
 {

   __endg += __i;
   __i = 0;
   __endp = __endg;
 }

      if (__testin)
 this->setg(__base, __base + __i, __endg);
      if (__testout)
 {
   _M_pbump(__base, __endp, __o);



   if (!__testin)
     this->setg(__endg, __endg, __endg);
 }
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off)
    {
      this->setp(__pbeg, __pend);
      while (__off > __gnu_cxx::__numeric_traits<int>::__max)
 {
   this->pbump(__gnu_cxx::__numeric_traits<int>::__max);
   __off -= __gnu_cxx::__numeric_traits<int>::__max;
 }
      this->pbump(__off);
    }




  extern template class basic_stringbuf<char>;
  extern template class basic_istringstream<char>;
  extern template class basic_ostringstream<char>;
  extern template class basic_stringstream<char>;


  extern template class basic_stringbuf<wchar_t>;
  extern template class basic_istringstream<wchar_t>;
  extern template class basic_ostringstream<wchar_t>;
  extern template class basic_stringstream<wchar_t>;




}
# 601 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/sstream" 2 3
# 19 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Macros.hpp" 2


# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 1 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 3

# 1 "/usr/include/assert.h" 1 3 4
# 65 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 2 3
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Macros.hpp" 2
# 67 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Macros.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Logger.hpp" 1
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Logger.hpp"
namespace umpire {
namespace util {

namespace message {
enum Level {
  Error,
  Warning,
  Info,
  Debug,

  Num_Levels
};
}

class Logger {
  public:

  void setLoggingMsgLevel(message::Level level) noexcept;

  void logMessage(message::Level level,
                  const std::string& message,
                  const std::string& fileName,
                  int line) noexcept;

  static void initialize();

  static void finalize();

  static Logger* getActiveLogger();

  inline bool logLevelEnabled(message::Level level)
  {
    if ( level < 0 || level >= message::Num_Levels || m_is_enabled[ level ] == false )
      return false;
    else
      return true;
  };

  ~Logger() noexcept = default;
  Logger(const Logger&) = delete;
  Logger& operator=(const Logger&) = delete;

private:
  Logger() noexcept;

  bool m_is_enabled[message::Num_Levels];
};

}
}
# 68 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Macros.hpp" 2
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ChaiMacros.hpp" 2
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ExecutionSpaces.hpp" 1
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ExecutionSpaces.hpp"
namespace chai
{




enum ExecutionSpace {

  NONE = 0,

  CPU,


  GPU,
# 35 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ExecutionSpaces.hpp"
  NUM_EXECUTION_SPACES




  ,UM


  ,PINNED

};

}
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/PointerRecord.hpp" 1
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/PointerRecord.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/Types.hpp" 1
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/Types.hpp"
namespace chai
{
  struct PointerRecord;

  typedef unsigned int uint;

  enum Action { ACTION_ALLOC, ACTION_FREE, ACTION_MOVE, ACTION_CAPTURED, ACTION_FOUND_ABANDONED, ACTION_LEAKED };

  using UserCallback = std::function<void(const PointerRecord*, Action, ExecutionSpace)>;
}
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/PointerRecord.hpp" 2




namespace chai
{




struct PointerRecord {



  std::size_t m_size;




  void* m_pointers[NUM_EXECUTION_SPACES];




  bool m_touched[NUM_EXECUTION_SPACES];




  ExecutionSpace m_last_space;




  bool m_owned[NUM_EXECUTION_SPACES];
# 55 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/PointerRecord.hpp"
  UserCallback m_user_callback;

  int m_allocators[NUM_EXECUTION_SPACES];





  PointerRecord() : m_size(0), m_last_space(NONE) {
     m_user_callback = [] (const PointerRecord*, Action, ExecutionSpace) {};
     for (int space = 0; space < NUM_EXECUTION_SPACES; ++space ) {
        m_pointers[space] = nullptr;
        m_touched[space] = false;
        m_owned[space] = true;
        m_allocators[space] = 0;
     }
  }
};

}
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp" 2








# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp" 1
# 10 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/AllocationStrategy.hpp" 1
# 10 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/AllocationStrategy.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Platform.hpp" 1
# 10 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/Platform.hpp"
namespace umpire {

enum class Platform {
  none,
  cpu,
  cuda,
  rocm,
  hip
};

}
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/AllocationStrategy.hpp" 2






namespace umpire {
namespace strategy {





class AllocationStrategy
{
  public:
# 36 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/AllocationStrategy.hpp"
    AllocationStrategy(const std::string& name, int id) noexcept;

    virtual ~AllocationStrategy() = default;
# 47 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/AllocationStrategy.hpp"
    virtual void* allocate(std::size_t bytes) = 0;






    virtual void deallocate(void* ptr) = 0;




    virtual void release();
# 69 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/AllocationStrategy.hpp"
    virtual std::size_t getCurrentSize() const noexcept = 0;







    virtual std::size_t getHighWatermark() const noexcept = 0;
# 87 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/AllocationStrategy.hpp"
    virtual std::size_t getActualSize() const noexcept;
# 97 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/AllocationStrategy.hpp"
    virtual Platform getPlatform() noexcept = 0;






    const std::string& getName() noexcept;







    int getId() noexcept;

    friend std::ostream& operator<<(std::ostream& os, const AllocationStrategy& strategy);

  protected:
    std::string m_name;

    int m_id;
};

}
}
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp" 2







class AllocatorTest;

namespace umpire {

class ResourceManager;
# 34 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp"
class Allocator {
  friend class ResourceManager;
  friend class ::AllocatorTest;

  public:
# 53 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp"
    inline void* allocate(std::size_t bytes);
# 64 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp"
    inline void deallocate(void* ptr);




    void release();
# 78 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp"
    std::size_t getSize(void* ptr) const;
# 89 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp"
    std::size_t getHighWatermark() const noexcept;
# 99 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp"
    std::size_t getCurrentSize() const noexcept;
# 111 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp"
    std::size_t getActualSize() const noexcept;
# 123 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp"
    const std::string& getName() const noexcept;
# 136 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp"
    int getId() const noexcept;
# 145 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp"
    strategy::AllocationStrategy* getAllocationStrategy() noexcept;






    Platform getPlatform() noexcept;

    Allocator() = default;

    friend std::ostream& operator<<(std::ostream&, const Allocator&);

  private:
# 168 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp"
    Allocator(strategy::AllocationStrategy* allocator) noexcept;





    umpire::strategy::AllocationStrategy* m_allocator;
};

}


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.inl" 1
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.inl"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp" 1
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.inl" 2


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Replay.hpp" 1
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Replay.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPool.hpp" 1
# 10 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPool.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolMap.hpp" 1
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolMap.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolHeuristic.hpp" 1
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolHeuristic.hpp"
namespace umpire {
namespace strategy {

class DynamicPoolList;
class DynamicPoolMap;
# 29 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolHeuristic.hpp"
  std::function<bool(const strategy::DynamicPoolList&)> heuristic_percent_releasable_list( int percentage );
# 42 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolHeuristic.hpp"
  std::function<bool(const strategy::DynamicPoolMap&)> heuristic_percent_releasable( int percentage );

}
}
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolMap.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.hpp" 1
# 10 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/tpl/judy/judy.h" 1
# 46 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/tpl/judy/judy.h"
typedef unsigned long long judyvalue;
typedef unsigned long long JudySlot;
# 83 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/tpl/judy/judy.h"
enum JUDY_types {
    JUDY_radix = 0,
    JUDY_1 = 1,
    JUDY_2 = 2,
    JUDY_4 = 3,
    JUDY_8 = 4,
    JUDY_16 = 5,
    JUDY_32 = 6,



    JUDY_span = 7

};

typedef struct {
    void * seg;
    unsigned int next;
} JudySeg;

typedef struct {
    JudySlot next;
    unsigned int off;
    int slot;
} JudyStack;

typedef struct {
    JudySlot root[1];
    void ** reuse[8];
    JudySeg * seg;
    unsigned int level;
    unsigned int max;
    unsigned int depth;
    JudyStack stack[1];
} Judy;
# 133 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/tpl/judy/judy.h"
extern "C" {



    Judy * judy_open( unsigned int max, unsigned int depth );


    void judy_close( Judy * judy );


    Judy * judy_clone( Judy * judy );


    void * judy_data( Judy * judy, unsigned int amt );


    JudySlot * judy_cell( Judy * judy, const unsigned char * buff, unsigned int max );


    JudySlot * judy_strt( Judy * judy, const unsigned char * buff, unsigned int max );


    JudySlot * judy_slot( Judy * judy, const unsigned char * buff, unsigned int max );


    unsigned int judy_key( Judy * judy, unsigned char * buff, unsigned int max );


    JudySlot * judy_end( Judy * judy );


    JudySlot * judy_nxt( Judy * judy );


    JudySlot * judy_prv( Judy * judy );


    JudySlot * judy_del( Judy * judy );


}
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/FixedMallocPool.hpp" 1
# 10 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/FixedMallocPool.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 3
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/FixedMallocPool.hpp" 2


namespace umpire {
namespace util {
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/FixedMallocPool.hpp"
class FixedMallocPool
{
public:
  FixedMallocPool(const std::size_t object_bytes,
                  const std::size_t objects_per_pool = 1024*1024);

  ~FixedMallocPool();

  void* allocate(std::size_t bytes = 0);
  void deallocate(void* ptr);

  std::size_t numPools() const noexcept;

private:
  struct Pool {
    unsigned char* data;
    unsigned char* next;
    unsigned int num_initialized;
    std::size_t num_free;
    Pool(const std::size_t object_bytes, const std::size_t objects_per_pool);
  };

  void newPool();
  void* allocInPool(Pool& p) noexcept;

  unsigned char* addr_from_index(const Pool& p, unsigned int i) const;
  unsigned int index_from_addr(const Pool& p, const unsigned char* ptr) const;

  const std::size_t m_obj_bytes;
  const std::size_t m_obj_per_pool;
  const std::size_t m_data_bytes;
  std::vector<Pool> m_pool;



};

}
}
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.hpp" 2







namespace umpire {
namespace util {


struct iterator_begin {};
struct iterator_end {};







template <typename V>
class MemoryMap
{
public:
  using Key = void*;
  using Value = V;
  using KeyValuePair = std::pair<Key, Value*>;

  template <bool Const = false>
  class Iterator_ : public std::iterator<std::forward_iterator_tag, Value> {
  public:

    using Map = typename std::conditional<Const, const MemoryMap<Value>, MemoryMap<Value>>::type;
    using ValuePtr = typename std::conditional<Const, const Value*, Value*>::type;

    using Content = std::pair<Key, ValuePtr>;
    using Reference = typename std::conditional<Const, const Content&, Content&>::type;
    using Pointer = typename std::conditional<Const, const Content*, Content*>::type;

    Iterator_(Map* map, Key ptr);
    Iterator_(Map* map, iterator_begin);
    Iterator_(Map* map, iterator_end);

    template<bool OtherConst>
    Iterator_(const Iterator_<OtherConst>& other);

    Reference operator*();
    Pointer operator->();
    Iterator_& operator++();
    Iterator_ operator++(int);

    template <bool OtherConst>
    bool operator==(const Iterator_<OtherConst>& other) const;

    template <bool OtherConst>
    bool operator!=(const Iterator_<OtherConst>& other) const;

  private:
    Map* m_map;
    Content m_pair;
  };

  template <bool Const> friend class Iterator_;

  using Iterator = Iterator_<false>;
  using ConstIterator = Iterator_<true>;

  MemoryMap();
  ~MemoryMap();


  MemoryMap(const MemoryMap&) = delete;
# 94 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.hpp"
  std::pair<Iterator, bool> insert(Key ptr, const Value& val) noexcept;







  template<typename P>
  std::pair<Iterator, bool> insert(P&& pair) noexcept;







  template <typename... Args>
  std::pair<Iterator, bool> insert(Key ptr, Args&&... args) noexcept;






  Iterator findOrBefore(Key ptr) noexcept;
  ConstIterator findOrBefore(Key ptr) const noexcept;






  Iterator find(Key ptr) noexcept;
  ConstIterator find(Key ptr) const noexcept;




  ConstIterator begin() const;
  Iterator begin();




  ConstIterator end() const;
  Iterator end();




  void erase(Key ptr);
  void erase(Iterator iter);
  void erase(ConstIterator oter);
# 156 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.hpp"
  void removeLast();




  void clear() noexcept;




  std::size_t size() const noexcept;

private:

  Key doFindOrBefore(Key ptr) const noexcept;


  template <typename... Args>
  std::pair<Iterator, bool> doInsert(Key ptr, Args&&... args) noexcept;

  mutable Judy* m_array;
  mutable JudySlot* m_last;
  mutable uintptr_t m_oper;
  FixedMallocPool m_pool;
  std::size_t m_size;
};


}
}


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl" 1
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl"
namespace umpire {
namespace util {

namespace {


static constexpr unsigned int judy_depth{1};


static constexpr unsigned int judy_max_levels{sizeof(uintptr_t)};


static constexpr unsigned int judy_max{judy_depth * 8};

}


template <typename V>
MemoryMap<V>::MemoryMap() :
  m_array{nullptr},
  m_last{nullptr},
  m_oper{0},
  m_pool{sizeof(Value)},
  m_size{0}
{

  m_array = judy_open(judy_max_levels, judy_depth);
}

template <typename V>
MemoryMap<V>::~MemoryMap()
{

  clear();


  judy_close(m_array);
}

template <typename V>
template <typename... Args>
std::pair<typename MemoryMap<V>::Iterator, bool>
MemoryMap<V>::doInsert(Key ptr, Args&&... args) noexcept
{

  m_last = judy_cell(m_array, reinterpret_cast<unsigned char*>(&ptr), judy_max);
  m_oper = reinterpret_cast<uintptr_t>(this);
  ((m_last) ? static_cast<void> (0) : __assert_fail ("m_last", "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl", 59, __PRETTY_FUNCTION__));

  auto pval = reinterpret_cast<Value**>(m_last);
  const bool not_found{!(*pval)};

  if (not_found) {

    (*pval) = new (m_pool.allocate()) Value{std::forward<Args>(args)...};
    ++m_size;
  }

  return std::make_pair(Iterator{this, ptr}, not_found);
}

template <typename V>
std::pair<typename MemoryMap<V>::Iterator, bool>
MemoryMap<V>::insert(Key ptr, const Value& val) noexcept
{
  { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "ptr = " << ptr; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl"), 77); } };

  auto it_pair = doInsert(ptr, val);
  it_pair.second = !it_pair.second;

  return it_pair;
}

template <typename V>
template <typename P>
std::pair<typename MemoryMap<V>::Iterator, bool>
MemoryMap<V>::insert(P&& pair) noexcept
{
  return insert(pair.first, pair.second);
}

template <typename V>
template <typename... Args>
std::pair<typename MemoryMap<V>::Iterator, bool>
MemoryMap<V>::insert(Key ptr, Args&&... args) noexcept
{
  { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "ptr = " << ptr; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl"), 98); } };
  return doInsert(ptr, std::forward<Args>(args)...);
}

template <typename V>
typename MemoryMap<V>::Key
MemoryMap<V>::doFindOrBefore(Key ptr) const noexcept
{
  { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "ptr = " << ptr; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl"), 106); } };


  m_last = judy_strt(m_array, reinterpret_cast<unsigned char*>(&ptr), judy_max);
  m_oper = reinterpret_cast<uintptr_t>(this);

  Key parent_ptr{0};
  judy_key(m_array, reinterpret_cast<unsigned char*>(&parent_ptr), judy_max);

  const Value* value{m_last ? reinterpret_cast<const Value*>(*m_last) : nullptr};


  if (parent_ptr != ptr || !value)
  {
    m_last = judy_prv(m_array);
    judy_key(m_array, reinterpret_cast<unsigned char*>(&parent_ptr), judy_max);
  }
  { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "returning " << parent_ptr; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl"), 123); } };

  return parent_ptr;
}

template <typename V>
typename MemoryMap<V>::Iterator MemoryMap<V>::findOrBefore(Key ptr) noexcept
{
  ptr = doFindOrBefore(ptr);
  return Iterator{this, ptr};
}

template <typename V>
typename MemoryMap<V>::ConstIterator
MemoryMap<V>::findOrBefore(Key ptr) const noexcept
{
  ptr = doFindOrBefore(ptr);
  return ConstIterator{this, ptr};
}

template <typename V>
typename MemoryMap<V>::Iterator MemoryMap<V>::find(Key ptr) noexcept
{
  { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "ptr = " << ptr; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl"), 146); } };


  m_last = judy_slot(m_array, reinterpret_cast<unsigned char*>(&ptr), judy_max);
  m_oper = reinterpret_cast<uintptr_t>(this);
  return m_last ? Iterator{this, ptr} : Iterator{this, iterator_end{}};
}

template <typename V>
typename MemoryMap<V>::ConstIterator
MemoryMap<V>::find(Key ptr) const noexcept
{
  { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "ptr = " << ptr; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl"), 158); } };


  m_last = judy_slot(m_array, reinterpret_cast<unsigned char*>(&ptr), judy_max);
  m_oper = reinterpret_cast<uintptr_t>(this);
  return m_last ? ConstIterator{this, ptr} : ConstIterator{this, iterator_end{}};
}

template <typename V>
void MemoryMap<V>::erase(Key ptr)
{
  { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "ptr = " << ptr; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl"), 169); } };


  m_last = judy_slot(m_array, reinterpret_cast<unsigned char*>(&ptr), judy_max);
  m_oper = reinterpret_cast<uintptr_t>(this);


  if (m_last) {
    removeLast();
  } else {
    { { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Error)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "Could not remove ptr = " << ptr; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Error, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl"), 179); } }; std::ostringstream umpire_oss_error; umpire_oss_error << " " << __func__ << " " << "Could not remove ptr = " << ptr; umpire::util::flush_files(); throw umpire::util::Exception( umpire_oss_error.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl"), 179); };
  }
}

template <typename V>
void MemoryMap<V>::erase(Iterator iter)
{
  erase(iter->first);
}

template <typename V>
void MemoryMap<V>::erase(ConstIterator iter)
{
  erase(iter->first);
}

template <typename V>
void MemoryMap<V>::clear() noexcept
{

  Key key{0};
  for(m_last = judy_strt(m_array, reinterpret_cast<unsigned char*>(&key), 0);
      m_last;
      m_last = judy_strt(m_array, reinterpret_cast<unsigned char*>(&key), 0))
    removeLast();

  m_size = 0;
}

template <typename V>
std::size_t MemoryMap<V>::size() const noexcept
{
  return m_size;
}

template <typename V>
void MemoryMap<V>::removeLast()
{
  auto v = reinterpret_cast<Value*>(*m_last);
  ((v != nullptr) ? static_cast<void> (0) : __assert_fail ("v != nullptr", "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl", 218, __PRETTY_FUNCTION__));

  { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "value pointer = " << v; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.inl"), 220); } };


  v->~Value();


  m_pool.deallocate(v);


  judy_del(m_array);


  --m_size;
}

template <typename V>
template <bool Const>
MemoryMap<V>::Iterator_<Const>::Iterator_(Map* map, Key ptr) :
  m_map{map}, m_pair{std::make_pair(ptr, m_map->m_last ? reinterpret_cast<ValuePtr>(*m_map->m_last) : nullptr)}
{
}

template <typename V>
template <bool Const>
MemoryMap<V>::Iterator_<Const>::Iterator_(Map* map, iterator_begin) :
  m_map{map}, m_pair{}
{
  m_pair.first = nullptr;
  m_map->m_last = judy_strt(m_map->m_array, reinterpret_cast<const unsigned char*>(&m_pair.first), 0);
  judy_key(m_map->m_array, reinterpret_cast<unsigned char*>(&m_pair.first), judy_max);
  m_map->m_oper = reinterpret_cast<uintptr_t>(this);
  m_pair.second = m_map->m_last ? reinterpret_cast<ValuePtr>(*m_map->m_last) : nullptr;
}

template <typename V>
template <bool Const>
MemoryMap<V>::Iterator_<Const>::Iterator_(Map* map, iterator_end) :
  m_map{map}, m_pair{std::make_pair(nullptr, static_cast<ValuePtr>(nullptr))}
{
}

template <typename V>
template <bool Const>
template <bool OtherConst>
MemoryMap<V>::Iterator_<Const>::Iterator_(const Iterator_<OtherConst>& other) :
  m_map{other.m_map}, m_pair{other.m_pair}
{
}

template <typename V>
template <bool Const>
typename MemoryMap<V>::template Iterator_<Const>::Reference
MemoryMap<V>::Iterator_<Const>::operator*()
{
  return m_pair;
}

template <typename V>
template <bool Const>
typename MemoryMap<V>::template Iterator_<Const>::Pointer
MemoryMap<V>::Iterator_<Const>::operator->()
{
  return &m_pair;
}

template <typename V>
template <bool Const>
typename MemoryMap<V>::template Iterator_<Const>&
MemoryMap<V>::Iterator_<Const>::operator++()
{

  if (m_pair.first && m_map->m_oper != reinterpret_cast<uintptr_t>(this)) {

    judy_slot(m_map->m_array, reinterpret_cast<const unsigned char*>(&m_pair.first), judy_max);
  }
  m_map->m_last = judy_nxt(m_map->m_array);
  m_map->m_oper = reinterpret_cast<uintptr_t>(this);

  if (!m_map->m_last) {

    m_pair.first = nullptr;
  }
  else {

    judy_key(m_map->m_array, reinterpret_cast<unsigned char*>(&m_pair.first), judy_max);
    m_pair.second = reinterpret_cast<ValuePtr>(*m_map->m_last);
  }

  return *this;
}

template <typename V>
template <bool Const>
typename MemoryMap<V>::template Iterator_<Const>
MemoryMap<V>::Iterator_<Const>::operator++(int)
{
  Iterator tmp{*this};
  ++(*this);
  return tmp;
}

template <typename V>
template <bool Const>
template <bool OtherConst>
bool MemoryMap<V>::Iterator_<Const>::operator==(const MemoryMap<V>::Iterator_<OtherConst>& other) const
{
  return m_map == other.m_map && m_pair.first == other.m_pair.first;
}

template <typename V>
template <bool Const>
template <bool OtherConst>
bool MemoryMap<V>::Iterator_<Const>::operator!=(const MemoryMap<V>::Iterator_<OtherConst>& other) const
{
  return !(*this == other);
}

template <typename V>
typename MemoryMap<V>::ConstIterator
MemoryMap<V>::begin() const
{
  return ConstIterator{this, iterator_begin{}};
}

template <typename V>
typename MemoryMap<V>::Iterator
MemoryMap<V>::begin()
{
  return Iterator{this, iterator_begin{}};
}

template <typename V>
typename MemoryMap<V>::ConstIterator
MemoryMap<V>::end() const
{
  return ConstIterator{this, iterator_end{}};
}

template <typename V>
typename MemoryMap<V>::Iterator
MemoryMap<V>::end()
{
  return Iterator{this, iterator_end{}};
}

}
}
# 188 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/MemoryMap.hpp" 2
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolMap.hpp" 2




namespace umpire {

class Allocator;

namespace strategy {
# 35 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolMap.hpp"
class DynamicPoolMap : public AllocationStrategy
{
  public:
    using Pointer = void*;







    using CoalesceHeuristic = std::function<bool (const strategy::DynamicPoolMap&)>;
# 58 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolMap.hpp"
    DynamicPoolMap(
        const std::string& name,
        int id,
        Allocator allocator,
        const std::size_t initial_alloc_size = (512 * 1024 * 1024),
        const std::size_t min_alloc_size = (1 * 1024 * 1024),
        CoalesceHeuristic coalesce_heuristic = heuristic_percent_releasable(100),
        const int align_bytes = 16) noexcept;




    ~DynamicPoolMap();

    DynamicPoolMap(const DynamicPoolMap&) = delete;

    void* allocate(std::size_t bytes) override;
    void deallocate(void* ptr) override;
    void release() override;

    std::size_t getCurrentSize() const noexcept override;
    std::size_t getActualSize() const noexcept override;
    std::size_t getHighWatermark() const noexcept override;

    Platform getPlatform() noexcept override;
# 95 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolMap.hpp"
    std::size_t getReleasableSize() const noexcept;




    std::size_t getFreeBlocks() const noexcept;




    std::size_t getInUseBlocks() const noexcept;





    std::size_t getBlocksInPool() const noexcept;





    void coalesce();

  private:
    using SizeTuple = std::tuple<std::size_t, bool, std::size_t>;
    using AddressTuple = std::tuple<Pointer, bool, std::size_t>;
    using AddressMap = util::MemoryMap<SizeTuple>;
    using SizeMap = std::multimap<std::size_t, AddressTuple>;




    void* allocateBlock(std::size_t bytes);




    void deallocateBlock(void* ptr, std::size_t bytes);




    void insertUsed(Pointer addr, std::size_t bytes, bool is_head,
                    std::size_t whole_bytes);




    void insertFree(Pointer addr, std::size_t bytes, bool is_head,
                    std::size_t whole_bytes);





    SizeMap::const_iterator findFreeBlock(std::size_t bytes) const;






    void mergeFreeBlocks();





    std::size_t releaseFreeBlocks();

    void do_coalesce();

    strategy::AllocationStrategy* m_allocator;
    const std::size_t m_initial_alloc_bytes;
    const std::size_t m_min_alloc_bytes;
    const int m_align_bytes;
    CoalesceHeuristic m_coalesce_heuristic;
    AddressMap m_used_map;
    SizeMap m_free_map;
    std::size_t m_curr_bytes;
    std::size_t m_actual_bytes;
    std::size_t m_highwatermark;
};

}
}
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPool.hpp" 2

namespace umpire {
namespace strategy {

using DynamicPool = DynamicPoolMap;

}
}
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Replay.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolList.hpp" 1
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolList.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp" 1
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 1 3
# 42 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 3

# 1 "/usr/include/assert.h" 1 3 4
# 65 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 44 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cassert" 2 3
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp" 2





# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/StdAllocator.hpp" 1
# 10 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/StdAllocator.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstdlib" 3
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/StdAllocator.hpp" 2

struct StdAllocator
{
  static inline void* allocate(std::size_t size) { return std::malloc(size); }
  static inline void deallocate(void *ptr) { std::free(ptr); }
};
# 18 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/FixedSizePool.hpp" 1
# 10 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/FixedSizePool.hpp"
# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstring" 1 3
# 40 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cstring" 3
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/FixedSizePool.hpp" 2
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/FixedSizePool.hpp"
inline int find_first_set(int i)
{






  return ffs(i);

}

template<class T, class MA, class IA = StdAllocator, int NP=(1<<6)>
class FixedSizePool
{
protected:
  struct Pool
  {
    unsigned char *data;
    unsigned int *avail;
    unsigned int numAvail;
    struct Pool* next;
  };

  struct Pool *pool;
  const std::size_t numPerPool;
  const std::size_t totalPoolSize;

  std::size_t numBlocks;

  void newPool(struct Pool **pnew) {
    struct Pool *p = static_cast<struct Pool *>(IA::allocate(sizeof(struct Pool) + NP * sizeof(unsigned int)));
    p->numAvail = numPerPool;
    p->next = __null;

    p->data = reinterpret_cast<unsigned char*>(MA::allocate(numPerPool * sizeof(T)));
    p->avail = reinterpret_cast<unsigned int *>(p + 1);
    for (int i = 0; i < NP; i++) p->avail[i] = (~0);

    *pnew = p;
  }

  T* allocInPool(struct Pool *p) {
    if (!p->numAvail) return __null;

    for (int i = 0; i < NP; i++) {
      const int bit = find_first_set(p->avail[i]) - 1;
      if (bit >= 0) {
        p->avail[i] ^= 1 << bit;
        p->numAvail--;
        const int entry = i * sizeof(unsigned int) * 8 + bit;
        return reinterpret_cast<T*>(p->data) + entry;
      }
    }

    return __null;
  }

public:
  static inline FixedSizePool &getInstance() {
    static FixedSizePool instance;
    return instance;
  }

  FixedSizePool()
    : numPerPool(NP * sizeof(unsigned int) * 8),
      totalPoolSize(sizeof(struct Pool) +
      numPerPool * sizeof(T) +
                    NP * sizeof(unsigned int)),
      numBlocks(0)
  { newPool(&pool); }

  ~FixedSizePool() {
    for (struct Pool *curr = pool; curr; ) {
      struct Pool *next = curr->next;
      MA::deallocate(curr->data);
      IA::deallocate(curr);
      curr = next;
    }
  }

  T* allocate() {
    T* ptr = __null;

    struct Pool *prev = __null;
    struct Pool *curr = pool;
    while (!ptr && curr) {
      ptr = allocInPool(curr);
      prev = curr;
      curr = curr->next;
    }

    if (!ptr) {
      newPool(&prev->next);
      ptr = allocate();

    }
    else {
      numBlocks++;
    }
    return ptr;
  }

  void deallocate(T* ptr) {
    int i = 0;
    for (struct Pool *curr = pool; curr; curr = curr->next) {
      const T* start = reinterpret_cast<T*>(curr->data);
      const T* end = reinterpret_cast<T*>(curr->data) + numPerPool;
      if ( (ptr >= start) && (ptr < end) ) {

        const int indexD = ptr - reinterpret_cast<T*>(curr->data);
        const int indexI = indexD / ( sizeof(unsigned int) * 8 );
        const int indexB = indexD % ( sizeof(unsigned int) * 8 );

        if ((curr->avail[indexI] & (1 << indexB))) {
          std::cerr << "Trying to deallocate an entry that was not marked as allocated" << std::endl;
 }

        curr->avail[indexI] ^= 1 << indexB;
        curr->numAvail++;
        numBlocks--;
        return;
      }
      i++;
    }
    std::cerr << "Could not find pointer to deallocate" << std::endl;
    throw(std::bad_alloc());
  }


  std::size_t getCurrentSize() const { return numBlocks * sizeof(T); }


  std::size_t getActualSize() const {
    return numPools() * totalPoolSize;
  }


  std::size_t numPools() const {
    std::size_t np = 0;
    for (struct Pool *curr = pool; curr; curr = curr->next) np++;
    return np;
  }


  std::size_t poolSize() const { return totalPoolSize; }
};
# 19 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp" 2




template <class IA = StdAllocator>
class DynamicSizePool
{
protected:
  struct Block
  {
    char *data;
    std::size_t size;
    std::size_t blockSize;
    Block *next;
  };


  typedef FixedSizePool<struct Block, IA, IA, (1<<6)> BlockPool;
  BlockPool blockPool;


  struct Block *usedBlocks;
  struct Block *freeBlocks;


  std::size_t totalBlocks;


  std::size_t totalBytes;


  std::size_t allocBytes;


  std::size_t minInitialBytes;


  std::size_t minBytes;


  std::size_t highWatermark;


  umpire::strategy::AllocationStrategy* allocator;


  void findUsableBlock(struct Block *&best, struct Block *&prev, std::size_t size) {
    best = prev = __null;
    for ( struct Block *iter = freeBlocks, *iterPrev = __null ; iter ; iter = iter->next ) {
      if ( iter->size >= size && (!best || iter->size < best->size) ) {
        best = iter;
        prev = iterPrev;
        if ( iter->size == size )
          break;
      }
      iterPrev = iter;
    }
  }

  inline std::size_t alignmentAdjust(const std::size_t size) {
    const std::size_t AlignmentBoundary = 16;
    return std::size_t (size + (AlignmentBoundary-1)) & ~(AlignmentBoundary-1);
  }


  void allocateBlock(struct Block *&curr, struct Block *&prev, const std::size_t size) {
    std::size_t sizeToAlloc;

    if ( freeBlocks == __null && usedBlocks == __null )
      sizeToAlloc = std::max(size, minInitialBytes);
    else
      sizeToAlloc = std::max(size, minBytes);

    curr = prev = __null;
    void *data = __null;


    try {
      data = allocator->allocate(sizeToAlloc);
    }
    catch (...) {
      { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Error)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "\n\tMemory exhausted at allocation resource. " "Attempting to give blocks back.\n\t" << getCurrentSize() << " Allocated to pool, " << getFreeBlocks() << " Free Blocks, " << getInUseBlocks() << " Used Blocks\n"; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Error, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp"), 106); } };






      freeReleasedBlocks();
      { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Error)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "\n\tMemory exhausted at allocation resource.  " "\n\tRetrying allocation operation: " << getCurrentSize() << " Bytes still allocated to pool, " << getFreeBlocks() << " Free Blocks, " << getInUseBlocks() << " Used Blocks\n"; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Error, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp"), 114); } };






      try {
        data = allocator->allocate(sizeToAlloc);
        { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Error)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "\n\tMemory successfully recovered at resource.  Allocation succeeded\n"; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Error, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp"), 119); } };


      }
      catch (...) {
        { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Error)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "\n\tUnable to allocate from resource even after giving back free blocks.\n" "\tThrowing to let application know we have no more memory: " << getCurrentSize() << " Bytes still allocated to pool\n" << getFreeBlocks() << " Partially Free Blocks, " << getInUseBlocks() << " Used Blocks\n"; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Error, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp"), 128); } };






        throw;
      }
    }

    totalBlocks += 1;
    totalBytes += sizeToAlloc;


    curr = (struct Block *) blockPool.allocate();
    (("Failed to allocate block for freeBlock List" && curr) ? static_cast<void> (0) : __assert_fail ("\"Failed to allocate block for freeBlock List\" && curr", "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp", 138, __PRETTY_FUNCTION__));


    struct Block *next;
    for ( next = freeBlocks; next && next->data < data; next = next->next )
      prev = next;


    curr->data = static_cast<char *>(data);
    curr->size = sizeToAlloc;
    curr->blockSize = sizeToAlloc;
    curr->next = next;


    if (prev) prev->next = curr;
    else freeBlocks = curr;
  }

  void splitBlock(struct Block *&curr, struct Block *&prev, const std::size_t size) {
    struct Block *next;

    if ( curr->size == size ) {

      next = curr->next;
    }
    else {

      std::size_t remaining = curr->size - size;
      struct Block *newBlock = (struct Block *) blockPool.allocate();
      if (!newBlock) return;
      newBlock->data = curr->data + size;
      newBlock->size = remaining;
      newBlock->blockSize = 0;
      newBlock->next = curr->next;
      next = newBlock;
      curr->size = size;
    }

    if (prev) prev->next = next;
    else freeBlocks = next;
  }

  void releaseBlock(struct Block *curr, struct Block *prev) {
    ((curr != __null) ? static_cast<void> (0) : __assert_fail ("curr != __null", "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp", 181, __PRETTY_FUNCTION__));

    if (prev) prev->next = curr->next;
    else usedBlocks = curr->next;


    prev = __null;
    for ( struct Block *temp = freeBlocks ; temp && temp->data < curr->data ; temp = temp->next )
      prev = temp;


    struct Block *next = prev ? prev->next : freeBlocks;


    if ( prev && prev->data + prev->size == curr->data && !curr->blockSize ) {
      prev->size = prev->size + curr->size;
      blockPool.deallocate(curr);
      curr = prev;
    }
    else if (prev) {
      prev->next = curr;
    }
    else {
      freeBlocks = curr;
    }


    if ( next && curr->data + curr->size == next->data && !next->blockSize ) {
      curr->size = curr->size + next->size;
      curr->next = next->next;
      blockPool.deallocate(next);
    }
    else {
      curr->next = next;
    }
  }

  std::size_t freeReleasedBlocks() {

    struct Block *curr = freeBlocks;
    struct Block *prev = __null;

    std::size_t freed = 0;

    while ( curr ) {
      struct Block *next = curr->next;



      if ( curr->size == curr->blockSize ) {
        totalBlocks -= 1;
        totalBytes -= curr->blockSize;
        freed += curr->blockSize;
        allocator->deallocate(curr->data);

        if ( prev ) prev->next = curr->next;
        else freeBlocks = curr->next;

        blockPool.deallocate(curr);
      }
      else {
        prev = curr;
      }
      curr = next;
    }

    return freed;
  }

  void coalesceFreeBlocks(std::size_t size) {
    { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "Allocator " << this << " coalescing to " << size << " bytes from " << getFreeBlocks() << " free blocks\n"; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp"), 254); } };



    freeReleasedBlocks();
    void* ptr = allocate(size);
    deallocate(ptr);
  }

  void freeAllBlocks() {

    while(usedBlocks) {
      releaseBlock(usedBlocks, __null);
    }

    freeReleasedBlocks();
    (("Not all blocks were released properly" && freeBlocks == __null) ? static_cast<void> (0) : __assert_fail ("\"Not all blocks were released properly\" && freeBlocks == __null", "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp", 267, __PRETTY_FUNCTION__));
  }

public:
  DynamicSizePool(
      umpire::strategy::AllocationStrategy* strat,
      const std::size_t _minInitialBytes = (16 * 1024),
      const std::size_t _minBytes = 256
      )
    : blockPool(),
      usedBlocks(__null),
      freeBlocks(__null),
      totalBlocks(0),
      totalBytes(0),
      allocBytes(0),
      minInitialBytes(_minInitialBytes),
      minBytes(_minBytes),
      highWatermark(0),
      allocator(strat) { }

  ~DynamicSizePool() { freeAllBlocks(); }

  void *allocate(std::size_t size) {
    struct Block *best, *prev;
    size = alignmentAdjust(size);
    findUsableBlock(best, prev, size);


    if (!best) allocateBlock(best, prev, size);
    ((best) ? static_cast<void> (0) : __assert_fail ("best", "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp", 296, __PRETTY_FUNCTION__));


    splitBlock(best, prev, size);


    best->next = usedBlocks;
    usedBlocks = best;


    allocBytes += size;

    if ( allocBytes > highWatermark )
      highWatermark = allocBytes;


    return usedBlocks->data;
  }

  void deallocate(void *ptr) {
    ((ptr) ? static_cast<void> (0) : __assert_fail ("ptr", "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp", 316, __PRETTY_FUNCTION__));


    struct Block *curr = usedBlocks, *prev = __null;
    for ( ; curr && curr->data != ptr; curr = curr->next ) {
      prev = curr;
    }
    if (!curr) return;


    allocBytes -= curr->size;


    releaseBlock(curr, prev);
  }

  std::size_t getCurrentSize() const { return allocBytes; }

  std::size_t getActualSize() const {
    return totalBytes;
  }

  std::size_t getHighWatermark() const {
    return highWatermark;
  }

  std::size_t getBlocksInPool() const {
    return totalBlocks;
  }

  std::size_t getReleasableSize() const {
    std::size_t nblocks = 0;
    std::size_t nbytes = 0;
    for (struct Block *temp = freeBlocks; temp; temp = temp->next) {
      if ( temp->size == temp->blockSize ) {
        nbytes += temp->blockSize;
        nblocks++;
      }
    }
    return nblocks > 1 ? nbytes : 0;
  }

  std::size_t getFreeBlocks() const {
    std::size_t nb = 0;
    for (struct Block *temp = freeBlocks; temp; temp = temp->next)
      if ( temp->size == temp->blockSize )
        nb++;
    return nb;
  }

  std::size_t getInUseBlocks() const {
    std::size_t nb = 0;
    for (struct Block *temp = usedBlocks; temp; temp = temp->next) nb++;
    return nb;
  }

  void coalesce() {
    if ( getFreeBlocks() > 1 ) {
      std::size_t size_to_coalesce = freeReleasedBlocks();

      { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "Attempting to coalesce " << size_to_coalesce << " bytes"; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicSizePool.hpp"), 377); } };


      coalesceFreeBlocks(size_to_coalesce);
    }
  }

  void release()
  {
    freeReleasedBlocks();
  }
};
# 17 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolList.hpp" 2

namespace umpire {

class Allocator;

namespace strategy {
# 35 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolList.hpp"
class DynamicPoolList :
  public AllocationStrategy
{
  public:






    using CoalesceHeuristic = std::function<bool( const strategy::DynamicPoolList& )>;
# 57 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolList.hpp"
    DynamicPoolList(
        const std::string& name,
        int id,
        Allocator allocator,
        const std::size_t min_initial_alloc_size = (512 * 1024 * 1024),
        const std::size_t min_alloc_size = (1 * 1024 *1024),
        CoalesceHeuristic coalesce_heuristic = heuristic_percent_releasable_list(100)) noexcept;

    void* allocate(size_t bytes) override;

    void deallocate(void* ptr) override;

    void release() override;

    std::size_t getCurrentSize() const noexcept override;
    std::size_t getActualSize() const noexcept override;
    std::size_t getHighWatermark() const noexcept override;

    Platform getPlatform() noexcept override;
# 87 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/DynamicPoolList.hpp"
    std::size_t getReleasableSize() const noexcept;






    std::size_t getBlocksInPool() const noexcept;

    void coalesce() noexcept;

  private:
    DynamicSizePool<>* dpa;

    strategy::AllocationStrategy* m_allocator;
    CoalesceHeuristic do_coalesce;
};

}
}
# 18 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Replay.hpp" 2

namespace umpire {

class Allocator;

std::ostream& operator<< (std::ostream& out, umpire::Allocator& );

std::ostream& operator<< (std::ostream& out,
    umpire::strategy::DynamicPoolMap::CoalesceHeuristic& );
std::ostream& operator<< (std::ostream& out,
    umpire::strategy::DynamicPoolList::CoalesceHeuristic& );

class Replay {
public:
  void logMessage( const std::string& message );
  static Replay* getReplayLogger();
  bool replayLoggingEnabled();
  uint64_t replayUid() { return m_replayUid; }

  static std::string printReplayAllocator( void ) {
    m_argument_number = 0;
    return std::string("");
  }

  template <typename T, typename... Args>
  static std::string printReplayAllocator(T&& firstArg, Args&&... args) {
    std::stringstream ss;

    if (typeid(firstArg) != typeid(umpire::strategy::DynamicPool::CoalesceHeuristic)) {
      m_argument_number++;
      if ( m_argument_number != 1 )
        ss << ", ";

      ss << "\"" << firstArg << "\"";
    }

    ss << printReplayAllocator(std::forward<Args>(args)...);
    return ss.str();
  }
private:
  Replay();
  ~Replay() = default;

  Replay(const Replay&) = delete;
  Replay& operator=(const Replay&) = delete;

  bool replayEnabled;
  uint64_t m_replayUid;
  static int m_argument_number;
};

}
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.inl" 2

namespace umpire {

inline void*
Allocator::allocate(std::size_t bytes)
{
  void* ret = nullptr;

  umpire_ver_1_found = 0;

  { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "(" << bytes << ")"; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.inl"), 26); } };

  { if (umpire::Replay::getReplayLogger()->replayLoggingEnabled()) { std::ostringstream local_msg; auto time = std::chrono::time_point_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now()).time_since_epoch(); local_msg << "{ \"kind\":\"replay\", \"uid\":" << umpire::Replay::getReplayLogger()->replayUid() << ", " << "\"timestamp\":" << static_cast<long>(time.count()) << ", " << "\"event\": \"allocate\", \"payload\": { \"allocator_ref\": \"" << m_allocator << "\", \"size\": " << bytes << " }" << " }" << std::endl; umpire::Replay::getReplayLogger()->logMessage(local_msg.str()); } };

  ret = m_allocator->allocate(bytes);

  { if (umpire::Replay::getReplayLogger()->replayLoggingEnabled()) { std::ostringstream local_msg; auto time = std::chrono::time_point_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now()).time_since_epoch(); local_msg << "{ \"kind\":\"replay\", \"uid\":" << umpire::Replay::getReplayLogger()->replayUid() << ", " << "\"timestamp\":" << static_cast<long>(time.count()) << ", " << "\"event\": \"allocate\", \"payload\": { \"allocator_ref\": \"" << m_allocator << "\", \"size\": " << bytes << " }, \"result\": { \"memory_ptr\": \"" << ret << "\" }" << " }" << std::endl; umpire::Replay::getReplayLogger()->logMessage(local_msg.str()); } };

  ((void) 0);
  return ret;
}

inline void
Allocator::deallocate(void* ptr)
{
  { if (umpire::Replay::getReplayLogger()->replayLoggingEnabled()) { std::ostringstream local_msg; auto time = std::chrono::time_point_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now()).time_since_epoch(); local_msg << "{ \"kind\":\"replay\", \"uid\":" << umpire::Replay::getReplayLogger()->replayUid() << ", " << "\"timestamp\":" << static_cast<long>(time.count()) << ", " << "\"event\": \"deallocate\", \"payload\": { \"allocator_ref\": \"" << m_allocator << "\", \"memory_ptr\": \"" << ptr << "\" }" << " }" << std::endl; umpire::Replay::getReplayLogger()->logMessage(local_msg.str()); } };

  { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "(" << ptr << ")"; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.inl"), 43); } };

  ((void) 0);

  if (!ptr) {
    { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Info)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "Deallocating a null pointer"; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Info, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.inl"), 48); } };
    return;
  } else {
    m_allocator->deallocate(ptr);
  }
}

}
# 180 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/Allocator.hpp" 2
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp" 2
# 32 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
namespace chai
{






inline void gpuErrorCheck(cudaError_t code, const char *file, int line, bool abort=true)
{
   if (code != cudaSuccess) {
      fprintf(stderr, "[CHAI] GPU Error: %s %s %d\n", cudaGetErrorString(code), file, line);
      if (abort) {
         exit(code);
      }
   }
}
# 70 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
inline void synchronize() {





}


__attribute__((host)) inline void gpuFree(void* buffer) {



   { gpuErrorCheck((cudaFree(buffer)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp", 83); };

}


__attribute__((host)) inline void gpuMalloc(void** devPtr, size_t size) {



   { gpuErrorCheck((cudaMalloc(devPtr, size)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp", 92); };

}


__attribute__((host)) inline void gpuMallocManaged(void** devPtr, size_t size) {



   { gpuErrorCheck((cudaMallocManaged(devPtr, size)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp", 101); };

}


__attribute__((host)) inline void gpuMemcpy(void* dst, const void* src, size_t count, cudaMemcpyKind kind) {



   { gpuErrorCheck((cudaMemcpy(dst, src, count, kind)), "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp", 110); };

}
# 133 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
class ArrayManager
{
public:
  template <typename T>
  using T_non_const = typename std::remove_const<T>::type;

  using PointerMap = umpire::util::MemoryMap<PointerRecord*>;

                    static PointerRecord s_null_record;
# 150 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
  static ArrayManager* getInstance();






                    void setExecutionSpace(ExecutionSpace space);






                    ExecutionSpace getExecutionSpace();







                    void* move(void* pointer,
                               PointerRecord* pointer_record,
                               ExecutionSpace = NONE);






                    void registerTouch(PointerRecord* pointer_record);
# 191 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
                    void registerTouch(PointerRecord* pointer_record, ExecutionSpace space);
# 200 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
                    void allocate(PointerRecord* pointer_record, ExecutionSpace space = CPU);
# 213 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
  template <typename T>
  void* reallocate(void* pointer,
                   size_t elems,
                   PointerRecord* record);
# 226 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
                    void setDefaultAllocationSpace(ExecutionSpace space);
# 235 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
                    ExecutionSpace getDefaultAllocationSpace();






                    void free(PointerRecord* pointer, ExecutionSpace space = NONE);
# 258 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
                    size_t getSize(void* pointer);

                    PointerRecord* makeManaged(void* pointer,
                                               size_t size,
                                               ExecutionSpace space,
                                               bool owned);





                    void setUserCallback(void* pointer, UserCallback const& f);





                    void setGlobalUserCallback(UserCallback const& f);






                    void resetTouch(PointerRecord* pointer_record);
# 292 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
                    PointerRecord* getPointerRecord(void* pointer);
# 302 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
                    PointerRecord* deepCopyRecord(PointerRecord const* record);






                    std::unordered_map<void*, const PointerRecord*> getPointerMap() const;






                    size_t getTotalNumArrays() const;






                    size_t getTotalSize() const;




                    void reportLeaks() const;






                    int getAllocatorId(ExecutionSpace space) const;




                    void copy(void * dst, void * src, size_t size);
# 349 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
                    void registerPointer(PointerRecord* record,
                                         ExecutionSpace space,
                                         bool owned = true);







                    void deregisterPointer(PointerRecord* record, bool deregisterFromUmpire=false);






                    void * frontOfAllocation(void * pointer);







  void setAllocator(ExecutionSpace space, umpire::Allocator &allocator);
# 383 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
  umpire::Allocator getAllocator(ExecutionSpace space);




  void enableCallbacks() { m_callbacks_active = true; }




  void disableCallbacks() { m_callbacks_active = false; }




  void enableDeviceSynchronize() { m_device_synchronize = true; }




  void disableDeviceSynchronize() { m_device_synchronize = false; }




  bool deviceSynchronize() { return m_device_synchronize; }




  bool syncIfNeeded();
# 422 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
                    void evict(ExecutionSpace space, ExecutionSpace destinationSpace);


protected:






  ArrayManager();



private:
# 445 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
  void move(PointerRecord* record, ExecutionSpace space);
# 455 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp"
  inline void callback(const PointerRecord* record,
                       Action action,
                       ExecutionSpace space) const {
     if (m_callbacks_active) {

        if (record && record->m_user_callback) {
           record->m_user_callback(record, action, space);
        }


        if (m_user_callback) {
           m_user_callback(record, action, space);
        }
     }
  }




  ExecutionSpace m_current_execution_space;




  ExecutionSpace m_default_allocation_space;




  PointerMap m_pointer_map;





  umpire::Allocator* m_allocators[NUM_EXECUTION_SPACES];




  umpire::ResourceManager& m_resource_manager;




  mutable std::mutex m_mutex;




  UserCallback m_user_callback;




  bool m_callbacks_active;




  bool m_device_synchronize = false;





  bool m_synced_since_last_kernel = false;
};

}


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.inl" 1
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.inl"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp" 1
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.inl" 2




# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp" 1
# 19 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/AllocationMap.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/AllocationMap.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/AllocationRecord.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/AllocationRecord.hpp"
namespace umpire {

namespace strategy {
  class AllocationStrategy;
}

namespace util {

struct AllocationRecord
{
  void* ptr;
  std::size_t size;
  strategy::AllocationStrategy* strategy;
};

}
}
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/AllocationMap.hpp" 2








namespace umpire {
namespace util {

class AllocationMap
{
  class RecordList
  {
  public:
    template <typename T>
    struct Block
    {
      T rec;
      Block* prev;
    };

    using RecordBlock = Block<AllocationRecord>;


    class ConstIterator : public std::iterator<std::forward_iterator_tag, AllocationRecord>
    {
    public:
      ConstIterator();
      ConstIterator(const RecordList* list, iterator_begin);
      ConstIterator(const RecordList* list, iterator_end);
      ConstIterator(const ConstIterator&) = default;

      const AllocationRecord& operator*();
      const AllocationRecord* operator->();
      ConstIterator& operator++();
      ConstIterator operator++(int);

      bool operator==(const ConstIterator& other) const;
      bool operator!=(const ConstIterator& other) const;

    private:
      const RecordList *m_list;
      RecordBlock* m_curr;
    };

    RecordList(AllocationMap& map, AllocationRecord record);
    ~RecordList();

    void push_back(const AllocationRecord& rec);
    AllocationRecord pop_back();

    ConstIterator begin() const;
    ConstIterator end() const;

    std::size_t size() const;
    bool empty() const;
    AllocationRecord* back();
    const AllocationRecord* back() const;

  private:
    AllocationMap& m_map;
    RecordBlock* m_tail;
    std::size_t m_length;
  };

public:
  using Map = MemoryMap<RecordList>;


  class ConstIterator : public std::iterator<std::forward_iterator_tag, AllocationRecord>
  {
  public:

    ConstIterator(const AllocationMap* map, iterator_begin);
    ConstIterator(const AllocationMap* map, iterator_end);
    ConstIterator(const ConstIterator&) = default;

    const AllocationRecord& operator*();
    const AllocationRecord* operator->();
    ConstIterator& operator++();
    ConstIterator operator++(int);

    bool operator==(const ConstIterator& other) const;
    bool operator!=(const ConstIterator& other) const;

  private:
    using OuterIter = Map::ConstIterator;
    using InnerIter = RecordList::ConstIterator;

    OuterIter m_outer_iter;
    InnerIter m_inner_iter;
    InnerIter m_inner_end;
    OuterIter m_outer_end;
  };

  AllocationMap();


  AllocationMap(const AllocationMap&) = delete;


  void insert(void* ptr, AllocationRecord record);







  const AllocationRecord* find(void* ptr) const;
  AllocationRecord* find(void* ptr);


  const AllocationRecord* findRecord(void* ptr) const noexcept;
  AllocationRecord* findRecord(void* ptr) noexcept;


  AllocationRecord remove(void* ptr);


  bool contains(void* ptr) const;


  void clear();


  std::size_t size() const;


  void print(const std::function<bool (const AllocationRecord&)>&& predicate,
             std::ostream& os = std::cout) const;

  void printAll(std::ostream& os = std::cout) const;

  ConstIterator begin() const;
  ConstIterator end() const;

private:

  const AllocationRecord* doFindRecord(void* ptr) const noexcept;



  FixedMallocPool m_block_pool;

  Map m_map;
  std::size_t m_size;
  mutable std::mutex m_mutex;
};

}
}
# 20 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/resource/MemoryResourceTypes.hpp" 1
# 10 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/resource/MemoryResourceTypes.hpp"
namespace umpire {
namespace resource {

struct MemoryResourceTypeHash
{
    template <typename T>
    std::size_t operator()(T t) const noexcept
    {
        return static_cast<std::size_t>(t);
    }
};


enum MemoryResourceType {
  Host,
  Device,
  Unified,
  Pinned,
  Constant
};

}
}
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp" 2

namespace umpire {

namespace strategy {
  class ZeroByteHandler;
}




class ResourceManager {
  public:



    static ResourceManager& getInstance();






    void initialize();




    std::vector<std::string> getAllocatorNames() const noexcept;




    std::vector<int> getAllocatorIds() const noexcept;




    Allocator getAllocator(const std::string& name);

    Allocator getAllocator(const char* name);




    Allocator getAllocator(resource::MemoryResourceType resource_type);




    Allocator getAllocator(int id);
# 81 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp"
    Allocator getDefaultAllocator();
# 91 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp"
    void setDefaultAllocator(Allocator allocator) noexcept;




    template <typename Strategy,
             bool introspection=true,
             typename... Args>
    Allocator makeAllocator(const std::string& name, Args&&... args);
# 112 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp"
    void registerAllocator(const std::string& name, Allocator allocator);







    Allocator getAllocator(void* ptr);

    bool isAllocator(const std::string& name) noexcept;






    bool hasAllocator(void* ptr);




    void registerAllocation(void* ptr, util::AllocationRecord record);






    util::AllocationRecord deregisterAllocation(void* ptr);






    const util::AllocationRecord* findAllocationRecord(void* ptr) const;





    bool isAllocatorRegistered(const std::string& name);
# 168 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp"
    void copy(void* dst_ptr, void* src_ptr, std::size_t size=0);
# 177 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp"
    void memset(void* ptr, int val, std::size_t length=0);
# 191 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp"
    void* reallocate(void* src_ptr, std::size_t size);
# 205 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp"
    void* reallocate(void* src_ptr, std::size_t size, Allocator allocator);
# 215 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp"
    void* move(void* src_ptr, Allocator allocator);






    void deallocate(void* ptr);
# 231 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp"
    std::size_t getSize(void* ptr) const;

    ~ResourceManager();
    ResourceManager (const ResourceManager&) = delete;
    ResourceManager& operator= (const ResourceManager&) = delete;
  private:
    ResourceManager();


    strategy::AllocationStrategy* findAllocatorForPointer(void* ptr);
    strategy::AllocationStrategy* findAllocatorForId(int id);
    strategy::AllocationStrategy* getAllocationStrategy(const std::string& name);

    int getNextId() noexcept;

    std::string getAllocatorInformation() const noexcept;

    strategy::AllocationStrategy* getZeroByteAllocator();

    util::AllocationMap m_allocations;

    std::list<std::unique_ptr<strategy::AllocationStrategy> > m_allocators;

    std::unordered_map<int, strategy::AllocationStrategy*> m_allocators_by_id;
    std::unordered_map<std::string, strategy::AllocationStrategy* > m_allocators_by_name;
    std::unordered_map<resource::MemoryResourceType, strategy::AllocationStrategy*, resource::MemoryResourceTypeHash > m_memory_resources;

    strategy::AllocationStrategy* m_default_allocator;

    int m_id;

    std::mutex m_mutex;


    friend void print_allocator_records(Allocator, std::ostream&);
    friend std::vector<util::AllocationRecord> get_allocator_records(Allocator);
    friend strategy::ZeroByteHandler;
};

}


# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl" 1
# 10 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp" 1
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl" 2




# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cxxabi.h" 1 3
# 45 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cxxabi.h" 3

#pragma GCC visibility push(default)


# 1 "/usr/tce/packages/clang/clang-9.0.0/release/lib/clang/9.0.0/include/stddef.h" 1 3
# 49 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cxxabi.h" 2 3

# 1 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/cxxabi_tweaks.h" 1 3
# 34 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/cxxabi_tweaks.h" 3
namespace __cxxabiv1
{
  extern "C"
  {
# 46 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/powerpc64le-unknown-linux-gnu/bits/cxxabi_tweaks.h" 3
  __extension__ typedef int __guard __attribute__((mode (__DI__)));


  typedef void __cxa_vec_ctor_return_type;


  typedef void __cxa_cdtor_return_type;


  }
}
# 51 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cxxabi.h" 2 3







namespace __cxxabiv1
{
  extern "C"
  {


  typedef __cxa_cdtor_return_type (*__cxa_cdtor_type)(void *);


  void*
  __cxa_vec_new(size_t __element_count, size_t __element_size,
  size_t __padding_size, __cxa_cdtor_type __constructor,
  __cxa_cdtor_type __destructor);

  void*
  __cxa_vec_new2(size_t __element_count, size_t __element_size,
   size_t __padding_size, __cxa_cdtor_type __constructor,
   __cxa_cdtor_type __destructor, void *(*__alloc) (size_t),
   void (*__dealloc) (void*));

  void*
  __cxa_vec_new3(size_t __element_count, size_t __element_size,
   size_t __padding_size, __cxa_cdtor_type __constructor,
   __cxa_cdtor_type __destructor, void *(*__alloc) (size_t),
   void (*__dealloc) (void*, size_t));


  __cxa_vec_ctor_return_type
  __cxa_vec_ctor(void* __array_address, size_t __element_count,
   size_t __element_size, __cxa_cdtor_type __constructor,
   __cxa_cdtor_type __destructor);

  __cxa_vec_ctor_return_type
  __cxa_vec_cctor(void* __dest_array, void* __src_array,
    size_t __element_count, size_t __element_size,
    __cxa_cdtor_return_type (*__constructor) (void*, void*),
    __cxa_cdtor_type __destructor);


  void
  __cxa_vec_dtor(void* __array_address, size_t __element_count,
   size_t __element_size, __cxa_cdtor_type __destructor);

  void
  __cxa_vec_cleanup(void* __array_address, size_t __element_count, size_t __s,
      __cxa_cdtor_type __destructor) noexcept;


  void
  __cxa_vec_delete(void* __array_address, size_t __element_size,
     size_t __padding_size, __cxa_cdtor_type __destructor);

  void
  __cxa_vec_delete2(void* __array_address, size_t __element_size,
      size_t __padding_size, __cxa_cdtor_type __destructor,
      void (*__dealloc) (void*));

  void
  __cxa_vec_delete3(void* __array_address, size_t __element_size,
      size_t __padding_size, __cxa_cdtor_type __destructor,
      void (*__dealloc) (void*, size_t));

  int
  __cxa_guard_acquire(__guard*);

  void
  __cxa_guard_release(__guard*) noexcept;

  void
  __cxa_guard_abort(__guard*) noexcept;


  int
  __cxa_atexit(void (*)(void*), void*, void*) noexcept;

  int
  __cxa_finalize(void*);


  int
  __cxa_thread_atexit(void (*)(void*), void*, void *) noexcept;


  void
  __cxa_pure_virtual(void) __attribute__ ((__noreturn__));

  void
  __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));


  void
  __cxa_bad_cast() __attribute__((__noreturn__));

  void
  __cxa_bad_typeid() __attribute__((__noreturn__));

  void
  __cxa_throw_bad_array_new_length() __attribute__((__noreturn__));

  void
  __cxa_throw_bad_array_length() __attribute__((__noreturn__));
# 200 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cxxabi.h" 3
  char*
  __cxa_demangle(const char* __mangled_name, char* __output_buffer,
   size_t* __length, int* __status);


  }
}






namespace __cxxabiv1
{

  class __fundamental_type_info : public std::type_info
  {
  public:
    explicit
    __fundamental_type_info(const char* __n) : std::type_info(__n) { }

    virtual
    ~__fundamental_type_info();
  };


  class __array_type_info : public std::type_info
  {
  public:
    explicit
    __array_type_info(const char* __n) : std::type_info(__n) { }

    virtual
    ~__array_type_info();
  };


  class __function_type_info : public std::type_info
  {
  public:
    explicit
    __function_type_info(const char* __n) : std::type_info(__n) { }

    virtual
    ~__function_type_info();

  protected:

    virtual bool
    __is_function_p() const;
  };


  class __enum_type_info : public std::type_info
  {
  public:
    explicit
    __enum_type_info(const char* __n) : std::type_info(__n) { }

    virtual
    ~__enum_type_info();
  };


  class __pbase_type_info : public std::type_info
  {
  public:
    unsigned int __flags;
    const std::type_info* __pointee;

    explicit
    __pbase_type_info(const char* __n, int __quals,
        const std::type_info* __type)
    : std::type_info(__n), __flags(__quals), __pointee(__type)
    { }

    virtual
    ~__pbase_type_info();


    enum __masks
      {
 __const_mask = 0x1,
 __volatile_mask = 0x2,
 __restrict_mask = 0x4,
 __incomplete_mask = 0x8,
 __incomplete_class_mask = 0x10
      };

  protected:
    __pbase_type_info(const __pbase_type_info&);

    __pbase_type_info&
    operator=(const __pbase_type_info&);


    virtual bool
    __do_catch(const std::type_info* __thr_type, void** __thr_obj,
        unsigned int __outer) const;

    inline virtual bool
    __pointer_catch(const __pbase_type_info* __thr_type, void** __thr_obj,
      unsigned __outer) const;
  };


  class __pointer_type_info : public __pbase_type_info
  {
  public:
    explicit
    __pointer_type_info(const char* __n, int __quals,
   const std::type_info* __type)
    : __pbase_type_info (__n, __quals, __type) { }


    virtual
    ~__pointer_type_info();

  protected:

    virtual bool
    __is_pointer_p() const;

    virtual bool
    __pointer_catch(const __pbase_type_info* __thr_type, void** __thr_obj,
      unsigned __outer) const;
  };

  class __class_type_info;


  class __pointer_to_member_type_info : public __pbase_type_info
  {
  public:
    __class_type_info* __context;

    explicit
    __pointer_to_member_type_info(const char* __n, int __quals,
      const std::type_info* __type,
      __class_type_info* __klass)
    : __pbase_type_info(__n, __quals, __type), __context(__klass) { }

    virtual
    ~__pointer_to_member_type_info();

  protected:
    __pointer_to_member_type_info(const __pointer_to_member_type_info&);

    __pointer_to_member_type_info&
    operator=(const __pointer_to_member_type_info&);


    virtual bool
    __pointer_catch(const __pbase_type_info* __thr_type, void** __thr_obj,
      unsigned __outer) const;
  };


  class __base_class_type_info
  {
  public:
    const __class_type_info* __base_type;



    long __offset_flags;


    enum __offset_flags_masks
      {
 __virtual_mask = 0x1,
 __public_mask = 0x2,
 __hwm_bit = 2,
 __offset_shift = 8
      };


    bool
    __is_virtual_p() const
    { return __offset_flags & __virtual_mask; }

    bool
    __is_public_p() const
    { return __offset_flags & __public_mask; }

    ptrdiff_t
    __offset() const
    {



      return static_cast<ptrdiff_t>(__offset_flags) >> __offset_shift;
    }
  };


  class __class_type_info : public std::type_info
  {
  public:
    explicit
    __class_type_info (const char *__n) : type_info(__n) { }

    virtual
    ~__class_type_info ();






    enum __sub_kind
      {

 __unknown = 0,



 __not_contained,


 __contained_ambig,


 __contained_virtual_mask = __base_class_type_info::__virtual_mask,


 __contained_public_mask = __base_class_type_info::__public_mask,


 __contained_mask = 1 << __base_class_type_info::__hwm_bit,

 __contained_private = __contained_mask,
 __contained_public = __contained_mask | __contained_public_mask
      };

    struct __upcast_result;
    struct __dyncast_result;

  protected:

    virtual bool
    __do_upcast(const __class_type_info* __dst_type, void**__obj_ptr) const;

    virtual bool
    __do_catch(const type_info* __thr_type, void** __thr_obj,
        unsigned __outer) const;

  public:


    virtual bool
    __do_upcast(const __class_type_info* __dst, const void* __obj,
  __upcast_result& __restrict __result) const;







    inline __sub_kind
    __find_public_src(ptrdiff_t __src2dst, const void* __obj_ptr,
        const __class_type_info* __src_type,
        const void* __src_ptr) const;
# 473 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cxxabi.h" 3
    virtual bool
    __do_dyncast(ptrdiff_t __src2dst, __sub_kind __access_path,
   const __class_type_info* __dst_type, const void* __obj_ptr,
   const __class_type_info* __src_type, const void* __src_ptr,
   __dyncast_result& __result) const;





    virtual __sub_kind
    __do_find_public_src(ptrdiff_t __src2dst, const void* __obj_ptr,
    const __class_type_info* __src_type,
    const void* __src_ptr) const;
  };


  class __si_class_type_info : public __class_type_info
  {
  public:
    const __class_type_info* __base_type;

    explicit
    __si_class_type_info(const char *__n, const __class_type_info *__base)
    : __class_type_info(__n), __base_type(__base) { }

    virtual
    ~__si_class_type_info();

  protected:
    __si_class_type_info(const __si_class_type_info&);

    __si_class_type_info&
    operator=(const __si_class_type_info&);


    virtual bool
    __do_dyncast(ptrdiff_t __src2dst, __sub_kind __access_path,
   const __class_type_info* __dst_type, const void* __obj_ptr,
   const __class_type_info* __src_type, const void* __src_ptr,
   __dyncast_result& __result) const;

    virtual __sub_kind
    __do_find_public_src(ptrdiff_t __src2dst, const void* __obj_ptr,
    const __class_type_info* __src_type,
    const void* __sub_ptr) const;

    virtual bool
    __do_upcast(const __class_type_info*__dst, const void*__obj,
  __upcast_result& __restrict __result) const;
  };


  class __vmi_class_type_info : public __class_type_info
  {
  public:
    unsigned int __flags;
    unsigned int __base_count;




    __base_class_type_info __base_info[1];

    explicit
    __vmi_class_type_info(const char* __n, int ___flags)
    : __class_type_info(__n), __flags(___flags), __base_count(0) { }

    virtual
    ~__vmi_class_type_info();


    enum __flags_masks
      {
 __non_diamond_repeat_mask = 0x1,
 __diamond_shaped_mask = 0x2,
 __flags_unknown_mask = 0x10
      };

  protected:

    virtual bool
    __do_dyncast(ptrdiff_t __src2dst, __sub_kind __access_path,
   const __class_type_info* __dst_type, const void* __obj_ptr,
   const __class_type_info* __src_type, const void* __src_ptr,
   __dyncast_result& __result) const;

    virtual __sub_kind
    __do_find_public_src(ptrdiff_t __src2dst, const void* __obj_ptr,
    const __class_type_info* __src_type,
    const void* __src_ptr) const;

    virtual bool
    __do_upcast(const __class_type_info* __dst, const void* __obj,
  __upcast_result& __restrict __result) const;
  };


  struct __cxa_exception;
  struct __cxa_refcounted_exception;
  struct __cxa_dependent_exception;
  struct __cxa_eh_globals;

  extern "C"
  {
# 586 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cxxabi.h" 3
  void*
  __dynamic_cast(const void* __src_ptr,
   const __class_type_info* __src_type,
   const __class_type_info* __dst_type,
   ptrdiff_t __src2dst);
# 599 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cxxabi.h" 3
  __cxa_eh_globals*
  __cxa_get_globals() noexcept __attribute__ ((__const__));

  __cxa_eh_globals*
  __cxa_get_globals_fast() noexcept __attribute__ ((__const__));


  void*
  __cxa_allocate_exception(size_t) noexcept;


  void
  __cxa_free_exception(void*) noexcept;


  void
  __cxa_throw(void*, std::type_info*, void ( *) (void *))
  __attribute__((__noreturn__));


  void*
  __cxa_get_exception_ptr(void*) noexcept __attribute__ ((__pure__));

  void*
  __cxa_begin_catch(void*) noexcept;

  void
  __cxa_end_catch();

  void
  __cxa_rethrow() __attribute__((__noreturn__));



  std::type_info*
  __cxa_current_exception_type() noexcept __attribute__ ((__pure__));




  __cxa_dependent_exception*
  __cxa_allocate_dependent_exception() noexcept;


  void
  __cxa_free_dependent_exception(__cxa_dependent_exception*) noexcept;

  }



  class __foreign_exception
  {
    virtual ~__foreign_exception() throw();
    virtual void __pure_dummy() = 0;
  };

}
# 678 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cxxabi.h" 3
namespace abi = __cxxabiv1;

namespace __gnu_cxx
{
# 694 "/usr/tce/packages/gcc/gcc-4.9.3/lib64/gcc/powerpc64le-unknown-linux-gnu/4.9.3/../../../../include/c++/4.9.3/cxxabi.h" 3
  class recursive_init_error: public std::exception
  {
  public:
    recursive_init_error() throw() { }
    virtual ~recursive_init_error() throw ();
  };
}


#pragma GCC visibility pop
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl" 2





# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/AllocationTracker.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/AllocationTracker.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/mixins/Inspector.hpp" 1
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/mixins/Inspector.hpp"
namespace umpire {
namespace strategy {

class AllocationStrategy;

namespace mixins {

class Inspector
{
  public:
    Inspector();

    void registerAllocation(
        void* ptr,
        std::size_t size,
        strategy::AllocationStrategy* strategy);


    util::AllocationRecord deregisterAllocation(
      void* ptr, strategy::AllocationStrategy* strategy);

  protected:
    std::size_t m_current_size;
    std::size_t m_high_watermark;
};

}
}
}
# 15 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/AllocationTracker.hpp" 2

namespace umpire {
namespace strategy {

class AllocationTracker :
  public AllocationStrategy,
  private mixins::Inspector
{
  public:
    AllocationTracker(
        std::unique_ptr<AllocationStrategy>&& allocator) noexcept;

    void* allocate(std::size_t bytes);

    void deallocate(void* ptr);

    void release();

    std::size_t getCurrentSize() const noexcept;
    std::size_t getHighWatermark() const noexcept;
    std::size_t getActualSize() const noexcept;

    Platform getPlatform() noexcept;

    strategy::AllocationStrategy* getAllocationStrategy();

  private:
    std::unique_ptr<strategy::AllocationStrategy> m_allocator;

};

}
}
# 22 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/ZeroByteHandler.hpp" 1
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/ZeroByteHandler.hpp"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/FixedPool.hpp" 1
# 17 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/FixedPool.hpp"
namespace umpire {
namespace strategy {







class FixedPool : public AllocationStrategy
{
  public:
# 43 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/FixedPool.hpp"
    FixedPool(const std::string& name, int id,
              Allocator allocator, const std::size_t object_bytes,
              const std::size_t objects_per_pool = 64 * sizeof(int) * 8) noexcept;

    ~FixedPool();

    FixedPool(const FixedPool&) = delete;

    void* allocate(std::size_t bytes = 0) override final;
    void deallocate(void* ptr) override final;

    std::size_t getCurrentSize() const noexcept override final;
    std::size_t getHighWatermark() const noexcept override final;
    std::size_t getActualSize() const noexcept override final;
    Platform getPlatform() noexcept override final;

    bool pointerIsFromPool(void* ptr) const noexcept;

    std::size_t numPools() const noexcept;

  private:
    struct Pool {
      AllocationStrategy* strategy;
      char* data;
      int* avail;
      std::size_t num_avail;
      Pool(AllocationStrategy* allocation_strategy,
           const std::size_t object_bytes, const std::size_t objects_per_pool,
           const std::size_t avail_bytes);
    };

    void newPool();
    void* allocInPool(Pool& p);

    AllocationStrategy* m_strategy;
    std::size_t m_obj_bytes;
    std::size_t m_obj_per_pool;
    std::size_t m_data_bytes;
    std::size_t m_avail_bytes;
    std::size_t m_current_bytes;
    std::size_t m_actual_bytes;
    std::size_t m_highwatermark;
    std::vector<Pool> m_pool;



};

}
}
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/strategy/ZeroByteHandler.hpp" 2



namespace umpire {
namespace strategy {

class ZeroByteHandler :
  public AllocationStrategy
{
  public:
    ZeroByteHandler(
        std::unique_ptr<AllocationStrategy>&& allocator) noexcept;

    void* allocate(std::size_t bytes);

    void deallocate(void* ptr);

    void release();

    std::size_t getCurrentSize() const noexcept;
    std::size_t getHighWatermark() const noexcept;
    std::size_t getActualSize() const noexcept;

    Platform getPlatform() noexcept;

    strategy::AllocationStrategy* getAllocationStrategy();

  private:
    std::unique_ptr<strategy::AllocationStrategy> m_allocator;
    FixedPool* m_zero_byte_pool;
};

}
}
# 23 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl" 2

# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/make_unique.hpp" 1
# 12 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/make_unique.hpp"
namespace umpire {
namespace util {

template <typename T, typename... Args>
constexpr std::unique_ptr<T> make_unique(Args&&... args)
{
    return std::unique_ptr<T>(new T(std::forward<Args>(args)...));
}

}
}
# 25 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl" 2
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/wrap_allocator.hpp" 1
# 17 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/wrap_allocator.hpp"
namespace umpire {
namespace util {

template <typename Base>
std::unique_ptr<Base>
do_wrap(std::unique_ptr<Base>&& allocator)
{
  return std::move(allocator);
}


template <typename Base, typename Strategy, typename... Strategies>
std::unique_ptr<Base>
do_wrap(std::unique_ptr<Base>&& allocator)
{
  return std::unique_ptr<Base>(new Strategy(umpire::util::do_wrap<Base, Strategies...>(std::move(allocator))));
}

template<typename... Strategies>
std::unique_ptr<strategy::AllocationStrategy>
wrap_allocator(std::unique_ptr<strategy::AllocationStrategy>&& allocator)
{
  return umpire::util::do_wrap<
    umpire::strategy::AllocationStrategy, Strategies...>(
      std::move(allocator));
}

template<typename Strategy>
Strategy*
unwrap_allocation_strategy(strategy::AllocationStrategy* base_strategy)
{
  umpire::strategy::ZeroByteHandler* zero{nullptr};
  umpire::strategy::AllocationTracker* tracker{nullptr};
  Strategy* strategy{nullptr};

  tracker = dynamic_cast<umpire::strategy::AllocationTracker*>(base_strategy);

  if (tracker) {
    zero = dynamic_cast<umpire::strategy::ZeroByteHandler*>(tracker->getAllocationStrategy());
  } else {
    zero = dynamic_cast<umpire::strategy::ZeroByteHandler*>(base_strategy);
  }

  if (zero) {
     strategy = dynamic_cast<Strategy*>(zero->getAllocationStrategy());
  } else {
    if (tracker) {
       strategy = dynamic_cast<Strategy*>(tracker->getAllocationStrategy());
    } else {
       strategy = dynamic_cast<Strategy*>(base_strategy);
    }
  }

  if (!strategy) {
    { { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Error)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "Couldn't unwrap " << base_strategy->getName() << " to " << typeid(Strategy).name(); umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Error, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/wrap_allocator.hpp"), 71); } }; std::ostringstream umpire_oss_error; umpire_oss_error << " " << __func__ << " " << "Couldn't unwrap " << base_strategy->getName() << " to " << typeid(Strategy).name(); umpire::util::flush_files(); throw umpire::util::Exception( umpire_oss_error.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/util/wrap_allocator.hpp"), 71); };
  }

  return strategy;
}

template<typename Strategy>
Strategy*
unwrap_allocator(Allocator allocator)
{
  return unwrap_allocation_strategy<Strategy>(allocator.getAllocationStrategy());
}

}
}
# 26 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl" 2

namespace umpire {

template <typename Strategy,
         bool introspection,
         typename... Args>
Allocator ResourceManager::makeAllocator(
    const std::string& name,
    Args&&... args)
{
  std::lock_guard<std::mutex> lock(m_mutex);
  std::unique_ptr<strategy::AllocationStrategy> allocator;

  { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "(name=\"" << name << "\")"; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl"), 39); } };
# 51 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl"
  { if (umpire::Replay::getReplayLogger()->replayLoggingEnabled()) { std::ostringstream local_msg; auto time = std::chrono::time_point_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now()).time_since_epoch(); local_msg << "{ \"kind\":\"replay\", \"uid\":" << umpire::Replay::getReplayLogger()->replayUid() << ", " << "\"timestamp\":" << static_cast<long>(time.count()) << ", " << "\"event\": \"makeAllocator\", \"payload\": { \"type\":\"" << abi::__cxa_demangle(typeid(Strategy).name(),nullptr,nullptr,nullptr) << "\", \"with_introspection\":" << (introspection ? "true" : "false") << ", \"allocator_name\":\"" << name << "\"" << ", \"args\": [ " << umpire::Replay::printReplayAllocator(std::forward<Args>(args)...) << " ] }" << " }" << std::endl; umpire::Replay::getReplayLogger()->logMessage(local_msg.str()); } };
# 60 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl"
  if (isAllocator(name)) {
    { { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Error)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "Allocator with name " << name << " is already registered."; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Error, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl"), 61); } }; std::ostringstream umpire_oss_error; umpire_oss_error << " " << __func__ << " " << "Allocator with name " << name << " is already registered."; umpire::util::flush_files(); throw umpire::util::Exception( umpire_oss_error.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl"), 61); };
  }

  if (!introspection) {
    allocator =
      util::wrap_allocator<strategy::ZeroByteHandler>(
            util::make_unique<Strategy>(name, getNextId(), std::forward<Args>(args)...));

  } else {
    allocator =
      util::wrap_allocator<strategy::AllocationTracker, strategy::ZeroByteHandler>(
            util::make_unique<Strategy>(name, getNextId(), std::forward<Args>(args)...));
  }
# 86 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl"
  { if (umpire::Replay::getReplayLogger()->replayLoggingEnabled()) { std::ostringstream local_msg; auto time = std::chrono::time_point_cast<std::chrono::nanoseconds>(std::chrono::system_clock::now()).time_since_epoch(); local_msg << "{ \"kind\":\"replay\", \"uid\":" << umpire::Replay::getReplayLogger()->replayUid() << ", " << "\"timestamp\":" << static_cast<long>(time.count()) << ", " << "\"event\": \"makeAllocator\", \"payload\": { \"type\":\"" << abi::__cxa_demangle(typeid(Strategy).name(),nullptr,nullptr,nullptr) << "\", \"with_introspection\":" << (introspection ? "true" : "false") << ", \"allocator_name\":\"" << name << "\"" << ", \"args\": [ " << umpire::Replay::printReplayAllocator(std::forward<Args>(args)...) << " ] }" << ", \"result\": { \"allocator_ref\":\"" << allocator.get() << "\" }" << " }" << std::endl; umpire::Replay::getReplayLogger()->logMessage(local_msg.str()); } };
# 97 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.inl"
  m_allocators_by_name[name] = allocator.get();
  m_allocators_by_id[allocator->getId()] = allocator.get();
  m_allocators.emplace_front(std::move(allocator));

  return Allocator(m_allocators_by_name[name]);
}

}
# 273 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/umpire/src/umpire/ResourceManager.hpp" 2
# 18 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.inl" 2





namespace chai {

template<typename T>
inline
void* ArrayManager::reallocate(void* pointer, size_t elems, PointerRecord* pointer_record)
{
  ExecutionSpace my_space = CPU;

  for (int space = CPU; space < NUM_EXECUTION_SPACES; ++space) {
    if (pointer_record->m_pointers[space] == pointer) {
      my_space = static_cast<ExecutionSpace>(space);
      break;
    }
  }

  for (int space = CPU; space < NUM_EXECUTION_SPACES; ++space) {
    if (!pointer_record->m_owned[space]) {
      { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "Cannot reallocate unowned pointer"; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.inl"), 40); } };;
      return pointer_record->m_pointers[my_space];
    }
  }


  for (int space = CPU; space < NUM_EXECUTION_SPACES; ++space) {
    if (pointer_record->m_pointers[space]) {
       callback(pointer_record, ACTION_FREE, ExecutionSpace(space));
    }
  }


  size_t old_size = pointer_record->m_size;
  size_t new_size = sizeof(T) * elems;
  pointer_record->m_size = new_size;


  size_t num_bytes_to_copy = std::min(old_size, new_size);

  for (int space = CPU; space < NUM_EXECUTION_SPACES; ++space) {
    void* old_ptr = pointer_record->m_pointers[space];

    if (old_ptr) {
      void* new_ptr = m_allocators[space]->allocate(new_size);
      m_resource_manager.copy(new_ptr, old_ptr, num_bytes_to_copy);
      m_allocators[space]->deallocate(old_ptr);

      pointer_record->m_pointers[space] = new_ptr;
      callback(pointer_record, ACTION_ALLOC, ExecutionSpace(space));

      m_pointer_map.erase(old_ptr);
      m_pointer_map.insert(new_ptr, pointer_record);
    }
  }

  return pointer_record->m_pointers[my_space];
}
# 101 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.inl"
inline
void ArrayManager::copy(void * dst, void * src, size_t size) {
   m_resource_manager.copy(dst,src,size);
}

inline
umpire::Allocator ArrayManager::getAllocator(ExecutionSpace space) {
   return *m_allocators[space];
}

inline
void ArrayManager::setAllocator(ExecutionSpace space, umpire::Allocator &allocator) {
   *m_allocators[space] = allocator;
}

inline
bool ArrayManager::syncIfNeeded() {
  if (!m_synced_since_last_kernel) {
     synchronize();
     m_synced_since_last_kernel = true;
     return true;
  }
  return false;
}
}
# 527 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ArrayManager.hpp" 2
# 13 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp" 2







namespace chai
{

namespace {
inline ExecutionSpace get_default_space() {
  return ArrayManager::getInstance()->getDefaultAllocationSpace();
}

}


struct InvalidConstCast;
# 41 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
class CHAICopyable
{
};







class CHAIDISAMBIGUATE
{
public:
  __attribute__((device)) __attribute__((host)) CHAIDISAMBIGUATE(){};
  __attribute__((device)) __attribute__((host)) ~CHAIDISAMBIGUATE(){};
};
# 73 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
template <typename T>
class ManagedArray : public CHAICopyable
{
public:
  using T_non_const = typename std::remove_const<T>::type;

  __attribute__((device)) __attribute__((host)) ManagedArray();




  __attribute__((device)) __attribute__((host)) ManagedArray(
      std::initializer_list<chai::ExecutionSpace> spaces,
      std::initializer_list<umpire::Allocator> allocators);
# 99 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  __attribute__((device)) __attribute__((host)) ManagedArray(size_t elems, ExecutionSpace space = get_default_space());

  __attribute__((device)) __attribute__((host)) ManagedArray(
      size_t elems,
      std::initializer_list<chai::ExecutionSpace> spaces,
      std::initializer_list<umpire::Allocator> allocators,
      ExecutionSpace space = NONE);
# 115 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  __attribute__((device)) __attribute__((host)) ManagedArray(ManagedArray const& other);




  __attribute__((device)) __attribute__((host)) ManagedArray(std::nullptr_t other);

  __attribute__((host)) ManagedArray(PointerRecord* record, ExecutionSpace space);
# 133 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  __attribute__((host)) void allocate(size_t elems,
                          ExecutionSpace space = CPU,
                          UserCallback const& cback =
                          [] (const PointerRecord*, Action, ExecutionSpace) {});
# 147 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  __attribute__((host)) void reallocate(size_t elems);




  __attribute__((host)) void free(ExecutionSpace space = NONE);







  __attribute__((host)) void reset();






  __attribute__((device)) __attribute__((host)) size_t size() const;






  __attribute__((host)) void registerTouch(ExecutionSpace space);

  __attribute__((host)) void move(ExecutionSpace space=NONE) const;

  __attribute__((device)) __attribute__((host)) ManagedArray<T> slice(size_t begin, size_t elems=(size_t)-1) const;
# 187 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  template <typename Idx>
  __attribute__((device)) __attribute__((host)) T& operator[](const Idx i) const;





  __attribute__((device)) __attribute__((host)) T* getActiveBasePointer() const;





  __attribute__((device)) __attribute__((host)) T* getActivePointer() const;







  __attribute__((device)) __attribute__((host)) T* data() const;
# 219 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  __attribute__((host)) T* data(ExecutionSpace space, bool do_move = true) const;
# 231 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  __attribute__((host)) T* getPointer(ExecutionSpace space, bool do_move = true) const;







  template <typename U = T>
  operator typename std::enable_if<!std::is_const<U>::value,
                                   ManagedArray<const U> >::type() const;


  __attribute__((device)) __attribute__((host)) ManagedArray(T* data,
                                ArrayManager* array_manager,
                                size_t m_elems,
                                PointerRecord* pointer_record);

  ManagedArray<T>& operator=(ManagedArray const & other) = default;

  __attribute__((device)) __attribute__((host)) ManagedArray<T>& operator=(ManagedArray && other);

  __attribute__((device)) __attribute__((host)) ManagedArray<T>& operator=(std::nullptr_t);


  __attribute__((device)) __attribute__((host)) bool operator==(ManagedArray<T>& rhs) const;
  __attribute__((device)) __attribute__((host)) bool operator!=(ManagedArray<T>& from) const;

  __attribute__((device)) __attribute__((host)) bool operator==(T* from) const;
  __attribute__((device)) __attribute__((host)) bool operator!=(T* from) const;

  __attribute__((device)) __attribute__((host)) bool operator==(std::nullptr_t from) const;
  __attribute__((device)) __attribute__((host)) bool operator!=(std::nullptr_t from) const;


  __attribute__((device)) __attribute__((host)) explicit operator bool() const;
# 314 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  __attribute__((device)) __attribute__((host)) operator T*() const;
# 324 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  template <bool Q = false>
  __attribute__((device)) __attribute__((host)) ManagedArray(T* data,
                                CHAIDISAMBIGUATE test = CHAIDISAMBIGUATE(),
                                bool foo = Q);
# 343 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  __attribute__((host)) void setUserCallback(UserCallback const& cback)
  {
    if (m_pointer_record && m_pointer_record != &ArrayManager::s_null_record) {
      m_pointer_record->m_user_callback = cback;
    }
  }


private:
# 360 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  template <bool B = std::is_base_of<CHAICopyable, T>::value,
            typename std::enable_if<B, int>::type = 0>
  __attribute__((host)) void moveInnerImpl() const;
# 373 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  template <bool B = std::is_base_of<CHAICopyable, T>::value,
            typename std::enable_if<!B, int>::type = 0>
  __attribute__((host)) void moveInnerImpl() const;


public:
  __attribute__((device)) __attribute__((host)) void shallowCopy(ManagedArray<T> const& other) const
  {
    m_active_pointer = other.m_active_pointer;
    m_active_base_pointer = other.m_active_base_pointer;
    m_resource_manager = other.m_resource_manager;
    m_elems = other.m_elems;
    m_offset = other.m_offset;
    m_pointer_record = other.m_pointer_record;
    m_is_slice = other.m_is_slice;
# 397 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  }




  __attribute__((device)) __attribute__((host)) bool isSlice() { return m_is_slice;}


private:
  __attribute__((host)) void modify(size_t i, const T& val) const;






  template <bool B = std::is_base_of<CHAICopyable, T>::value,
            typename std::enable_if<B, int>::type = 0>
  __attribute__((host)) bool initInner(size_t start = 0)
  {
    for (size_t i = start; i < m_elems; ++i) {
      m_active_base_pointer[i] = nullptr;
    }
    return true;
  }


  template <bool B = std::is_base_of<CHAICopyable, T>::value,
            typename std::enable_if<!B, int>::type = 0>
  __attribute__((host)) bool initInner(size_t = 0)
  {
    return false;
  }

protected:



  mutable T* m_active_pointer = nullptr;
  mutable T* m_active_base_pointer = nullptr;




  mutable ArrayManager* m_resource_manager = nullptr;




  mutable size_t m_elems = 0;
  mutable size_t m_offset = 0;




  mutable PointerRecord* m_pointer_record = nullptr;

  mutable bool m_is_slice = false;
};
# 473 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
template <typename T>
ManagedArray<T> makeManagedArray(T* data,
                                 size_t elems,
                                 ExecutionSpace space,
                                 bool owned)
{

  ArrayManager* manager = ArrayManager::getInstance();


  PointerRecord* record = manager->getPointerRecord(data);
  bool existingRecord = true;
  if (record == &ArrayManager::s_null_record) {

    record = manager->makeManaged(data, sizeof(T) * elems, space, owned);
    existingRecord = false;
  }
  ManagedArray<T> array(record, space);

  if (existingRecord && !owned) {


    array = array.slice(0, elems);
  }

  if (!std::is_const<T>::value) {
    array.registerTouch(space);
  }
# 510 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
  return array;
}
# 523 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp"
template <typename T>
ManagedArray<T> deepCopy(ManagedArray<T> const& array)
{
  T* data_ptr = array.getActiveBasePointer();

  ArrayManager* manager = ArrayManager::getInstance();

  PointerRecord const* record = manager->getPointerRecord(data_ptr);

  PointerRecord* copy_record = manager->deepCopyRecord(record);

  return ManagedArray<T>(copy_record, copy_record->m_last_space);
}

template <typename T>
inline __attribute__((device)) __attribute__((host)) ManagedArray<T> ManagedArray<T>::slice( size_t offset, size_t elems) const
{
  ManagedArray<T> slice;
  slice.m_resource_manager = m_resource_manager;
  if (elems == (size_t) -1) {
    elems = size() - offset;
  }
  if (offset + elems > size()) {




  } else {
    slice.m_pointer_record = m_pointer_record;
    slice.m_active_base_pointer = m_active_base_pointer;
    slice.m_offset = offset + m_offset;
    slice.m_active_pointer = m_active_base_pointer + slice.m_offset;
    slice.m_elems = elems;
    slice.m_is_slice = true;
  }
  return slice;
}

}





# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl" 1
# 10 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"
# 1 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp" 1
# 11 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl" 2


namespace chai {

template<typename T>
inline
__attribute__((device)) __attribute__((host)) ManagedArray<T>::ManagedArray():
  m_active_pointer(nullptr),
  m_active_base_pointer(nullptr),
  m_resource_manager(nullptr),
  m_elems(0),
  m_offset(0),
  m_pointer_record(nullptr),
  m_is_slice(false)
{




}

template<typename T>
inline
__attribute__((device)) __attribute__((host)) ManagedArray<T>::ManagedArray(
    std::initializer_list<chai::ExecutionSpace> spaces,
    std::initializer_list<umpire::Allocator> allocators):
  ManagedArray()
{
# 47 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"
}

template<typename T>
inline
__attribute__((device)) __attribute__((host)) ManagedArray<T>::ManagedArray(
    size_t elems,
    ExecutionSpace space) :
  ManagedArray()
{



}

template<typename T>
inline
__attribute__((device)) __attribute__((host)) ManagedArray<T>::ManagedArray(
    size_t elems,
    std::initializer_list<chai::ExecutionSpace> spaces,
    std::initializer_list<umpire::Allocator> allocators,
    ExecutionSpace space):
  ManagedArray(spaces, allocators)
{



}

template<typename T>
inline
__attribute__((device)) __attribute__((host)) ManagedArray<T>::ManagedArray(std::nullptr_t) :
  ManagedArray()
{
}

template<typename T>
inline
__attribute__((host)) ManagedArray<T>::ManagedArray(PointerRecord* record, ExecutionSpace space):
  m_active_pointer(static_cast<T*>(record->m_pointers[space])),
  m_active_base_pointer(static_cast<T*>(record->m_pointers[space])),
  m_resource_manager(nullptr),
  m_elems(record->m_size/sizeof(T)),
  m_offset(0),
  m_pointer_record(record),
  m_is_slice(false)
{
   m_resource_manager = ArrayManager::getInstance();
   if (m_pointer_record == nullptr) {
      m_pointer_record = &ArrayManager::s_null_record;
   }
}


template<typename T>
inline
__attribute__((device)) __attribute__((host)) ManagedArray<T>::ManagedArray(ManagedArray const& other):
  m_active_pointer(other.m_active_pointer),
  m_active_base_pointer(other.m_active_base_pointer),
  m_resource_manager(other.m_resource_manager),
  m_elems(other.m_elems),
  m_offset(other.m_offset),
  m_pointer_record(other.m_pointer_record),
  m_is_slice(other.m_is_slice)
{
# 120 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"
}

template<typename T>
inline
__attribute__((device)) __attribute__((host)) ManagedArray<T>::ManagedArray(T* data, ArrayManager* array_manager, size_t elems, PointerRecord* pointer_record) :
  m_active_pointer(data),
  m_active_base_pointer(data),
  m_resource_manager(array_manager),
  m_elems(elems),
  m_offset(0),
  m_pointer_record(pointer_record),
  m_is_slice(false)
{
# 142 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"
}


template<typename T>
__attribute__((host)) void ManagedArray<T>::allocate(
    size_t elems,
    ExecutionSpace space,
    const UserCallback& cback)
{
  if(!m_is_slice) {
     if (elems > 0) {
       { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "Allocating array of size " << elems << " in space " << space; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"), 153); } };;

       if (m_pointer_record == &ArrayManager::s_null_record) {

         m_pointer_record = new PointerRecord();
         for (int s = CPU; s < NUM_EXECUTION_SPACES; ++s) {
           ExecutionSpace allocator_space = space == PINNED ? PINNED : ExecutionSpace(s);
           m_pointer_record->m_allocators[s] = m_resource_manager->getAllocatorId(allocator_space);
         }
       }

       m_pointer_record->m_user_callback = cback;
       m_elems = elems;
       m_pointer_record->m_size = sizeof(T)*elems;

       if (space != NONE) {
         m_resource_manager->allocate(m_pointer_record, space);
         m_active_base_pointer = static_cast<T*>(m_pointer_record->m_pointers[space]);
       } else {
         m_active_base_pointer = nullptr;
         m_pointer_record->m_pointers[space] = nullptr;
       }
       m_active_pointer = m_active_base_pointer;




       initInner();
# 202 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"
       { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "m_active_base_ptr allocated at address: " << m_active_base_pointer; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"), 202); } };;
    }
  }
}




template<typename T>
inline
__attribute__((host)) void ManagedArray<T>::reallocate(size_t elems)
{
  if(!m_is_slice) {
    if (elems > 0) {
      if (m_elems == 0 && m_active_base_pointer == nullptr) {
        return allocate(elems, CPU);
      }
      { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "Reallocating array of size " << m_elems << " with new size" << elems; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"), 219); } };;
      if (m_pointer_record == &ArrayManager::s_null_record) {
         m_pointer_record = m_resource_manager->makeManaged((void *)m_active_base_pointer,m_elems*sizeof(T),CPU,true);
      }
      size_t old_size = m_elems;

      m_elems = elems;
      m_active_base_pointer =
        static_cast<T*>(m_resource_manager->reallocate<T>(m_active_base_pointer, elems,
                                                        m_pointer_record));
      m_active_pointer = m_active_base_pointer;




      if (initInner(old_size)) {

        if (m_pointer_record->m_last_space == GPU && old_size < m_elems) {
          umpire::ResourceManager & umpire_rm = umpire::ResourceManager::getInstance();
          void *src = (T*)m_pointer_record->m_pointers[CPU] + old_size;
          void *dst = (T*)m_pointer_record->m_pointers[GPU] + old_size;
          umpire_rm.copy(dst,src,(m_elems-old_size)*sizeof(T));
        }
      }

      { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "m_active_ptr reallocated at address: " << m_active_pointer; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"), 244); } };;
    }
    else {
      this->free();
    }
  }
}

template<typename T>
inline
__attribute__((host)) void ManagedArray<T>::free(ExecutionSpace space)
{
  if(!m_is_slice && *this != nullptr) {
    if (m_resource_manager == nullptr) {
       m_resource_manager = ArrayManager::getInstance();
    }
    if (m_pointer_record == &ArrayManager::s_null_record) {
       m_pointer_record = m_resource_manager->makeManaged((void *)m_active_base_pointer,m_elems*sizeof(T),space,true);
    }
    m_resource_manager->free(m_pointer_record, space);
    m_active_pointer = nullptr;
    m_active_base_pointer = nullptr;

    m_elems = 0;
    m_offset = 0;

    if (space == NONE) {
       m_pointer_record = &ArrayManager::s_null_record;
    }
  } else {
    { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "Cannot free a slice!"; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"), 274); } };;
  }
}

template<typename T>
inline
__attribute__((host)) void ManagedArray<T>::reset()
{
  m_resource_manager->resetTouch(m_pointer_record);
}

template<typename T>
inline
__attribute__((device)) __attribute__((host)) size_t ManagedArray<T>::size() const {
  return m_elems;
}

template<typename T>
inline
__attribute__((host)) void ManagedArray<T>::registerTouch(ExecutionSpace space) {
  if (m_active_pointer && (m_pointer_record == nullptr || m_pointer_record == &ArrayManager::s_null_record)) {
     { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Warning)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "registerTouch called on ManagedArray with nullptr pointer record."; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Warning, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"), 295); } };;
     m_pointer_record = m_resource_manager->makeManaged((void *)m_active_base_pointer,m_elems*sizeof(T),space,true);
  }
  m_resource_manager->registerTouch(m_pointer_record, space);
}
# 386 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"
template <typename T>
inline
__attribute__((host))
void ManagedArray<T>::move(ExecutionSpace space) const
{
  if (m_pointer_record != &ArrayManager::s_null_record) {
     ExecutionSpace prev_space = m_pointer_record->m_last_space;
     if (prev_space == CPU || prev_space == NONE) {


        moveInnerImpl();
     }
     { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "Moving " << m_active_pointer; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"), 398); } };;
     m_active_base_pointer = static_cast<T*>(m_resource_manager->move((void *)m_active_base_pointer, m_pointer_record, space));
     m_active_pointer = m_active_base_pointer + m_offset;

     { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "Moved to " << m_active_pointer; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"), 402); } };;
# 411 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"
     if (!std::is_const<T>::value) {
       { if (umpire::util::Logger::getActiveLogger()->logLevelEnabled(umpire::util::message::Debug)) { std::ostringstream local_msg; local_msg << " " << __func__ << " " << "T is non-const, registering touch of pointer" << m_active_pointer; umpire::util::Logger::getActiveLogger()->logMessage( umpire::util::message::Debug, local_msg.str(), std::string("/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"), 412); } };;
       m_resource_manager->registerTouch(m_pointer_record, space);
     }
     if (space != GPU && prev_space == GPU) {


        moveInnerImpl();
     }
   }
}

template<typename T>
template<typename Idx>
inline
__attribute__((device)) __attribute__((host)) T& ManagedArray<T>::operator[](const Idx i) const {
  return m_active_pointer[i];
}


template<typename T>
inline
__attribute__((device)) __attribute__((host)) ManagedArray<T>::operator T*() const {
   return data();
}

template<typename T>
template<bool Q>
inline
__attribute__((device)) __attribute__((host)) ManagedArray<T>::ManagedArray(T* data, CHAIDISAMBIGUATE, bool ) :
  m_active_pointer(data),
  m_active_base_pointer(data),






  m_resource_manager(nullptr),
  m_elems(0),
  m_offset(0),
  m_pointer_record(nullptr),

  m_is_slice(false)
{






}


template<typename T>
__attribute__((device)) __attribute__((host)) T*
ManagedArray<T>::getActiveBasePointer() const
{
  return m_active_base_pointer;
}

template<typename T>
__attribute__((device)) __attribute__((host)) T*
ManagedArray<T>::getActivePointer() const
{
  return m_active_pointer;
}

template<typename T>
inline
__attribute__((device)) __attribute__((host))
T* ManagedArray<T>::data() const {
# 498 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.inl"
  return m_active_pointer;

}

template<typename T>
T* ManagedArray<T>::data(ExecutionSpace space, bool do_move) const {
   if (m_pointer_record == nullptr || m_pointer_record == &ArrayManager::s_null_record) {
      return nullptr;
   }

   if (m_elems == 0 && !m_is_slice) {
      return nullptr;
   }

   if (do_move) {
      ExecutionSpace oldContext = m_resource_manager->getExecutionSpace();
      m_resource_manager->setExecutionSpace(space);
      move(space);
      m_resource_manager->setExecutionSpace(oldContext);
   }

   int offset = m_is_slice ? m_offset : 0 ;
   return ((T*) m_pointer_record->m_pointers[space]) + offset;
}

template<typename T>
T* ManagedArray<T>::getPointer(ExecutionSpace space, bool do_move) const {
   return data(space, do_move);
}






template< typename T>
template< typename U>
ManagedArray<T>::operator
typename std::enable_if< !std::is_const<U>::value ,
                         ManagedArray<const U> >::type () const

{
  return *reinterpret_cast<ManagedArray<const T> *>(const_cast<ManagedArray<T> *>(this));
}

template<typename T>
inline
__attribute__((device)) __attribute__((host))
ManagedArray<T>&
ManagedArray<T>::operator= (ManagedArray && other) {
  *this = other;
  other = nullptr;
  return *this;
}

template<typename T>
inline
__attribute__((device)) __attribute__((host))
ManagedArray<T>&
ManagedArray<T>::operator= (std::nullptr_t) {
  m_active_pointer = nullptr;
  m_active_base_pointer = nullptr;
  m_elems = 0;
  m_offset = 0;




  m_pointer_record = nullptr;
  m_resource_manager = nullptr;

  m_is_slice = false;
  return *this;
}

template<typename T>
inline
__attribute__((device)) __attribute__((host))
bool
ManagedArray<T>::operator== (ManagedArray<T>& rhs) const
{
  return (m_active_pointer == rhs.m_active_pointer);
}

template<typename T>
inline
__attribute__((device)) __attribute__((host))
bool
ManagedArray<T>::operator!= (ManagedArray<T>& rhs) const
{
  return (m_active_pointer != rhs.m_active_pointer);
}


template<typename T>
inline
__attribute__((device)) __attribute__((host))
bool
ManagedArray<T>::operator== (T * from) const {
   return m_active_pointer == from;
}

template<typename T>
inline
__attribute__((device)) __attribute__((host))
bool
ManagedArray<T>::operator!= (T * from) const {
   return m_active_pointer != from;
}

template<typename T>
inline
__attribute__((device)) __attribute__((host))
bool
ManagedArray<T>::operator== (std::nullptr_t from) const {
   return m_active_pointer == from || m_elems == 0;
}
template<typename T>
inline
__attribute__((device)) __attribute__((host))
bool
ManagedArray<T>::operator!= (std::nullptr_t from) const {
   return m_active_pointer != from && m_elems > 0;
}

template<typename T>
inline
__attribute__((device)) __attribute__((host))
ManagedArray<T>::operator bool () const {
   return m_elems > 0;
}

template<typename T>
template<bool B, typename std::enable_if<B, int>::type>
inline
__attribute__((host))
void
ManagedArray<T>::moveInnerImpl() const
{
  int len = m_pointer_record->m_size / sizeof(T);
  T * host_ptr = (T *) m_pointer_record->m_pointers[CPU];
  for (int i = 0; i < len; ++i)
  {

    T inner = T(host_ptr[i]);

    host_ptr[i].shallowCopy(inner);
  }
}

template<typename T>
template<bool B, typename std::enable_if<!B, int>::type>
inline
__attribute__((host))
void
ManagedArray<T>::moveInnerImpl() const
{
}

}
# 567 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/tpl/chai/src/chai/ManagedArray.hpp" 2
# 21 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/Field.h" 2



namespace Kripke {
namespace Core {



  template<typename ELEMENT>
  class FieldStorage : public Kripke::Core::DomainVar {
    public:
      using ElementType = ELEMENT;




      using ElementPtr = chai::ManagedArray<ELEMENT>;


      using Layout1dType = RAJA::TypedLayout<RAJA::Index_type, camp::tuple<RAJA::Index_type>>;
      using View1dType = RAJA::View<ElementType, Layout1dType, ElementPtr>;


      explicit FieldStorage(Kripke::Core::Set const &spanned_set) :
        m_set(&spanned_set)
      {


        setup_initChunks(spanned_set);


        size_t num_chunks = m_chunk_to_subdomain.size();
        m_chunk_to_size.resize(num_chunks, 0);



        m_chunk_to_data.resize(num_chunks);


        for(size_t chunk_id = 0;chunk_id < num_chunks;++ chunk_id){


          SdomId sdom_id(m_chunk_to_subdomain[chunk_id]);
          size_t sdom_size = spanned_set.size(sdom_id);

          m_chunk_to_size[chunk_id] = sdom_size;



          m_chunk_to_data[chunk_id].allocate(sdom_size, chai::CPU,
              [=](const chai::PointerRecord* record, chai::Action action, chai::ExecutionSpace space){
# 90 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/Core/Field.h"
              }

          );

        }
      }

      virtual ~FieldStorage(){





      }


      FieldStorage(FieldStorage<ElementType> const &) = delete;




      inline __attribute__((always_inline))
      size_t size(Kripke::SdomId sdom_id) const {
        size_t chunk_id = m_subdomain_to_chunk[*sdom_id];
        return m_chunk_to_size[chunk_id];
      }


      inline __attribute__((always_inline))
      View1dType getView1d(Kripke::SdomId sdom_id) const {

        size_t chunk_id = m_subdomain_to_chunk[*sdom_id];

        ElementPtr ptr = m_chunk_to_data[chunk_id];
        size_t sdom_size = m_chunk_to_size[chunk_id];

        return View1dType(ptr, Layout1dType(sdom_size));
      }

      inline __attribute__((always_inline))
      ElementType *getData(Kripke::SdomId sdom_id) const {
        if(!(*sdom_id < (int)m_subdomain_to_chunk.size())){ printf("Assertion Failed: " "sdom_id(%d) >= num_subdomains(%d)", (int)*sdom_id, (int)(int)m_subdomain_to_chunk.size()); exit(1);; };



        size_t chunk_id = m_subdomain_to_chunk[*sdom_id];





        ElementType *ptr = m_chunk_to_data[chunk_id];


        return(ptr);


      }


      inline __attribute__((always_inline))
      Kripke::Core::Set const &getSet() const {
        return *m_set;
      }

    protected:
      Kripke::Core::Set const *m_set;
      std::vector<size_t> m_chunk_to_size;
      std::vector<ElementPtr> m_chunk_to_data;
  };




  template<typename ELEMENT, typename ... IDX_TYPES>
  class Field : public Kripke::Core::FieldStorage<ELEMENT> {
    public:

      using Parent = Kripke::Core::FieldStorage<ELEMENT>;

      using ElementType = ELEMENT;



      using ElementPtr = chai::ManagedArray<ELEMENT>;


      static constexpr size_t NumDims = sizeof...(IDX_TYPES);

      using DefaultLayoutType = RAJA::TypedLayout<RAJA::Index_type, camp::tuple<IDX_TYPES...>>;
      using DefaultViewType = RAJA::View<ElementType, DefaultLayoutType, ElementPtr>;

      template<typename Order>
      Field(Kripke::Core::Set const &spanned_set, Order) :
        Parent(spanned_set)
      {

        if(!(NumDims == spanned_set.getNumDimensions())){ printf("Assertion Failed: " "Number of dimensions must match between Field<%d> and Set<%d>\n", (int)NumDims, (int)spanned_set.getNumDimensions()); exit(1);; };



        auto perm = LayoutInfo<Order, IDX_TYPES...>::getPermutation();


        size_t num_chunks = Parent::m_chunk_to_subdomain.size();
        m_chunk_to_layout.resize(num_chunks);
        for(size_t chunk_id = 0;chunk_id < num_chunks;++ chunk_id){



          SdomId sdom_id(Parent::m_chunk_to_subdomain[chunk_id]);
          std::array<RAJA::Index_type, NumDims> sizes;
          for(size_t dim = 0;dim < NumDims;++ dim){
            sizes[dim] = spanned_set.dimSize(sdom_id, dim);
          }

          RAJA::Layout<NumDims, RAJA::Index_type> &layout =
              m_chunk_to_layout[chunk_id];
          layout = RAJA::make_permuted_layout<NumDims,RAJA::Index_type>(sizes, perm);
        }
      }

      virtual ~Field(){

      }



      inline __attribute__((always_inline))
      DefaultViewType getView(Kripke::SdomId sdom_id) const {

        size_t chunk_id = Parent::m_subdomain_to_chunk[*sdom_id];

        auto ptr = Parent::m_chunk_to_data[chunk_id];
        auto layout = m_chunk_to_layout[chunk_id];

        return DefaultViewType(ptr, layout);
      }


      template<typename Order>
      inline __attribute__((always_inline))
      auto getViewOrder(Kripke::SdomId sdom_id) const ->
        ViewType<Order, ElementType, ElementPtr, IDX_TYPES...>
      {
        size_t chunk_id = Parent::m_subdomain_to_chunk[*sdom_id];

        ElementPtr ptr = Parent::m_chunk_to_data[chunk_id];

        using LInfo = LayoutInfo<Order, IDX_TYPES...>;
        using LType = typename LInfo::Layout;

        LType layout = RAJA::make_stride_one<LInfo::stride_one_dim>(m_chunk_to_layout[chunk_id]);

        return ViewType<Order, ElementType, ElementPtr, IDX_TYPES...>(ptr, layout);
      }



      inline __attribute__((always_inline))
      void dump() const {
        printf("Field<>:\n");
        printf("  name:  %s\n", BaseVar::getName().c_str());
        printf("  m_set: %p\n", Parent::m_set);

        printf("  m_chunk_to_size: ");
        for(auto x : Parent::m_chunk_to_size){printf("%lu ", (unsigned long)x);}
        printf("\n");







        for(size_t chunk_id = 0;chunk_id < Parent::m_chunk_to_data.size();++ chunk_id){

          SdomId sdom_id(DomainVar::m_chunk_to_subdomain[chunk_id]);

          ElementType *ptr = Parent::getData(sdom_id);

          printf("Chunk %d Data: ", (int)chunk_id);
          for(size_t i = 0;i < Parent::m_chunk_to_size[chunk_id];++ i){
            printf(" %e", ptr[i]);
          }
          printf("\n");
        }

        Kripke::Core::DomainVar::dump();
      }

    protected:
      std::vector<DefaultLayoutType> m_chunk_to_layout;
  };

} }
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/VarTypes.h" 2

namespace Kripke {

  class Dimension : public ::RAJA::IndexValue<Dimension> { using parent = ::RAJA::IndexValue<Dimension>; public: using IndexValueType = Dimension; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) Dimension() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit Dimension(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "Dimension"; } };;
  class Direction : public ::RAJA::IndexValue<Direction> { using parent = ::RAJA::IndexValue<Direction>; public: using IndexValueType = Direction; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) Direction() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit Direction(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "Direction"; } };;
  class GlobalGroup : public ::RAJA::IndexValue<GlobalGroup> { using parent = ::RAJA::IndexValue<GlobalGroup>; public: using IndexValueType = GlobalGroup; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) GlobalGroup() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit GlobalGroup(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "GlobalGroup"; } };;
  class Group : public ::RAJA::IndexValue<Group> { using parent = ::RAJA::IndexValue<Group>; public: using IndexValueType = Group; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) Group() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit Group(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "Group"; } };;
  class Legendre : public ::RAJA::IndexValue<Legendre> { using parent = ::RAJA::IndexValue<Legendre>; public: using IndexValueType = Legendre; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) Legendre() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit Legendre(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "Legendre"; } };;
  class Material : public ::RAJA::IndexValue<Material> { using parent = ::RAJA::IndexValue<Material>; public: using IndexValueType = Material; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) Material() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit Material(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "Material"; } };;
  class MixElem : public ::RAJA::IndexValue<MixElem> { using parent = ::RAJA::IndexValue<MixElem>; public: using IndexValueType = MixElem; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) MixElem() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit MixElem(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "MixElem"; } };;
  class Moment : public ::RAJA::IndexValue<Moment> { using parent = ::RAJA::IndexValue<Moment>; public: using IndexValueType = Moment; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) Moment() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit Moment(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "Moment"; } };;
  class Zone : public ::RAJA::IndexValue<Zone> { using parent = ::RAJA::IndexValue<Zone>; public: using IndexValueType = Zone; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) Zone() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit Zone(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "Zone"; } };;
  class ZoneI : public ::RAJA::IndexValue<ZoneI> { using parent = ::RAJA::IndexValue<ZoneI>; public: using IndexValueType = ZoneI; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) ZoneI() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit ZoneI(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "ZoneI"; } };;
  class ZoneJ : public ::RAJA::IndexValue<ZoneJ> { using parent = ::RAJA::IndexValue<ZoneJ>; public: using IndexValueType = ZoneJ; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) ZoneJ() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit ZoneJ(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "ZoneJ"; } };;
  class ZoneK : public ::RAJA::IndexValue<ZoneK> { using parent = ::RAJA::IndexValue<ZoneK>; public: using IndexValueType = ZoneK; __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) ZoneK() : parent::IndexValue() {} __attribute__((host)) __attribute__((device)) inline __attribute__((always_inline)) explicit ZoneK(::RAJA::Index_type v) : parent::IndexValue(v) { } static inline std::string getName() { return "ZoneK"; } };;

  using Field_Flux = Kripke::Core::Field<double, Direction, Group, Zone>;
  using Field_Moments = Kripke::Core::Field<double, Moment, Group, Zone>;

  using Field_IPlane = Kripke::Core::Field<double, Direction, Group, ZoneJ, ZoneK>;
  using Field_JPlane = Kripke::Core::Field<double, Direction, Group, ZoneI, ZoneK>;
  using Field_KPlane = Kripke::Core::Field<double, Direction, Group, ZoneI, ZoneJ>;

  using Field_Ell = Kripke::Core::Field<double, Moment, Direction>;
  using Field_EllPlus = Kripke::Core::Field<double, Direction, Moment>;

  using Field_Speed = Kripke::Core::Field<double, Material, GlobalGroup>;
  using Field_SigmaT = Kripke::Core::Field<double, Material, GlobalGroup>;
  using Field_SigmaS = Kripke::Core::Field<double, Material, Legendre, GlobalGroup, GlobalGroup>;

  using Field_Direction2Double = Kripke::Core::Field<double, Direction>;
  using Field_Direction2Int = Kripke::Core::Field<int, Direction>;

  using Field_Adjacency = Kripke::Core::Field<GlobalSdomId, Dimension>;

  using Field_Moment2Legendre = Kripke::Core::Field<Legendre, Moment>;

  using Field_ZoneI2Double = Kripke::Core::Field<double, ZoneI>;
  using Field_ZoneJ2Double = Kripke::Core::Field<double, ZoneJ>;
  using Field_ZoneK2Double = Kripke::Core::Field<double, ZoneK>;
  using Field_Zone2Double = Kripke::Core::Field<double, Zone>;
  using Field_Zone2Int = Kripke::Core::Field<int, Zone>;
  using Field_Zone2MixElem = Kripke::Core::Field<MixElem, Zone>;

  using Field_MixElem2Double = Kripke::Core::Field<double, MixElem>;
  using Field_MixElem2Material = Kripke::Core::Field<Material, MixElem>;
  using Field_MixElem2Zone = Kripke::Core::Field<Zone, MixElem>;

  using Field_SigmaTZonal = Kripke::Core::Field<double, Group, Zone>;


  template<typename T>
  struct DefaultOrder{};

  template<typename A, typename L>
  struct DefaultOrder<ArchLayoutT<A, L>> : DefaultOrder<L> {};

  template<>
  struct DefaultOrder<LayoutT_DGZ>{
    using type = camp::list<long, Dimension, Material, Direction, Legendre, Moment, GlobalGroup, Group, Zone, ZoneK, ZoneJ, ZoneI, MixElem>;
  };

  template<>
  struct DefaultOrder<LayoutT_DZG>{
    using type = camp::list<long, Dimension, Material, Direction, Legendre, Moment, Zone, ZoneK, ZoneJ, ZoneI, GlobalGroup, Group, MixElem>;
  };

  template<>
  struct DefaultOrder<LayoutT_GDZ>{
    using type = camp::list<long, Dimension, Material, GlobalGroup, Group, Direction, Legendre, Moment, Zone, ZoneK, ZoneJ, ZoneI, MixElem>;
  };

  template<>
  struct DefaultOrder<LayoutT_GZD>{
    using type = camp::list<long, Dimension, Material, GlobalGroup, Group, Zone, ZoneK, ZoneJ, ZoneI, MixElem, Direction, Legendre, Moment>;
  };

  template<>
  struct DefaultOrder<LayoutT_ZDG>{
    using type = camp::list<long, Dimension, Material, Zone, ZoneK, ZoneJ, ZoneI, MixElem, Direction, Legendre, Moment, GlobalGroup, Group>;
  };

  template<>
  struct DefaultOrder<LayoutT_ZGD>{
    using type = camp::list<long, Dimension, Material, Zone, ZoneK, ZoneJ, ZoneI, MixElem, GlobalGroup, Group, Direction, Legendre, Moment>;
  };


  template<typename AL>
  struct SdomAL;

  template<typename A, typename L>
  struct SdomAL<ArchLayoutT<A, L>>
  {
    using al_t = ArchLayoutT<A, L>;
    using arch_t = A;
    using layout_t = L;

    using order_t = typename DefaultOrder<L>::type;

    Kripke::SdomId sdom_id;

    template<typename FieldType>
    auto getView(FieldType &field) const ->
      decltype(field.template getViewOrder<order_t>(sdom_id))
    {
      return field.template getViewOrder<order_t>(sdom_id);
    }

    template<typename FieldType>
    auto getView(FieldType &field, Kripke::SdomId sdom) const ->
      decltype(field.template getViewOrder<order_t>(sdom))
    {
      return field.template getViewOrder<order_t>(sdom);
    }
  };

  template<typename AL>
  SdomAL<AL> getSdomAL(AL, Kripke::SdomId sdom_id){
    return SdomAL<AL>{sdom_id};
  }


  template<typename FieldType, typename SetType>
  inline __attribute__((always_inline))
  FieldType &createField(Core::DataStore &data_store, std::string const &name, ArchLayoutV al_v, SetType const &set)
  {
    FieldType *field = nullptr;
    dispatchLayout(al_v.layout_v, [&](auto layout_t){
      using order_t = typename DefaultOrder<decltype(layout_t)>::type;

      field = new FieldType(set, order_t{});
      data_store.addVariable(name, field);
    });

    return *field;
  };

}
# 14 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SweepSolver.h" 2


namespace Kripke {

  class DataStore;

  void SweepSolver (Kripke::Core::DataStore &data_store,
                    std::vector<SdomId> subdomain_list,
                    bool block_jacobi);



}
# 16 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.cpp" 2



using namespace Kripke::Core;




int Kripke::SteadyStateSolver (Kripke::Core::DataStore &data_store, size_t max_iter, bool block_jacobi)
{
  Kripke::BlockTimer BLK_TIMER_Solve(data_store.getVariable<Kripke::Timing>("timing"), "Solve");;

  PartitionSpace &pspace = data_store.getVariable<PartitionSpace>("pspace");

  Kripke::Core::Comm const &comm = data_store.getVariable<Kripke::Core::Comm>("comm");
  if(comm.rank() == 0){
    printf("\n");
    printf("Steady State Solve\n");
    printf("==================\n\n");
  }



  Kripke::Kernel::kConst(data_store.getVariable<Kripke::Field_Flux>("psi"), 0.0);



  double part_last = 0.0;
  for(size_t iter = 0;iter < max_iter;++ iter){
# 53 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.cpp"
    Kripke::Kernel::kConst(data_store.getVariable<Field_Moments>("phi"), 0.0);
    Kripke::Kernel::LTimes(data_store);




    Kripke::Kernel::kConst(data_store.getVariable<Kripke::Field_Moments>("phi_out"), 0.0);
    Kripke::Kernel::scattering(data_store);




    Kripke::Kernel::source(data_store);




    Kripke::Kernel::kConst(data_store.getVariable<Kripke::Field_Flux>("rhs"), 0.0);
    Kripke::Kernel::LPlusTimes(data_store);
# 82 "/usr/workspace/wsa/laguna/fpchecker/clang_tool/wrapper/apps/kripke/Kripke/src/Kripke/SteadyStateSolver.cpp"
    {

      int num_subdomains = pspace.getNumSubdomains(SPACE_PQR);
      std::vector<SdomId> sdom_list(num_subdomains);
      for(SdomId i{0};i < num_subdomains;++ i){
        sdom_list[*i] = i;
      }


      Kripke::SweepSolver(data_store, sdom_list, block_jacobi);
    }






    double part = Kripke::Kernel::population(data_store);
    if(comm.rank() == 0){
      printf("  iter %d: particle count=%e, change=%e\n", (int)iter, part, (part-part_last)/part);
      fflush(stdout);
    }
    part_last = part;



  }

  if(comm.rank() == 0){
    printf("  Solver terminated\n");
  }

  return(0);
}
